// Generated by TinyPG v1.3 available at www.codeproject.com

using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Xml.Serialization;

namespace TinyPG
{

    #region Scanner

    public partial class Scanner
    {
        public string Input;
        public int StartPos = 0;
        public int EndPos = 0;
        public int CurrentLine;
        public int CurrentColumn;
        public int CurrentPosition;
        public List<Token> Skipped; // tokens that were skipped
        public Dictionary<TokenType, Regex> Patterns;

        private Token LookAheadToken;
        private List<TokenType> Tokens;
        private List<TokenType> SkipList; // tokens to be skipped

        public Scanner()
        {
            Regex regex;
            Patterns = new Dictionary<TokenType, Regex>();
            Tokens = new List<TokenType>();
            LookAheadToken = null;
            Skipped = new List<Token>();

            SkipList = new List<TokenType>();
            SkipList.Add(TokenType.SPACE);

            regex = new Regex(@"(?i)id:(?=[0-9]+)", RegexOptions.Compiled);
            Patterns.Add(TokenType.IdKeyword1, regex);
            Tokens.Add(TokenType.IdKeyword1);

            regex = new Regex(@"#(?=[0-9]+)", RegexOptions.Compiled);
            Patterns.Add(TokenType.IdKeyword2, regex);
            Tokens.Add(TokenType.IdKeyword2);

            regex = new Regex(@"time:", RegexOptions.Compiled);
            Patterns.Add(TokenType.TimeKeyword, regex);
            Tokens.Add(TokenType.TimeKeyword);

            regex = new Regex(@"status:", RegexOptions.Compiled);
            Patterns.Add(TokenType.StatusKeyword1, regex);
            Tokens.Add(TokenType.StatusKeyword1);

            regex = new Regex(@"state:", RegexOptions.Compiled);
            Patterns.Add(TokenType.StatusKeyword2, regex);
            Tokens.Add(TokenType.StatusKeyword2);

            regex = new Regex(@"comment:", RegexOptions.Compiled);
            Patterns.Add(TokenType.CommentKeyword1, regex);
            Tokens.Add(TokenType.CommentKeyword1);

            regex = new Regex(@"comments:", RegexOptions.Compiled);
            Patterns.Add(TokenType.CommentKeyword2, regex);
            Tokens.Add(TokenType.CommentKeyword2);

            regex = new Regex(@"comm:", RegexOptions.Compiled);
            Patterns.Add(TokenType.CommentKeyword3, regex);
            Tokens.Add(TokenType.CommentKeyword3);

            regex = new Regex(@"cmt:", RegexOptions.Compiled);
            Patterns.Add(TokenType.CommentKeyword4, regex);
            Tokens.Add(TokenType.CommentKeyword4);

            regex = new Regex(@"^$", RegexOptions.Compiled);
            Patterns.Add(TokenType.EOF, regex);
            Tokens.Add(TokenType.EOF);

            regex = new Regex(@"\s+", RegexOptions.Compiled);
            Patterns.Add(TokenType.SPACE, regex);
            Tokens.Add(TokenType.SPACE);

            regex = new Regex(@":", RegexOptions.Compiled);
            Patterns.Add(TokenType.Delimiter, regex);
            Tokens.Add(TokenType.Delimiter);

            regex = new Regex(@"[,\.\?!;]+", RegexOptions.Compiled);
            Patterns.Add(TokenType.PUNCTUATIONMARK, regex);
            Tokens.Add(TokenType.PUNCTUATIONMARK);

            regex = new Regex(@",", RegexOptions.Compiled);
            Patterns.Add(TokenType.COMMA, regex);
            Tokens.Add(TokenType.COMMA);

            regex = new Regex(@"[0-9]+", RegexOptions.Compiled);
            Patterns.Add(TokenType.NUMBER, regex);
            Tokens.Add(TokenType.NUMBER);

            regex = new Regex(@"\d+([\.,]\d+)?", RegexOptions.Compiled);
            Patterns.Add(TokenType.DECIMAL, regex);
            Tokens.Add(TokenType.DECIMAL);

            regex = new Regex(@"(?i)(.(?<!#(?=[0-9]+))(?<!id:(?=[0-9]+))(?<!(time|status|state|comment|comm|comments|cmt):))+\s", RegexOptions.Compiled);
            Patterns.Add(TokenType.ANY_TEXT, regex);
            Tokens.Add(TokenType.ANY_TEXT);

            regex = new Regex(@"(?i)((?!#(?=[0-9]+))(?!id:(?=[0-9]+))(?!(time|status|state|comment|comm|comments|cmt):).)", RegexOptions.Compiled);
            Patterns.Add(TokenType.ANY_SYMBOL, regex);
            Tokens.Add(TokenType.ANY_SYMBOL);
        }

        public void Init(string input)
        {
            this.Input = input;
            StartPos = 0;
            EndPos = 0;
            CurrentLine = 0;
            CurrentColumn = 0;
            CurrentPosition = 0;
            LookAheadToken = null;
        }

        public Token GetToken(TokenType type)
        {
            Token t = new Token(this.StartPos, this.EndPos);
            t.Type = type;
            return t;
        }

        /// <summary>
        /// executes a lookahead of the next token
        /// and will advance the scan on the input string
        /// </summary>
        /// <returns></returns>
        public Token Scan(params TokenType[] expectedtokens)
        {
            Token tok = LookAhead(expectedtokens); // temporarely retrieve the lookahead
            LookAheadToken = null; // reset lookahead token, so scanning will continue
            StartPos = tok.EndPos;
            EndPos = tok.EndPos; // set the tokenizer to the new scan position
            return tok;
        }

        /// <summary>
        /// returns token with longest best match
        /// </summary>
        /// <returns></returns>
        public Token LookAhead(params TokenType[] expectedtokens)
        {
            int i;
            int startpos = StartPos;
            Token tok = null;
            List<TokenType> scantokens;


            // this prevents double scanning and matching
            // increased performance
            if (LookAheadToken != null
                && LookAheadToken.Type != TokenType._UNDETERMINED_
                && LookAheadToken.Type != TokenType._NONE_) return LookAheadToken;

            // if no scantokens specified, then scan for all of them (= backward compatible)
            if (expectedtokens.Length == 0)
                scantokens = Tokens;
            else
            {
                scantokens = new List<TokenType>(expectedtokens);
                scantokens.AddRange(SkipList);
            }

            do
            {
                int len = -1;
                TokenType index = (TokenType) int.MaxValue;
                string input = Input.Substring(startpos);

                tok = new Token(startpos, EndPos);

                for (i = 0; i < scantokens.Count; i++)
                {
                    Regex r = Patterns[scantokens[i]];
                    Match m = r.Match(input);
                    if (m.Success && m.Index == 0 && ((m.Length > len) || (scantokens[i] < index && m.Length == len)))
                    {
                        len = m.Length;
                        index = scantokens[i];
                    }
                }

                if (index >= 0 && len >= 0)
                {
                    tok.EndPos = startpos + len;
                    tok.Text = Input.Substring(tok.StartPos, len);
                    tok.Type = index;
                }
                else if (tok.StartPos < tok.EndPos - 1)
                {
                    tok.Text = Input.Substring(tok.StartPos, 1);
                }

                if (SkipList.Contains(tok.Type))
                {
                    startpos = tok.EndPos;
                    Skipped.Add(tok);
                }
                else
                {
                    // only assign to non-skipped tokens
                    tok.Skipped = Skipped; // assign prior skips to this token
                    Skipped = new List<Token>(); //reset skips
                }
            } while (SkipList.Contains(tok.Type));

            LookAheadToken = tok;
            return tok;
        }
    }

    #endregion

    #region Token

    public enum TokenType
    {
        //Non terminal tokens:
        _NONE_ = 0,
        _UNDETERMINED_ = 1,

        //Non terminal tokens:
        Start = 2,
        ActionNode = 3,
        EntityIdClause = 4,
        PostTimeClause = 5,
        ChangeStatusClause = 6,
        PostCommentClause = 7,

        //Terminal tokens:
        IdKeyword1 = 8,
        IdKeyword2 = 9,
        TimeKeyword = 10,
        StatusKeyword1 = 11,
        StatusKeyword2 = 12,
        CommentKeyword1 = 13,
        CommentKeyword2 = 14,
        CommentKeyword3 = 15,
        CommentKeyword4 = 16,
        EOF = 17,
        SPACE = 18,
        Delimiter = 19,
        PUNCTUATIONMARK = 20,
        COMMA = 21,
        NUMBER = 22,
        DECIMAL = 23,
        ANY_TEXT = 24,
        ANY_SYMBOL = 25
    }

    public class Token
    {
        private int startpos;
        private int endpos;
        private string text;
        private object value;

        // contains all prior skipped symbols
        private List<Token> skipped;

        public int StartPos
        {
            get { return startpos; }
            set { startpos = value; }
        }

        public int Length
        {
            get { return endpos - startpos; }
        }

        public int EndPos
        {
            get { return endpos; }
            set { endpos = value; }
        }

        public string Text
        {
            get { return text; }
            set { text = value; }
        }

        public List<Token> Skipped
        {
            get { return skipped; }
            set { skipped = value; }
        }

        public object Value
        {
            get { return value; }
            set { this.value = value; }
        }

        [XmlAttribute] public TokenType Type;

        public Token()
            : this(0, 0)
        {
        }

        public Token(int start, int end)
        {
            Type = TokenType._UNDETERMINED_;
            startpos = start;
            endpos = end;
            Text = ""; // must initialize with empty string, may cause null reference exceptions otherwise
            Value = null;
        }

        public void UpdateRange(Token token)
        {
            if (token.StartPos < startpos) startpos = token.StartPos;
            if (token.EndPos > endpos) endpos = token.EndPos;
        }

        public override string ToString()
        {
            if (Text != null)
                return Type.ToString() + " '" + Text + "'";
            else
                return Type.ToString();
        }
    }

    #endregion
}
