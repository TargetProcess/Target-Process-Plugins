// Generated by TinyPG v1.3 available at www.codeproject.com

using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Xml.Serialization;

namespace Tp.PopEmailIntegration.Rules.Parsing
{
    #region Scanner

    public partial class Scanner
    {
        public string Input;
        public int StartPos = 0;
        public int EndPos = 0;
        public int CurrentLine;
        public int CurrentColumn;
        public int CurrentPosition;
        public List<Token> Skipped; // tokens that were skipped
        public Dictionary<TokenType, Regex> Patterns;

        private Token LookAheadToken;
        private List<TokenType> Tokens;
        private List<TokenType> SkipList; // tokens to be skipped

        public Scanner()
        {
            Regex regex;
            Patterns = new Dictionary<TokenType, Regex>();
            Tokens = new List<TokenType>();
            LookAheadToken = null;
            Skipped = new List<Token>();

            SkipList = new List<TokenType>();
            SkipList.Add(TokenType.WHITESPACE);

            regex = new Regex(@"[0-9]+", RegexOptions.Compiled);
            Patterns.Add(TokenType.NUMBER, regex);
            Tokens.Add(TokenType.NUMBER);

            regex = new Regex(@"^$", RegexOptions.Compiled);
            Patterns.Add(TokenType.EOF, regex);
            Tokens.Add(TokenType.EOF);

            regex = new Regex(@"'[^'\\\r\n]*(?:\\.[^'\\\r\n]*)*'", RegexOptions.Compiled);
            Patterns.Add(TokenType.STRING_PARAM, regex);
            Tokens.Add(TokenType.STRING_PARAM);

            regex = new Regex(@"\s+", RegexOptions.Compiled);
            Patterns.Add(TokenType.WHITESPACE, regex);
            Tokens.Add(TokenType.WHITESPACE);

            regex = new Regex(@"when", RegexOptions.Compiled);
            Patterns.Add(TokenType.WhenKeyword, regex);
            Tokens.Add(TokenType.WhenKeyword);

            regex = new Regex(@"subject\s+contains", RegexOptions.Compiled);
            Patterns.Add(TokenType.SubjectContainsKeyword, regex);
            Tokens.Add(TokenType.SubjectContainsKeyword);

            regex = new Regex(@"then", RegexOptions.Compiled);
            Patterns.Add(TokenType.ThenKeyword, regex);
            Tokens.Add(TokenType.ThenKeyword);

            regex = new Regex(@"attach\s+to\s+project", RegexOptions.Compiled);
            Patterns.Add(TokenType.AttachToProjectKeyword, regex);
            Tokens.Add(TokenType.AttachToProjectKeyword);

            regex = new Regex(@"create\s+request\s+in\s+project", RegexOptions.Compiled);
            Patterns.Add(TokenType.CreateRequestKeyword, regex);
            Tokens.Add(TokenType.CreateRequestKeyword);

            regex = new Regex(@"create\s+private\s+request\s+in\s+project", RegexOptions.Compiled);
            Patterns.Add(TokenType.CreatePrivateRequestKeyword, regex);
            Tokens.Add(TokenType.CreatePrivateRequestKeyword);

            regex = new Regex(@"create\s+public\s+request\s+in\s+project", RegexOptions.Compiled);
            Patterns.Add(TokenType.CreatePublicRequestKeyword, regex);
            Tokens.Add(TokenType.CreatePublicRequestKeyword);

            regex = new Regex(@"company\s+matched\s+to\s+project", RegexOptions.Compiled);
            Patterns.Add(TokenType.CompanyMatchedKeyword, regex);
            Tokens.Add(TokenType.CompanyMatchedKeyword);

            regex = new Regex(@"attach\s+request\s+to\s+team", RegexOptions.Compiled);
            Patterns.Add(TokenType.AttachRequestToTeamKeyword, regex);
            Tokens.Add(TokenType.AttachRequestToTeamKeyword);

            regex = new Regex(@"and", RegexOptions.Compiled);
            Patterns.Add(TokenType.AndKeyword, regex);
            Tokens.Add(TokenType.AndKeyword);


        }

        public void Init(string input)
        {
            this.Input = input;
            StartPos = 0;
            EndPos = 0;
            CurrentLine = 0;
            CurrentColumn = 0;
            CurrentPosition = 0;
            LookAheadToken = null;
        }

        public Token GetToken(TokenType type)
        {
            Token t = new Token(this.StartPos, this.EndPos);
            t.Type = type;
            return t;
        }

         /// <summary>
        /// executes a lookahead of the next token
        /// and will advance the scan on the input string
        /// </summary>
        /// <returns></returns>
        public Token Scan(params TokenType[] expectedtokens)
        {
            Token tok = LookAhead(expectedtokens); // temporarely retrieve the lookahead
            LookAheadToken = null; // reset lookahead token, so scanning will continue
            StartPos = tok.EndPos;
            EndPos = tok.EndPos; // set the tokenizer to the new scan position
            return tok;
        }

        /// <summary>
        /// returns token with longest best match
        /// </summary>
        /// <returns></returns>
        public Token LookAhead(params TokenType[] expectedtokens)
        {
            int i;
            int startpos = StartPos;
            Token tok = null;
            List<TokenType> scantokens;


            // this prevents double scanning and matching
            // increased performance
            if (LookAheadToken != null 
                && LookAheadToken.Type != TokenType._UNDETERMINED_ 
                && LookAheadToken.Type != TokenType._NONE_) return LookAheadToken;

            // if no scantokens specified, then scan for all of them (= backward compatible)
            if (expectedtokens.Length == 0)
                scantokens = Tokens;
            else
            {
                scantokens = new List<TokenType>(expectedtokens);
                scantokens.AddRange(SkipList);
            }

            do
            {

                int len = -1;
                TokenType index = (TokenType)int.MaxValue;
                string input = Input.Substring(startpos);

                tok = new Token(startpos, EndPos);

                for (i = 0; i < scantokens.Count; i++)
                {
                    Regex r = Patterns[scantokens[i]];
                    Match m = r.Match(input);
                    if (m.Success && m.Index == 0 && ((m.Length > len) || (scantokens[i] < index && m.Length == len )))
                    {
                        len = m.Length;
                        index = scantokens[i];  
                    }
                }

                if (index >= 0 && len >= 0)
                {
                    tok.EndPos = startpos + len;
                    tok.Text = Input.Substring(tok.StartPos, len);
                    tok.Type = index;
                }
                else if (tok.StartPos < tok.EndPos - 1)
                {
                    tok.Text = Input.Substring(tok.StartPos, 1);
                }

                if (SkipList.Contains(tok.Type))
                {
                    startpos = tok.EndPos;
                    Skipped.Add(tok);
                }
                else
                {
                    // only assign to non-skipped tokens
                    tok.Skipped = Skipped; // assign prior skips to this token
                    Skipped = new List<Token>(); //reset skips
                }
            }
            while (SkipList.Contains(tok.Type));

            LookAheadToken = tok;
            return tok;
        }
    }

    #endregion

    #region Token

    public enum TokenType
    {

            //Non terminal tokens:
            _NONE_  = 0,
            _UNDETERMINED_= 1,

            //Non terminal tokens:
            SubjectContainsClause= 2,
            AttachToProjectClause= 3,
            CreateRequestClause= 4,
            CreatePrivateRequestClause= 5,
            CreatePublicRequestClause= 6,
            CompanyMatchedClause= 7,
            AttachRequestToTeamClause= 8,
            AttachRequestToTeamPart= 9,
            WhenStatement= 10,
            WhenPart= 11,
            ThenStatement= 12,
            ThenPart= 13,
            Start   = 14,

            //Terminal tokens:
            NUMBER  = 15,
            EOF     = 16,
            STRING_PARAM= 17,
            WHITESPACE= 18,
            WhenKeyword= 19,
            SubjectContainsKeyword= 20,
            ThenKeyword= 21,
            AttachToProjectKeyword= 22,
            CreateRequestKeyword= 23,
            CreatePrivateRequestKeyword= 24,
            CreatePublicRequestKeyword= 25,
            CompanyMatchedKeyword= 26,
            AttachRequestToTeamKeyword= 27,
            AndKeyword= 28
    }

    public class Token
    {
        private int startpos;
        private int endpos;
        private string text;
        private object value;

        // contains all prior skipped symbols
        private List<Token> skipped;

        public int StartPos { 
            get { return startpos;} 
            set { startpos = value; }
        }

        public int Length { 
            get { return endpos - startpos;} 
        }

        public int EndPos { 
            get { return endpos;} 
            set { endpos = value; }
        }

        public string Text { 
            get { return text;} 
            set { text = value; }
        }

        public List<Token> Skipped { 
            get { return skipped;} 
            set { skipped = value; }
        }
        public object Value { 
            get { return value;} 
            set { this.value = value; }
        }

        [XmlAttribute]
        public TokenType Type;

        public Token()
            : this(0, 0)
        {
        }

        public Token(int start, int end)
        {
            Type = TokenType._UNDETERMINED_;
            startpos = start;
            endpos = end;
            Text = ""; // must initialize with empty string, may cause null reference exceptions otherwise
            Value = null;
        }

        public void UpdateRange(Token token)
        {
            if (token.StartPos < startpos) startpos = token.StartPos;
            if (token.EndPos > endpos) endpos = token.EndPos;
        }

        public override string ToString()
        {
            if (Text != null)
                return Type.ToString() + " '" + Text + "'";
            else
                return Type.ToString();
        }
    }

    #endregion
}
