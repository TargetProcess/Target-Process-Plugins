// Generated by TinyPG v1.3 available at www.codeproject.com

using System;
using System.Collections.Generic;

namespace Tp.PopEmailIntegration.Rules.Parsing
{
    #region Parser

    public partial class Parser
    {
        private Scanner scanner;
        private ParseTree tree;
        
        public Parser(Scanner scanner)
        {
            this.scanner = scanner;
        }

        public ParseTree Parse(string input)
        {
            tree = new ParseTree();
            return Parse(input, tree);
        }

        public ParseTree Parse(string input, ParseTree tree)
        {
            scanner.Init(input);

            this.tree = tree;
            ParseStart(tree);
            tree.Skipped = scanner.Skipped;

            return tree;
        }

        private void ParseSubjectContainsClause(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.SubjectContainsClause), "SubjectContainsClause");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.SubjectContainsKeyword);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.SubjectContainsKeyword) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.SubjectContainsKeyword.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                return;
            }

            
            tok = scanner.Scan(TokenType.STRING_PARAM);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.STRING_PARAM) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.STRING_PARAM.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                return;
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseAttachToProjectClause(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.AttachToProjectClause), "AttachToProjectClause");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.AttachToProjectKeyword);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.AttachToProjectKeyword) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.AttachToProjectKeyword.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                return;
            }

            
            tok = scanner.Scan(TokenType.NUMBER);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.NUMBER) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NUMBER.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                return;
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseCreateRequestClause(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.CreateRequestClause), "CreateRequestClause");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.CreateRequestKeyword);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.CreateRequestKeyword) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.CreateRequestKeyword.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                return;
            }

            
            tok = scanner.Scan(TokenType.NUMBER);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.NUMBER) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NUMBER.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                return;
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseCreatePrivateRequestClause(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.CreatePrivateRequestClause), "CreatePrivateRequestClause");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.CreatePrivateRequestKeyword);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.CreatePrivateRequestKeyword) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.CreatePrivateRequestKeyword.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                return;
            }

            
            tok = scanner.Scan(TokenType.NUMBER);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.NUMBER) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NUMBER.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                return;
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseCreatePublicRequestClause(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.CreatePublicRequestClause), "CreatePublicRequestClause");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.CreatePublicRequestKeyword);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.CreatePublicRequestKeyword) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.CreatePublicRequestKeyword.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                return;
            }

            
            tok = scanner.Scan(TokenType.NUMBER);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.NUMBER) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NUMBER.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                return;
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseCompanyMatchedClause(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.CompanyMatchedClause), "CompanyMatchedClause");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.CompanyMatchedKeyword);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.CompanyMatchedKeyword) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.CompanyMatchedKeyword.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                return;
            }

            
            tok = scanner.Scan(TokenType.NUMBER);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.NUMBER) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NUMBER.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                return;
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseAttachRequestToTeamClause(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.AttachRequestToTeamClause), "AttachRequestToTeamClause");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.AttachRequestToTeamKeyword);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.AttachRequestToTeamKeyword) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.AttachRequestToTeamKeyword.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                return;
            }

            
            tok = scanner.Scan(TokenType.NUMBER);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.NUMBER) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.NUMBER.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                return;
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseAttachRequestToTeamPart(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.AttachRequestToTeamPart), "AttachRequestToTeamPart");
            parent.Nodes.Add(node);

            do {

                
                ParseAttachRequestToTeamClause(node);

                
                tok = scanner.LookAhead(TokenType.AndKeyword);
                if (tok.Type == TokenType.AndKeyword)
                {
                    tok = scanner.Scan(TokenType.AndKeyword);
                    n = node.CreateNode(tok, tok.ToString() );
                    node.Token.UpdateRange(tok);
                    node.Nodes.Add(n);
                    if (tok.Type != TokenType.AndKeyword) {
                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.AndKeyword.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                        return;
                    }
                }
                tok = scanner.LookAhead(TokenType.AttachRequestToTeamKeyword);
            } while (tok.Type == TokenType.AttachRequestToTeamKeyword);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseWhenStatement(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.WhenStatement), "WhenStatement");
            parent.Nodes.Add(node);

            tok = scanner.LookAhead(TokenType.SubjectContainsKeyword, TokenType.CompanyMatchedKeyword);
            switch (tok.Type)
            {
                case TokenType.SubjectContainsKeyword:

                    
                    ParseSubjectContainsClause(node);

                    
                    tok = scanner.LookAhead(TokenType.AndKeyword);
                    if (tok.Type == TokenType.AndKeyword)
                    {
                        tok = scanner.Scan(TokenType.AndKeyword);
                        n = node.CreateNode(tok, tok.ToString() );
                        node.Token.UpdateRange(tok);
                        node.Nodes.Add(n);
                        if (tok.Type != TokenType.AndKeyword) {
                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.AndKeyword.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                            return;
                        }
                    }
                    break;
                case TokenType.CompanyMatchedKeyword:

                    
                    ParseCompanyMatchedClause(node);

                    
                    tok = scanner.LookAhead(TokenType.AndKeyword);
                    if (tok.Type == TokenType.AndKeyword)
                    {
                        tok = scanner.Scan(TokenType.AndKeyword);
                        n = node.CreateNode(tok, tok.ToString() );
                        node.Token.UpdateRange(tok);
                        node.Nodes.Add(n);
                        if (tok.Type != TokenType.AndKeyword) {
                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.AndKeyword.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                            return;
                        }
                    }
                    break;
                default:
                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", 0x0002, 0, tok.StartPos, tok.StartPos, tok.Length));
                    break;
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseWhenPart(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.WhenPart), "WhenPart");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.WhenKeyword);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.WhenKeyword) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.WhenKeyword.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                return;
            }

            
            do {
                ParseWhenStatement(node);
                tok = scanner.LookAhead(TokenType.SubjectContainsKeyword, TokenType.CompanyMatchedKeyword);
            } while (tok.Type == TokenType.SubjectContainsKeyword
                || tok.Type == TokenType.CompanyMatchedKeyword);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseThenStatement(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.ThenStatement), "ThenStatement");
            parent.Nodes.Add(node);

            tok = scanner.LookAhead(TokenType.AttachToProjectKeyword, TokenType.CreateRequestKeyword, TokenType.CreatePrivateRequestKeyword, TokenType.CreatePublicRequestKeyword);
            switch (tok.Type)
            {
                case TokenType.AttachToProjectKeyword:

                    
                    ParseAttachToProjectClause(node);

                    
                    tok = scanner.LookAhead(TokenType.AndKeyword);
                    if (tok.Type == TokenType.AndKeyword)
                    {
                        tok = scanner.Scan(TokenType.AndKeyword);
                        n = node.CreateNode(tok, tok.ToString() );
                        node.Token.UpdateRange(tok);
                        node.Nodes.Add(n);
                        if (tok.Type != TokenType.AndKeyword) {
                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.AndKeyword.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                            return;
                        }
                    }
                    break;
                case TokenType.CreateRequestKeyword:

                    
                    ParseCreateRequestClause(node);

                    
                    tok = scanner.LookAhead(TokenType.AndKeyword);
                    if (tok.Type == TokenType.AndKeyword)
                    {
                        tok = scanner.Scan(TokenType.AndKeyword);
                        n = node.CreateNode(tok, tok.ToString() );
                        node.Token.UpdateRange(tok);
                        node.Nodes.Add(n);
                        if (tok.Type != TokenType.AndKeyword) {
                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.AndKeyword.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                            return;
                        }
                    }

                    
                    tok = scanner.LookAhead(TokenType.AttachRequestToTeamKeyword);
                    if (tok.Type == TokenType.AttachRequestToTeamKeyword)
                    {
                        ParseAttachRequestToTeamPart(node);
                    }
                    break;
                case TokenType.CreatePrivateRequestKeyword:

                    
                    ParseCreatePrivateRequestClause(node);

                    
                    tok = scanner.LookAhead(TokenType.AndKeyword);
                    if (tok.Type == TokenType.AndKeyword)
                    {
                        tok = scanner.Scan(TokenType.AndKeyword);
                        n = node.CreateNode(tok, tok.ToString() );
                        node.Token.UpdateRange(tok);
                        node.Nodes.Add(n);
                        if (tok.Type != TokenType.AndKeyword) {
                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.AndKeyword.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                            return;
                        }
                    }

                    
                    tok = scanner.LookAhead(TokenType.AttachRequestToTeamKeyword);
                    if (tok.Type == TokenType.AttachRequestToTeamKeyword)
                    {
                        ParseAttachRequestToTeamPart(node);
                    }
                    break;
                case TokenType.CreatePublicRequestKeyword:

                    
                    ParseCreatePublicRequestClause(node);

                    
                    tok = scanner.LookAhead(TokenType.AndKeyword);
                    if (tok.Type == TokenType.AndKeyword)
                    {
                        tok = scanner.Scan(TokenType.AndKeyword);
                        n = node.CreateNode(tok, tok.ToString() );
                        node.Token.UpdateRange(tok);
                        node.Nodes.Add(n);
                        if (tok.Type != TokenType.AndKeyword) {
                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.AndKeyword.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                            return;
                        }
                    }

                    
                    tok = scanner.LookAhead(TokenType.AttachRequestToTeamKeyword);
                    if (tok.Type == TokenType.AttachRequestToTeamKeyword)
                    {
                        ParseAttachRequestToTeamPart(node);
                    }
                    break;
                default:
                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", 0x0002, 0, tok.StartPos, tok.StartPos, tok.Length));
                    break;
            }

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseThenPart(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.ThenPart), "ThenPart");
            parent.Nodes.Add(node);


            
            tok = scanner.Scan(TokenType.ThenKeyword);
            n = node.CreateNode(tok, tok.ToString() );
            node.Token.UpdateRange(tok);
            node.Nodes.Add(n);
            if (tok.Type != TokenType.ThenKeyword) {
                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.ThenKeyword.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                return;
            }

            
            do {
                ParseThenStatement(node);
                tok = scanner.LookAhead(TokenType.AttachToProjectKeyword, TokenType.CreateRequestKeyword, TokenType.CreatePrivateRequestKeyword, TokenType.CreatePublicRequestKeyword);
            } while (tok.Type == TokenType.AttachToProjectKeyword
                || tok.Type == TokenType.CreateRequestKeyword
                || tok.Type == TokenType.CreatePrivateRequestKeyword
                || tok.Type == TokenType.CreatePublicRequestKeyword);

            parent.Token.UpdateRange(node.Token);
        }

        private void ParseStart(ParseNode parent)
        {
            Token tok;
            ParseNode n;
            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType.Start), "Start");
            parent.Nodes.Add(node);

            tok = scanner.LookAhead(TokenType.WhenKeyword, TokenType.ThenKeyword);
            switch (tok.Type)
            {
                case TokenType.WhenKeyword:

                    
                    ParseWhenPart(node);

                    
                    ParseThenPart(node);
                    break;
                case TokenType.ThenKeyword:

                    
                    ParseThenPart(node);

                    
                    tok = scanner.Scan(TokenType.EOF);
                    n = node.CreateNode(tok, tok.ToString() );
                    node.Token.UpdateRange(tok);
                    node.Nodes.Add(n);
                    if (tok.Type != TokenType.EOF) {
                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found. Expected " + TokenType.EOF.ToString(), 0x1001, 0, tok.StartPos, tok.StartPos, tok.Length));
                        return;
                    }
                    break;
                default:
                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n", "") + "' found.", 0x0002, 0, tok.StartPos, tok.StartPos, tok.Length));
                    break;
            }

            parent.Token.UpdateRange(node.Token);
        }


    }

    #endregion Parser
}
