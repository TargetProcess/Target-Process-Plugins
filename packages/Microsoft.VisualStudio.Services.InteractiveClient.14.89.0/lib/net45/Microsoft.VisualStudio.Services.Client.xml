<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Services.Client</name>
    </assembly>
    <members>
        <member name="P:Microsoft.VisualStudio.Services.Client.AsymmetricKeyPair.IsNew">
            <summary>
            Flag to indicate if the key pair is an existing pair or newly generated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.CredentialStorageUtility.GetCredentials(Microsoft.VisualStudio.Services.Common.TokenStorage.VssToken)">
            <summary>
            Returns a credentials object for the specified initial token and no additional
            information to obtain a new token if the initial one fails. The credentials will
            only work if the initial token is valid.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.CredentialStorageUtility.GetTokenFromString(Microsoft.VisualStudio.Services.Common.VssCredentialsType,System.String)">
            <summary>
            
            </summary>
            <param name="credentialsType"></param>
            <param name="tokenValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.CredentialStorageUtility.GetTokenAsString(Microsoft.VisualStudio.Services.Common.IssuedToken)">
            <summary>
            
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.VssAadCredential">
            <summary>
            Currently it is impossible to get whether prompting is allowed from the credential itself without reproducing the logic
            used by VssClientCredentials. Since this is a stop gap solution to get Windows integrated authentication to work against
            AAD via ADFS for now this class will only support that one, non-interactive flow. We need to assess how much we want to
            invest in this legacy stack rather than recommending people move to the VssConnect API for future authentication needs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssAadTokenProvider.OnGetTokenAsync(Microsoft.VisualStudio.Services.Common.IssuedToken,System.Threading.CancellationToken)">
            <summary>
            Temporary implementation since we don't have a good configuration story here at the moment.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssAdalAuthenticationHelper.GetTenantIdFromAccountStore(System.String)">
            <summary>  
            Read tenant /authenticator info from Account storage (HKEY_CURRENT_USER\Software\Microsoft\VSCommon\Keychain\Accounts) for specified user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssAdalAuthenticationHelper.TrySetADALTokenForAuth(Microsoft.VisualStudio.Services.Client.Controls.VssFederatedCredentialPrompt,Microsoft.VisualStudio.Services.Client.AccountManagement.TokenCacheItemWrapper)">
            <summary>
            Validate adal token against VSO Service. If Successful, set parameters of prompt to include access token and return true.
            Else, return false.
            </summary>
            <param name="federatedPrompt"></param>
            <param name="tokenCacheItem"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssAdalAuthenticationHelper.VerifyAuthWithADALToken(Microsoft.VisualStudio.Services.Client.AccountManagement.TokenCacheItemWrapper,System.String@)">
            <summary>
            Get access token from ADALCache using tokenCacheItem as key and validate token against Identities/me endpoint.
            Return true if valid, else return false.
            </summary>
            <param name="tokenCacheItem"></param>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssAdalAuthenticationHelper.CleanupAccessTokenInPromptParameters(Microsoft.VisualStudio.Services.Client.Controls.VssFederatedCredentialPrompt)">
            <summary>
            Prompt's parameters may contain access token as a result of previous request which may/maynot be valid anymore.
            As a precaution, always Clean up Accesstoken from parameters for subsequest requests.
            </summary>
            <param name="federatedPrompt"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssAdalAuthenticationHelper.CleanupUserInfoInPromptParameters(Microsoft.VisualStudio.Services.Client.Controls.VssFederatedCredentialPrompt)">
            <summary>
            Clean up user information in the prompt so we don't prefill the username in cases we don't want to.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssAdalAuthenticationHelper.FilterForDistinctTenantUser(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Services.Client.AccountManagement.TokenCacheItemWrapper},System.String)">
            <summary>
            Filter distinct user information by tenant and attempt to acquire token for unique combination of user and tenant.
            If successful, add to list of users to be shown on Account Picker
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.VssClientCredentials">
            <summary>
            Provides credentials to use when connecting to a Visual Studio Service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentials.#ctor">
            <summary>
            Initializes a new <c>VssClientCredentials</c> instance with default credentials.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentials.#ctor(System.Boolean)">
            <summary>
            Initializes a new <c>VssClientCredentials</c> instance with default credentials if specified.
            </summary>
            <param name="useDefaultCredentials">True to use default windows credentials; otherwise, false</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentials.#ctor(Microsoft.VisualStudio.Services.Common.IVssCredentialPrompt)">
            <summary>
            Initializes a new <c>VssClientCredentials</c> instance with default credentials and the 
            specified credential prompt.
            </summary>
            <param name="credentialPrompt">The prompt to get credentials</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentials.#ctor(Microsoft.VisualStudio.Services.Common.WindowsCredential)">
            <summary>
            Initializes a new <c>VssClientCredentials</c> instance with the specified windows credential and
            default issued token credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentials.#ctor(Microsoft.VisualStudio.Services.Common.WindowsCredential,Microsoft.VisualStudio.Services.Common.CredentialPromptType)">
            <summary>
            Initializes a new <c>VssClientCredentials</c> instance with the specified windows credential and
            default issued token credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
            <param name="promptType">CredentialPromptType.PromptIfNeeded if interactive prompts are allowed, otherwise CredentialProptType.DoNotPrompt</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentials.#ctor(Microsoft.VisualStudio.Services.Common.FederatedCredential)">
            <summary>
            Initializes a new <c>VssClientCredentials</c> instance with the specified windows credential and
            default issued token credential.
            </summary>
            <param name="windowsCredential">The federated credential to use for authentication</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentials.#ctor(Microsoft.VisualStudio.Services.Common.WindowsCredential,Microsoft.VisualStudio.Services.Common.FederatedCredential)">
            <summary>
            Initializes a new <c>VssClientCredentials</c> instance with the specified windows and issued token 
            credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
            <param name="federatedCredential">The federated credential to use for authentication</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentials.#ctor(Microsoft.VisualStudio.Services.Common.WindowsCredential,Microsoft.VisualStudio.Services.Common.FederatedCredential,Microsoft.VisualStudio.Services.Common.CredentialPromptType)">
            <summary>
            Initializes a new <c>VssClientCredentials</c> instance with the specified windows and issued token 
            credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
            <param name="issuedTokenCredential">The federated credential to use for authentication</param>
            <param name="promptType">CredentialPromptType.PromptIfNeeded if interactive prompts are allowed, otherwise CredentialProptType.DoNotPrompt</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentials.#ctor(Microsoft.VisualStudio.Services.Common.WindowsCredential,Microsoft.VisualStudio.Services.Common.FederatedCredential,Microsoft.VisualStudio.Services.Common.CredentialPromptType,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes a new <c>VssClientCredentials</c> instance with the specified windows and issued token 
            credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
            <param name="federatedCredential">The federated credential to use for authentication</param>
            <param name="promptType">CredentialPromptType.PromptIfNeeded if interactive prompts are allowed; otherwise, CredentialProptType.DoNotPrompt</param>
            <param name="scheduler">An optional <c>TaskScheduler</c> to ensure credentials prompting occurs on the UI thread</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentials.#ctor(Microsoft.VisualStudio.Services.Common.WindowsCredential,Microsoft.VisualStudio.Services.Common.FederatedCredential,Microsoft.VisualStudio.Services.Common.CredentialPromptType,System.Threading.Tasks.TaskScheduler,Microsoft.VisualStudio.Services.Common.IVssCredentialPrompt)">
            <summary>
            Initializes a new <c>VssCredentials</c> instance with the specified windows and issued token 
            credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
            <param name="federatedCredential">The federated credential to use for authentication</param>
            <param name="promptType">CredentialPromptType.PromptIfNeeded if interactive prompts are allowed; otherwise, CredentialProptType.DoNotPrompt</param>
            <param name="scheduler">An optional <c>TaskScheduler</c> to ensure credentials prompting occurs on the UI thread</param>
            <param name="credentialPrompt">An optional <c>IVssCredentialPrompt</c> to perform prompting for credentials</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentials.op_Implicit(Microsoft.VisualStudio.Services.Common.FederatedCredential)~Microsoft.VisualStudio.Services.Client.VssClientCredentials">
            <summary>
            Implicitly converts a <c>FederatedCredential</c> instance into a <c>VssClientCredentials</c> instance.
            </summary>
            <param name="credential">The federated credential instance</param>
            <returns>A new <c>VssClientCredentials</c> instance which wraps the specified credential</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentials.op_Implicit(Microsoft.VisualStudio.Services.Common.WindowsCredential)~Microsoft.VisualStudio.Services.Client.VssClientCredentials">
            <summary>
            Implicitly converts a <c>WindowsCredential</c> instance into a <c>VssClientCredentials</c> instance.
            </summary>
            <param name="credential">The windows credential instance</param>
            <returns>A new <c>VssClientCredentials</c> instance which wraps the specified credential</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentials.TryGetValidAdalToken(Microsoft.VisualStudio.Services.Common.IVssCredentialPrompt)">
            Attempts to find appropriate Access token for IDE user and add to prompt's parameter
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.VssClientCredentialStorage">
            <summary>
            A helper class that adds Token Storage support to normal VssClientCredentials.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentialStorage.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="storageKind"></param>
            <param name="storageNamespace"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssClientCredentialStorage.TokenStorage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssClientCredentialStorage.TokenKind">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentialStorage.RetrieveToken(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentialsType)">
            <summary>
            
            </summary>
            <param name="serverUrl"></param>
            <param name="credentialsType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentialStorage.StoreToken(System.Uri,Microsoft.VisualStudio.Services.Common.IssuedToken)">
            <summary>
            
            </summary>
            <param name="serverUrl"></param>
            <param name="token"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentialStorage.RemoveToken(System.Uri,Microsoft.VisualStudio.Services.Common.IssuedToken)">
            <summary>
            
            </summary>
            <param name="serverUrl"></param>
            <param name="token"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCredentialStorage.BuildTokenKey(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentialsType)">
            <summary>
            
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.VssFederatedCredential">
            <summary>
            Provides federated authentication with a hosted <c>TfsConnection</c> instance using cookies.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssFederatedCredential.#ctor">
            <summary>
            Initializes a new <c>VssFederatedCredential</c> instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssFederatedCredential.#ctor(Microsoft.VisualStudio.Services.Client.VssFederatedToken)">
            <summary>
            Initializes a new <c>VssFederatedCredential</c> instance.
            </summary>
            <param name="useCache">True to load cached cookies if possible or false to force a prompt</param>
            <param name="initialToken">The initial token if available</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssFederatedCredential.CredentialType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.VssFederatedToken">
            <summary>
            Provides a cookie-based authentication token.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssFederatedToken.#ctor(System.Net.CookieCollection)">
            <summary>
            Initializes a new <c>VssFederatedToken</c> instance using the specified cookies.
            </summary>
            <param name="cookies"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssFederatedToken.CookieCollection">
            <summary>
            Returns the CookieCollection contained within this token. For internal use only.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.VssFederatedTokenProvider">
            <summary>
            Provides authentication for internet identities using single-sign-on cookies.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssFederatedTokenProvider.Credential">
            <summary>
            Gets the federated credential from which this provider was created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssFederatedTokenProvider.GetTokenIsInteractive">
            <summary>
            Gets a value indicating whether or not a call to get token will require interactivity.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssFederatedTokenProvider.Issuer">
            <summary>
            Gets the issuer for the token provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssFederatedTokenProvider.Realm">
            <summary>
            Gets the realm for the token provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthCredential.#ctor(Microsoft.VisualStudio.Services.Client.VssOAuthTokenContainer)">
            <summary>
            Initializes a new <c>VssOAuthCredential</c> instance with the specified initial token.
            </summary>
            <param name="initialToken">The initial token to use  on the resource server before attempting to contact 
            the authorization server for another grant or new access token. Usually this token will have been 
            persisted by the caller and is used here to resume the session</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthCredential.#ctor(System.String)">
            <summary>
            Initializes a new <c>VssOAuthCredential</c> instance with the provided access token.
            </summary>
            <param name="accessToken">The OAuth access token</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthCredential.#ctor(Microsoft.VisualStudio.Services.Client.VssOAuthToken)">
            <summary>
            Initializes a new <c>VssOAuthCredential</c> instance with the provided access token.
            </summary>
            <param name="accessToken">The OAuth access token</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthCredential.#ctor(System.Uri,System.String,System.String,System.String)">
            <summary>
            Initializes a new <c>VssOAuthCredential</c> instance with the specified client id and secret and either an
            authorization code or a refresh token
            </summary>
            <param name="clientId">The client id</param>
            <param name="clientSecret">The client secret</param>
            <param name="authCodeOrRefreshToken">Either an authorization code or a refresh token which can be used
            to obtain an access token (and a new refresh token)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthCredential.#ctor(System.Uri,System.String,System.String,System.String,System.Action{Microsoft.VisualStudio.Services.Client.VssOAuthTokenContainer})">
            <summary>
            Initializes a new <c>VssOAuthCredential</c> instance with the specified client id and secret and either an
            authorization code or a refresh token
            </summary>
            <param name="authorizationUri">The base URI of the authorization server. This is usually the same
            as the URI of the TFS server</param>
            <param name="clientId">The client id</param>
            <param name="clientSecret">The client secret</param>
            <param name="authCodeOrRefreshToken">Either an authorization code or a refresh token which can be used
            to obtain an access token (and a new refresh token)</param>
            <param name="callback">Allow API consumers to obtain the received access token and refresh token in case they need to be
            persisted for future access</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthCredential.#ctor(System.Uri,System.String,System.String,Microsoft.VisualStudio.Services.Client.VssOAuthTokenContainer,System.Action{Microsoft.VisualStudio.Services.Client.VssOAuthTokenContainer})">
            <summary>
            Initializes a new <c>VssOAuthCredential</c> instance with the specified client id and secret and an
            initial token
            </summary>
            <param name="authorizationUri">The base URI of the authorization server. This is usually the same
            as the URI of the TFS server</param>
            <param name="clientId">The client id</param>
            <param name="clientSecret">The client secret</param>
            <param name="initialToken">The initial token to use  on the resource server before attempting to contact the authorization server
            (for another grant or new access token). Usually this token will have been persisted by the caller and is
            used here to resume the session</param>
            <param name="callback">Allow API consumers to obtain the received access token and refresh token in case they need to be
            persisted for future access</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssOAuthCredential.CredentialType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssOAuthCredential.ClientId">
            <summary>
            Gets the client id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssOAuthCredential.ClientSecret">
            <summary>
            Gets the client secret.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssOAuthCredential.TokensReceived">
            <summary>
            The API-consumer-provided callback to invoke when an access token and a refresh token
            are obtained from the authorization server
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthCredential.IsAuthenticationChallenge(System.Net.Http.HttpResponseMessage)">
            <summary>
            
            </summary>
            <param name="webResponse"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthCredential.OnCreateTokenProvider(System.Uri,System.Net.Http.HttpResponseMessage)">
            <summary>
            Creates a provider for retrieving security tokens for the provided credentials.
            </summary>
            <returns>An issued token provider for the current credential</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.VssOAuthTokenType">
            <summary>
            The type of OAuth token
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.VssOAuthToken">
            <summary>
            Provides a token used for OAuth delegation based authentication
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthToken.#ctor(System.String)">
            <summary>
            Constructs a new <c>OAuthToken</c> instance of type <c>VssOAuthTokenType.AccessToken</c>.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthToken.#ctor(System.String,Microsoft.VisualStudio.Services.Client.VssOAuthTokenType)">
            <summary>
            
            </summary>
            <param name="token"></param>
            <param name="tokenType"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthToken.#ctor(System.String,Microsoft.VisualStudio.Services.Client.VssOAuthTokenType,System.DateTime)">
            <summary>
            
            </summary>
            <param name="token"></param>
            <param name="tokenType"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssOAuthToken.Token">
            <summary>
            Gets the underlying token as string
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssOAuthToken.TokenType">
            <summary>
            Gets the type of OAuth token
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssOAuthToken.Expiration">
            <summary>
            The expiration time of the token
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthToken.ApplyTo(System.Net.Http.HttpRequestMessage)">
            <summary>
            
            </summary>
            <param name="webRequest"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.VssOAuthTokenContainer">
            <summary>
            A container to encapsulate an OAuth access token and an OAuth refresh token (or authorization code)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssOAuthTokenContainer.AccessToken">
            <summary>
            The access code used to prove authorization on the resource server
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssOAuthTokenContainer.RefreshToken">
            <summary>
            The refresh token (or authorization code)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthTokenContainer.ApplyTo(System.Net.Http.HttpRequestMessage)">
            <summary>
            
            </summary>
            <param name="webRequest"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthTokenContainer.ExtractTokens(System.IO.Stream)">
            <summary>
            Extract the OAuth tokens from the response data
            </summary>
            <param name="responseData"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthTokenContainer.FromAccessToken(System.String)">
            <summary>
            Build an OAuth token from an access token.
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthTokenContainer.FromAuthCodeOrRefreshToken(System.String)">
            <summary>
            Build an OAuth token from a refresh token or an authorization code.
            </summary>
            <param name="authCodeOrRefreshToken"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssOAuthTokenProvider.Credential">
            <summary>
            Gets the OAuth token credential from which this provider was created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssOAuthTokenProvider.GetTokenIsInteractive">
            <summary>
            Gets a value indicating whether or not a call to get token will require interactivity.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssOAuthTokenProvider.OnGetTokenAsync(Microsoft.VisualStudio.Services.Common.IssuedToken,System.Threading.CancellationToken)">
            <summary>
            Issues a request to synchronously retrieve a token for the associated credential.
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Internal.EditionType">
            <summary>
            Which edition is installed: Standard, Express, Hosted
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Internal.VisualStudioClientEnvironment">
            <summary>
            Provides helper methods to discover the current installation environment for Visual Studio and Team Foundation client bits.
            </summary>
            <remarks>
            The goal of this class is to encapsulate access to well-known registry keys and application install
            paths that should be available by default.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Internal.VisualStudioClientEnvironment.OpenRootVisualStudioRegistryKey">
            <summary>
            Gets the root registry key of the current Visual Studio registry hive. Whenever possible, using this property is 
            recommended over using Registry.LocalMachine and CurrentVsVersionInformation.RegistryKeyPath. Using the
            latter limits the portability of our code and is not recommended.
            </summary>
            <remarks>
            <para>This property returns the registry root for the application. Typically this is 
            HKLM\Software\Microsoft\VisualStudio\&lt;version&gt; but this can change based on any 
            alternate root that the shell was initialized with.</para>
            <para>The key that is returned is a read-only key and cannot be modified.</para>
            <para>You should close and dispose this key when you are finished using it.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Internal.VisualStudioClientEnvironment.OpenOrCreateSharedRootUserRegistryKey">
            <summary>
            Gets a registry key that can be used to store user data. Whenever possible, using this property is 
            recommended over using Registry.CurrentUser and CurrentVsVersionInformation.RegistryKeyPath. Using the
            latter limits the portability of our code and is not recommended.
            This key points to HKEY_CURRENT_USER\Software\Microsoft\VSCommon
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Internal.VisualStudioClientEnvironment.OpenOrCreateRootUserRegistryKey">
            <summary>
            Gets a registry key that can be used to store user data specific to a version of visual studio . Whenever possible, using this property is 
            recommended over using Registry.CurrentUser and CurrentVsVersionInformation.RegistryKeyPath. Using the
            latter limits the portability of our code and is not recommended.
            </summary>
            <remarks>
            <para>The UserRegistryRoot property returns a registry key that can be used to store user data. 
            Typically this key points to HKEY_CURRENT_USER\Software\Microsoft\VisualStudio\&lt;version&gt;, but an 
            alternate root can be specified when the Visual Studio shell is initialized.</para>
            <para>The RegistryKey returned by UserRegistryRoot is the registry root for the current user.</para> 
            <para>It is opened as read/write. Always call Close on this key when you are finished using it.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Internal.VisualStudioClientEnvironment.GetVisualStudioApplicationDataPath">
            <summary>
            Returns the path to the client (a.k.a. Visual Studio) user application data folder path.
            </summary>
            <remarks>
            This will be for the "Roaming" application data folder, which roams with a profile across multiple machines.
            You might not want to use this folder for big files or machine-specific information.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Internal.VisualStudioClientEnvironment.GetVisualStudioLocalApplicationDataPath">
            <summary>
            Returns the path to the client (a.k.a. Visual Studio) user application data folder path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Internal.VisualStudioClientEnvironment.GetTfsApplicationDataPath">
            <summary>
            Returns the path to the Team Foundation user application data folder path.
            </summary>
            <remarks>
            This will be for the "Roaming" application data folder, which roams with a profile across multiple machines.
            You might not want to use this folder for big files or machine-specific information.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Internal.VisualStudioClientEnvironment.GetTfsLocalApplicationDataPath">
            <summary>
            Returns the path to the Team Foundation user application data folder path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Internal.VisualStudioClientEnvironment.GetTfsSharedFilesPath">
            <summary>
            Returns the path to the common Microsoft Shared TFS files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Internal.VisualStudioClientEnvironment.GetVisualStudioInstallPath">
            <summary>
            Returns the path to the Visual Studio install directory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Internal.VisualStudioClientEnvironment.GetVisualStudioPrivateAssembliesPath">
            <summary>
            Returns the path to the Visual Studio Private Assemblies directory.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.NotificationHandler">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.NotificationExceptionHandler">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.NotificationSubscription">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.NotificationSubscription.UnSubscribe">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.ClientNotificationExceptionUtility.s_acsErrorCodeRegEx">
            <summary> 
            Provides a compiled regular expression used for extracting the error code from the message. 
            </summary> 
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientNotificationExceptionUtility.IsTransient(System.Exception)">
            <summary> 
            Determines whether the specified exception represents a transient failure that can be compensated by a retry. 
            </summary> 
            <param name="ex">The exception object to be verified.</param> 
            <returns>True if the specified exception is considered as transient, otherwise false.</returns> 
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.IClientNotificationSubscription">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.IClientNotificationSubscription.UnSubscribe">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.NotificationContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.NotificationContext.ClientId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.NotificationContext.NotificationType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.NotificationContext.EventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.NotificationContext.ExceptionHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.ServiceBusExceptionMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.ServiceBusExceptionMessage.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.ServiceBusExceptionMessage.Attributes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.ServiceBusExceptionMessage.InnerException">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.ServiceBusExceptionMessage.IsTransient">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.ServiceBusExceptionType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.ServiceBusExceptionType.ServiceBusException">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.ServiceBusExceptionType.NotificationServiceNotAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Controls.AccountPicker.AccountPickerResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Controls.AccountPicker.AccountPickerResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Controls.AccountPicker.AccountPickerResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Controls.AccountPicker.AccountPickerResources.AddNewAccount">
            <summary>
              Looks up a localized string similar to Add a new account....
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Controls.AccountPicker.AccountPickerResources.CancelButton">
            <summary>
              Looks up a localized string similar to _New....
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Controls.AccountPicker.AccountPickerResources.DialogHeader">
            <summary>
              Looks up a localized string similar to Choose your account.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Controls.AccountPicker.AccountPickerResources.DialogTitle">
            <summary>
              Looks up a localized string similar to Choose an account.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Controls.AccountPicker.AccountPickerResources.OkButton">
            <summary>
              Looks up a localized string similar to _Select.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Controls.AccountPicker.AccountPickerWindow">
            <summary>
            Interaction logic for AccountPickerWindow.xaml
            </summary>
            <summary>
            AccountPickerWindow
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Controls.AccountPicker.AccountPickerWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Controls.BrowserFlowLayer">
            <summary>
            Layer a browser sign-in event was detected.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.Controls.BrowserFlowLayer.Unspecified">
            <summary>
            Unknown or not specified.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.Controls.BrowserFlowLayer.Navigation">
            <summary>
            During navigation to a location.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.Controls.BrowserFlowLayer.Server">
            <summary>
            From the server, which may or may not be based on the request.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.Controls.BrowserFlowLayer.Client">
            <summary>
            In the client, which may or may not be based on content from the server.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Controls.BrowserWindow">
            <summary>
            Interaction logic for BrowserWindow.xaml
            </summary>
            <summary>
            BrowserWindow
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Controls.BrowserWindow.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Temporary solution to block commonly used but undesirable Internet Explorer keyboard shortcuts.
            </summary>
            <param name="e">Event details.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Controls.BrowserWindow.KeyDownHandler">
            <summary>
            Attach to an element to preview all key down events and handle them unless they are explicitly ignored.
            </summary>
            <remarks>
            Code borrowed and adapted from $/DevDiv/Main/
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Controls.BrowserWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Controls.DpiHelper">
            <summary>
            Copied from src\env\shell\PackageFramework\Current\Shell\UI\Common\DpiHelper.cs
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Controls.DpiHelper.DeviceDpiX">
            <summary>
            The screen's (device) current horizontal DPI
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Controls.DialogHost">
            <summary>
            Default implementation for <c>IDialogHost</c>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Controls.InvokeDialogFunc">
            <summary>
            Callback function that shows the dialog.
            </summary>
            <param name="owner">Parent window handle</param>
            <param name="state">Parameters of the dialog</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Controls.IDialogHost">
            <summary>
            Provide a hook to delegate presenting a dialog window to the caller so it
            can fully control the settings on which the dialog is shown.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Controls.IDialogHost.InvokeDialogAsync(Microsoft.VisualStudio.Services.Client.Controls.InvokeDialogFunc,System.Object)">
            <summary>
            Show a dialog by invoking the callback function.
            </summary>
            <param name="showDialog">Callback to show the dialog</param>
            <param name="state">Parameters of the dialog</param>
            <returns>Dialog result</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Controls.VssCredentialPromptContext">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Controls.VssCredentialPrompts">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Controls.VssCredentialPrompts.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Controls.VssCredentialPrompts.#ctor(Microsoft.VisualStudio.Services.Client.Controls.VssCredentialPromptContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Controls.VssCredentialPrompts.#ctor(Microsoft.VisualStudio.Services.Common.IVssCredentialPrompt,Microsoft.VisualStudio.Services.Common.IVssCredentialPrompt)">
            <summary>
            
            </summary>
            <param name="federatedCredentialPrompt"></param>
            <param name="windowsCredentialPrompt"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Controls.VssCredentialPrompts.FederatedPrompt">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Controls.VssCredentialPrompts.WindowsPrompt">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Controls.VssCredentialPrompts.CreateDefault(Microsoft.VisualStudio.Services.Common.WindowsCredential,Microsoft.VisualStudio.Services.Common.FederatedCredential)">
            <summary>
            
            </summary>
            <param name="federatedCredential"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Controls.VssFederatedCredentialPrompt.InvokeDialog(System.IntPtr,System.Object)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="state"></param>
        </member>
        <member name="E:Microsoft.VisualStudio.Services.Client.Controls.VssFederatedCredentialPrompt.DialogShowing">
            <summary>
            Occurs just before the dialog is brought up.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Controls.VssFederatedSignInWindow.ClientTokenData">
            <summary>
            Gets the metadata regarding the client token.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Controls.VssFederatedSignInWindow.Error">
            <summary>
            Error received during failed processing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Controls.VssFederatedSignInWindow.TokenData">
            <summary>
            Gets the JSON feed returned from the VSS server.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Controls.WindowsCredentialPrompt.GetToken(System.Uri,System.Net.ICredentials)">
            <summary>
            
            </summary>
            <param name="uri"></param>
            <param name="failedCredentials"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Controls.WindowsCredentialPrompt.GetPrimerCredentialsBlob(System.String)">
            <summary>
            Builds the credentials blob used to prime the credentials prompt.
            The input may be in either "DOMAIN\user" form or just "user".
            This method may return null, in which case no blob should be passed to
            CredUIPromptForWindowsCredentials.
            </summary>
            <param name="userName">Username used to prepopulate the username field.</param>
            <returns>Blob to pass to CredUIPromptForWindowsCredentials</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Controls.WindowsCredentialPrompt.GetFullyQualifiedDnsName(System.String)">
            <summary>
            Attempts to resolve the host into a fully qualified Dns name.  If it fails, it will return the host name.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKeyComparer">
            <summary>
            Comparer to compare two account keys
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKeyComparer.Equals(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey,Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey)">
            <summary>
            Determine if two account keys are equal
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKeyComparer.GetHashCode(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey)">
            <summary>
            Generate a hash code based on the account keys.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfoNoLogoComparer">
            <summary>
            Compare two account display info objects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfoNoLogoComparer.Equals(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfo,Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfo)">
            <summary>
            Determine if the two objects are equal
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfoNoLogoComparer.GetHashCode(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfo)">
            <summary>
            Generate a hash code for the display info.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountMemberComparer">
            <summary>
            Compare the individual fields on an account to determine if they are different in contents.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountMemberComparer.Equals(Microsoft.VisualStudio.Services.Client.AccountManagement.Account,Microsoft.VisualStudio.Services.Client.AccountManagement.Account)">
            <summary>
            Determine if the accounts are the same including contents. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountMemberComparer.GetHashCode(Microsoft.VisualStudio.Services.Client.AccountManagement.Account)">
            <summary>
            Generate a hash code for the accounts
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities.ADALEndpointRegistryOverrideName">
            <summary>
            Registry value which can be used to override the endpoint used to acquire adal tokens by default
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities.VSOEndpointRegistryOverrideName">
            <summary>
            End point used to connect to VSO when asking for both the session tokens and the tenant infomration
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities.AdalExtraParametersRegistryOverrideName">
            <summary>
            Registry value to override the default extra parameters passed during account creation or authentication
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities.TrueTask">
            <summary>
            A completed task with a <c>true</c> result.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities.FalseTask">
            <summary>
            A completed task with a <c>false</c> result.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities.RemoveMidQueue``1(System.Collections.Generic.Queue{``0},``0)">
            <summary>
            Removes an element from the middle of a queue without disrupting the other elements.
            </summary>
            <typeparam name="T">The element to remove.</typeparam>
            <param name="queue">The queue to modify.</param>
            <param name="valueToRemove">The value to remove.</param>
            <remarks>
            If a value appears multiple times in the queue, only its first entry is removed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities.GetVSOEndpointRegistryOverride">
            <summary>
            Get the endpoint to call VSO services with from the registry
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities.GetADALEndpointRegistryOverride">
            <summary>
            Get the endpoint we will use to acquire an ADAL token against for account creation and authentication
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities.GetNativeClientRedirect">
            <summary>
            Get the endpoint we will use to acquire an ADAL token against for account creation and authentication
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities.GetADALExtraParametersRegistryOverride">
            <summary>
            Get the extra query parameters from the registry that will be used during account creation and authentication
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities.GetDefaultProviderImage">
            <summary>
            Get the default image for an Work/School account
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities.GetMSAImage">
            <summary>
            Get the default image for an MSA account
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountRegistryWatcher.Hive">
            <summary>
            Gets the hive this watcher is currently monitoring
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountRegistryWatcher.KeyPath">
            <summary>
            Gets the key path this watcher is currently monitoring
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountRegistryWatcher.WatchSubtree">
            <summary>
            Gets a value indicating whether or not the sub-tree is being monitored
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountRegistryWatcher.Filter">
            <summary>
            Gets the filter for the current watcher
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountRegistryWatcher.Error">
            <summary>
            Raised when an error occurs while monitoring the key.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountRegistryWatcher.KeyChanged">
            <summary>
            Raised each time a registry change is detected according to the parameters of the watcher
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountRegistryWatcher.Stop">
            <summary>
            Stops monitoring the registry key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountRegistryWatcher.Start">
            <summary>
            Begins monitoring of the registry key according to the supplied parameters.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.RegistryChangeNotificationFilter.NameChange">
            <summary>
            Notify the caller if a subkey is added or deleted. 
            Corrsponds to Win32 Value REG_NOTIFY_CHANGE_NAME 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.RegistryChangeNotificationFilter.AttributeChange">
            <summary>
            Notify the caller of changes to the attributes of the key.  
            Corrsponds to Win32 Value REG_NOTIFY_CHANGE_ATTRIBUTES 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.RegistryChangeNotificationFilter.ValueChange">
            <summary>
            Notify the caller of changes to a value of the key. 
            This can include adding or deleting a value, or changing an existing value. 
            
            Corrsponds to Win32 Value REG_NOTIFY_CHANGE_LAST_SET
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.RegistryChangeNotificationFilter.SecurityChange">
            <summary>
            Notify the caller of changes to the security descriptor of the key.
            
            Corrsponds to Win32 Value REG_NOTIFY_CHANGE_SECURITY
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagerAdalCache" -->
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagerAdalCache.isClearing">
            <summary>
            Are we in the process of clearing the cache
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagerAdalCache.VSClientId">
            <summary>
            Client id for visual studio. This is to be used with the ADAL acquire token call to indicate you want a token 
            for the visual studio client.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagerAdalCache.AfterCacheSerialization">
            <summary>
            This event will fire after the cache has been serialized to disk. This is so that the vs account provider who itself normally
            would register for AfterAccountNotification does not try and process a cache before it has been written to disk
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagerAdalCache.#ctor">
            <summary>
            Create an instance of the accoung manager adal cache 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagerAdalCache.AadAuthorityBase">
            <summary>
            Base active directory authority to use when creating an authentication context.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagerAdalCache.Clear">
            <summary>
            Clears the adal cache persistent storage on disk and in memory
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagerAdalCache.GetAddedOrUpdatedItems(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Services.Client.AccountManagement.TokenCacheItemWrapper},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Services.Client.AccountManagement.TokenCacheItemWrapper})">
            <summary>
            This is to help unit test the added items algorithm. Since we cannot create a tokenCacheItem we need to wrap it so we can create mocks for unit tests
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagerAdalCache.GetValidItemsForTenant(System.String)">
            <summary>
            Returns list of TokenCacheItemWrapper list (Key of ADAL Cache) belonging to specified tenant
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagerAdalCache.GetValidItemForUserAndTenant(System.String,System.String)">
            <summary>
            Returns list of TokenCacheItemWrapper list (Key of ADAL Cache) belonging to specified tenant and user . Expected to be unique
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagerAdalCache.GetVsoEndpointToken(Microsoft.VisualStudio.Services.Client.AccountManagement.TokenCacheItemWrapper)">
            <summary>
            Returns list of ADAL Token(Value of ADAL Cache) belonging to specified Adal cache key . Expected to be unique
            The resource we are getting the token for is specifically the Vso resource
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountProvider">
            <summary>
            Provides a way to create and authenticate accounts
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountProvider.AccountProviderId">
            <summary>
            Unique guid that represents the account provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountProvider.AccountStore">
            <summary>
            Gets or sets the account store used by the account provider to retrieve and save accounts to storage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountProvider.ClearTokensForAccount(Microsoft.VisualStudio.Services.Client.AccountManagement.Account)">
            <summary>
            Clear any authentication tokens related to the account.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountProvider.InitializeAsync(Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountStore)">
            <summary>
            Initialize the provider with the account store it will use to interact with the keychain
            </summary>
            <param name="store">Store which stores accounts</param>
            <returns>Task to track the operation</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountProvider.RefreshAuthenticationStateAsync(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey,System.Threading.CancellationToken)">
            <summary>
            Determines if the account needs re-authentication and updates its NeedsReauthentication status.
            </summary>
            <param name="accountKey">Account to refresh, not null. It must be supported by this account provider.</param>
            <param name="cancellationToken">Cancelled the operation</param>
            <returns>A task that tracks the operation. Not null.</returns>
            <exception cref="T:System.ArgumentNullException">thrown if <paramref name="accountKey"/> is null.</exception>
            <exception cref="T:System.ArgumentException">thrown if <paramref name="accountKey"/> is not supported by the account provider.</exception>
            <exception cref="T:System.OperationCanceledException">may be thrown if <paramref name="cancellationToken"/> is cancelled.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountProvider.AuthenticateAccountWithUIAsync(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey,System.IntPtr,System.Threading.CancellationToken)">
            <summary>
            This method is used to authenticate an account from an unauthenticated state.
            This should be called on the UI thread.
            </summary>
            <param name="accountKey">Account to authenticate</param>
            <param name="parentWindowHandle">Windows handle to parent the sign in window</param>
            <param name="cancellationToken">Cancel the operation</param>
            <returns>The account which has been authenticated</returns>
            <exception cref="T:System.OperationCanceledException">If the user cancels the login prompt</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountProvider.CreateAccountWithUIAsync(System.IntPtr,System.Threading.CancellationToken)">
            <summary>
            Creates an account on the keychain by launching a sign in window and asking for credentials.
            If the account already exists on the keychain the account will be updated. No additional account will be created.
            This should be called on the UI thread.
            </summary>
            <param name="parentWindowHandle">Window to parent the sign in dialog to</param>
            <param name="cancellationToken">Cancell the operation</param>
            <returns>The created account which has been created.</returns>
            <exception cref="T:System.OperationCanceledException">If the user cancels the login prompt</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountProvider.RefreshDisplayInfoAsync(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey,System.Threading.CancellationToken)">
            <summary>
            The provider will use the account key passed in to refresh the display information on the account in the keychain. 
            For example this may be used to update descriptions or images found in the account.
            This will save the changes to the store before returning the account
            </summary>
            <param name="accountKey">Account to update</param>
            <param name="cancellationToken">Cancell the operation</param>
            <returns>An account with the updated display info</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountManager">
            <summary>
            Provides access to get account providers, token caches, and the account store.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountManager.Store">
            <summary>
            Store that provides access to accounts in keychain storage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountManager.GetCache``1">
            <summary>
            There are a number of global caches used to store token information. The GetCache method
            provides a way to get access to the instance of these caches which everyone in the process should use
            </summary>
            <typeparam name="T">Type of cache requested. Examples are VssTokenStorage, AdalTokenCache</typeparam>
            <returns>Cache instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountManager.GetAccountProviderAsync(System.Guid)">
            <summary>
            Gets an IAccountProvider based on the provider's unique guid.
            </summary>
            <param name="accountProviderId">Provider ID for the provider requested</param>
            <returns>IAccountProvider instance</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountStore">
            <summary>
            Storage for accounts
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountStore.KeychainAccountStoreChanged">
            <summary>
            Event that is fired after the store has changed.  This includes adds, removals and modifications.
            This event will fire after both local changes and changes made by other processes to the account store.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountStore.KeychainAccountStoreChanging">
            <summary>
            Fired when the store is changing. The event is fired before the change.
            This event will also only fire for account store changes made locally for the process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountStore.AddOrUpdateAccount(Microsoft.VisualStudio.Services.Client.AccountManagement.Account)">
            <summary>
            Add or update an account in storage
            </summary>
            <param name="account">account to add or update</param>
            <returns>new copy of the account after it has been added or updated</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountStore.SetDisplayInfo(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey,Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfo)">
            <summary>
            Set the display info on the account. This can be used to update the display info on the account in storage.
            </summary>
            <param name="account">account to update</param>
            <param name="info">new display info to update the account with</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountStore.SetProperty(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey,System.String,System.String)">
            <summary>
            Set a property on the account
            </summary>
            <param name="account">account to update the property upon</param>
            <param name="key">property key</param>
            <param name="value">value of the property to update the account with</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountStore.SetNeedsReauthentication(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey,System.Boolean)">
            <summary>
            Set the needs re-authentication property specifically.
            </summary>
            <param name="account">account to update</param>
            <param name="value">Needs re-authentication property value</param>
            <returns>account from the store with the property set to the new value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountStore.SetProperties(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sets multiple properties at once.
            </summary>
            <param name="account">account to update properties on</param>
            <param name="properties">set of key and values which represent the property name and value for each of the properties.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountStore.RemoveAccount(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey)">
            <summary>
            Remove an account from storage
            </summary>
            <param name="key">account to remove</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountStore.GetAllAccounts">
            <summary>
            Get all accounts from the storage
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountInitializationData">
            <summary>
            Data used to initialize an account.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountInitializationData.DisplayInfo">
            <summary>
            Information displayed, usually to an end user
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountInitializationData.UniqueId">
            <summary>
            UniqueId for the account
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountInitializationData.Authenticator">
            <summary>
            Name of the authenticator for the account. This is normally the IDP such as live.com, or STS
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountInitializationData.ParentProviderId">
            <summary>
            UniqueId for the account provider that created this account
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountInitializationData.Properties">
            <summary>
            Set of properties on the account
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountInitializationData.SupportedAccountProviders">
            <summary>
            Set of supported account providers. This is a list in addition to the ParentProviderId that will work with this account
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountInitializationData.NeedsReauthentication">
            <summary>
            Does the account need reauthentication
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.Account">
            <summary>
            Representation of an account on the keychain. 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.Account.AccountMemberComparer">
            <summary>
            Comparer to compare the contents to two different accounts to determine if they are equal
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.Account.#ctor(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountInitializationData)">
            <summary>
            Constructor
            </summary>
            <param name="initializationData">Initialization data</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.Account.Authenticator">
            <summary>
            Name of the authenticator for the account. This is normally the IDP such as live.com, or STS
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.Account.SupportedAccountProviders">
            <summary>
            Set of supported account providers. This is a list in addition to the ParentProviderId that will work with this account
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.Account.DisplayInfo">
            <summary>
            Information displayed, usually to an end user
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.Account.Properties">
            <summary>
            Set of properties on the account
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.Account.NeedsReauthentication">
            <summary>
            Does the account need reauthentication
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.Account.InitializationDataFromAccount">
            <summary>
            Get initialization data from an account
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfo">
            <summary>
            Information on an account that is commonly displayed to an end user
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfo.DisplayInfoNoLogoComparer">
            <summary>
            Comparer to compare two display info objects to each other to determine if they are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfo.#ctor(System.String,System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="accountDisplayName">Display name of the account</param>
            <param name="providerDisplayName">Display name of the provider</param>
            <param name="userName">User name for the account</param>
            <param name="accountLogo">Logo for the account</param>
            <param name="providerLogo">Logo for the provider</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfo.AccountDisplayName">
            <summary>
            Display name of the account
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfo.ProviderDisplayName">
            <summary>
            Display name of the provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfo.UserName">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfo.AccountLogo">
            <summary>
            Logo for the account
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountDisplayInfo.ProviderLogo">
            <summary>
            Logo for the provider
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey">
            <summary>
            Represents the key information to differentiate one account from another
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey.KeyComparer">
            <summary>
            Comparer to compare two keys together
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey.#ctor(System.String,System.Guid)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey.UniqueId">
            <summary>
            UniqueId for the account, this must be unique per provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey.ProviderId">
            <summary>
            Provider unique guid
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManager">
            <summary>
            Default implementation of the IAccountManager. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManager.AddLogger(Microsoft.VisualStudio.Services.Client.AccountManagement.Logging.ILogger)">
            <summary>
            Add a logger to the account manager so that events which are logged to the account manager can be retreived.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManager.RemoveLogger(Microsoft.VisualStudio.Services.Client.AccountManagement.Logging.ILogger)">
            <summary>
            Remove a logger from the account manager
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManager.#ctor(Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountStore,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="store">Storage to store accounts</param>
            <param name="instanceName">Instance name, is used to create different account manager scopes. One usage is to create a different instance per rootsuffix in visual studio.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManager.#ctor(Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountStore)">
            <summary>
            Constructor
            </summary>
            <param name="store">storage to store accounts</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManager.DefaultInstance">
            <summary>
             Global instance which everyone should use to have access to the same account manager store
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManager.Store">
            <summary>
            Store which provides access to stored account information
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManager.VsoEndpoint">
            <summary>
            Endpoint to the visual studio online service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManager.GetCache``1">
            <summary>
            There are a number of global caches used to store token information. The GetCache method
            provdes a way to get access to the instance of these caches which everyone in the process should use
            </summary>
            <typeparam name="T">Type of cache requested. Examples are VssTokenStorage, AdalTokenCache</typeparam>
            <returns>Cache instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManager.SetDefaultInstanceWithName(System.String)">
            <summary>
            Sets the default instance of the account manager to be a new account mananger greated using the passed in instance name.
            By calling this method all users of the AccountManager.DefaultInstance will use the one created during call.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountStoreChangedEventArgs">
            <summary>
            This event represents a change in the account storage.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountStoreChangedEventArgs.Added">
            <summary>
            List of added accounts
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountStoreChangedEventArgs.Removed">
            <summary>
            List of removed accounts
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountStoreChangedEventArgs.Modified">
            <summary>
            List of modified accounts. The first value is the original account object, the second is the modified account object
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountStoreChangedEventArgs.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Services.Client.AccountManagement.Account},System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Services.Client.AccountManagement.Account},System.Collections.Generic.IReadOnlyList{System.Tuple{Microsoft.VisualStudio.Services.Client.AccountManagement.Account,Microsoft.VisualStudio.Services.Client.AccountManagement.Account}})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountStoreChangedEventArgs.#ctor">
            <summary>
            Event with no changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountStoreChangedEventArgs.CreateForAddingAccount(Microsoft.VisualStudio.Services.Client.AccountManagement.Account)">
            <summary>
            Create the event args for an account that is being added 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountStoreChangedEventArgs.CreateForRemovingAccount(Microsoft.VisualStudio.Services.Client.AccountManagement.Account)">
            <summary>
            Create an event for an account to be removed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountStoreChangedEventArgs.CreateForModifyingAccount(Microsoft.VisualStudio.Services.Client.AccountManagement.Account)">
            <summary>
            Create an event for an account to be modified.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.Logging.AggregateLogger">
            <summary>
            Represents an <see cref="T:Microsoft.VisualStudio.Services.Client.AccountManagement.Logging.ILogger"/> supporting multiple loggers.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.Logging.ILogger">
            <summary>
            Represents a logger that can log events with named properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.Logging.ILogger.LogEvent(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs an event with the specified name and properties.
            </summary>
            <param name="name">The name of the event.</param>
            <param name="properties">The properties of the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.RegistryAccountStore.RaiseChangingEvent(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountStoreChangedEventArgs)">
            <summary>
            Will fire before any changes made locally in this process to the account store.
            Does not fire for events that occure due to other processes changing the account store.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.RegistryAccountStore.Dispose">
            <summary>
            Dispose of any resources used by the registry account store such as the thread which is
            watching the registry
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountStorageException">
            <summary>
            Exception thrown when there is a problem with the account storage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.SignInHelper.PrepareSignInState">
            <summary>
            Prepares the sign in state before showing a sign in dialog.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountProviderExtensions">
            <summary>
            Set of extension methods to work on account providers
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountProviderExtensions.RefreshAuthenticationStateAsync(Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountProvider,System.Threading.CancellationToken)">
            <summary>
            Goes through all the accounts in the account store associated with this provider and determines if they need re-authentication,
             trying to refresh those that do need it. If that doesn't work, sets NeedsReauthentication flag on the expired accounts.
            It also clears the flag on the accounts that are valid.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <exception cref="T:System.OperationCanceledException">may be thrown if <paramref name="cancellationToken"/> is cancelled</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountsProcessedEventArgs">
            <summary>
            This event indicates when any account processing currently in progress finishes
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountsProcessedEventArgs.#ctor(System.Collections.Generic.IList{System.Exception})">
            <summary>
            Constructor
            </summary>
            <param name="exceptions"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountsProcessedEventArgs.#ctor(System.Boolean,System.Collections.Generic.IList{System.Exception})">
            <summary>
            Account processing event
            </summary>
            <param name="skipped">Was account processing skipped due to there being no changes to process</param>
            <param name="exceptions">Were there any exceptions during account processing</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountsProcessedEventArgs.Skipped">
            <summary>
            Get or sets a value indicating whether or not the processing task was skipped, likely due to there being no cache changes between this call and the last call.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountsProcessedEventArgs.Exceptions">
            <summary>
            What exceptions happened during account processing.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.ScopeInfo">
            <summary>
            Contains information about how an account should be scoped.
            This will contain one scope element which is either a tenantId guid or a domain name which will 
            be converted to a tenantId at a later point. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.ScopeInfo.Domain">
            <summary>
            A domain to scope an account to
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.ScopeInfo.TenantId">
            <summary>
            A tenantId to scope the account to
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.ScopeInfo.UpdateTenantIdForDomain(System.Guid)">
            <summary>
            After we transform a domain to a tenantId we need to update the scope info with the tenantId guid
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.TenantInformation">
            <summary>
            Internal structure to contain the information about a tenant
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.TenantInformation.UniqueIds">
            <summary>
            Set of uniqueId's that belong to a tenant. Normally this is only one. But if we are authenticating an MSA that is a dual headed 
            account we will get get one from live and one from AAD.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.TenantInformation.TenantId">
            <summary>
            TenantId guid from ADAL
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.TenantInformation.FriendlyName">
            <summary>
            The friendly name of the tenant if it is available. If the tenant came from a filter
            this will be empty. If it came from VSO it will normally have a friendly anme
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.TenantInformation.IsOwned">
            <summary>
            Is the tenant owned by this account. This list comes from VSO
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider">
            <summary>
            Provides access tokens from microsoft powered accounts such as MSA and Work/School accounts. 
            There are two sets of access tokens availiable from this provider, Session tokens to communicate with VSO, and AdalTokens to communicate with AAD.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.EmailAddressKeyName">
            <summary>
            Key for adding email address to the exception data.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AccountProviderIdentifier">
            <summary>
            The unique guid to identify this account provider.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.PersonalizationAccountPropertyName">
            <summary>
            This property if set to true indicates this is the personalization account. This needs to be set by visual studio after signing in and after signing out
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.IsMSAPropertyName">
            <summary>
            This is a property indicating if the account is an MSA account or not
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AdalSigninExtraQueryParameters">
            <summary>
            Extra sign in query parameters for use with the adal sign in dialog
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.DeleteTokenCacheItem">
            <summary>
            Delegate to delete items from the token cache used for unit testing.
            </summary>
            <param name="item">Item to delete</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.TryGetSelfAsync">
            <summary>
            Delegate for getting the tenant infomation from VSO
            </summary>
            <param name="errors">Any exceptions that happen during the retreival of the tenant information</param>
            <param name="tenantId">TenentId to request access to the VSO endpoint with</param>
            <param name="uniqueId">UniqueId to request access to the VSO endpoint with</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.GetWrappedItemsFromCache">
            <summary>
            Delegate for unit testing to provide a certain state to what tokens have been added during a addNewAccount processing flow.
            </summary>
            <param name="adalCache">Adal cache</param>
            <param name="items">Current items from the cache</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AcquireAdalTokenSilently">
            <summary>
            A delegate for synchronously acquiring ADAL access token silently without a prompt.
            </summary>
            <param name="adalCache">ADAL cache, not null.</param>
            <param name="tenantId">Tenant ID, not null.</param>
            <param name="identifier">User identifier, not null.</param>
            <param name="resource">Resource to get the access token for, not null.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AcquireAdalTokenSilentlyAsync">
            <summary>
            An delegate for asynchronously acquiring ADAL access token silently without a prompt.
            </summary>
            <param name="adalCache">ADAL cache, not null.</param>
            <param name="userIdTenantIdPair">A key value pair of User Unique ID -> Tenant ID</param>
            <param name="resource">Resource to get the access token for, not null.</param>
            <returns>A task that returns true if the token is acquired; Otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AcquireAdalTokenWithUI">
            <summary>
            A delegate for acquiring acquiring ADAL access token synchronously with a prompt. 
            </summary>
            <param name="parentWindowHandle">Pointer to parent the sign in window to</param>
            <param name="identifier">Identifier to get an access token for</param>
            <param name="tenantId">Tenant to get the access token for</param>
            <param name="account">Account to get the access token for</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AccountHomeTenantPropertyName">
            <summary>
            This is the tenantId of the home tenant for the user. This is a GUID and its friendly name can be looked up in the TenantIdToNameMap property
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AccountIdentityProviderProperty">
            <summary>
             The name of the identity provider used to authenticate the account, this is set when the account is created.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AccountTenantInformationPropertyName">
            <summary>
            This is an internal property that contains the tenant information for the account
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.ScopesPropertyName">
            <summary>
            This is an internal property that contains the scope information for the account
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.DisableMsaFedQueryParameter">
            <summary>
            A query parameter that tells AAD that we do not want to use the MSA login in screen. This forces users onto the work or school account screen
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.LiveDomainHintQueryParameter">
            <summary>
            A query parameter that tells AAD that we would like to authenticate with live.com. This also works with PPE so we do not need a different address for that.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AzureRMAPIVersion">
            <summary>
            API version to use with the AzureRM endpoint
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.GraphEndpointApiVersion">
            <summary>
            API version to use with the graph endpoint
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AdalSilentRetryCount">
            <summary>
            Number of times we should retry a silent adal token acquisition
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.EmptyGuidList">
            <summary>
            Empty read only list of guid
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AdalExtraQueryParameterstRegistryOverride">
            <summary>
            Extra query parmeters which have been overriden from the registry
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.adalCache">
            <summary>
            Adal cache that persists the data to disk
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.sessionTokenStore">
            <summary>
            Session token storage which stores session tokens for each of the accounts
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.logger">
            <summary>
            Logger used to log information back to consumers of the account provider such as visual studio
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.accountStore">
            <summary>
            Account store which allows the modification of the account portion of the keychain
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.defaultProviderImage">
            <summary>
             Image which will be set as the provider image on the account when a new account is created
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.msaAccountLogo">
            <summary>
            Image which will be set as the account image on the account when an account is an MSA account
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.instanceName">
            <summary>
            Instance name from the account provider to make our mutex be different for different root suffixes of vs
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.vsoSelf">
            <summary>
            Identity which uses VSO to get the identity
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.azureRMSelf">
            <summary>
            Identity which uses Azure RM to get identity
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.Configuration">
            <summary>
            Configuration endpoints and data used to access active directory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.ADALEndpoint">
            <summary>
            The endpoint we use to talk to ADAL when making a connection for add accounts and getting access tokens
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.GetSelfIdentity">
            <summary>
            Delegate to get the tenant information from VSO
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.GetAdalCacheWrappedItems">
            <summary>
            Delegate to get the set of ADAL cache lists used to determine which new tokens have been added
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AcquireAdalTokenNoPrompt">
            <summary>
            Delegate to acquire an ADAL token with NO prompt
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AcquireAdalTokenNoPromptAsync">
            <summary>
            Gets or sets a delegate for asynchronously acquiring ADAL access token.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AcquireAdalTokenWithPrompt">
            <summary>
            Delegate to synchronously acquire an ADAL token with a prompt.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.GetQueryParameterCultureInfoFunc">
            <summary>
            Internal for dependency injection during tests. DO NOT USE.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AdalExtraQueryParametersOverride">
            <summary>
            Extra query parameters for the add account adal call
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.MsaHomeTenantId">
            <summary>
            The MSA home tenantId
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AccountProviderId">
            <summary>
            Get the unique guid identifier for this account provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AccountStore">
            <summary>
            Gets and sets the account store for this account provider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.#ctor(System.String)">
            <summary>
            Create an account provider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.#ctor(Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.TryGetSelfAsync,Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.TryGetSelfAsync,Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.GetWrappedItemsFromCache,Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AcquireAdalTokenSilently,Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AcquireAdalTokenWithUI,Microsoft.VisualStudio.Services.Client.Keychain.SessionTokenStorage,Microsoft.VisualStudio.Services.Client.AccountManagement.Logging.ILogger)">
            <summary>
            Create an account provider
            </summary>
            <param name="self">Delegate to get tenant info</param>
            <param name="cacheLists">Delegate to initialize the lists used to determine which new tokens have been added or not from the ADAL cache</param>
            <param name="acquireAdalTokenSilently">Delegate to acquire an ADAL token silently</param>
            <param name="acquireAdalTokenWithUI">Delegate to acquire an ADAL token with UI</param>
            <param name="sessionTokenStorage">SessionToken storage location</param>
            <param name="logger">logger to log information back to a consumer of the account provider</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.SetAdalCache(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagerAdalCache)">
            <summary>
            Set the ADAL cache on the account provider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.ProcessAuthenticationResult(Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult)">
            <summary>
            Given an authentication result from an adal acquire token call look up the cache item in the adal cache and see if we need to add a new account based on that item.
            </summary>
            <param name="authenticationResult"></param>
            <returns>the unique Id of the added account</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.ProcessAuthenticationResult(Microsoft.VisualStudio.Services.Client.Keychain.AdalCache.AuthenticationResultWrapper)">
            <summary>
            Given an authentication result from an adal acquire token call look up the cache item in the adal cache and see if we need to add a new account based on that item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.GetWrappedCacheItems(Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache)">
            <summary>
            Given a token cache read through the items and wrap them in our tokencacheitem wrapper. This is done for unit testing purposes
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.GetUniqueIdTenantIdForMissingOrExpiredTokens(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Services.Client.AccountManagement.TenantInformation})">
            <summary>
            Enumerates unique ID -> tenant ID pairs from <paramref name="tenantInformation"/> without good access tokens in the ADAL cache.
            </summary>
            <returns>
            Enumeration of unique ID -> tenant ID pairs based on account's GetUniqueIdTenantIdMap().
            May be null if <paramref name="tenantInformation"/> is null; Otherwise, not null.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.GetUniqueIdTenantIdForMissingOrExpiredTokens(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Services.Client.AccountManagement.TenantInformation},System.Collections.Generic.List{Microsoft.VisualStudio.Services.Client.AccountManagement.TokenCacheItemWrapper})">
            <summary>
            Enumerates unique ID -> tenant ID pairs from <paramref name="tenantInformation"/> without good access tokens in the ADAL cache.
            </summary>
            <param name="currentItems">Current cache items. Not null.</param>
            <returns>
            Enumeration of unique ID -> tenant ID pairs based on account's tenant information.
            May be null if <paramref name="tenantInformation"/> is null; Otherwise, not null.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AllTenantsHaveMissingOrExpiredTokens(Microsoft.VisualStudio.Services.Client.AccountManagement.Account)">
            <summary>
            Gets a value indicating whether all tenants on <paramref name="account"/> have missing or expired tokens,
            or the <paramref name="account"/> doesn't have tenants at all.
            </summary>
            <param name="account">Account to check, not null.</param>
            <returns>True if the <paramref name="account"/> doesn't have tenants or all its tenants have expired or missing tokens; Otherwise, false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AllTenantsHaveMissingOrExpiredTokens(Microsoft.VisualStudio.Services.Client.AccountManagement.Account,System.Collections.Generic.List{Microsoft.VisualStudio.Services.Client.AccountManagement.TokenCacheItemWrapper})">
            <summary>
            Gets a value indicating whether all tenants on <paramref name="account"/> have missing or expired tokens,
            or the <paramref name="account"/> doesn't have tenants at all.
            </summary>
            <param name="account">Account to check, not null.</param>
            <param name="currentItems">Current ADAL cache items with access tokens, not null.</param>
            <returns>True if the <paramref name="account"/> doesn't have tenants or all its tenants have expired or missing tokens; Otherwise, false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.GetAccountNeedsReauthenticationAsync(Microsoft.VisualStudio.Services.Client.AccountManagement.Account,System.Threading.CancellationToken)">
            <summary>
            Gets a value indicating whether the <paramref name="account"/> needs reauthentication, doesn't need it, or if its auth status is not clear.
            </summary>
            <param name="account">Account to check, not null.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A task that returns true if the <paramref name="account"/> needs re-authentication,
            false if it doesn't need it, and null if it is not clear.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AcquireAdalTokenSilent(Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.IAadProviderConfiguration,Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagerAdalCache,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier,System.String)">
            <summary>
            Acquires ADAL access token silently without a prompt.
            </summary>
            <param name="adalCache">ADAL cache, not null.</param>
            <param name="tenantId">Tenant ID, not null.</param>
            <param name="identifier">User identifier, not null.</param>
            <param name="resource">Resource to get the access token for, not null.</param>
            <returns>UserInfo.UniqueId if the token is acquired; Otherwise, null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AcquireAdalTokenSilentAsync(Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.IAadProviderConfiguration,Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagerAdalCache,System.Collections.Generic.KeyValuePair{System.String,System.String},System.String)">
            <summary>
            Asynchronously acquires an ADAL access token silently without a prompt.
            </summary>
            <param name="adalCache">ADAL cache, not null.</param>
            <param name="userIdTenantIdPair">A key value pair of User Unique ID -> Tenant ID</param>
            <param name="resource">Resource to get the access token for, not null.</param>
            <returns>A task that returns true if the token is acquired; Otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.IsPossibleNewAccount(Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem,System.Collections.Generic.HashSet{System.String})">
            <summary>
             Check the item to see if it matches an existing account.
             To determine if the item represents a new account we check to see if there is a matching uniqueId. If there is then the item is not new. However if
             the uniqueId is null then we cannot tell based on uniqueId alone and need to consider it a possible new account until proven otherwise
             by calling the VSO API to get a definitive answer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.IsPossibleNewAccount(Microsoft.VisualStudio.Services.Client.AccountManagement.TokenCacheItemWrapper,System.Collections.Generic.HashSet{System.String})">
            <summary>
            To allow testing of the operations on the cache item we need to wrap them
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.GetAdalUniqueIds(System.Collections.Generic.List{System.Exception},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Services.Client.AccountManagement.Account})">
            <summary>
            Get the unique list of uniqueId which are on existing account objects
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AcquireAdalTokenAsync(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier,System.IntPtr,Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Acquires an adal token asynchronously. There are two parts to the call. The first part is a browser dialog which will be launched and make take some time
            after the browser dialog is closed the rest of the method is async.
            </summary>
            <param name="parentWindowHandle">Parent windows handle</param>
            <param name="tenantId">tenant to get token for</param>
            <param name="identitifer">User identifier to get token for</param>
            <param name="resource">resource to get token for</param>
            <param name="accountForReAuthentication">Account to be used during reauthentication, if this must not be null if prompting is required</param>
            <param name="prompt">Should a prompt be displayed if no token could be retrieved</param>
            <param name="cancellationToken"></param>
            <returns>Authentication result</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AcquireAdalTokenAsync(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier,Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Acquires an adal token asynchronously. This method will try and acquire an adal token silently asynchronously. However, if prompt true is passed in then there will be two parts to the call. The first part is a browser dialog which will be launched and may take some time
            after the browser dialog is closed the rest of the method is async.
            </summary>
            <param name="resource">resource to get token for</param>
            <param name="context">Existing adal context</param>
            <param name="identitifer">User identifier to get token for</param>
            <param name="accountForReAuthentication">Account to be used during reauthentication, if this must not be null if prompting is required</param>
            <param name="prompt">Should a prompt be displayed if no token could be retrieved</param>
            <param name="extraQueryParameters">Extra query parameters to pass to the login dialog</param>
            <param name="cancellationToken"></param>
            <returns>Authentication result</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.GetSessionTokenFromAccountAsync(Microsoft.VisualStudio.Services.Client.AccountManagement.Account,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get a VSO session token based on an account from this account provider.
            </summary>
            <param name="account">Account to get the session token for</param>
            <param name="scope">The scope for the session token. An empty value indicates an unscoped token is required.</param>
            <param name="forceRefresh">Should any cache of tokens be ignored and a new token is retreived from the server</param>
            <param name="cancellationToken">cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.RefreshAuthenticationStateAsync(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey,System.Threading.CancellationToken)">
            <summary>
            Determines if the account needs re-authentication and updates its NeedsReauthentication status.
            </summary>
            <param name="accountKey">AccountKey which representes the account to refresh, not null. It must be supported by this account provider.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task that tracks the operation. Not null.</returns>
            <exception cref="T:System.ArgumentNullException">thrown if <paramref name="account"/> is null.</exception>
            <exception cref="T:System.ArgumentException">thrown if <paramref name="account"/> is not supported by the account provider.</exception>
            <exception cref="T:System.OperationCanceledException">may be thrown if <paramref name="cancellationToken"/> is cancelled</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.CreateAccountWithUIAsync(System.IntPtr,System.Threading.CancellationToken)">
            <summary>
            Create a new account using this account provider.
            This will show a login dialog initially and then be asynchronous after that point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.FindAccount(Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)">
            <summary>
            Finds an account by user's <paramref name="userIdentifier"/> or returns null if it's not found.
            </summary>
            <param name="uniqueId">User's unique id to look for. May be null or empty.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.InitializeAsync(Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountStore)">
            <summary>
            Initialize the vs account provider with an account store
            </summary>
            <param name="store"></param>
            <returns>Task which will complete when the store is initialized</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AuthenticateAccountWithUIAsync(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey,System.IntPtr,System.Threading.CancellationToken)">
            <summary>
            Authenticate an account. This has two parts. First is a sign in dialog which will be launched and waited upon. After the 
            dialog is closed the rest of the method is async.
            </summary>
            <param name="accountKey">Account to authenticate</param>
            <param name="parentWindowHandle">parent windows handle</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>An added account</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.FindAccount(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey,System.Boolean)">
            <summary>
            Retrieve an account from an account key
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AuthenticateAndApplyScopeWithUIAsync(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey,System.IntPtr,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Services.Client.AccountManagement.ScopeInfo},System.Threading.CancellationToken)">
            <summary>
            Authenticate an account and apply a scoping filter to the account. This has two parts. First is a sign in dialog which will be launched and waited upon. After the 
            dialog is closed the rest of the method is async.
            </summary>
            <param name="accountKey">Account to authenticate</param>
            <param name="parentWindowHandle">parent windows handle</param>
            <param name="scopes">Scopes to filter the account to</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>An added account</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.ClearScopes(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey)">
            <summary>
            Clear any scoping filter on the account
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.RefreshDisplayInfoAsync(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey,System.Threading.CancellationToken)">
            <summary>
            Refreshes the display info on the account. 
            </summary>
            <param name="accountKey">AccountKey which represents the account to refresh teh display info on</param>
            <param name="cancellationToken">Cancell the refresh operation</param>
            <returns>The account with the refreshed information</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.GetTenantInformation(Microsoft.VisualStudio.Services.Client.AccountManagement.Account)">
            <summary>
            Get the tenant information data off of an account
            </summary>
            <param name="account"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.GetTenantsInScope(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey)">
            <summary>
            Get tenants in scope for an account. If the account cannot be found an argument exception will be thrown.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.GetHomeTenantInfo(Microsoft.VisualStudio.Services.Client.AccountManagement.AccountKey)">
            <summary>
            Gets the tenant information for the home tenant of the account. This will return a tenantInformation structure even if the home tenant is not in the scope of the account.
             If the account cannot be found an argument exception will be thrown.
             If no home tenand could be found null is returned
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider.AcquireTokenLogEvent.Logger">
            <summary>
            Internal for testing only. DO NOT USE.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountExtensions.GetIdentityProviderProperty(Microsoft.VisualStudio.Services.Client.AccountManagement.Account)">
            <summary>
            Returns the value of the identity provider used for this account.
            </summary>
            <returns>The identity provider. This may be null, a guid(in string format), or some name</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountExtensions.SetPersonalizationAccount(Microsoft.VisualStudio.Services.Client.AccountManagement.Account,Microsoft.VisualStudio.Services.Client.AccountManagement.IAccountStore)">
            <summary>
            Returns the value of the identity provider used for this account.
            </summary>
            <returns>The identity provider. This may be null, a guid(in string format), or some name</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountExtensions.IsPersonalizationAccount(Microsoft.VisualStudio.Services.Client.AccountManagement.Account)">
            <summary>
            Returns the value of the identity provider used for this account.
            </summary>
            <returns>The identity provider. This may be null, a guid(in string format), or some name</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.AccountManagement.AccountExtensions.GetHomeTenantId(Microsoft.VisualStudio.Services.Client.AccountManagement.Account)">
            <summary>
            Gets the tenantId of the home tenant for the user of this account. 
            This may be null if no home tenant is found
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Keychain.AdalCache.AuthenticationResultWrapper">
            <summary>
            Wrapper to wrap the authentication result to allow for unit testing since we cannot directly instantiate an authenticationresult.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Keychain.Logging.DiagnosticsLoggingMessageSeverity">
            <summary>
            What is the severity of the diagnostics logging event
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Keychain.SessionCounterManager">
            <summary>
            This mananger is responsible for incrementing the IE QueryNetSessionCount once when EnsureSessionCounterSet is called
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Keychain.SessionCounterManager.EnsureSessionCounterSet">
            <summary>
            Set the session counter if it is not set. This can be called multiple times but will only 
            increment the counter once.
            </summary>
            <remarks>
            From MSDN (http://msdn.microsoft.com/en-us/library/ie/dn720860(v=vs.85).aspx):
            The net session count tracks the number of instances of the web browser control.
            When a web browser control is created, the net session count is incremented. When the control
            is destroyed, the net session count is decremented. When the net session count reaches zero,
            the session cookies for the process are cleared. SetQueryNetSessionCount can be used to prevent
            the session cookies from being cleared for applications where web browser controls are being created
            and destroyed throughout the lifetime of the application. (Because the application lives longer than
            a given instance, session cookies must be retained for a longer periods of time.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Keychain.SessionTokenPair.GetTokenPair(System.String)">
            <summary>
            It will create new token pair object based on the token value data in storage
            Previously we were storing only self describing token in storage so for 
            backward compatibility reasons, first it tries to deserialize the object,
            if he couldn't deserialize it, he will assume the token value itself a selfdescribing
            token and will create token pair object without compact token value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Keychain.SessionTokenStorage">
            <summary>
            This class allows the acquisition and storage of session tokens which can be used to talk to visual studio online accounts.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Keychain.SessionTokenStorage.#ctor(Microsoft.VisualStudio.Services.Client.AccountManagement.Logging.ILogger,Microsoft.VisualStudio.Services.Common.TokenStorage.VssTokenStorage,Microsoft.VisualStudio.Services.Client.Keychain.SessionTokenStorage.GetSessionTokenFromVSO)">
            <summary>
            Constructor used for internal testing
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Keychain.SessionTokenStorage.ClearAllSessionTokenStorage">
            <summary>
            Clear out any Session tokens from the token storage. Do not clear out other tokens which may be in there.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Keychain.SessionTokenStorage.GetSessionTokenFromAccountAsync(Microsoft.VisualStudio.Services.Client.AccountManagement.Account,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get a self describing session token from an account for a given scope
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Keychain.SessionTokenStorage.DoesSessionTokenRequireRefresh(System.DateTime,Microsoft.VisualStudio.Services.Common.TokenStorage.VssToken,System.String,System.Boolean@)">
            <summary>
            From a session token stored in vsstoken storage determine if the token has reached a point where 
            it should be refreshed. This can happen if the token is already expired or the token has reach a percentage of 
            its usefull life span. 
            
            The data as to how many days before the token needs to be refreshed is encoded as a property in the token and set 
            when the token is created or refreshed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Keychain.SessionTokenStorage.RefreshSessionTokensForAccountAsync(Microsoft.VisualStudio.Services.Client.AccountManagement.Account,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Given an account refresh any session tokens which are already in token storage that are in need of refreshing
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.Keychain.SessionTokenStorage.GetScopesFromTokenStorage(Microsoft.VisualStudio.Services.Client.AccountManagement.Account,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Services.Client.Keychain.SessionTokenDescriptor},System.Boolean,System.Collections.Generic.IDictionary{Microsoft.VisualStudio.Services.Client.Keychain.SessionTokenDescriptor,System.String},System.Collections.Generic.HashSet{Microsoft.VisualStudio.Services.Client.Keychain.SessionTokenDescriptor})">
            <summary>
            Go through token storage for the list of scopes we would like to get tokens for and see if they are in token storage and have enough lifetime such that 
            they do not need to be refreshed. The scopesAndTokenValues dictionary will contain scopes and their session tokens if they are found in token storage.
            This will include tokens that are fresh and those that need to be refreshed. The reason is that the tokens may have enough lifetime on them to be used even if they are passed
            their refresh date. We will also check to see which scopes need to be refreshed. This will be passed back in the scopedNeedingRefreshing. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.AadProviderConfiguration">
            <summary>
            Configuration information used by an account provider when creating an account
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.AadProviderConfiguration.AadAuthorityBase">
            <summary>
            Gets the base URI for the AAD authority
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.AadProviderConfiguration.ValidateAadAuthority">
            <summary>
            Gets whether or not the Aad Authority be validated.  
            If a given authority is not in the pre-approved list then validation will need to be turned off in order to use it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.AadProviderConfiguration.AzureRMIdentityEnabled">
            <summary>
            Gets the value indicating if we should use the VSO code or the azure resource manager way of getting the tenant information through the ARM endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.AadProviderConfiguration.ClientIdentifier">
            <summary>
            Gets the client client identifier to use to represent the current application within the selected AAD instance
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.AadProviderConfiguration.NativeClientRedirect">
            <summary>
            Gets the native client redirect URI to use that goes along with the ClientIdentifier
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.AadProviderConfiguration.ResourceEndpoint">
            <summary>
            Gets the default resource to use when retrieving tokens against the authority
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.AadProviderConfiguration.AzureResourceManagementEndpoint">
            <summary>
            Gets the azure resource management endpoint to use which matches with the AAD authority. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.AadProviderConfiguration.GraphEndpoint">
            <summary>
            Gets the graph endpoint to use which matches with the AAD authority. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.IAadProviderConfiguration">
            <summary>
             What configuration is used to configure an AAD account provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.IAadProviderConfiguration.AzureRMIdentityEnabled">
            <summary>
            Is this provider using azureRM identity or another identity
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.IAadProviderConfiguration.AadAuthorityBase">
            <summary>
            Base URI for the AAD authority
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.IAadProviderConfiguration.ValidateAadAuthority">
            <summary>
            Should the Aad Authority be validated.  
            If a given authority is not in the pre-approved list then validation will need to be turned off in order to use it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.IAadProviderConfiguration.ClientIdentifier">
            <summary>
            The client client identifier to use to represent the current application within the selected AAD instance
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.IAadProviderConfiguration.NativeClientRedirect">
            <summary>
            The native client redirect URI to use that goes along with the ClientIdentifier
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.IAadProviderConfiguration.ResourceEndpoint">
            <summary>
            The default resource to use when retrieving tokens against the authority
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.IAadProviderConfiguration.AzureResourceManagementEndpoint">
            <summary>
            The azure resource management endpoint to use which matches with the AAD authority. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.IAadProviderConfiguration.GraphEndpoint">
            <summary>
            The graph endpoint to use which matches with the AAD authority. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.Keychain.VSProvider.IAadProviderConfiguration.AzureRMAudienceEndpoint">
            <summary>
            Uri to use when requesting access tokens to the AzureRMEndpoint
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.LocationCacheManager">
            <summary>
            This class is responsible for managing both the in-memory and disk cache
            for the location service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationCacheManager.#ctor(System.Guid,System.Guid,System.Uri)">
            <summary>
            Creates a new cache manager for the serverGuid passed in.
            </summary>
            <param name="serverGuid"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.LocationCacheManager.LocalCacheAvailable">
            <summary>
            True if there is a cache on disk available for this server
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.LocationCacheManager.CacheDataExpired">
            <summary>
            Whether or not the cached data has expired (and should be refreshed)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationCacheManager.RemoveServices(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Services.Location.ServiceDefinition},System.Int32)">
            <summary>
            Removes services from both the in-memory cache and the disk cache.
            </summary>
            <param name="serviceDefinitions">The service definitions to remove.</param>
            <param name="lastChangeId">The lastChangeId the server returned when
            it performed this operation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationCacheManager.GetAccessMapping(System.String)">
            <summary>
            Returns the access mapping for the provided moniker.
            </summary>
            <param name="moniker">The moniker of the access mapping to 
            return.</param>
            <returns>The access mapping for the provided moniker or null
            if an access mapping for the monike doesn't exist..</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationCacheManager.TryFindService(System.String,System.Guid,Microsoft.VisualStudio.Services.Location.ServiceDefinition@)">
            <summary>
            Returns the service definition for the service with the 
            provided service type and identifier.  Null will be returned
            if there is no entry in the cache for this service.
            </summary>
            <param name="serviceType">The service type we are looking for.</param>
            <param name="serviceIdentifier">The identifier for the specific
            service instance we are looking for.</param>
            <returns>The service definition for the service with the 
            provided service type and identifier.  Null will be returned
            if there is no entry in the cache for this service.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationCacheManager.FindServices(System.String)">
            <summary>
            Finds all services with the provided service type.
            </summary>
            <param name="serviceType">The service type we are looking for.</param>
            <returns>All of the service definitions with the serviceType that
            are in the cache or null if none are in the cache.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationCacheManager.LoadServicesData(Microsoft.VisualStudio.Services.Location.LocationServiceData,System.Boolean)">
            <summary>
            Loads the service data into the in-memory cache and writes the values to disk.
            </summary>
            <param name="locationServiceData">The data to write to the cache.</param>
            <returns>Copies of the service definitions created by this load</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.LocationCacheManager.AccessMappings">
            <summary>
            Returns the AccessMappings that this location service cache knows about.
            Note that each time this property is accessed, the list is copied and
            returned.  
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationCacheManager.RemoveAccessMapping(System.String)">
            <summary>
            Removes the access mapping with the provided access mapping moniker
            and all of the location mapping entries that have this access
            zone.
            </summary>
            <param name="moniker">The moniker of the access mapping to remove.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationCacheManager.AddCachedMiss(System.String,System.Guid,System.Int32)">
            <summary>
            Adds a cached miss to the location service data, if the last change ID presented
            matches the current value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationCacheManager.GetLastChangeId">
            <summary>
            Returns the id of the last change that this cache is aware of.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationCacheManager.GetCacheExpirationDate">
            <summary>
            Returns the time of the cache expiration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationCacheManager.EnsureDiskCacheLoaded">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationCacheManager.m_fileSystemWatcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationCacheManager.WriteCacheToDisk">
            <summary>
            Writes the cache to disk.  Callers of this function should have a writer
            lock.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.LocationCacheManager.ClientCacheTimeToLive">
            <summary>
            This setting controls the amount of time before the cache expires
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.LocationCacheManager.m_services">
            <summary>
            This is the set of services available from this service location
            service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.LocationCacheManager.m_cachedMisses">
            <summary>
            This is the set of services that have been queried since our last update
            from the server that we know don't exist.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.LocationCacheManager.m_accessMappings">
            <summary>
            Keeps track of all access mappings that have been given to us by the server.
            The key is their identifier.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.LocationCacheManager.m_lastChangeId">
            <summary>
            Keeps track of the lastChangeId for the last change that was put in this cache.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.LocationCacheManager.m_cacheExpirationDate">
            <summary>
            The time after which the local cache data is invalid. This is used to prematurely expire the client cache
            even if we don't know (yet) whether or not the server changed. By expiring the client cache we
            can ensure that clients will be forced to check for server updates periodically rather than relying on the
            client cache indefinitely in the degenerate case where no client tools ever explicitly call Connect() (such as tf.exe)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.LocationCacheManager.m_accessLock">
            <summary>
            This is used to protect the services in-memory store.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.LocationCacheManager.s_cacheMutex">
            <summary>
            Only let one process write to a cache at a time.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.LocationCacheManager.m_cacheLocallyFresh">
            <summary>
            This object is used to keep track of whether or not our cache is fresh
            with respect to what we have on disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.LocationCacheManager.m_cacheAvailable">
            <summary>
            This is true if we do not have access to the cache file
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.LocationCacheManager.m_fileSystemWatcher">
            <summary>
            This is used to watch for others changing our cache so we can respond to 
            those changes
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.LocationCacheManager.m_clientAccessMapping">
            <summary>
            The two calculated access mappings that this manager caches.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.LocationCacheManager.s_cacheFileName">
            <summary>
            persistent cache file name values
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.LocationCacheManager.s_docStartElement">
            <summary>
            xml document related constants
            </summary>           
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.ServerMapData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ServerMapData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ServerMapData.#ctor(System.Guid,System.Guid)">
            <summary>
            
            </summary>
            <param name="serverId"></param>
            <param name="serviceOwner"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.ServerMapData.ServerId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.ServerMapData.ServiceOwner">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationServerMapCache.ReadServerLocation(System.Guid,System.Guid)">
            <summary>
            Finds the location for the specified guid.  If it is not found, null
            is returned.
            </summary>
            <param name="serverGuid">The server instance id associated with the
            desired location service url.</param>
            <returns>The location of the location service for this server or null
            if the guid is not found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationServerMapCache.ReadServerData(System.String)">
            <summary>
            
            </summary>
            <param name="location"></param>
            <returns>The guid for this location or Guid.Empty if the location
            does not have an entry.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationServerMapCache.EnsureServerMappingExists(System.String,System.Guid,System.Guid)">
            <summary>
            If this call is not a change, nothing will be done.
            </summary>
            <param name="location"></param>
            <param name="serverId"></param>
            <param name="serviceOwner"></param>
            <returns>True if this is the first time the mapping was written.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationServerMapCache.TryWriteMappingToDisk(System.String,System.Guid,System.Guid,System.Boolean)">
            <summary>
            Writes the mapping to disk if the cache is available.
            </summary>
            <param name="location"></param>
            <param name="serverGuid"></param>
            <param name="isNew"></param>
            <returns>True if the write succeeded</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.LocationServerMapCache.s_cacheFreshLocally">
            <summary>
            This is used to keep track of whether or not our in-memory cache is fresh with regards
            to our persistent cache on disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.LocationServerMapCache.s_cacheUnavailable">
            <summary>
            This is true if we do not have access to the cache file
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationXmlOperator.#ctor(System.Boolean)">
            <summary>
            This is to be used for reading in an xml file that contains service definitions that
            have to be loaded during install
            </summary>
            <param name="isClientCache">True if the parser is parsing xml from a client cache</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationXmlOperator.ReadServices(System.Xml.XmlDocument,System.Collections.Generic.Dictionary{System.String,Microsoft.VisualStudio.Services.Location.AccessMapping})">
            <summary>
            Reads the service definitions from the provided document. 
            For a specification of what the xml should look like, see the 
            corresponding Write method.
            </summary>
            <param name="document">The document to read from.</param>
            <returns>A list of service definitions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationXmlOperator.ReadAccessMappings(System.Xml.XmlDocument)">
            <summary>
            Reads the access mappings from the provided document. 
            For a specification of what the xml should look like, see the 
            corresponding Write method.
            </summary>
            <param name="document">The document to read from.</param>
            <returns>A list of access mappings.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationXmlOperator.ReadLastChangeId(System.Xml.XmlDocument)">
            <summary>
            Reads the last change id from the provided document. 
            For a specification of what the xml should look like, see the 
            corresponding Write method.
            </summary>
            <param name="document">The document to read from.</param>
            <returns>The last change id.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationXmlOperator.WriteLastChangeId(System.Xml.XmlNode,System.Int32)">
            <summary>
            Writes the lastChangeId to the provided document in the form
            <LastChangeId>value</LastChangeId>
            </summary>
            <param name="documentNode">The document to write to.</param>
            <param name="lastChangeId">The value to write.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationXmlOperator.WriteAccessMappings(System.Xml.XmlNode,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Services.Location.AccessMapping})">
            <summary>
            Writes the access mapping information to the provided document in the form:
            <AccessMappings>
                <AccessMapping>
                    <Moniker>value</Moniker>
                    <Enabled>value</Enabled>
                    <DisplayName>value</DisplayName>
                </AccessMapping>
            </AccessMappings>        
            </summary>
            <param name="documentNode">The document to write to.</param>
            <param name="accessMappings">The values to write.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationXmlOperator.WriteServices(System.Xml.XmlNode,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Services.Location.ServiceDefinition})">
            <summary>
            Writes service definition information to the provided document in the form:
            <Services>
                <ServiceDefinition>
                    <ServiceType>value</ServiceType>
                    <Identifier>value</Identifier>
                    <DisplayName>value</DisplayName>
                    <DefaultAccessMapping>value</DefaultAccessMapping>
                    <RelativePath relativeTo="value">value</RelativePath>
                    <LocationMappings>
                        <LocationMapping>
                            <AccessMapping>value</AccessMapping>
                            <Location>value</Location>
                        </LocationMapping>
                        .
                        .
                        .
                    </LocationMappings>
                </ServiceDefinition>
                .
                .
                .
            </Services>
            </summary>
            <param name="documentNode">The document to write to.</param>
            <param name="serviceDefintions">The values to write</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationXmlOperator.GetLocationServiceUrl(System.String)">
            <summary>
            Gets the location service url for the access mapping moniker provided.
            This function should be used to retrieve location service urls for access
            zones that were loaded by this LocationXmlController instance.
            </summary>
            <param name="moniker">The access mapping moniker.</param>
            <returns>The location service url for this access mapping moniker.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationXmlOperator.CheckXmlNodeNull(System.Xml.XmlNode,System.String,System.Xml.XmlNode)">
            <summary>
            Throws and exception if the node provided is null.
            </summary>
            <param name="node">The node to check.</param>
            <param name="nodeName">The name of the node to check.</param>
            <param name="parent">The parent node of the node we are checking.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationXmlOperator.CheckXmlNodeNullOrEmpty(System.Xml.XmlNode,System.String,System.Xml.XmlNode)">
            <summary>
            Throws an exception if the xml node is null or empty.
            </summary>
            <param name="node">The node we are checking.</param>
            <param name="nodeName">The name of the node we are checking.</param>
            <param name="parent">The parent node of the node we are checking.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.LocationXmlOperator.CheckXmlAttributeNullOrEmpty(System.Xml.XmlAttribute,System.String,System.Xml.XmlNode)">
            <summary>
            Throws exception if the attribute provided is null or empty
            </summary>
            <param name="attribute">The attribute we are checking.</param>
            <param name="attributeName">The name of the attribute we are checking.</param>
            <param name="element">The node that contains this attribute.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.LocationXmlOperator.m_accessMappingLocationServiceUrls">
            <summary>
            Maps access mapping monikers to location service urls
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.IVssServerDataProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.IVssServerDataProvider.HasConnected">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.IVssServerDataProvider.GetAuthorizedIdentityAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.IVssServerDataProvider.GetAuthenticatedIdentityAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.IVssServerDataProvider.ConnectAsync(Microsoft.VisualStudio.Services.WebApi.ConnectOptions,System.Threading.CancellationToken)">
            <summary>
            Performs all of the steps that are necessary for setting up a connection
            with a TeamFoundationServer.  Specify what information should be 
            returned in the connectOptions parameter.
            
            Each time this call is made the username for the current user 
            will be returned as well as the client zone that this client is making 
            requests from.
            </summary>
            <param name="connectOptions">Specifies what information that should be 
            returned from the server.</param>
            <param name="serviceTypeFilters">The service types to get information for.
            If service information is not requested in the connectOptions value, this
            parameter must be null.  To request
            all service definitions, pass "*" as the first and only entry in the array.
            To only request service information about the possible client zones, pass
            in an empty array.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.IVssServerDataProvider.DisconnectAsync(System.Threading.CancellationToken)">
            <summary>
            Reset the connection state back to disconnect
            The client must reconnect
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.VssServerDataProvider">
            <summary>
            This class provides data about the server via the LocationService.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.HasConnected">
            <summary>
            Returns true if this object has successfully authenticated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.GetAuthorizedIdentityAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the authorized user.  This function will authenticate with the server if it has
            not done so already.  Like any other regular method, it throws VssUnauthorizedException 
            if the server is contacted and authentication fails.
            </summary>
            <returns>The authenticated user.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.GetAuthenticatedIdentityAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the authenticated user.  This function will authenticate with the server if it has
            not done so already.  Like any other regular method, it throws VssUnauthorizedException 
            if the server is contacted and authentication fails.
            </summary>
            <returns>The authenticated user.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.InstanceId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.InstanceType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.GetInstanceIdAsync(System.Threading.CancellationToken)">
            <summary>
            The unique identifier for this server. This method will attempt to return
            a cached value, if possible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.GetInstanceTypeAsync(System.Threading.CancellationToken)">
            <summary>
            The unique identifier for the service owner. This property will attempt to return
            a cached value, if possible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.GetDefaultAccessMappingAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.GetClientAccessMappingAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.GetConfiguredAccessMappingsAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.GetAccessMappingAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="moniker"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.LocationForAccessMappingAsync(Microsoft.VisualStudio.Services.Location.ServiceDefinition,Microsoft.VisualStudio.Services.Location.AccessMapping,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="serviceDefinition"></param>
            <param name="accessMapping"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.LocationForCurrentConnectionAsync(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="serviceType"></param>
            <param name="serviceIdentifier"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.FindServiceDefinitionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="serviceType"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.FindServiceDefinitionAsync(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="serviceType"></param>
            <param name="serviceIdentifier"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.GetResourceLocationsAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="serviceOwner"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.CheckForServerUpdatesAsync(System.Threading.CancellationToken)">
            <summary>
            Consults the server to see if any services from the filter array have 
            changed.  It updates the cache with the new values.
            </summary>
            <param name="filterArray"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.EnsureConnectedAsync(Microsoft.VisualStudio.Services.WebApi.ConnectOptions,System.Threading.CancellationToken)">
            <summary>
            This function ensures that the connection data that is needed by the caller
            has been retrieved from the server.  This function does not use the 
            credentials provider if authentication fails.
            </summary>
            <param name="optionsNeeded">The options that designate the information the
            caller needs from the server.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.NeedToConnect(Microsoft.VisualStudio.Services.WebApi.ConnectOptions)">
            <summary>
            Returns true if we need to connect to the server.
            </summary>
            <param name="optionsNeeded"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.DisconnectAsync(System.Threading.CancellationToken)">
            <summary>
            Reset the connected state of the provider
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.m_baseUri">
            <summary>
            Passed in on construction. The Uris for the server we are connecting to.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.m_authenticatedIdentity">
            <summary>
            These are the values we are responsible for determining
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.m_connection">
            <summary>
            These handle talking to the web service and dealing with connection data
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.m_locationDataCacheManager">
            <summary>
            This object manages the location data cache
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Client.VssServerDataProvider.m_resourceLocations">
            <summary>
            Cache of the resource locations
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssAadSettings.ApplicationTenant">
            <summary>
            Application tenant either from a registry override or a constant
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.#ctor">
            <summary>
            Creates a new VssClientCertificateManager.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.Invalidate">
            <summary>
            Invalidates the cached data in the VssClientCertificateManager.
            Should be called after receiving a 403 on an https request, to pick up
            new client certificates if necessary.
            An invalidation is guaranteed to cause only one refresh.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.ClientCertificates">
            <summary>
            The set of client certificates held by this VssClientCertificateManager.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.Instance">
            <summary>
            Static instance of the VssClientCertificateManager.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.GetClientAuthCertificates(System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Given a store location, returns the certificates in the store which:
            a. Are valid given the current date and time
            b. Can be used for client authentication
            </summary>
            <param name="storeLocation">Store location from which to load certificates</param>
            <returns>The matching certificates from the store location</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.ReadDisableClientCertificates(System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Reads (from the registry) whether or not client certificates are disabled.
            </summary>
            <param name="machineOrUserLevel">Specifies HKLM vs. HKCU</param>
            <returns>True, false, or null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.ReadEffectiveDisableClientCertificates">
            <summary>
            Reads (from the registry) whether or not client certificates are disabled.
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.ReadEffectiveSpecifiedCertificateThumbprints">
            <summary>
            Reads (from the registry) the unified set of thumbprints specified by
            the environment variable, .config setting, registry (HKCU), and registry (HKLM).
            This method will not return duplicate thumbprints.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.ReadSpecifiedCertificateThumbprints(System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Reads (from the registry) the specified certificate thumbprints.
            Returns an empty array if no thumbprints are found.
            This method does not filter out duplicates.
            </summary>
            <param name="machineOrUserLevel">Specifies HKLM vs. HKCU</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.WriteDisableClientCertificates(System.Boolean,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Writes (to the registry) whether or not client certificates are disabled.
            </summary>
            <param name="disableClientCertificates">True to disable client certificates, false otherwise</param>
            <param name="machineOrUserLevel">Specifies HKLM vs. HKCU</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.WriteSpecifiedCertificateThumbprints(System.String[],System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Writes (to the registry) the specified certificate thumbprints.
            This method will filter out duplicate thumbprints.
            </summary>
            <param name="thumbprints">Thumbprints to write to the registry, or null for none</param>
            <param name="machineOrUserLevel">Specifies HKLM vs. HKCU</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.RefreshIfNeeded">
            <summary>
            Refreshes the certificates if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.Refresh">
            <summary>
            Loads the certificates from the certificate stores into the VssClientCertificateManager.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.SplitDelimitedString(System.String)">
            <summary>
            Splits a delimited string and never returns null.
            </summary>
            <param name="delimitedString">String to split, or null</param>
            <returns>Array of string splits</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.GetClientCertificateByThumbprint(System.String)">
            <summary>
            Given a certificate thumbprint (which is a SHA-1 hash in the form of a string),
            return the matching X.509 certificate from the certificate store. The certificate
            will only be returned if it is valid and supports client authentication.
            </summary>
            <param name="thumbprint">Thumbprint of the certificate to find</param>
            <returns>The X.509 certificate with the specified thumbprint</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.CertificateSupportsClientAuth(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Given an X.509 certificate, returns whether or not the certificate declares
            that it can be used for client authentication.
            </summary>
            <param name="certificate">X.509 certificate to check</param>
            <returns>True if the certificate can be used for client authentication; false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.IsPrivateKeyAvailable(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Int32@)">
            <summary>
            Determines if the private key of the certificate is currently
            accessible.
            </summary>
            <param name="toCheck">Certificate to check</param>
            <returns>True if the private key is available and the key can be used; false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.GetBooleanValue(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Reads a boolean value from the client certificates registry key.
            If there is no name/value pair with the given name, null is returned.
            This method does not throw if an error occurs; null is returned.
            </summary>
            <param name="name">Name of name/value pair</param>
            <param name="machineOrUserLevel">Specifies HKLM vs. HKCU</param>
            <returns>Value of name/value pair</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.GetStringValue(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Reads a string value from the client certificates registry key.
            If there is no name/value pair with the given name, null is returned.
            This method does not throw if an error occurs; null is returned.
            </summary>
            <param name="name">Name of name/value pair</param>
            <param name="machineOrUserLevel">Specifies HKLM vs. HKCU</param>
            <returns>Value of name/value pair</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientCertificateManager.WriteStringValue(System.String,System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Writes a string value to the client certificates registry key.
            If the value is null, the name/value pair is deleted from the registry.
            This method will throw if an error occurs.
            </summary>
            <param name="name">Name for name/value pair</param>
            <param name="value">Value for name/value pair</param>
            <param name="machineOrUserLevel">Specifies HKLM vs. HKCU</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.VssClientHttpRequestSettings">
            <summary>
            Provides access to common settings which control the behavior of requests for a <c>VssHttpClient</c> instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssClientHttpRequestSettings.MaxRetryRequest">
            <summary>
            Number of times to retry a request that has an ambient failure
            </summary>
            <remarks>
            This property is only used by VssConnection, so only relevant on the client
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssClientHttpRequestSettings.Default">
            <summary>
            Gets the default request settings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientHttpRequestSettings.EnsureDefaultSettings">
            <summary>
            Creates an instance of the default request settings.
            </summary>
            <returns>The default request settings</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.INotificationManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.INotificationManager.SubscribeAsync(Microsoft.VisualStudio.Services.Client.NotificationContext)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.VssClientNotificationManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientNotificationManager.Initialize(Microsoft.VisualStudio.Services.Client.VssConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssClientNotificationManager.SubscribeAsync(Microsoft.VisualStudio.Services.Client.NotificationContext,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.AsyncLock">
            <summary>
            From: http://blogs.msdn.com/b/pfxteam/archive/2012/02/12/10266988.aspx
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssConnection.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssConnection.Disconnect">
            <summary>  
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssConnection.GetService``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssConnection.GetServiceAsync``1(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssConnection.GetClient``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssConnection.GetClientAsync``1(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssConnection.GetClient(System.Type)">
            <summary>
            
            </summary>
            <param name="clientType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssConnection.GetClientServiceImplAsync(System.Type,System.Func{System.Type,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Object}},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="requestedType"></param>
            <param name="getInstanceAsync"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssConnection.GetClientInstanceAsync(System.Type,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="managedType"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssConnection.GetClientInstanceAsync(System.Type,System.Threading.CancellationToken,Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings,System.Net.Http.DelegatingHandler[])">
            <summary>
            
            </summary>
            <param name="managedType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssConnection.GetServiceInstanceAsync(System.Type,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="managedType"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssConnection.GetExtensibleType(System.Type)">
            <summary>
            
            </summary>
            <param name="managedType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssConnection.RegisterExtensibleType(System.String,System.Type)">
            <summary>
            Used for Testing Only
            </summary>
            <param name="typeName"></param>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssConnection.RegisterClientServiceInstance(System.Type,System.Object)">
            <summary>
            Used for Testing Only
            </summary>
            <param name="type"></param>
            <param name="instance"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssConnection.Uri">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssConnection.InnerHandler">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssConnection.DelegatingHandlers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssConnection.Credentials">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssConnection.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssConnection.ServerId">
            <summary>
            The Guid that identifies the server associated with the <c>VssConnection</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssConnection.AuthorizedIdentity">
            <summary>
            The Id of the identity who the calls to the server are being made for.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssConnection.AuthenticatedIdentity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssConnection.HasAuthenticated">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssConnection.ParentConnection">
            <summary>
            The connection to the parent host for this VSS connection. If this connection is to a collection host,
            then this property will return a connection to the account/tenant host.
            The property will return null if a parent cannot be located for the current connection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssConnection.ServerDataProvider">
            <summary>
            Used for testing. Do not use for product code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssConnection.ClientCacheDirectory">
            <summary>
            Directory containing the client cache files which resides below the settings directory.
            
            This will look something like this:
            C:\Documents and Settings\username\Local Settings\Application Data\Microsoft\VisualStudio Services\[s_version]\Cache
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.VssConnection.SafeGetFolderPath(System.Environment.SpecialFolder)">
            <summary>
            Gets folder path and returns null in case the special folder in question doesn't exist (useful when the user has never logged on, which makes
            GetFolderPath throw)
            </summary>
            <param name="specialFolder">Folder to retrieve</param>
            <returns>Path if available, null othewise</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssConnection.ClientSettingsDirectory">
            <summary>
            Directory containing the client settings files.
            
            This will look something like this:
            C:\Documents and Settings\username\Local Settings\Application Data\Microsoft\VisualStudio Services\[s_version]
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Client.VssConnection.ClientCacheTimeToLive">
            <summary>
            Defines the expiration interval for the location service client disk cache.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.IVssClientService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.IVssClientService.Initialize(Microsoft.VisualStudio.Services.Client.VssConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.DefaultServiceImplementationAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.ExtensibleServiceTypeNotRegisteredException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Client.ExtensibleServiceTypeNotValidException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.#cctor">
            Creates the resource manager instance.
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.Get(System.String)">
            Returns a localized string given a resource string name.
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.GetInt(System.String)">
            Returns a localized integer given a resource string name.
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.GetBool(System.String)">
            Returns a localized string given a resource string name.
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.Format(System.String,System.Object[])">
            A little helper function to alleviate some typing associated with loading resources and
            formatting the strings.  In DEBUG builds, it also asserts that the number of format
            arguments and the length of args match.
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.UnexpectedNavigation">
            <summary>
            Unexpected navigation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.UnexpectedNavigationToUrl">
             <summary>
             Precedes a URI in an exception message
            
             Unexpected navigation: 
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.GetServiceArgumentError(System.Object)">
            <summary>
            TF400776: &apos;{0}&apos; must be a non-abstract class with a parameterless or default constructor in order to use it as parameter &apos;T&apos; in GetService&lt;T&gt;().
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.ExtensibleServiceTypeNotRegistered(System.Object)">
            <summary>
            The service type &apos;{0}&apos; does not have a registered implementation or default implementation attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.ExtensibleServiceTypeNotValid(System.Object,System.Object)">
            <summary>
            &apos;{1}&apos; does not extend or implement the service type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.STAThreadRequired">
            <summary>
            The calling thread must be STA to show the dialog.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.ClientCertificateMissing(System.Object)">
            <summary>
            No certificate capable of client authentication was found in the certificate store with thumbprint {0}.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.SmartCardMissing(System.Object)">
            <summary>
            The smart card containing the private key for the certificate with thumbprint {0} is not available.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.ClientCertificateNoPermission(System.Object)">
            <summary>
            The certificate with thumbprint {0} could not be used for client authentication. The current user may not have permission to use the certificate.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.ClientCertificateErrorReadingStore(System.Object)">
            <summary>
            An exception occurred while loading client authentication certificates from the certificate store: {0}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.CannotAuthenticateAsAnotherUser(System.Object,System.Object)">
            <summary>
            We were unable to establish the connection because it is configured for user {0} but you attempted to connect using user {1}. To connect as a different user perform a switch user operation. To connect with the configured identity just attempt the last operation again.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.BrowserNavigationFailed">
            <summary>
            Browser navigation failed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.BrowserNavigationToUrlFailed">
             <summary>
             Precedes a URI in an exception message
            
             Browser navigation failed: 
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.None">
             <summary>
             Used to represent a missing URI
            
             (none)
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.BrowserScriptDisabled">
            <summary>
            SP324081: Check that your Internet Explorer security settings will allow JavaScript and cookies. If enabled, please contact support.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.ErrorDeserializeFailed">
            <summary>
            Failed to deserialize error data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.SignInCancelled">
            <summary>
            Sign-in cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.TokenDeserializeFailed">
            <summary>
            Failed to deserialize token data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.ServerDataProviderNotFound(System.Object)">
            <summary>
            The server data provider for service owner {0} could not be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.ExplicitTrustRequired">
            <summary>
            Your browser is security restricted or JavaScript is disabled. Do you want locations required for sign-in to be automatically added to your Trusted Sites list?
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.NavigationBadGateway">
            <summary>
            SP324087: Connection is failing before reaching the server.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.NavigationBadRequest">
            <summary>
            SP324086: Server could not understand the request.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.NavigationForbidden">
            <summary>
            SP324084: Connection not allowed to access the server.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.NavigationGatewayTimeout">
            <summary>
            SP324088: Connection is timing out before reaching the server.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.NavigationInternalServerError">
            <summary>
            SP324089: Server was unable to complete the request.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.NavigationNotFound">
            <summary>
            SP324085: Connection could not find a resource on the server.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.NavigationServiceUnavailable">
            <summary>
            SP324082: Connection to the service is currently unavailable.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.NavigationUnauthorized">
            <summary>
            SP324083: Browser navigation failed due to it not being authorized for access.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.ServerBadRequest">
            <summary>
            SP324094: Our service could not understand the request.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.ServerForbidden">
            <summary>
            SP324092: You are not allowed to access a resource from our service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.ServerInternalServerError">
            <summary>
            SP324095: Our service was unable to complete the request.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.ServerNotFound">
            <summary>
            SP324093: Could not find a resource from our service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.ServerServiceUnavailable">
            <summary>
            SP324090: Our service is currently unavailable.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.ServerUnauthorized">
            <summary>
            SP324091: You are not authorized to access our service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.ServerUnknownError">
            <summary>
            SP324096: Our service could not complete the operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.UnknownClientError">
            <summary>
            SP324098: Your browser could not complete the operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.UnknownError">
            <summary>
            SP324099: Could not complete the operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.AccountManagerProblemExecutingInGlobalMutex(System.Object)">
            <summary>
            There was a problem executing within the global mutex &apos;{0}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.RegistryAccountStoreCannotCreateSubKey(System.Object,System.Object)">
            <summary>
            Could not write a new subkey {0}\\{1}.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.RegistryAccountStoreMemberNotValid(System.Object,System.Object)">
            <summary>
            The member &apos;{0}&apos; was not found in the registry for account: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.BlueBadgeAccountImage192192">
            <summary>
            Resources\BlueBadgeAccountImage192192.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.VsAccountProviderName">
             <summary>
             Account is the representation of the user. Like a live account on hotmail or an outlook account.
            
             Microsoft account
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.MicrosoftLogo_128xLG">
            <summary>
            Resources\MicrosoftLogo_128xLG.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.VsAccountProviderWorkOrSchool">
            <summary>
            Work or school account
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.VsAccountProviderUserNameCannotBeEmpty">
             <summary>
             When the username is empty
            
             User Name cannot be empty
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.VsAccountProviderUnsupportedAccount">
             <summary>
             When the account's ProviderId doesn't match account provider's ID
            
             The account is not supported by the provider because its ProviderId doesn&apos;t match.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.VsAccountProviderSetAdalCacheInvalidOperation">
             <summary>
             When the SetAdalCache method on vsaccountprovider is called multiple times
            
             Cannot set ADAL cache multiple times.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Client.ClientResources.VsAccountProviderAccountNotFoundFromKey">
            <summary>
            Cannot find an account matching the account key
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Location.Client.ILocationService">
            <summary>
            The service responsible for providing a connection to a Team 
            Foundation Server as well as the locations of other services that
            are available on it.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationService.GetLocationData(System.Guid)">
            <summary>
            Gets the provider of location data specified by the given location area guid.
            The provider could be local or remote depending on where the area data is hosted
            in the location hierarchy in relation to this service instance. Returns null if
            the area could not be found
            </summary>
            <param name="locationAreaIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationService.GetLocationServiceUrl(System.Guid)">
            <summary>
            Gets the URL of the location service for the given location area guid and access mapping moniker.
            If the area could not be found this method will return null. This is useful for getting the
            base URL of service hosts, or of other service instances or resource areas.
            
            To find a specific service definition contained in the given location area and to formulate
            the proper URL for a specific resource in that location area, you would need to
            retrieve the location data for that area. This operation is simplified by calling GetLocationData
            </summary>
            <param name="locationAreaIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationService.GetLocationServiceUrl(System.Guid,System.String)">
            <summary>
            Gets the URL of the location service for the given location area guid and access mapping moniker.
            If the area could not be found this method will return null. This is useful for getting the
            base URL of service hosts, or of other service instances or resource areas.
            
            To find a specific service definition contained in the given location area and to formulate
            the proper URL for a specific resource in that location area, you would need to
            retrieve the location data for that area. This operation is simplified by calling GetLocationData
            </summary>
            <param name="locationAreaIdentifier"></param>
            <param name="accessMappingMoniker"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationService.GetLocationDataAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the provider of location data specified by the given location area guid.
            The provider could be local or remote depending on where the area data is hosted
            in the location hierarchy in relation to this service instance. Returns null if
            the area could not be found
            </summary>
            <param name="locationAreaIdentifier"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationService.GetLocationServiceUrlAsync(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the URL of the location service for the given location area guid and access mapping moniker.
            If the area could not be found this method will return null. This is useful for getting the
            base URL of service hosts, or of other service instances or resource areas.
            
            To find a specific service definition contained in the given location area and to formulate
            the proper URL for a specific resource in that location area, you would need to
            retrieve the location data for that area. This operation is simplified by calling GetLocationData
            </summary>
            <param name="locationAreaIdentifier"></param>
            <param name="accessMappingMoniker"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider">
            <summary>
            The service responsible for providing a connection to a Team 
            Foundation Server as well as the locations of other services that
            are available on it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.InstanceId">
            <summary>
            The unique identifier for this server.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.InstanceType">
            <summary>
            The identifier of the type of server instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.ClientAccessMapping">
            <summary>
            The AccessMapping for the current connection to the server. Note, it is 
            possible that the current ClientAccessMapping is not a member of the 
            ConfiguredAccessMappings if the access point this client used to connect to 
            the server has not been configured on it. This will never be null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.DefaultAccessMapping">
            <summary>
            The default AccessMapping for this location service. This will never be null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.ConfiguredAccessMappings">
            <summary>
            All of the AccessMappings that this location service knows about. Because a 
            given location service can inherit AccessMappings from its parent these 
            AccessMappings may exist on this location service or its parent.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.FindServiceDefinition(System.String,System.Guid)">
            <summary>
            Finds the ServiceDefinition with the specified service type and service 
            identifier. If no matching ServiceDefinition exists, null is returned.
            </summary>
            <param name="serviceType">
                The service type of the ServiceDefinition to find.
            </param>
            <param name="serviceIdentifier">
                The service identifier of the ServiceDefinition 
                to find.
            </param>
            <returns>
                The ServiceDefinition with the specified service type and service identifier.
                If no matching ServiceDefinition exists, null is returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.FindServiceDefinitions(System.String)">
            <summary>
            Finds the ServiceDefinitions for all of the services with the 
            specified service type. If no ServiceDefinitions of this type 
            exist, an empty enumeration will be returned.
            </summary>
            <param name="serviceType">
                The case-insensitive string that identifies what type of service is being 
                requested. If this value is null, ServiceDefinitions for all services 
                registered with this location service will be returned.
            </param>
            <returns>
                ServiceDefinitions for all of the services with the specified service type.
                If no ServiceDefinitions of this type exist, an empty enumeration will be 
                returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.LocationForCurrentConnection(System.String,System.Guid)">
            <summary>
            Returns the location for the ServiceDefintion associated with the ServiceType
            and ServiceIdentifier that should be used based on the current connection. 
            If a ServiceDefinition with the ServiceType and ServiceIdentifier does not
            exist then null will be returned. If a ServiceDefinition with the ServiceType
            and ServiceIdentifier is found then a location will be returned if the 
            ServiceDefinition is well formed (otherwise an exception will be thrown).
            
            When determining what location to return for the ServiceDefinition and 
            current connection the following rules will be applied:
            
            1. Try to find a location for the ClientAccessMapping.
            2. Try to find a location for the DefaultAccessMapping.
            3. Use the first location in the LocationMappings list.
            </summary>
            <param name="serviceType">
                The service type of the ServiceDefinition to find the location for.
            </param>
            <param name="serviceIdentifier">
                The service identifier of the ServiceDefinition to find the location for.
            </param>
            <returns>
                The location for the ServiceDefinition with the provided service type and 
                identifier that should be used based on the current connection.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.LocationForCurrentConnection(Microsoft.VisualStudio.Services.Location.ServiceDefinition)">
            <summary>
            Returns the location for the ServiceDefintion that should be used based on
            the current connection. This method will never return null or empty. If it
            succeeds it will return a targetable location for the provided 
            ServiceDefinition.
            
            When determining what location to return for the ServiceDefinition and 
            current connection the following rules will be applied:
            
            1. Try to find a location for the ClientAccessMapping.
            2. Try to find a location for the DefaultAccessMapping.
            3. Use the first location in the LocationMappings list.
            </summary>
            <param name="serviceDefinition">
                The ServiceDefinition to find the location for.
            </param>
            <returns>
                The location for the given ServiceDefinition that should be 
                used based on the current connection.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.LocationForAccessMapping(System.String,System.Guid,Microsoft.VisualStudio.Services.Location.AccessMapping)">
            <summary>
            Returns the location for the ServiceDefinition that has the specified
            service type and service identifier for the provided 
            AccessMapping. If this ServiceDefinition is FullyQualified and no 
            LocationMapping exists for this AccessMapping then null will be returned.
            </summary>
            <param name="serviceType">
                The service type of the ServiceDefinition to find the location for.
            </param>
            <param name="serviceIdentifier">
                The service identifier of the ServiceDefinition to find the location for.
            </param>
            <param name="accessMapping">The AccessMapping to find the location for.</param>
            <returns>
                The location for the ServiceDefinition for the provided 
                AccessMapping. If this ServiceDefinition is FullyQualified and no 
                LocationMapping exists for this AccessMapping then null will be returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.LocationForAccessMapping(Microsoft.VisualStudio.Services.Location.ServiceDefinition,Microsoft.VisualStudio.Services.Location.AccessMapping)">
            <summary>
            Returns the location for the ServiceDefinition for the provided 
            AccessMapping. If this ServiceDefinition is FullyQualified and no 
            LocationMapping exists for this AccessMapping then null will be returned.
            </summary>
            <param name="serviceDefinition">
                The ServiceDefinition to find the location for.
            </param>
            <param name="accessMapping">The AccessMapping to find the location for.</param>
            <returns>
                The location for the ServiceDefinition for the provided 
                AccessMapping. If this ServiceDefinition is FullyQualified and no 
                LocationMapping exists for this AccessMapping then null will be returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.GetAccessMapping(System.String)">
            <summary>
            Gets the AccessMapping with the specified moniker. Returns null
            if an AccessMapping with the supplied moniker does not exist.
            </summary>
            <param name="moniker">
                The moniker for the desired AccessMapping. This value cannot be null or 
                empty.
            </param>
            <returns>
                The AccessMapping with the supplied moniker or null if one does not exist.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.GetResourceLocations">
            <summary>
            Get the API resource locations -- a collection of versioned URL paths that
            are keyed by a location identitifer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.GetInstanceIdAsync(System.Threading.CancellationToken)">
            <summary>
            The unique identifier for this server.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.GetInstanceTypeAsync(System.Threading.CancellationToken)">
            <summary>
            The identifier of the type of server instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.GetClientAccessMappingAsync(System.Threading.CancellationToken)">
            <summary>
            The AccessMapping for the current connection to the server. Note, it is 
            possible that the current ClientAccessMapping is not a member of the 
            ConfiguredAccessMappings if the access point this client used to connect to 
            the server has not been configured on it. This will never be null.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.GetDefaultAccessMappingAsync(System.Threading.CancellationToken)">
            <summary>
            The default AccessMapping for this location service. This will never be null.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.GetConfiguredAccessMappingsAsync(System.Threading.CancellationToken)">
            <summary>
            All of the AccessMappings that this location service knows about. Because a 
            given location service can inherit AccessMappings from its parent these 
            AccessMappings may exist on this location service or its parent.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.FindServiceDefinitionAsync(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the ServiceDefinition with the specified service type and service 
            identifier. If no matching ServiceDefinition exists, null is returned.
            </summary>
            <param name="serviceType">
                The service type of the ServiceDefinition to find.
            </param>
            <param name="serviceIdentifier">
                The service identifier of the ServiceDefinition 
                to find.
            </param>
            <returns>
                The ServiceDefinition with the specified service type and service identifier.
                If no matching ServiceDefinition exists, null is returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.FindServiceDefinitionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the ServiceDefinitions for all of the services with the 
            specified service type. If no ServiceDefinitions of this type 
            exist, an empty enumeration will be returned.
            </summary>
            <param name="serviceType">
                The case-insensitive string that identifies what type of service is being 
                requested. If this value is null, ServiceDefinitions for all services 
                registered with this location service will be returned.
            </param>
            <returns>
                ServiceDefinitions for all of the services with the specified service type.
                If no ServiceDefinitions of this type exist, an empty enumeration will be 
                returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.LocationForCurrentConnectionAsync(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns the location for the ServiceDefintion associated with the ServiceType
            and ServiceIdentifier that should be used based on the current connection. 
            If a ServiceDefinition with the ServiceType and ServiceIdentifier does not
            exist then null will be returned. If a ServiceDefinition with the ServiceType
            and ServiceIdentifier is found then a location will be returned if the 
            ServiceDefinition is well formed (otherwise an exception will be thrown).
            
            When determining what location to return for the ServiceDefinition and 
            current connection the following rules will be applied:
            
            1. Try to find a location for the ClientAccessMapping.
            2. Try to find a location for the DefaultAccessMapping.
            3. Use the first location in the LocationMappings list.
            </summary>
            <param name="serviceType">
                The service type of the ServiceDefinition to find the location for.
            </param>
            <param name="serviceIdentifier">
                The service identifier of the ServiceDefinition to find the location for.
            </param>
            <returns>
                The location for the ServiceDefinition with the provided service type and 
                identifier that should be used based on the current connection.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.LocationForCurrentConnectionAsync(Microsoft.VisualStudio.Services.Location.ServiceDefinition,System.Threading.CancellationToken)">
            <summary>
            Returns the location for the ServiceDefintion that should be used based on
            the current connection. This method will never return null or empty. If it
            succeeds it will return a targetable location for the provided 
            ServiceDefinition.
            
            When determining what location to return for the ServiceDefinition and 
            current connection the following rules will be applied:
            
            1. Try to find a location for the ClientAccessMapping.
            2. Try to find a location for the DefaultAccessMapping.
            3. Use the first location in the LocationMappings list.
            </summary>
            <param name="serviceDefinition">
                The ServiceDefinition to find the location for.
            </param>
            <returns>
                The location for the given ServiceDefinition that should be 
                used based on the current connection.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.LocationForAccessMappingAsync(System.String,System.Guid,Microsoft.VisualStudio.Services.Location.AccessMapping,System.Threading.CancellationToken)">
            <summary>
            Returns the location for the ServiceDefinition that has the specified
            service type and service identifier for the provided 
            AccessMapping. If this ServiceDefinition is FullyQualified and no 
            LocationMapping exists for this AccessMapping then null will be returned.
            </summary>
            <param name="serviceType">
                The service type of the ServiceDefinition to find the location for.
            </param>
            <param name="serviceIdentifier">
                The service identifier of the ServiceDefinition to find the location for.
            </param>
            <param name="accessMapping">The AccessMapping to find the location for.</param>
            <returns>
                The location for the ServiceDefinition for the provided 
                AccessMapping. If this ServiceDefinition is FullyQualified and no 
                LocationMapping exists for this AccessMapping then null will be returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.LocationForAccessMappingAsync(Microsoft.VisualStudio.Services.Location.ServiceDefinition,Microsoft.VisualStudio.Services.Location.AccessMapping,System.Threading.CancellationToken)">
            <summary>
            Returns the location for the ServiceDefinition for the provided 
            AccessMapping. If this ServiceDefinition is FullyQualified and no 
            LocationMapping exists for this AccessMapping then null will be returned.
            </summary>
            <param name="serviceDefinition">
                The ServiceDefinition to find the location for.
            </param>
            <param name="accessMapping">The AccessMapping to find the location for.</param>
            <returns>
                The location for the ServiceDefinition for the provided 
                AccessMapping. If this ServiceDefinition is FullyQualified and no 
                LocationMapping exists for this AccessMapping then null will be returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.GetAccessMappingAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the AccessMapping with the specified moniker. Returns null
            if an AccessMapping with the supplied moniker does not exist.
            </summary>
            <param name="moniker">
                The moniker for the desired AccessMapping. This value cannot be null or 
                empty.
            </param>
            <returns>
                The AccessMapping with the supplied moniker or null if one does not exist.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider.GetResourceLocationsAsync(System.Threading.CancellationToken)">
            <summary>
            Get the API resource locations -- a collection of versioned URL paths that
            are keyed by a location identitifer
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Location.Client.LocationService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.LocationService.Initialize(Microsoft.VisualStudio.Services.Client.VssConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.LocationService.GetLocationData(System.Guid)">
            <summary>
            
            </summary>
            <param name="locationAreaIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.LocationService.GetLocationDataAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="locationAreaIdentifier"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.LocationService.GetLocationDataFromProviderAsync(System.Guid,Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="locationAreaIdentifier"></param>
            <param name="currentProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.LocationService.GetLocationServiceUrl(System.Guid)">
            <summary>
            
            </summary>
            <param name="locationAreaIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.LocationService.GetLocationServiceUrl(System.Guid,System.String)">
            <summary>
            
            </summary>
            <param name="locationAreaIdentifier"></param>
            <param name="accessMappingMoniker"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.LocationService.GetLocationServiceUrlAsync(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="locationAreaIdentifier"></param>
            <param name="accessMappingMoniker"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.LocationService.CreateDataProviderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="location"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.LocationService.AddProviderToCacheAsync(Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Location.Client.LocationService.LocalDataProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Location.Client.LocationServiceHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Location.Client.LocationServiceHelper.GetServiceAreasFromProviderAsync(Microsoft.VisualStudio.Services.Location.Client.ILocationDataProvider,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
    </members>
</doc>
