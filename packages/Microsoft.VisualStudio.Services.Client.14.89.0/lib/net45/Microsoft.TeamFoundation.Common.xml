<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.TeamFoundation.Common</name>
    </assembly>
    <members>
        <member name="T:Microsoft.TeamFoundation.Common.ArrayUtil">
            <summary>
            A class with random array processing helper routines.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ArrayUtil.Equals(System.Byte[],System.Byte[])">
            <summary>
            Compare two byte arrays to determine if they contain the same data.
            </summary>
            <param name="a1">First array to compare.</param>
            <param name="a2">Second array to compare.</param>
            <returns>true if the arrays are equal and false if not.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ArrayUtil.GetHashCode(System.Byte[])">
            <summary>
            Generate hash code for a byte array.
            </summary>
            <param name="array">array to generate hash code for.</param>
            <returns>hash generated from the array members.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ArrayUtil.Equals(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Compare two byte arrays to determine if they contain the same data.
            </summary>
            <param name="a1">First array to compare.</param>
            <param name="a2">Second array to compare.</param>
            <param name="length"># of bytes to compare.</param>
            <returns>true if the arrays are equal and false if not.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.ComUtils.Succeeded(System.Int32)">
            <summary>
            Checks if a HRESULT is a success return code.
            </summary>
            <param name="hr">The HRESULT to test.</param>
            <returns>true if hr represents a success, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.ComUtils.Failed(System.Int32)">
            <summary>
            Checks if a HRESULT is an error return code.
            </summary>
            <param name="hr">The HRESULT to test.</param>
            <returns>true if hr represents an error, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.ComUtils.ThrowOnFailure(System.Int32)">
            <summary>
            Checks if the parameter is a success or failure HRESULT and throws an exception in case
            of failure.
            </summary>
            <param name="hr">The HRESULT to test.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.ComUtils.ThrowOnFailure(System.Int32,System.Int32[])">
            <summary>
            Checks if the parameter is a success or failure HRESULT and throws an exception if it is a
            failure that is not included in the array of well-known failures.
            </summary>
            <param name="hr">The HRESULT to test.</param>
            <param name="expectedHRFailure">Array of well-known and expected failures.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CssUtils.IsValidCssNodeName(System.String)">
            <summary>
            Is this a valid CSS Node Name?
            
            Preconditions: name is non-null and non-empty
            
            (re-factored slightly from code by LakshmiP)
            </summary>
            <param name="name">the name</param>
            <returns>true if valid, false if invalid</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CssUtils.IsValidProjectName(System.String)">
            <summary>
            Is this a valid project name for PCW?
            
            </summary>
            <param name="projectName">the desired name for the project</param>
            <returns>true if valid, false if invalid</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CssUtils.TryCreateUri(System.String,System.UriKind,System.Uri@)">
            <summary>
            Safe wrapper for Uri.TryCreate
            Uri.TryCreate throws System.IndexOutOfRangeException when given garbage characters in .NET 4.5.1 (Bug 623235)
            </summary>
            <param name="uriString">the String representing the Uri</param>
            <param name="uriKind">the type of the Uri </param>
            <param name="result">extracted Uri if successful, null otherwise</param>
            <returns>A Boolean value that is true if the Uri was successfully created; otherwise, false</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.DateTimeExtensions">
            <summary>
            Provides shared facilities for processing DateTime information.    
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.DateTimeExtensions.Ago(System.DateTime)">
            <summary>
            Returns a string to describe the time interval between this date and the present DateTime.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.DateTimeExtensions.Friendly(System.DateTime)">
            <summary>
            Returns a friendly representation of a DateTime.
            less than 24 hours ago: .Ago() format
            since the first of the week: day of the week (e.g. Sunday)
            before the first of the week: ShortDate format (e.g. 3/10/2012)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.DateTimeExtensions.RelateToPresent(System.DateTime)">
            <summary>
            Provides a string to relate the given dateTime to the present time(Now).
            Expressed in terms of "(quantity) (interval) ago" for differences from one second up to to 7 hours ago.
            Beyond 7 hours, uses Today, Yesterday or explicit date/time stamp forms.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.DateTimeExtensions.FormatTimeSpan(System.TimeSpan)">
            <summary>
            Returns the first time interval string match within the format spec limit as "... ago", or String.Empty, if no suitable match can be found.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.DebugUtil.Break">
            <summary>
            Signals a breakpoint to a debugger.
            </summary>
            <remarks>
            If no debugger is attached, this method launches and attaches debugger.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.DebugUtil.BreakIf(System.Boolean)">
            <summary>
            Signals a breakpoint to a debugger.
            </summary>
            <remarks>
            If no debugger is attached, this method launches and attaches debugger.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.DebugUtil.Break(System.String)">
            <summary>
            Signals a breakpoint to a debugger
            </summary>
            <remarks>
            If no debugger is attached, this method launches and attaches debugger.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.DebugUtil.BreakIf(System.String,System.Boolean)">
            <summary>
            Signals a breakpoint to a debugger.
            </summary>
            <remarks>
            If no debugger is attached, this method launches and attaches debugger.
            </remarks>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.FileSystemUtil">
            <summary>
            Utilities to deal with the (network) file system.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.FileSystemUtil.GetUniversalName(System.String)">
            <summary>
            Gets the universal name of a local file path.
            </summary>
            <param name="localPath">The local file path.</param>
            <returns>The universal name.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">When path doesn't have a universal name or 
            PInvoke WNetGetUniversalName fails.</exception>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.HighResTimer">
            <summary>
            The high resolution timer (if supported by the underlying hardware. If not supported, than resolution is that
            provided by the Stopwatch class.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.HighResTimer.TimeStamp">
            <summary>
            Return the current time-stamp.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.HighResTimer.Start">
            <summary>
             Start the high resolution timer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.HighResTimer.Stop">
            <summary>
             Stop the high resolution timer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.HighResTimer.ElapsedTime(System.Int64,System.Int64)">
            <summary>
             Compute the elapsed time based on a supplied start and stop time that were previously
             obtained as a time stamp.
            </summary>
            <param name="start">The time stamp at the start of the operation.</param>
            <param name="stop">The time stamp taken after the operation completes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.HighResTimer.diffTime(System.Int64,System.Int64,System.Double)">
            <summary>
             Computes the difference between two times. When the high resolution timer is supported,
             the difference is computed using using the reported clock frequency. Otherwise, the time
             difference is computed by simple subtraction.
            </summary>
            <param name="start">The time stamp at the start of the operation.</param>
            <param name="stop">The time stamp taken after the operation completes.</param>
            <param name="conversionFactor">Clock granularity.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.IServiceProviderExtensions">
            <summary>
            IServiceProvider extension methods.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.IServiceProviderExtensions.GetService``1(System.IServiceProvider)">
            <summary>
            Get the service object of the type T.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.IServiceProviderExtensions.GetService``2(System.IServiceProvider)">
            <summary>
            Get the service object of the type T and cast it to type V.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.MD5Util.CanCreateMD5Provider">
            <summary>
            Indicates whether FIPS (Federal Information Processing Standard) algorithm policy is disabled 
            on the current machine and MD5 crypo provider can be used.
            </summary>
            <returns>true if MD5 crypto provider can be used (FIPS algorithm policy is disabled); otherwise false.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.MD5Util.CalculateMD5(System.String)">
            <summary>
            Computes the MD5 hash for the specified file, unless FIPS algorithm policy is enabled.
            </summary>
            <param name="fileName">file to hash</param>
            <returns>the MD5 hash if the provider can be created or a zero-length array if that fails.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.MD5Util.CalculateMD5(System.Byte[])">
            <summary>
            Computes the MD5 hash for the specified byte array, unless FIPS algorithm policy is enabled.
            </summary>
            <returns>the MD5 hash if the provider can be created or a zero-length array if that fails.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.MD5Util.CalculateMD5(System.IO.Stream)">
            <summary>
            Computes the MD5 hash for the specified stream, unless FIPS algorithm policy is enabled.
            </summary>
            <param name="stream">the stream to hash</param>
            <returns>the MD5 hash if the provider can be created or a zero-length array if that fails.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.MD5Util.CalculateMD5(System.IO.Stream,System.Boolean)">
            <summary>
            Computes the MD5 hash for the specified stream, unless FIPS algorithm policy is enabled.
            </summary>
            <param name="stream">the stream to hash</param>
            <param name="rewind">If true, stream's current position will be reset to its original value.</param>
            <returns>the MD5 hash if the provider can be created or a zero-length array if that fails.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.MD5Util.TryCreateMD5Provider">
            <summary>
            Creates an MD5 crypto service provider. Returns null if FIPS algorithm policy is enabled.
            </summary>
            <returns>An MD5 provider or null if FIPS prevents using it.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.NativeMethods">
            ********************************************************************************************
             <summary>
             A class that encapsulates constants and methods used by Windows.
             </summary>
            ********************************************************************************************
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.FILE_SUPPORTS_HARD_LINKS">
            <summary>
            The specified volume supports hard links.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.NativeMethods.GetFileCompression(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Gets the file compression type for a given open file.
            </summary>
            <param name="handle">Open file handle.</param>
            <remarks>We hide the call to DeviceIoControl because it is potentially unsafe.</remarks>
            <returns>Compression type (see Win32 COMPRESSION_FORMAT_*)</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.NativeMethods.SetFileCompression(System.Runtime.InteropServices.SafeHandle,System.Int16)">
            <summary>
            Sets the compression type for a given open file.
            </summary>
            <param name="handle">Open file handle.</param>
            <param name="compressionType">Compression type (see Win32 COMPRESSION_FORMAT_*)</param>
            <remarks>We hide the call to DeviceIoControl because it is potentially unsafe.</remarks>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.NativeMethods.DlgStyle">
            <summary>
            Win32 window style constants
            We use them to set up our child window
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.NativeMethods.ExStyle">
            <summary>
            Win32 "extended" window style constants
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.NativeMethods.DlgTemplatePlaceholder">
            <summary>
            This concept is taken from the "Extending common dialogs with Win Forms" example:
            An in-memory Win32 dialog template
            Note: this has a very specific structure with a single static "label" control
            See documentation for DLGTEMPLATE and DLGITEMTEMPLATE
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.NativeMethods.SendMessage(System.Object,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            This is a managed wrapper for the simplest Send Message
            </summary>
            <param name="control">The managed control</param>
            <param name="handle">The handle to the managed control</param>
            <param name="msg">the message id</param>
            <param name="wParam">integer encoded param</param>
            <param name="lParam">integer encoded param</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.SHACF_FILESYSTEM">
            <summary>
            Show File System in auto complete
            This includes the file system as well as the rest of the shell 
            (Desktop\My Computer\Control Panel\)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.SHACF_FILESYS_DIRS">
            <summary>
            Only includes directories, UNC servers, and UNC server shares.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.SHACF_AUTOSUGGEST_FORCE_ON">
            <summary>
            Force auto suggest on (despite what is in the registry)
            Auto suggest fills in the text with the first match in the list
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.SHACF_USETAB">
            <summary>
            Use the tab to move thru the autocomplete possibilities instead of to 
            the next dialog/window control.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.SHACF_AUTOAPPEND_FORCE_ON">
            <summary>
            Ignore the registry default and force the feature on.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.NativeMethods.ShellExecute(System.IntPtr,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Execute an operation on a file via the Windows Shell
            </summary>
            <param name="hWnd">Parent window handle</param>
            <param name="operation">Verb to be performed.  Some typical operations include "edit", "open", "explore", "find", "print")</param>
            <param name="file">Full path to file to perform the operation on</param>
            <param name="parameters">If the file specified is an executible, thes parameters are passed to it</param>
            <param name="directory">Default directory</param>
            <param name="showCmd">Flag that specifies how the application should be displayed.  For example, SW_SHOWNORMAL (NativeMethods.SW_SHOWNA)</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.NativeMethods.ImageList_Duplicate(System.IntPtr)">
            <summary>
            Duplicates an image list
            Overlay images are not copiled
            Minimum OS: 
              Windows 2000, Windows NT 4.0 with Internet Explorer 4.0, Windows 98, 
              Windows 95 with Internet Explorer 4.0
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.NativeMethods.GetCurrentThread">
            <summary>
             Get the current thread handle
            </summary>
            <returns>IntPtr for the current thread handle</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.NativeMethods.ThreadPriorityMode">
            <summary>
            Defines the set of Thread Priorites we use.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.NativeMethods.SetThreadPriority(System.IntPtr,System.Int32)">
            <summary>
            Sets the thread priority for the specified thread.
            </summary>
            <param name="hThread">Thread to set the priority on</param>
            <param name="nPriority">Priority to set, see <code>ThreadPriority</code></param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.NativeMethods.OutputDebugString(System.String)">
            <summary>
            The declaration for OutputDebugString.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.NativeMethods.FormatError(System.Int32)">
            <summary>
            Formats an error number into an error message.
            </summary>
            <param name="number">The error number to convert.</param>
            <returns>A string representation of the specified error number.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.NativeMethods.GuidFromNativePtr(System.IntPtr)">
            <summary>
            Get a Guid object from a native GUID*.
            </summary>
            <param name="pguid">Native GUID pointer</param>
            <returns>Guid object</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.NativeMethods.DsCrackNames(System.IntPtr,Microsoft.TeamFoundation.Common.Internal.NativeMethods.DS_NAME_FLAGS,Microsoft.TeamFoundation.Common.Internal.NativeMethods.DS_NAME_FORMAT,Microsoft.TeamFoundation.Common.Internal.NativeMethods.DS_NAME_FORMAT,System.String[])">
            <summary>
            A wrapper function for the DsCrackNames OS call
            </summary>
            <param name="hDS">DsBind handle</param>
            <param name="flags">Flags controlling the process</param>
            <param name="formatOffered">Format of the names</param>
            <param name="formatDesired">Desired format for the names</param>
            <param name="names">The names to crack</param>
            <returns>The crack result</returns>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.COMPUTER_NAME_FORMAT.ComputerNameNetBIOS">
            <summary>
            The NetBIOS name of the local computer. If the local computer is a node in a cluster, lpBuffer receives the NetBIOS name of the cluster virtual server.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.COMPUTER_NAME_FORMAT.ComputerNameDnsHostname">
            <summary>
            The DNS host name of the local computer. If the local computer is a node in a cluster, lpBuffer receives the DNS host name of the cluster virtual server.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.COMPUTER_NAME_FORMAT.ComputerNameDnsDomain">
            <summary>
            The name of the DNS domain assigned to the local computer. If the local computer is a node in a cluster, lpBuffer receives the DNS domain name of the cluster virtual server.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.COMPUTER_NAME_FORMAT.ComputerNameDnsFullyQualified">
            <summary>
            The fully qualified DNS name that uniquely identifies the local computer. This name is a combination of the DNS host name and the DNS domain name, using the form HostName.DomainName. If the local computer is a node in a cluster, lpBuffer receives the fully qualified DNS name of the cluster virtual server.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.COMPUTER_NAME_FORMAT.ComputerNamePhysicalNetBIOS">
            <summary>
            The NetBIOS name of the local computer. If the local computer is a node in a cluster, lpBuffer receives the NetBIOS name of the local computer, not the name of the cluster virtual server.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.COMPUTER_NAME_FORMAT.ComputerNamePhysicalDnsHostname">
            <summary>
            The DNS host name of the local computer. If the local computer is a node in a cluster, lpBuffer receives the DNS host name of the local computer, not the name of the cluster virtual server.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.COMPUTER_NAME_FORMAT.ComputerNamePhysicalDnsDomain">
            <summary>
            The name of the DNS domain assigned to the local computer. If the local computer is a node in a cluster, lpBuffer receives the DNS domain name of the local computer, not the name of the cluster virtual server.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.COMPUTER_NAME_FORMAT.ComputerNamePhysicalDnsFullyQualified">
            <summary>
            The fully qualified DNS name that uniquely identifies the computer. If the local computer is a node in a cluster, lpBuffer receives the fully qualified DNS name of the local computer, not the name of the cluster virtual server. 
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.COMPUTER_NAME_FORMAT.ComputerNameMax">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.NativeMethods.NetGetJoinInformation(System.String,System.String@,Microsoft.TeamFoundation.Common.Internal.NativeMethods.NetJoinStatus@)">
            <summary>
            The NetGetJoinInformation function retrieves join status information for the specified computer.
            </summary>
            <param name="server">Specifies the DNS or NetBIOS name of the computer on which to call the function. 
            If this parameter is null, the local computer is used.</param>
            <param name="domain">When this method returns, contains the NetBIOS name of the domain or workgroup to which the computer is joined.</param>
            <param name="joinStatus">When this method returns, contains join status of the specified computer. </param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.NativeMethods.NetJoinStatus">
            <summary>
            Equivalent to NETSETUP_JOIN_STATUS from the native Windows API.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.NetJoinStatus.NetSetupUnknownStatus">
            <summary>
            The status is unknown.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.NetJoinStatus.NetSetupUnjoined">
            <summary>
            The computer is not joined.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.NetJoinStatus.NetSetupWorkgroupName">
            <summary>
            The computer is joined to a workgroup.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.NetJoinStatus.NetSetupDomainName">
            <summary>
            The computer is joined to a domain.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.NativeMethods.NetApiBufferFree(System.IntPtr)">
            <summary>
            This method frees the memory that the NetApiBufferAllocate function allocates. 
             Applications should also call NetApiBufferFree to free the memory that other network management functions use internally to return information.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.FIND_FIRST_EX_CASE_SENSITIVE">
            <summary>
            Searches are case-sensitive.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.FIND_FIRST_EX_LARGE_FETCH">
            <summary>
            Uses a larger buffer for directory queries, which can increase performance of the find operation.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.FILE_NOTIFY_CHANGE_FILE_NAME">
            <summary>
            Any file name change in the watched directory or subtree causes a change notification wait operation
            to return. Changes include renaming, creating, or deleting a file name.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.FILE_NOTIFY_CHANGE_DIR_NAME">
            <summary>
            Any directory-name change in the watched directory or subtree causes a change notification wait
            operation to return. Changes include creating or deleting a directory.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.FILE_NOTIFY_CHANGE_ATTRIBUTES">
            <summary>
            Any attribute change in the watched directory or subtree causes a change notification wait operation
            to return.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.FILE_NOTIFY_CHANGE_SIZE">
            <summary>
            Any file-size change in the watched directory or subtree causes a change notification wait operation
            to return. The operating system detects a change in file size only when the file is written to the disk.
            For operating systems that use extensive caching, detection occurs only when the cache is sufficiently flushed.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.FILE_NOTIFY_CHANGE_LAST_WRITE">
            <summary>
            Any change to the last write-time of files in the watched directory or subtree causes a change notification
            wait operation to return. The operating system detects a change to the last write-time only when the file is
            written to the disk. For operating systems that use extensive caching, detection occurs only when the cache is
            sufficiently flushed.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.FILE_NOTIFY_CHANGE_SECURITY">
            <summary>
            Any security-descriptor change in the watched directory or subtree causes a change notification wait operation
            to return.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.DRIVE_REMOVABLE">
            <summary>
            The drive has removable media; for example, a floppy drive, thumb drive, or flash card reader.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.DRIVE_FIXED">
            <summary>
            The drive has fixed media; for example, a hard drive or flash drive.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.NativeMethods.MEMORYSTATUSEX">
            <summary>
            Contains information about the current state of both physical and virtual memory, including extended memory
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.MEMORYSTATUSEX.dwLength">
            <summary>
            Size of the structure, in bytes. You must set this member before calling GlobalMemoryStatusEx. 
            </summary>            
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.MEMORYSTATUSEX.dwMemoryLoad">
            <summary>
            Number between 0 and 100 that specifies the approximate percentage of physical memory that is in use (0 indicates no memory use and 100 indicates full memory use). 
            </summary>            
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.MEMORYSTATUSEX.ullTotalPhys">
            <summary>
            Total size of physical memory, in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.MEMORYSTATUSEX.ullAvailPhys">
            <summary>
            Size of physical memory available, in bytes. 
            </summary>            
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.MEMORYSTATUSEX.ullTotalPageFile">
            <summary>
            Size of the committed memory limit, in bytes. This is physical memory plus the size of the page file, minus a small overhead. 
            </summary>            
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.MEMORYSTATUSEX.ullAvailPageFile">
            <summary>
            Size of available memory to commit, in bytes. The limit is ullTotalPageFile. 
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.MEMORYSTATUSEX.ullTotalVirtual">
            <summary>
            Total size of the user mode portion of the virtual address space of the calling process, in bytes. 
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.MEMORYSTATUSEX.ullAvailVirtual">
            <summary>
            Size of unreserved and uncommitted memory in the user mode portion of the virtual address space of the calling process, in bytes. 
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.MEMORYSTATUSEX.ullAvailExtendedVirtual">
            <summary>
            Size of unreserved and uncommitted memory in the extended portion of the virtual address space of the calling process, in bytes. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.NativeMethods.MEMORYSTATUSEX.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MEMORYSTATUSEX"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.NET_API_STATUS.NERR_InvalidComputer">
            <summary>
            This computer name is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.NET_API_STATUS.NERR_NotPrimary">
            <summary>
            This operation is only allowed on the primary domain controller of the domain.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.NET_API_STATUS.NERR_SpeGroupOp">
            <summary>
            This operation is not allowed on this special group.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.NET_API_STATUS.NERR_LastAdmin">
            <summary>
            This operation is not allowed on the last administrative account.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.NET_API_STATUS.NERR_BadPassword">
            <summary>
            The password parameter is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.NET_API_STATUS.NERR_PasswordTooShort">
            <summary>
            The password does not meet the password policy requirements. Check the minimum password length, password complexity and password history requirements.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.NET_API_STATUS.NERR_UserNotFound">
            <summary>
            The user name could not be found.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.NativeMethods.USER_INFO_24">
            <summary>
            USER_INFO_24 Struct for NetUserSetInfo/NetUserGetInfo
            typedef struct _USER_INFO_24 {
                BOOL     usri24_internet_identity;
                DWORD    usri24_flags;
                LPWSTR   usri24_internet_provider_name;
                LPWSTR   usri24_internet_principal_name;
                PSID     usri24_user_sid;
            } USER_INFO_24, *PUSER_INFO_24, *LPUSER_INFO_24;
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.USER_INFO_24.usri24_internet_identity">
            <summary>True if the user is connected to Windows Live ID</summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.USER_INFO_24.usri24_flags">
            <summary>Specifies a DWORD value that determines several features. </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.USER_INFO_24.usri24_internet_provider_name">
            <summary>Pointer to a Unicode string that specifies the name of the internet provider, e.g. MicrosoftAccount</summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.USER_INFO_24.usri24_internet_principal_name">
            <summary>Pointer to a Unicode string that specifies the name of the internet principal, e.g. e-mail address.</summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.NativeMethods.USER_INFO_24.usri24_user_sid">
            <summary>Pointer to a SID structure that contains the security identifier (SID) that uniquely identifies the user.</summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.ProjectPortalType">
            <summary>
            Types of project portals supported.  
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.ProcessGuidanceType">
            <summary>
            Types of progess guidance supported.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.ServerRoleType">
            <summary>
            Types of installation.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.ServerRoleType.None">
            <summary>
            Sharepoint is not installed.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.ServerRoleType.Unknown">
            <summary>
            The ServerRole setting doesn't map to a type known to us.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.ServerRoleType.Standalone">
            <summary>
            Standalone mode.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.ServerRoleType.FarmComplete">
            <summary>
            Farm mode role.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.ServerRoleType.WebFrontEnd">
            <summary>
            Web front end role.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.StringUtil">
            <summary>
            A class with random string processing helper routines.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.StringUtil.defaultConsoleWidth">
            <summary>
            Line width used to calculate estimated buffer size
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.ParseCommandLine(System.String)">
            <summary>
            Parse the supplied command-line, ignoring the application name and returning the list
            of arguments in an array.  This differs from the built-in .NET command line parameter
            parsing in that '\\' is not treated as an escape character.  The only recognized
            "special" sequence is that a pair of double quotes inside a quoted string is
            translated to a single double quote.  Other double quote characters are used to
            bound arguments.
            Examples: abc -> abc; a bc -> a, bc; "a bc" -> a bc; "a""bc" -> a"bc; """a""" -> "a"
            </summary>
            <param name="cmdLine">The command line to parse.</param>
            <returns>An array of parsed parameters.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.ParseCommandLineArgument(System.String,System.Int32@)">
            <summary>
            Parse the supplied command-line, starting at the given position and return the
            next argument found. The startPos parameter is updated to the new position.
            The only recognized "special" sequence is that a pair of double quotes inside a 
            quoted string is translated to a single double quote.  
            Other double quote characters are used to bound arguments.
            Examples: abc -> abc; a bc -> a, bc; "a bc" -> a bc; "a""bc" -> a"bc; """a""" -> "a"
            </summary>
            <param name="cmdLine">The command line to parse.</param>
            <returns>The argument found; or null</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.FormatColumnOutput(System.String[],System.String[0:,0:],System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Format contents into tabular columns
            </summary>
            <param name="headers">array of header names (should already be localized)</param>
            <param name="contents">rectangular 2-dimensional array</param>
            <param name="indent">the indentation at the beginning of each line of output</param>
            <param name="lineWidth">the maximum width of each line of output</param>
            <param name="encoding">the console encoding (used for calculating string widths)</param>
            <returns>format to be used with Write() calls for printing out column-based output</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.FormatColumnOutput(System.String[],System.String[0:,0:],System.String,System.Int32[],System.Boolean,System.Text.Encoding)">
            <summary>
            Format contents into tabular columns; the last column is not padded (except of separator)
            </summary>
            <param name="headers">array of header names (should already be localized)</param>
            <param name="contents">rectangular 2-dimensional array</param>
            <param name="indent">the indentation at the beginning of each line of output</param>
            <param name="maxWidths">the maximum width of each column</param>
            <param name="encoding">the console encoding (used for calculating string widths)</param>
            <returns>format to be used with Write() calls for printing out column-based output</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.GetRowFormat(System.String[],System.String,System.Text.Encoding)">
            <summary>
            Generate the block-based format string (already ends in a newline) for displaying
            /format:detailed types of information
            </summary>
            <param name="headers">array of header names (should already be localized)</param>
            <param name="indent">the indentation at the beginning of each line of output</param>
            <param name="encoding">the console encoding (used to calculate string widths)</param>
            <returns>format block (already ends in newline, use Write() instead of WriteLine()</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.GetRowFormat(System.String[],System.String,System.String,System.Text.Encoding)">
            <summary>
            Generate the block-based format string (already ends in a newline) for displaying
            /format:detailed types of information
            </summary>
            <param name="headers">array of header names (should already be localized)</param>
            <param name="indent">the indentation at the beginning of each line of output</param>
            <param name="rowTemplate">string formatter used to format field name and its value</param>
            <param name="encoding">the console encoding (used to calculate string widths)</param>
            <returns>format block (already ends in newline, use Write() instead of WriteLine()</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.GetRowFormat(System.String[],System.String,System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Generate the block-based format string (already ends in a newline) for displaying
            /format:detailed types of information
            </summary>
            <param name="headers">array of header names (should already be localized)</param>
            <param name="indent">the indentation at the beginning of each line of output</param>
            <param name="rowTemplate">string formatter used to format field name and its value</param>
            <param name="encoding">the console encoding (used to calculate string widths)</param>
            <returns>format block (already ends in newline, use Write() instead of WriteLine()</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.GetSecureStringContent(System.Security.SecureString)">
            <summary>
            Converts a SecureString to a String.
            </summary>
            <param name="sec">SecureString that needs to be converted.</param>
            <returns>A converted string or null sec is null.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.CreateSecureString(System.String)">
            <summary>
            Converts a String to a SecureString.
            </summary>
            <param name="str">A string to convert. null is OK.</param>
            <returns>A converted SecureString.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.Truncate(System.String,System.Int32,System.Boolean)">
            <summary>
            Truncates the string to the given number of Unicode (2-byte) characters, without breaking 
            across multi-character Unicode text elements such as surrogate pairs or combining 
            characters.
            </summary>
            <param name="text">the text to truncate</param>
            <param name="maximumCharacters">the maximum number of Unicode characters allowed</param>
            <param name="addEllipsis">if true, add standard "..." ellipsis if string is truncated</param>
            <returns>a string no wider than width</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.Truncate(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Truncates the string to the maximum width.
            </summary>
            <param name="text">the text to truncate</param>
            <param name="width">the maximum width</param>
            <param name="encoding">the console encoding (used to calculate string widths)</param>
            <returns>a string no wider than width</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.TruncateLeft(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Chops chars from the left until the string fits in the maximum width.
            </summary>
            <param name="text">the text to truncate</param>
            <param name="width">the maximum width</param>
            <param name="encoding">the console encoding (used to calculate string widths)</param>
            <returns>a string no wider than width</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.CalculateColumnsWidth(System.String[],System.String[0:,0:],System.Text.Encoding)">
            <summary>
            Calculates width of the columns as maximum of width of column's header and each of its cell's width.
            The last column's width is calculated only as its header's width.
            </summary>
            <param name="headers">array of header names (should already be localized)</param>
            <param name="contents">rectangular 2-dimensional array</param>
            <param name="encoding">the console encoding (used to calculate string widths)</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.CalculateWidth(System.String,System.Text.Encoding)">
            <summary>
            Given a string, compute the console display width.  The console width is
            determined by the number of bytes needed to represent the text string in the console
            encoding (see the discussion in work item 16710).
            </summary>
            <param name="text">the text</param>
            <param name="encoding">the console encoding</param>
            <returns>the width of the string in the console</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.CalculateWidth(System.Char[],System.Text.Encoding)">
            <summary>
            Given a character array, compute the console display width.  The console width is
            determined by the number of bytes needed to represent the characters in the console
            encoding (see the discussion in work item 16710).
            </summary>
            <param name="chars">the characters</param>
            <param name="encoding">the console encoding</param>
            <returns>the width of the characters in the console</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.Format(System.String,System.Object[])">
            A little helper function to alleviate some typing associated with loading resources and
            formatting the strings.  In DEBUG builds, it also asserts that the number of format
            arguments and the length of args match.
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.FormatInvariant(System.String,System.Object[])">
            <summary>
            Simple wrapper for String.Format(CultureInfo.InvariantCulture, ...).
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.FormatCommentForOneLine(System.String)">
            <summary>
            Format a comment for one line displays.
            This finds the first non blank line and displays up to s_maxCommentDisplayLength
            characters. It handles tabs and new lines as well.
            </summary>
            <param name="comment">The comment to be formatted</param>
            <returns>a formatted comment for one line display</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.FormatCommentForOneLine(System.String,System.Int32)">
            <summary>
            Format a comment for one line displays.
            This finds the first non blank line and displays up to s_maxCommentDisplayLength
            characters. It handles tabs and new lines as well.
            </summary>
            <param name="comment">The comment to be formatted</param>
            <param name="maxCommentDisplayLength">Maximum comment length</param>
            <returns>a formatted comment for one line display</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.ContainsIllegalCharacters(System.String,System.String)">
            <summary>
            ContainsIllegalCharacters will check if the stringToValidate contains any of characters
            defined in the set of characters in validCharacters.
            
            NOTE: The overload that takes a HashSet will allow the validation to occur much faster
                if the caller needs to validate strings multiple times with the same set this is an
                appraoch with improved performance.
            </summary>
            <param name="stringToValidate">The string that needs to be validated.</param>
            <param name="validCharacters">The set of characters that are allowed in the string.</param>
            <returns>True if the string contains characters that are not in the validCharacters set.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.ContainsIllegalCharacters(System.String,System.Collections.Generic.HashSet{System.Char})">
            <summary>
            ContainsIllegalCharacters will check if the stringToValidate contains any of characters
            defined in the set of characters in validCharacters.
            </summary>
            <param name="stringToValidate">The string that needs to be validated.</param>
            <param name="validCharacters">The set of characters that are allowed in the string.</param>
            <returns>True if the string contains characters that are not in the validCharacters set.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.QuoteName(System.String)">
            <summary>
            Returns a string with the delimiters added to make the input string a valid SQL Server delimited identifier.
            This method implements behaviour QUOTENAME (Transact-SQL). It never throws. If parameter is invalid the method returns null.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.QuoteName(System.String,System.Char)">
            <summary>
            Returns a string with the delimiters added to make the input string a valid SQL Server delimited identifier.
            This method implements behaviour QUOTENAME (Transact-SQL). It never throws. If parameter is invalid, the method returns null.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.ReplaceResources(System.String,System.Boolean@)">
            <summary>
            Replaces the name of each resource embedded in the specified string with the string equivalent of the value of the resource, then returns the resulting string.
            Resource can be a static method, property, field, or a constant.
            </summary>
            <param name="text">A string containing the name of zero or more resources. Each resource is quoted with ## characters.</param>
            <param name="replacedAll">When this method returns, replacedAll contains true if all resources were replaced; false otherwise.</param>
            <returns>A string with each resource replaced by its value.</returns>
            <example>
            Boolean replacedAll;
            String text = StringUtil.ReplaceResources("##Microsoft.TeamFoundation.CommonResources.UnauthorizedUnknownServer##", out replacedAll)
            // text is set to "TF30064: You are not authorized to access the server."
            </example>
            <exception cref="T:System.ArgumentNullException">The text is null.</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.ReplaceResources(System.String,System.Func{System.String,System.String},System.Boolean@)">
            <summary>
            Replaces the name of each resource embedded in the specified string with the string equivalent of the value of the resource, then returns the resulting string.
            Resource can be a static method, property, field, or a constant.
            </summary>
            <param name="text">A string containing the name of zero or more resources. Each resource is quoted with ## characters.</param>
            <param name="escapeFunction">A function that transforms a resource value before replacing it in the resulting string.</param>
            <param name="replacedAll">When this method returns, replacedAll contains true if all resources were replaced; false otherwise.</param>
            <returns>A string with each resource replaced by its value.</returns>
            <example>
            Boolean replacedAll;
            String text = StringUtil.ReplaceResources("##Microsoft.TeamFoundation.CommonResources.UnauthorizedUnknownServer##", System.Security.SecurityElement.Escape, out replacedAll)
            // text is set to "TF30064: You are not authorized to access the server."
            </example>
            <exception cref="T:System.ArgumentNullException">The text is null.</exception>
            <exception cref="T:System.ArgumentNullException">The escape function is null.</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.ReplaceTokens(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean@)">
            <summary>
            Replaces the name of each token embedded in the specified string with the string equivalent of the value of the token, then returns the resulting string.
            </summary>
            <param name="text">A string containing the name of zero or more resources. Each resource is quoted with ## characters.</param>
            <param name="tokenPrefix">A string that represent token prefix. Must be non-empty string.</param>
            <param name="tokenSuffix">A string that represent token suffix. Must be non-empty string.</param>
            <param name="tokens">A collection of tokens.</param>
            <param name="replacedAll">When this method returns, contains true if all tokens were replaced; false otherwise.</param>
            <returns>A string with each token replaced by its value.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.ReplaceTokens(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Func{System.String,System.String},System.Boolean@)">
            <summary>
            Replaces the name of each token embedded in the specified string with the string equivalent of the value of the token, then returns the resulting string.
            </summary>
            <param name="text">A string containing the name of zero or more resources. Each resource is quoted with ## characters.</param>
            <param name="tokenPrefix">A string that represent token prefix. Must be non-empty string.</param>
            <param name="tokenSuffix">A string that represent token suffix. Must be non-empty string.</param>
            <param name="tokens">A collection of tokens.</param>
            <param name="escapeFunction">A function that transforms a token value before putting it into the resulting string.</param>
            <param name="replacedAll">When this method returns, contains true if all tokens were replaced; false otherwise.</param>
            <returns>A string with each token replaced by its value.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.ReplaceTokens(System.String,System.String,System.String,System.Func{System.String,System.String},System.Boolean@)">
            <summary>
            Replaces the name of each token embedded in the specified string with the string equivalent of the value of the token, then returns the resulting string.
            </summary>
            <param name="text">A string containing the name of zero or more resources. Each resource is quoted with ## characters.</param>
            <param name="tokenPrefix">A string that represent token prefix. Must be non-empty string.</param>
            <param name="tokenSuffix">A string that represent token suffix. Must be non-empty string.</param>
            <param name="tokenProvider">A callback method that is used to calculate token value. If the method cannot calculate the token value, it must return null.</param>
            <param name="replacedAll">When this method returns, contains true if all tokens were replaced; false otherwise.</param>
            <returns>A string with each token replaced by its value.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.CachingResourceTokenProvider(System.String)">
            <summary>
            A caching resource provider. Uses ResourceTokenProvider to resolve the resource value and caches it.
            This method is thread safe.
            </summary>
            <param name="fullyQualifiedResource">A fully qualified static method, property or a field. Such as Microsoft.TeamFoundation.CommonResources.InnerException</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.StringUtil.ResourceTokenProvider(System.String)">
            <summary>
            Resolves the resource value.
            </summary>
            <param name="fullyQualifiedResource">A fully qualified static method, property or a field. Such as Microsoft.TeamFoundation.CommonResources.InnerException</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.TeamFoundationEnvironment">
            <summary>
            Provides helper methods to discover the current installation environment for Team Foundation Server.
            </summary>
            <remarks>
            The goal of this class is to encapsulate access to well-known registry keys and application install
            paths that should be available by default.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TeamFoundationEnvironment.OpenRootVisualStudioRegistryKey">
            <summary>
            Gets the root registry key of the current Visual Studio registry hive. Whenever possible, using this property is 
            recommended over using Registry.LocalMachine and CurrentVsVersionInformation.RegistryKeyPath. Using the
            latter limits the portability of our code and is not recommended.
            </summary>
            <remarks>
            <para>This property returns the registry root for the application. Typically this is 
            HKLM\Software\Microsoft\VisualStudio\&lt;version&gt; but this can change based on any 
            alternate root that the shell was initialized with.</para>
            <para>The key that is returned is a read-only key and cannot be modified.</para>
            <para>You should close and dispose this key when you are finished using it.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TeamFoundationEnvironment.OpenOrCreateRootUserRegistryKey">
            <summary>
            Gets a registry key that can be used to store user data. Whenever possible, using this property is 
            recommended over using Registry.CurrentUser and CurrentVsVersionInformation.RegistryKeyPath. Using the
            latter limits the portability of our code and is not recommended.
            </summary>
            <remarks>
            <para>The UserRegistryRoot property returns a registry key that can be used to store user data. 
            Typically this key points to HKEY_CURRENT_USER\Software\Microsoft\VisualStudio\&lt;version&gt;, but an 
            alternate root can be specified when the Visual Studio shell is initialized.</para>
            <para>The RegistryKey returned by UserRegistryRoot is the registry root for the current user.</para> 
            <para>It is opened as read/write. Always call Close on this key when you are finished using it.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TeamFoundationEnvironment.GetVisualStudioApplicationDataPath">
            <summary>
            Returns the path to the client (a.k.a. Visual Studio) user application data folder path.
            </summary>
            <remarks>
            This will be for the "Roaming" application data folder, which roams with a profile across multiple machines.
            You might not want to use this folder for big files or machine-specific information.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TeamFoundationEnvironment.GetVisualStudioLocalApplicationDataPath">
            <summary>
            Returns the path to the client (a.k.a. Visual Studio) user application data folder path.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TeamFoundationEnvironment.GetTfsApplicationDataPath">
            <summary>
            Returns the path to the Team Foundation user application data folder path.
            </summary>
            <remarks>
            This will be for the "Roaming" application data folder, which roams with a profile across multiple machines.
            You might not want to use this folder for big files or machine-specific information.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TeamFoundationEnvironment.GetTfsLocalApplicationDataPath">
            <summary>
            Returns the path to the Team Foundation user application data folder path.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TeamFoundationEnvironment.GetTfsSharedFilesPath">
            <summary>
            Returns the path to the common Microsoft Shared TFS files.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TeamFoundationEnvironment.GetTfsSharedFilesPathX86">
            <summary>
            Returns the path to the common Microsoft Shared TFS files under x86.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TeamFoundationEnvironment.GetVisualStudioInstallPath">
            <summary>
            Returns the path to the Visual Studio install directory.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TeamFoundationEnvironment.GetVisualStudioPrivateAssembliesPath">
            <summary>
            Returns the path to the Visual Studio Private Assemblies directory.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.TfsBaseWorker.WaitHandle">
            <summary>
            Gets a wait handle for this task. This wait handle is signalled when the DoWork action is completed
            by a background thread and before WorkCompleted action is started on the UI thread 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.TfsBackgroundWorkerManager.Instance">
            <summary>
            Global instance for TFS to use, Never dispose this instance.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TfsBackgroundWorkerManager.RegisterWorker(Microsoft.TeamFoundation.Common.Internal.TfsBaseWorker)">
            <summary>
            Regiters a worker
            </summary>
            <param name="tfsWorker">the worker object</param>
            <returns>false if the worker is already registered</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TfsBackgroundWorkerManager.RegisterWorker(Microsoft.TeamFoundation.Common.Internal.TfsBaseWorker,System.Guid)">
            <summary>
            Regiters a worker
            </summary>
            <param name="tfsWorker">the worker object</param>
            <param name="groupId">the group this worker belongs to, Guid.Empty for gloabl group (no thread limit for this group)</param>
            <returns>false if the worker is already registered</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TfsBackgroundWorkerManager.IsQueued(System.Object)">
            <summary>
            Check to see if the specified worker is queued
            </summary>
            <param name="identifier">worker Id</param>
            <returns>true for queued or running</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TfsBackgroundWorkerManager.IsQueuedOrRunning(System.Object)">
            <summary>
            Check to see if the specified worker is queued or running
            </summary>
            <param name="identifier">worker Id</param>
            <returns>true for queued or running</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TfsBackgroundWorkerManager.GetArgument(System.Object,System.Object@)">
            <summary>
            Get the work argument
            </summary>
            <param name="identifier">worker Id</param>
            <param name="argument">worker argument</param>
            <returns>true for worker found and argument returned, false for worker not found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TfsBackgroundWorkerManager.SetArgument(System.Object,System.Object)">
            <summary>
            Set the work argument
            </summary>
            <param name="identifier">worker Id</param>
            <param name="argument">work argument</param>
            <returns>true for worker found and argument updated, false otherwise</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.TfsBackgroundWorkerManager.TaskCounter">
            <summary>
            Get the static task count for all background workers.  This is used by
            tests to accurately determine when all background work has been completed.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TFVersionUtil.GetProductVersion">
            <summary>
            Gets the version of MS.TF.Common assembly.
            </summary>
            <returns>version in a format of  {Major}.{Minor}.{Build}</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TFVersionUtil.GetProductVersion(System.Boolean)">
            <summary>
            Gets the version of MS.TF.Common assembly.
            </summary>
            <param name="includeRevision">specifies whether revision number is included in the version</param>
            <returns>if includeRevision is true {Major}.{Minor}.{Build}, else {Major}.{Minor}.{Build}.{Revision}</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TFVersionUtil.GetFileVersion(System.Reflection.Assembly)">
            <summary>
            Gets the file version of a given assembly
            </summary>
            <returns>version in a format of  {Major}.{Minor}.{Build}</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TFVersionUtil.GetFileVersion(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Gets the file version of a given assembly
            </summary>
            <param name="includeRevision">specifies whether revision number is included in the version</param>
            <returns>if includeRevision is true {Major}.{Minor}.{Build}, else {Major}.{Minor}.{Build}.{Revision}</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.Tree`1">
            <summary>
            Generic tree class.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.Tree`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.Tree`1.HiddenRoot">
            <summary>
            Get/set the hidden root node.  This is used for organizational purposes
            and is not considered to be part of the tree from the caller's view.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.Tree`1.Clear">
            <summary>
            Clear the tree.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.Tree`1.RootNodes">
            <summary>
            Get the root nodes collection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.Tree`1.Find(System.String,System.String,System.StringComparison)">
            <summary>
            Find a tree node based on the specified path.  This method requires
            that each node supports ToString().
            </summary>
            <param name="nodePath">Path to the node (ex: "/a/b/c")</param>
            <param name="delimiter">Path delimiter (ex: "/") or null if not used in path</param>
            <param name="comparisonType">Type of string comparison to use</param>
            <returns>TreeNode if found, null otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.Tree`1.GetSelectedNodes">
            <summary>
            Get all selected nodes.
            </summary>
            <returns>TreeNodeCollection containing the selected nodes.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.Tree`1.GetCheckedNodes">
            <summary>
            Get all checked nodes.
            </summary>
            <returns>TreeNodeCollection containing the checked nodes.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.TreeNode`1">
            <summary>
            Generic tree node class.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.Value">
            <summary>
            Get/set the value for this node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.Parent">
            <summary>
            Get/set the parent for this node.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.ToString">
            <summary>
            Return the string representation of the value, not the TreeNode wrapper.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.HasChildren">
            <summary>
            Returns true if this node has children.  Checking this will not cause
            the child list to be instantiated.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.ChildNodes">
            <summary>
            Get the collection of child nodes.  This collection is lazily instantiated, so
            use the HasChildren property if just checking for child existence.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.Tag">
            <summary>
            Get/set a user-defined object for this node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.IsSelected">
            <summary>
            Get/set the selected flag for this node.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.GetSelectedNodes">
            <summary>
            Get all selected nodes.
            </summary>
            <returns>TreeNodeCollection containing the selected nodes.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.GetSelectedNodes(Microsoft.TeamFoundation.Common.Internal.TreeNodeCollection{`0})">
            <summary>
            Get all selected nodes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.IsChecked">
            <summary>
            Get/set the checked flag for this node.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.SetChecked(System.Boolean,System.Boolean)">
            <summary>
            Check/uncheck this node and any nodes underneath it.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.GetCheckedNodes">
            <summary>
            Get all checked nodes.
            </summary>
            <returns>TreeNodeCollection containing the checked nodes.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.GetCheckedNodes(Microsoft.TeamFoundation.Common.Internal.TreeNodeCollection{`0})">
            <summary>
            Get all checked nodes.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.Find(System.String,System.String,System.StringComparison)">
            <summary>
            Find a tree node based on the specified path.  This method requires
            that each node supports ToString().
            </summary>
            <param name="nodePath">Path to the node (ex: "/a/b/c")</param>
            <param name="delimiter">Path delimiter (ex: "/")</param>
            <param name="comparisonType">Type of string comparison to use</param>
            <returns>TreeNode if found, null otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.FireNotifyPropertyChanged(System.String)">
            <summary>
            Fire the PropertyChanged event.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.TreeNodeChildCollection`1">
            <summary>
            Tree node child collection.
            
            This collection is a special derivative of TreeNodeCollection that will reset the parent
            of any TreeNode that is added to it.  This provides a way for nodes to walk their ancestry
            in the tree.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.TreeNodeChildCollection`1.#ctor(Microsoft.TeamFoundation.Common.Internal.TreeNode{`1})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.TreeNodeChildCollection`1.InsertItem(System.Int32,Microsoft.TeamFoundation.Common.Internal.TreeNode{`1})">
            <summary>
            InsertItem override that sets the parent on the node.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.TreeNodeChildCollection`1.SetItem(System.Int32,Microsoft.TeamFoundation.Common.Internal.TreeNode{`1})">
            <summary>
            SetItem override that sets the parent on the node.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TreeNode`1.TreeNodeChildCollection`1.RemoveItem(System.Int32)">
            <summary>
            RemoveItem overload that clears the parent on the node.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.TreeNodeCollection`1">
            <summary>
            Tree node collection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.TreeNodeCollection`1.Find(System.String,System.StringComparison)">
            <summary>
            Find a child node based on the specified string path.  This method requires
            that each node supports ToString().  This is called by Tree.Find(nodePath).
            </summary>
            <param name="nodeString">String for the node</param>
            <param name="comparisonType">Type of string comparison to use</param>
            <returns>TreeNode if found, null otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Common.Internal.UserNameUtil.GetIdentityName(System.String,System.String,System.String,System.String,System.Int32,System.String@,System.String@)" -->
        <member name="M:Microsoft.TeamFoundation.Common.Internal.UserNameUtil.GetSecurityIdentifier(System.String)">
            <summary>
            Gets a SecurityIdentifier for a user name.  This can also be used to validate that a given username is valid.  Throws an IdentityNotMappedException exception if the user is not valid.
            </summary>
            <param name="userName">domain\user</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.UserNameUtil.IsWellKnownAccount(System.String,System.Security.Principal.WellKnownSidType)">
            <summary>
            Determines if the user account provided matches the specified well known SID.
            </summary>
            <param name="userName">domain\user</param>
            <param name="wellKnownType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.UserNameUtil.NormalizeDomainUserFormat(System.String)">
            <summary>
            Normalizes a user name in one of various formats into the NT 4.0 account name format
            (e.g. "domain\username").
            
            For example:  
            
              "northamerica\rhorvick" becomes "NORTHAMERICA\rhorvick"
              "rhorvick@northamerica.corp.microsoft.com" becomes "NORTHAMERICA\rhorvick"
            </summary>
            <param name="account">The input user name</param>
            <returns>The normalized username or null if the input could not be normalized.</returns>    
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.UserNameUtil.NetBiosName">
            <summary>
            Returns the NetBIOS name.  This will be truncated to 15 characters.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.UserNameUtil.CurrentMachineAccountName">
            <summary>
            Returns the domain\machine$ account name for the current machine.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.UserNameUtil.GetMachineAccountName(System.String)">
            <summary>
            Returns the domain\machine$ account name for the specified machine.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.UserNameUtil.TranslateAccountNameIfNetworkService(System.String)">
            <summary>
            Translate the given user name into the machine's domain account name 
            if the given user name is the "Network Service" account.
            </summary>
            <returns>Translated name if it is "Network Service".  Else, the original input.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.UserNameUtil.CurrentUserName">
            <summary>
            Returns the full user domain name of the active user (e.g. DOMAIN\username).
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.WatsonReport">
            <summary>
            The WatsonReport is a class used to generate a Dr. Watson report that
            is submitted to the Windows Error Reporting service. This class uses 
            the WER API for submitting reports.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WatsonReport.#ctor(Microsoft.TeamFoundation.Common.Internal.WatsonReport.WatsonReportType,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="reportType">Indicates the desired behavior when the report is sent to Watson</param>
            <param name="eventCategory">Exception category reported</param>
            <param name="exceptionToReport">Exception to be reported.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WatsonReport.VerifyConfiguration">
            <summary>
            The VerifyConfiguration will make sure that WER is installed on
            the client machine.
            </summary>
            <returns>Returns TRUE if WER is available.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WatsonReport.CreateReport(Microsoft.TeamFoundation.Common.Internal.WatsonReport.WatsonReportType,System.String,System.Exception)">
            <summary>
            CreateReport creates an instance of a watson report. This overload
            takes an exception and uses it to initialize the report.
            </summary>
            <param name="reportType">Indicates the desired behavior when the report is sent to Watson</param>
            <param name="exceptionEventType">Exception category to be reported</param>
            <param name="exceptionToReport">Exception to be reported.</param>
            <returns>WatsonReport initialized with the exception.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WatsonReport.FileReport">
            <summary>
             File the problem report.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WatsonReport.FileWerReport(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Creates and submits a WER problem report.
            </summary>
            <param name="filesToKeep"></param>
            <param name="filesToDelete"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WatsonReport.GenerateWatsonManifest(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Generate a manifest file that contains information about the application event.
            
            dw20 is no longer used for error reporting, but this report file still contains 
            good information about the application event.  It is now added as a file that 
            gets uploaded with the event information.  It is NOT used for configuration of 
            the WER API.
            </summary>
            <param name="filesToKeep"></param>
            <param name="filesToDelete"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WatsonReport.GetExceptionTypeString(System.Exception)">
            <summary>
            Return the class name of the exception, truncating if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WatsonReport.EventParameterString(System.String)">
            <summary>
            See overload.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WatsonReport.EventParameterString(System.String,System.Int32)">
            <summary>
            Return a string for an event parameter name, trimming from the
            left if necessary to meet the size restraint.
            </summary>
            <remarks>
            If the parameter length exceeds the maximum, the rightmost
            characters are returned.
            </remarks>
            <param name="parameter">The event parameter name</param>
            <param name="maxParameterLength">The maximum size of the parameter</param>
            <returns>A string, trimmed on the left that meets the size constraint</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.DisplayInformation">
            <summary>
            This is the display information that is shown to the user when the
            dialog prompts them to send the report to Microsoft or when the 
            event queue is reviewed by an administrator.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.IncludeEnvironmentalInformation">
            <summary>
            Include environmental information in the report
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.AppDomain">
            <summary>
            The application domain for which assembly information will be reported.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.EventParameters">
            <summary>
            This is a collection of up to 10 parameters that may be passed to
            the server and should be set according to the event type. Each 
            event type has a set of paramters that are used.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.EventType">
            <summary>
            This is the event type. It is used for determining the type of 
            parameters sent to the server as well as used as a filtering
            condition when the reports are rolled up on the service.
            </summary>
            <value>There is no default Event Type and the client must supply one</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.ReportDataFiles">
            <summary>
            This is a collection of local files that are to be included in the
            report. By default you can attach up to 4 files. If you need to 
            attach more, you must supply the fDwrNoDefaultCabLimit as one of
            the Reporting flags.
            
            Note: The exception file is not included in the 4 file limit.
            </summary>
            <value>By default there are no files sent to the server except the file generated from the exception.</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.ApplicationInformation">
            <summary>
            This value is used to obtain application specific information for the
            report. This is useful to provide application contextual information in
            addition to the normal set of information included in a report. The information
            provided will be included with the environment variables and request information 
            (if HTTP request information is available).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.KeepReportFiles">
            <summary>
            This flag controls whether or not the files sent for this report
            are kept or deleted after the report is generated. This only
            controls how files added by the client are handled. All internal
            files generated by the WatsonReport class are removed.
            
            Note: The contents of the exception are used to build one file and
            this file is always cleaned up after the report is complete.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.LoggingFlags">
            <summary>
            This allows the caller to supress or perform when a report is filed.
            See WatsonReport.WatsonLoggingFlags for the set of options available.
            </summary>
            <value>Default value for this is 0. Logging is not surpressed by default and
            a response Url is not written to the data section.</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.ReportingFlags">
            <summary>
            The caller is required to setup the reporting mode needed for this
            report. If the caller calls FileReport before the reporting flags
            are set the report will not be sent.
            See WatsonReport.WatsonReportingFlags for the options available.
            </summary>
            <value>Default value for this is 0. The caller is required to set this field</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.UserInterfaceFlags">
            <summary>
            The caller may choose to setup some flags to control how the UI is
            shown. This is only used if the reporting flags are set to show the 
            UI instead or queuing or automatically sending the report.
            See WatsonReport.WatsonUserInterfaceFlags for the options available.
            </summary>
            <value>Default value for this is 0. The caller may set options that control the UI shown</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.UserInterfaceCulture">
            <summary>
            This is used to set the language of the UI when a report is brought
            up in the event UI. If this is a silent report the interface language
            is ignored.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.ApplicationName">
            <summary>
            This is used to set the event log source for the report. Set this to the
            event log source established for Watson so Watson can insert an entry for
            the report.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.EventLogSource">
            <summary>
            This is used to set the event log source for the report. Set this to the
            event log source established for Watson so Watson can insert an entry for
            the report.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.ExceptionCategory">
            <summary>
            Exception category reported. Becomes P6 of the report event
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.Assembly">
            <summary>
            This is used to specify an assembly from which versioning and other information
            will be included in the Watson report.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.ReportSynchronously">
            <summary>
            Indicate whether the report should be filed synchronously or not.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Microsoft.TeamFoundation.Common.Internal.WatsonReport.s_reportsFiled" -->
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WatsonReport.m_tfVersion">
            <summary>
            Team Foundation Versioning information -- we use the minor revision number
            to distinquish interim releases of the product. The major revision number
            distinquishes service pack releases and the major/minor numbers are for major and
            point releases
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WatsonReport.m_major">
            <summary>
            This tracks major releases -- 1.0, 2.0, ...
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WatsonReport.m_minor">
            <summary>
            This tracks minor releases -- 1.1, 1.2, ...
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WatsonReport.m_build">
            <summary>
            This tracks build numbers (not currently used)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WatsonReport.m_majRevision">
            <summary>
            This tracks SP information (see Version class MSDN documentation). The value
            is 1 for SP1, 2 for SP2, ...
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WatsonReport.m_minRevision">
            <summary>
            The minor revision that tracks interim releases (CTP, betas, ....) for each
            "major revision" (m_majRevision)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WatsonReport.m_defaultEventParameterLength">
            <summary>
            Default maximum event parameter length.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WatsonReport.FileSeparator">
            <summary>
            Character used by Watson to separate list of files.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Common.Internal.WatsonReport.OmitReport(System.Int32,System.Int32@)" -->
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WatsonReport.CreateFileString(System.Collections.Generic.List{System.String})">
            <summary>
               Convert a list of strings into a Watson file string suitable
               for including in the FilesToDelete/FilesToKeep section.
            </summary>
            <param name="filenameList">files to add  to the string</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WatsonReport.GatherAssemblyInformation(System.Reflection.Assembly,System.Text.StringBuilder)">
            <summary>
            Gather information from an assembly for a Watson Report
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WatsonReport.GatherExceptionData(System.Exception,System.Text.StringBuilder)">
            <summary>
            Gather information from an exception and add it a collection string.
            </summary>
            /// <remarks>
            Additional information is gathered if the exception is a SqlException
            </remarks>
            <param name="ex">The exception from which information is gathered</param>
            <param name="exContents">The string builder object where the information is gathered</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.TeamFoundationVersion">
            <summary>
            Return the VSTF version; note that this becomes P1 of TeamFoundationUE event.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.TeamFoundationComponent">
            <summary>
            Return the VSTF component; note that this becomes P2 of TeamFoundationUE event.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.ReportingAssemblyProductVersion">
             <summary>
             Return the reporting assembly product version, if available. If not available,
             return the reporting assembly CLR version.
            
             Note that this becomes P3 of the TeamFoundationUE event.
             </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.ReportingAssemblyVersion">
            <summary>
            Return the reporting assembly version. Note that this becomes P4 of the
            TeamFoundationUE event.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.ExceptionType">
            <summary>
            Return the exception type. Note that this becomes P6 of the
            TeamFoundationUE event.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.ExceptionSource">
            <summary>
            Return the exception source. The exception source is a combination of the
            stack trace and exception source property.
            Note that this becomes P7 of the TeamFoundationUE event.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.Internal.WatsonReport.ExceptionTargetSite">
            <summary>
            Return the exception target site. Note that this becomes P7 of the
            TeamFoundationUE event.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.WatsonReport.ReturnCodes">
            <summary>
            When DW20.exe is called the exit code will be returned as one of
            the following values.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.WatsonReport.WatsonReportingFlags">
            <summary>
            These are flags used to control how watson treats the report when it
            is filed.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.WatsonReport.WatsonUserInterfaceFlags">
            <summary>
            This is used to control what UI is available and what information
            is shown.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.WatsonReport.WatsonLoggingFlags">
            <summary>
            These are flags that control what information about reports are
            logged locally for this report.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.WatsonReport.WatsonReportType">
            <summary>
            The report type indicates the behavior to be associated with the report.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.Wildcard">
            <summary>
            A class for comparing strings against wildcards.  This recognizes '*' to mean 0 or more of
            any character and '?' as exactly one of any character.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.Wildcard.Match(System.String,System.String)">
            <summary>
            Compare a string against a wildcard and return true if it matches, false if not.  This
            does a case insensitive compare with the Ordinal culture.
            </summary>
            <param name="str">String to match against the pattern.</param>
            <param name="pattern">Patter (using * and ? for wildcards) to match against.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.Wildcard.IsWildcard(System.String)">
            <summary>
            Return true if the specified string contains wildcard characters.
            </summary>
            <param name="str">String to check.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.Wildcard.IsWildcard(System.String,System.Int32,System.Int32)">
            <summary>
            Return true if the specified region of the specified string contains wildcard characters.
            </summary>
            <param name="str">String to check.</param>
            <param name="index">Index to begin checking.</param>
            <param name="count">Number of characters to check.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.Wildcard.IsWildcard(System.Char)">
            <summary>
            Return true if the specified character is a wildcard character.
            </summary>
            <param name="c">The character to test.</param>
            <returns>true if the character is a * or a ?, false if not.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport">
            <summary>
            The WerUtil class pinvokes calls to the Windows Error Reporting API (werapi.h).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WerReportCreate(System.String,Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_REPORT_TYPE,Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_REPORT_INFORMATION)">
            <summary>
             Marshalls a call to the native WerReportCreate method.
             Call this method to initialize the report before adding 
             files or setting parameters.
            </summary>
            <param name="eventType"></param>
            <param name="repType"></param>
            <param name="reportInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WerReportSetParameter(System.Int32,System.String,System.String)">
            <summary>
            Marshals a call to the native WerReportSetParameter method.
            </summary>
            <param name="paramId"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WerReportAddFile(System.String,Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_FILE_TYPE,Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_FILE_FLAGS)">
            <summary>
            Marshals a call to the native WerReportAddFile method.
            </summary>
            <param name="path"></param>
            <param name="repFileType"></param>
            <param name="fileFlags"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WerReportSubmit(Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_CONSENT,Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS)">
            <summary>
            Marshals a call to the native WerReportSubmit method.
            </summary>
            <param name="consent"></param>
            <param name="flags"></param>
            <returns>An enum containing the result of the submit.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WerReportCloseHandle">
            <summary>
            Marshal a call to the native WerReportCloseHandle method.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WerInterop">
            <summary>
            This inner class defines managed entry points to the native WER APIs.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WerInterop.WerReportCreate(System.String,Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_REPORT_TYPE,System.IntPtr,System.IntPtr@)">
            <summary>
            Creates a problem report that describes an application event.
            </summary>
            <param name="eventType">A pointer to a Unicode string that specifies the name of the event.</param>
            <param name="repType">The type of report.</param>
            <param name="reportInformation">A pointer to a WER_REPORT_INFORMATION structure that specifies information for the report.</param>
            <param name="reportHandle">A handle to the report. If the function fails, this handle is NULL.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WerInterop.WerReportSetParameter(System.IntPtr,System.UInt32,System.String,System.String)">
            <summary>
            Sets the parameters that uniquely identify an event.
            </summary>
            <param name="reportHandle">A handle to the report. This handle is returned by the WerReportCreate function.</param>
            <param name="paramID">The identifier of the parameter to be set.  This parameter must be between 0 and 9 inclusive.</param>
            <param name="name">A pointer to a Unicode string that contains the name of the event. If this parameter is NULL, the default name is Px, where x matches the integer portion of the value specified in dwparamID.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WerInterop.WerReportAddFile(System.IntPtr,System.String,Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_FILE_TYPE,Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_FILE_FLAGS)">
            <summary>
            Adds a file to the specified report.
            </summary>
            <param name="reportHandle">A handle to the report. This handle is returned by the WerReportCreate function.</param>
            <param name="path">A pointer to a Unicode string that contains the full path to the file to be added. This path can use environment variables. The maximum length of this path is MAX_PATH characters.</param>
            <param name="fileType">The type of file. This parameter can be one of the following values from the WER_FILE_TYPE enumeration type.</param>
            <param name="fileFlags">File flags</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WerInterop.WerReportSubmit(System.IntPtr,Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_CONSENT,Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS,Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_RESULT@)">
            <summary>
            Submits the specified Windows Error report.
            </summary>
            <param name="reportHandle">A handle to the report. This handle is returned by the WerReportCreate function.</param>
            <param name="consent">The consent status.</param>
            <param name="flags">Flags to modify the behavior.</param>
            <param name="submitResult">The result of the submission.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WerInterop.WerReportAddDump(System.IntPtr,System.IntPtr,System.IntPtr,Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_DUMP_TYPE,System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Adds a dump of the specified type to the specified report.
            </summary>
            <param name="reportHandle">A handle to the report. This handle is returned by the WerReportCreate function.</param>
            <param name="processHandle">A handle to the process for which the report is being generated. This handle must have the STANDARD_RIGHTS_READ and PROCESS_QUERY_INFORMATION access rights.</param>
            <param name="threadHandle">A handle to the thread of hProcess for which the report is being generated. If dumpType is WerDumpTypeMicro, this parameter is required.</param>
            <param name="dumpType">The type of minidump.</param>
            <param name="exceptionParam">A pointer to a WER_EXCEPTION_INFORMATION structure that specifies exception information.</param>
            <param name="dumpCustomOptions">A pointer to a WER_DUMP_CUSTOM_OPTIONS structure that specifies custom minidump options. If this parameter is NULL, the standard minidump information is collected.</param>
            <param name="flags">This parameter can be 0 or WER_DUMP_NOHEAP_ONQUEUE (not used)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WerInterop.WerReportCloseHandle(System.IntPtr)">
            <summary>
            Closes the specified report.
            </summary>
            <param name="reportHandle">A handle to the report. This handle is returned by the WerReportCreate function.</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_FILE_FLAGS">
            <summary>
            Flags that can be specified when adding a file to the report. 
            </summary>
            <remarks>
            NOTE: These should always occupy the lower 16 bits of the file flag dword. 
            The upper 16 bits are reserved for internal use and get cleared by WerAddFile.
            </remarks>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_FILE_FLAGS.WER_FILE_DELETE_WHEN_DONE">
            <summary>
            Delete the file once WER is done
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_FILE_FLAGS.WER_FILE_ANONYMOUS_DATA">
            <summary>
            This file does not contain any PII
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS">
            <summary>
            Windows Error Reporting Report submission flags.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS.WER_SUBMIT_HONOR_RECOVERY">
            <summary>
            show recovery option
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS.WER_SUBMIT_HONOR_RESTART">
            <summary>
            show application restart option
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS.WER_SUBMIT_QUEUE">
            <summary>
            report directly to queue
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS.WER_SUBMIT_SHOW_DEBUG">
            <summary>
            show the debug button
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS.WER_SUBMIT_ADD_REGISTERED_DATA">
            <summary>
            Add registered data to the WER report 
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS.WER_SUBMIT_OUTOFPROCESS">
            <summary>
            Force the report to go out of process
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS.WER_SUBMIT_NO_CLOSE_UI">
            <summary>
            Do not show the close dialog for the critical report
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS.WER_SUBMIT_NO_QUEUE">
            <summary>
            Do not queue the report
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS.WER_SUBMIT_NO_ARCHIVE">
            <summary>
            Do not archive the report
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS.WER_SUBMIT_START_MINIMIZED">
            <summary>
            The initial reporting UI is minimized and will flash
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS.WER_SUBMIT_OUTOFPROCESS_ASYNC">
            <summary>
            Spawn another process to submit the report and return from this function call immediately.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS.WER_SUBMIT_BYPASS_DATA_THROTTLING">
            <summary>
            Bypass data throttling for the report. (Win 7+ only)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS.WER_SUBMIT_ARCHIVE_PARAMETERS_ONLY">
            <summary>
            Archive only the parameters; the cab is discarded. This flag overrides the ConfigureArchive WER setting. (Win 7+ only)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Internal.WindowsErrorReport.WER_SUBMIT_FLAGS.WER_SUBMIT_REPORT_MACHINE_ID">
            <summary>
            Always send the unique, 128-bit computer identifier with the report, regardless of the consent with which the report was submitted. (Win 7+ only)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.#cctor">
            Creates the resource manager instance.
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.Get(System.String)">
            Returns a localized string given a resource string name.
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GetInt(System.String)">
            Returns a localized integer given a resource string name.
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GetBool(System.String)">
            Returns a localized string given a resource string name.
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.Format(System.String,System.Object[])">
            A little helper function to alleviate some typing associated with loading resources and
            formatting the strings.  In DEBUG builds, it also asserts that the number of format
            arguments and the length of args match.
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.AssertionFailureHeader">
            <summary>
            Debug Assertion
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.CannotDeleteDirectoryWithWritableFile(System.Object)">
            <summary>
            The directory {0} cannot be deleted because it contains at least one writable file.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.CannotDeleteDirectoryWithContents(System.Object)">
            <summary>
            The directory {0} cannot be deleted because it is not empty.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.Category(System.Object)">
            <summary>
            Category: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.CommandFailedWithExitCode(System.Object,System.Object)">
            <summary>
            The program {0} failed with exit code {1}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ValueMustBeGreaterThanZero">
            <summary>
            The value must be greater than zero.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EmptyArrayNotAllowed">
            <summary>
            The array must contain at least one element.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EmptyStringNotAllowed">
            <summary>
            The string must have at least one character.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EmptyGuidNotAllowed(System.Object)">
            <summary>
            The guid specified for parameter {0} must not be Guid.Empty.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ErrorCreatingTempFile(System.Object)">
            <summary>
            Error creating temp file in &apos;{0}&apos;
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.Exception">
            <summary>
            Exception: 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ExceptionDataDictionaryReport(System.Object,System.Object)">
            <summary>
            {0} = {1}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ExceptionReport(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            {0}Date (UTC): {1}Machine: {2}Application Domain: {3}Assembly: {4}Service Host: {5}Process Details:  Process Name: {6}  Process Id: {7}  Thread Id: {8}  Account name: {9}Detailed Message: {10}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ExceptionReportNoDetails(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            {0}Date (UTC): {1}Machine: {2}Application Domain: {3}Assembly: {4}Service Host: {5}Process Details:  Process Name: {6}  Process Id: {7}  Thread Id: {8}  Account name: {9}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ExceptionSource">
            <summary>
            Team Foundation
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ExceptionStackTrace(System.Object)">
            <summary>
            Exception Stack Trace: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FoundDirectoryExpectedFilePath(System.Object)">
            <summary>
            {0} could not be retrieved because a directory by the same name exists locally.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.HeadersAndContentsDontMatch(System.Object,System.Object)">
            <summary>
            headers length ({0}) and number of contents columns ({1}) must match
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.HttpStatusInfo(System.Object,System.Object)">
            <summary>
            HTTP code {0}: {1}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.IdentityNotFoundException(System.Object)">
            <summary>
            TF14045: The identity {0} is not a recognized identity.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InnerException">
            <summary>
            Inner Exception Details:
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidComputerName(System.Object)">
            <summary>
            TF10203: The computer name &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidComputerNameTooLong(System.Object,System.Object)">
            <summary>
            TF10204: The computer name &apos;{0}&apos; contains more than {1} characters.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidComputerNameInvalidCharacters(System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidEnumerationValue(System.Object,System.Object)">
            <summary>
            Unknown value {0} for enumeration {1}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidPath(System.Object)">
            <summary>
            TF10121: The path &apos;{0}&apos; is not found or not supported. Type or select a different path.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidPathDollarSign(System.Object)">
            <summary>
            TF10122: The path &apos;{0}&apos; contains a &apos;$&apos; at the beginning of a path component. Remove the &apos;$&apos; and try again.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidPathTooLong(System.Object)">
            <summary>
            TF205022: The following path contains more than the allowed 259 characters: {0}. Specify a shorter path.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidServerPathTooLong(System.Object)">
            <summary>
            TF400889: The following path contains more than the allowed 259 characters: {0}. Specify a shorter path.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidPathTooLongVariable(System.Object,System.Object)">
            <summary>
            TF205023: The following path is not valid: {0}. The path contains the following number of characters: {1}. Specify a shorter path.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidPathInvalidChar(System.Object,System.Object)">
            <summary>
            TF10123: The path &apos;{0}&apos; contains the character &apos;{1}&apos;. Remove the &apos;{1}&apos; and try again.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidPathInvalidCharacters(System.Object)">
            <summary>
            TF10200: The path &apos;{0}&apos; contains one or more characters which are not allowed. Characters which are not allowed include &apos;&quot;&apos;, &apos;/&apos;, &apos;:&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, &apos;\&apos;, and &apos;|&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidPathInvalidCharactersAndWildcards(System.Object)">
            <summary>
            TF205000: The path &apos;{0}&apos; contains one or more characters which are not allowed. Characters which are not allowed include &apos;&quot;&apos;, &apos;/&apos;, &apos;:&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, &apos;\&apos;, &apos;|&apos;, &apos;?&apos;, and &apos;*&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidPathTermination(System.Object)">
            <summary>
            TF10202: The path &apos;{0}&apos; ends with a character which is not allowed. Characters which are not allowed include &apos;.&apos; and &apos; &apos;.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidServerResponse(System.Object)">
            <summary>
            Please contact your administrator. There was an error contacting the server.Technical information (for administrator):  {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidTraceFile(System.Object,System.Object)">
            <summary>
            TF30048: The file {0} specified to store the trace output could not be found or created. Confirm that the file name is correct and that your user account has permission to access the file: {1}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidUserName(System.Object)">
            <summary>
            TF10132: {0} is not a supported user name.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ListenerInitializeError(System.Object)">
            <summary>
            TF30049: Team Foundation Server encountered an error initializing listener {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.LogExceptionHeader(System.Object,System.Object)">
            <summary>
            Exception Message: {0} (type {1})
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.LogExceptionDataDictionary(System.Object)">
            <summary>
            Exception Data Dictionary:{0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.Method(System.Object)">
            <summary>
            Method: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.AColonB(System.Object,System.Object)">
            <summary>
            {0}: {1}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.OutOfRange(System.Object)">
            <summary>
            The value {0} is outside of the allowed range.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PathIsNotADirectory(System.Object)">
            <summary>
            The path {0} is not a directory.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.StackFrameHeader(System.Object,System.Object)">
            <summary>
            at {0}.{1}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.StackFrameLineFormat(System.Object,System.Object)">
            <summary>
            {0} (line {1})
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.SqlExceptionError(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            SQL Error[{0}]: {1}    Class: {2}    Number: {3}    Server: {4}    Source: {5}    State: {6}    Procedure: {7}    Line Number: {8}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.SqlExceptionReport(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            SQL Exception Class: {0}SQL Exception Number: {1}SQL Exception Procedure: {2}SQL Exception Line Number: {3}SQL Exception Server: {4}SQL Exception State: {5}SQL Error(s):{6}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.SoapExceptionReport(System.Object)">
            <summary>
            SoapException Details: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WebExceptionReport(System.Object,System.Object,System.Object)">
            <summary>
            Status: {0}Response Status Code: {1}Response Status Message: {2}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WebExceptionReport_ResponseDisposed(System.Object)">
            <summary>
            Status : {0}Response already disposed, no additional information available.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.StringContainsIllegalChars">
            <summary>
            The value contains characters that are not allowed (control characters, 0xFFFE, or 0xFFFF). Please remove those characters.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.TraceSettingArgumentException(System.Object)">
            <summary>
            TF30061: The trace switch {0} is not a valid Team Foundation Server trace switch.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.TraceStartMessage(System.Object,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.TraceStopMessage(System.Object,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.TraceToggleException">
            <summary>
            TF30062: An error occurred while manipulating the trace state of the application
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.Unauthorized(System.Object)">
            <summary>
            TF30063: You are not authorized to access {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UnableToContactService">
            <summary>
            TF53016: Unable to contact the web service; examine the event log for other correlating entries.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UnableToRunApp(System.Object)">
            <summary>
            The application &quot;{0}&quot; could not be executed.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UnableToRetrieveRegistrationInfo(System.Object)">
            <summary>
            Unable to retrieve the registration information for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UnauthorizedUnknownServer">
            <summary>
            TF30064: You are not authorized to access the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WatsonMainPleaRegular">
            <summary>
            We have created an error report that you can send to help us fix bugs. We will treat this report as confidential and anonymous.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WatsonMainIntroBold">
            <summary>
            TF30069: An unexpected condition has occurred.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WatsonMainIntroRegular">
            <summary>
            TF30070: An unexpected condition has occurred in the Team Foundation server. Information about the condition has been gathered.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WatsonMainPleaBold">
            <summary>
            Please tell Microsoft about this problem.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WatsonEventDescription(System.Object)">
            <summary>
            TF30068: An exception has occurred in a Team Foundation component: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WatsonReportBeingPrepared">
            <summary>
            TF53012: A crash report is being prepared for Microsoft using the Watson Crash Reporting Mechanism. The prepared report will be queued when ready and may be sent to Microsoft through administrator control.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WatsonReportException">
            <summary>
            TF30071: Unable to create and file a Watson report.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WatsonReportInformation(System.Object)">
            <summary>
            TF53013: A crash report is being prepared for Microsoft. The following information is included in that report:{0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WatsonReportNotFiled(System.Object)">
            <summary>
            TF53014: A crash report for this problem was recently created; a new crash report for this occurrence of the problem is not being created. This problem has occurred {0} times.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WatsonReportReady">
            <summary>
            TF53015: A crash report has been prepared for Microsoft using the Watson Crash Reporting Mechanism. The prepared report has been queued and may be sent to Microsoft through administrator control.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WildcardsNotAllowed">
            <summary>
            Wildcards are not allowed.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.VersionCheckFailed(System.Object)">
            <summary>
            TF53000: The client version is not supported by the server {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.RegistrationDataUnavailable(System.Object)">
            <summary>
            TF53002: Unable to obtain registration data for application {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.VersionCheckFailedRange(System.Object,System.Object)">
            <summary>
            TF53003: The client version is not supported by the server {0}. Supported range is {1}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.MalformedUri(System.Object)">
            <summary>
            Malformed Artifact URI: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.MalformedUrl(System.Object)">
            <summary>
            Malformed Artifact URL: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.MalformedArtifactId(System.Object)">
            <summary>
            The artifact is not understood by this application. Either the artifact supplied is invalid or the application doesn&apos;t have the required software updates. Artifact Id: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.NullArtifactUrl">
            <summary>
            Null Artifact Url
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FailureGetArtifact">
            <summary>
            Unable to get artifacts from tool.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.NullArtifactUriRoot">
            <summary>
            ArtifactUriRoot is Null
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UnsupportedLinkFilter(System.Object)">
            <summary>
            TF54001: An unsupported link filter type {0} was specified.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServicesUnavailable(System.Object,System.Object)">
            <summary>
            TF400324: Team Foundation services are not available from server {0}.Technical information (for administrator):  {1}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServicesUnavailableNoServer(System.Object)">
            <summary>
            TF400324: Team Foundation services are not available from the server.Technical information (for administrator):  {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DatabaseMissingErrorMessages(System.Object)">
            <summary>
            TF205005: One or more of the installed error messages for Team Foundation Server cannot be found. Either the SQL Server instance has not been configured to work with Team Foundation Server, or a configuration change has caused a conflict. In order to fix this problem, you must run the TFSConfig PrepSQL command on the SQL Server instance. Detailed error information: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.AccessCheckExceptionTokenFormat(System.Object,System.Object,System.Object)">
            <summary>
            Access Denied: {0} needs the following permission(s) on the resource {1} to perform this action: {2}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidOperationOnNonHierarchicalNamespace">
            <summary>
            TF205044: This function must be called on a hierarchical security namespace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidSecurityNamespaceGuid(System.Object)">
            <summary>
            TF205045: No security namespace exists with the following ID: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ReadOnlySecurityCollectionExceptionMessage">
            <summary>
            Invalid attempt to write to collection, it is read only.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidTokenSplitType">
            <summary>
            A split cannot be performed on a resource that has a SecurityTokenSplitType of NoSplit.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.SecurityIdentityNotFoundMessage(System.Object)">
            <summary>
            The guid {0} that was provided to the security system was not found.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.AbsoluteVirtualPathNotAllowed(System.Object)">
            <summary>
            An absolute virtual path is not allowed. Remove the leading slash: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServiceForFilterNotFoundWithIdentifier(System.Object,System.Object)">
            <summary>
            TF205041: No services exist with the specified type and identifier. Type: {0}. Identifier: {1}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.OperationNotSupportedMessage(System.Object,System.Object)">
            <summary>
            The function: &apos;{0}&apos; within the service: &apos;{1}&apos;  is not supported by the server this client is talking to.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ErrorReadingFile(System.Object,System.Object)">
            <summary>
            Error reading file: {0} ({1}).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DuplicateLocationMappingMessage">
            <summary>
            Only one location mapping can exist on a service definition for a given access mapping.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidServiceTypeOnRegister(System.Object)">
            <summary>
            TF205036: A service cannot be registered with the following service type: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServiceForFilterNotFound(System.Object)">
            <summary>
            TF205040: No services exist with the following type: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidServiceDefintionMissingMapping(System.Object,System.Object)">
            <summary>
            The service definition for service {0} is missing the location of the service for the access mapping {1}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidFullyQualifiedServiceDefinition(System.Object)">
            <summary>
            TF205043: A service definition exists with the following RelativeToSetting value: {0}. Any service definition that has this RelativeToSetting value must have its RelativePath property value set to null.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidRelativeServiceDefinition(System.Object)">
            <summary>
            A service definition with a RelativeToSetting of &apos;{0}&apos; must have a RelativePath property that is not null.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidIdentifierOnUpdate">
            <summary>
            When updating a service definition, make sure the identifier is properly set. The best way to do this is to retrieve the existing IServiceDefinition from the client object model.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidLocationServiceUrlRelativePath(System.Object,System.Object)">
            <summary>
            The location service url &apos;{0}&apos; is invalid. The location service url passed in must end with &apos;{1}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidSecurityNamespaceDescriptionMessage">
            <summary>
            For a hierarchical security namespace, either the separator character or the element length must be set and the other one must be the invalid value (&apos;\0&apos; for the separator character and -1 for the element length).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.AccessMappingAlreadyRegistered(System.Object)">
            <summary>
            TF205033: The &quot;AccessMapping&quot; class has a value for the &quot;Moniker&quot; property that is not valid. The value for &quot;Moniker&quot; must be unique, but another property already has the following value: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.XmlNodeMissing(System.Object,System.Object)">
            <summary>
            The mandatory xml node &apos;{0}&apos; is missing under &apos;{1}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.XmlNodeEmpty(System.Object,System.Object)">
            <summary>
            The xml node &apos;{0}&apos; under node &apos;{1}&apos; cannot be empty
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.AccessMappingNotRegistered(System.Object)">
            <summary>
            TF205034: The &quot;AccessMapping&quot; class has an unregistered value for the &quot;Moniker&quot; property. The following value has not been registered: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServiceDefinitionWithNoLocations(System.Object)">
            <summary>
            TF205046: The service with the following type does not have a location mapping: {0}. You must provide at least one location in order to configure locations for an external service.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FullyQualifiedLocationParameter">
            <summary>
            The value of the location parameter cannot be null if the RelativeToSetting is &apos;FullyQualified&apos;
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.RelativeLocationMappingErrorMessage">
            <summary>
            TF205038: You cannot add location mappings to service definitions that are not part of the FullyQualified type.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.XmlAttributeEmpty(System.Object,System.Object)">
            <summary>
            The attribute &apos;{0}&apos; on node &apos;{1}&apos; cannot be empty
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.XmlAttributeNull(System.Object,System.Object)">
            <summary>
            The node &apos;{0}&apos; must only have the attribute &apos;{1}&apos;
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidServiceDefinitionToolId">
            <summary>
            The ToolId property for a service definition cannot be the empty string. To represent the service definition not having a tool id, pass null.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ConfigFileException">
            <summary>
            The configuration file failed to load.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DuplicateRegistrationEntry(System.Object)">
            <summary>
            Duplicate registration entry in configuration file: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.RegistrationEntryTypeMissing">
            <summary>
            Registration entry type missing.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServiceInterfacesDepricated">
            <summary>
            Service Interfaces are no longer valid entries in Registration configuration files. Service Interfaces should be entered using the Location Service configuration files.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.XmlRootNodeMissing(System.Object)">
            <summary>
            The mandatory root node &apos;{0}&apos; is missing.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.CorruptRegistrationData(System.Object,System.Object)">
            <summary>
            The registry data near &apos;{0}&apos; appears to be invalid. An entry with a name of &apos;{1}&apos; was expected.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UnableToRetrieveLocationInfo(System.Object)">
            <summary>
            Unable to retrieve the location service information for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServiceDefinitionDoesNotExist(System.Object,System.Object)">
            <summary>
            The service definition with service type &apos;{0}&apos; and identifier &apos;{1}&apos; does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServiceDefinitionWithoutIdentifierDoesNotExist(System.Object)">
            <summary>
            TF205039: No service definition exists with the following service type: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidFindServiceByTypeAndToolId(System.Object,System.Object,System.Object)">
            <summary>
            TF205042: Two or more service definitions are in conflict. The specified parameters were found in the following number of service definitions: {2}. Service definitions must have unique parameters for the combination of ServiceType and ToolID in order to call this function. ServiceType: {0}. ToolID: {1}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidAccessMappingLocationServiceUrl">
            <summary>
            TF205035: The access mapping is not valid and cannot be registered. The location service URL cannot be null or empty.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.SingletonServiceDefinitionViolation(System.Object)">
            <summary>
            The service definition with type &apos;{0}&apos; could not be registered because it would violate the singleton service definition constraint. Either a singleton service definition of this type is already registered or this is a singleton definition and other service definitions of this type are already registered.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.LocationMappingDoesNotExist(System.Object,System.Object,System.Object)">
            <summary>
            TF205037: No location mapping exists with the specified parameters. You specified a location mapping with the following service type, service identifier, and moniker: {0}, {1}, {2}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.BAD_ACCOUNT_NAME(System.Object)">
            <summary>
            TF205024: The following account name is not valid: &apos;{0}&apos;. For more information about valid naming conventions for accounts, see the topic &quot;Naming Restrictions for Team Foundation Server&quot; on the Microsoft Web site (http://go.microsoft.com/fwlink/?LinkId=77936).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.BAD_DISPLAY_NAME(System.Object)">
            <summary>
            TF205025: The following display name is not valid: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.BAD_GROUP_NAME(System.Object)">
            <summary>
            TF50241: The following Team Foundation group name is not valid: &apos;{0}&apos;. For more information about valid naming conventions for Team Foundation groups, see the topic &quot;Naming Restrictions for Team Foundation Server&quot; on the Microsoft Web site (http://go.microsoft.com/fwlink/?LinkId=77936).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.BAD_GROUP_DESCRIPTION(System.Object)">
            <summary>
            TF50250: Invalid group description (&apos;{0}&apos;).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.BAD_SID(System.Object,System.Object)">
            <summary>
            TF50360: Argument {1} contains an invalid SID (&apos;{0}&apos;).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.CannotCreateOrphanedResource">
            <summary>
            TF205026: One or more resources that you specified cannot be created. All resources must be referenced by at least one node. In order to create a new resource, make sure that it is attached to a node that is either being created or being updated.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.CatalogNodeDoesNotExist">
            <summary>
            TF205027: The catalog node that you specified either does not exist, or you do not have sufficient permissions to access it.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.CatalogResourceDoesNotExist(System.Object)">
            <summary>
            TF205028: An error occurred when attempting to access the catalog resource with the following name: {0}. Either the resource does not exist, or you do not have sufficient permissions to access it.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.CatalogResourceTypeDoesNotExist(System.Object)">
            <summary>
            TF205029: No catalog resource type exists with the following identifier: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidUnicodeCharacter(System.Object)">
            <summary>
            TF20507: The string argument contains a character that is not valid: U+{0:X4}. Correct the argument, and then try the operation again.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PropertyArgumentExceededMaximumSizeAllowed(System.Object,System.Object)">
            <summary>
            TF20508: The argument &apos;{0}&apos; is too long. It must not contain more than &apos;{1}&apos; characters.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidPropertyValueSize(System.Object,System.Object,System.Object)">
            <summary>
            TF20509: The value of property &apos;{0}&apos; exceeds the maximum size allowed. &apos;{1}&apos; values must not exceed &apos;{2}&apos; bytes.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PropertyInvalidVersionSpecification(System.Object)">
            <summary>
            TF20510: The following version specification is not valid: &apos;{0}&apos;. You must specify a valid version.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UnsupportedPropertyType(System.Object)">
            <summary>
            TF20511: The property type &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.MultipleExtensionNames">
            <summary>
            Warning: Team Foundation Extension has multiple ExtensionName attributes. Using full class name as extension name.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ExtensionNameNullOrEmpty">
            <summary>
            Warning: Extension name is null or empty. Using full class name as extension name.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DuplicateExtensionNameError(System.Object,System.Object,System.Object)">
            <summary>
            Extension name {0} is used by type {1} and {2}. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UnsupportedPropertyValue(System.Object,System.Object,System.Object)">
            <summary>
            Property &apos;{0}&apos; value &apos;{1}&apos; of type &apos;{2}&apos; is not supported by Team Foundation Properties.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.SharePointServiceAccountsGroupDescription">
            <summary>
            This application group should only contain service accounts for SharePoint Web applications.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FailedToMapPropertyKindToArtifactKind(System.Object)">
            <summary>
            Could not find the artifact type for property kind &apos;{0}&apos;. The property kind was not properly defined.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.SharePointServiceAccountsGroupName">
            <summary>
            SharePoint Web Application Services
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.IllegalIdentityException(System.Object)">
            <summary>
            TF10158: The user or group name {0} contains unsupported characters, is empty, or too long.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.Ellipsis(System.Object)">
            <summary>
            {0}...
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.SparseTreeTokenAlreadyExists">
            <summary>
            A node with the same token already exists in the SparseTree.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.SparseTreeNoEmptyStringToken">
            <summary>
            Empty string tokens are not supported with a fixed element length.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidCatalogNodePathAllowWildcard(System.Object)">
            <summary>
            TF205030: The following catalog node path is not valid: {0}. Catalog node paths must be built from base-64 encoded Guids, cannot exceed 37 levels, and can contain only the wildcards *, **, and … at the end of the path.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidCatalogNodePathNoWildcard(System.Object)">
            <summary>
            TF205031: The following catalog node path is not valid: {0}. Catalog node paths must be built from base-64 encoded Guids, cannot exceed 37 levels, and cannot contain wildcards.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServicingStepNotExecuted(System.Object,System.Object,System.Object)">
            <summary>
            Servicing step &apos;{0}&apos; is not executed. (ServicingOperation: &apos;{1}&apos;; Step group: &apos;{2}&apos;)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ExecutingServicingStep(System.Object,System.Object,System.Object)">
            <summary>
            Executing servicing step {0}. (ServicingOperation: {1}; Step group: {2})
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServicingStepFailed(System.Object,System.Object,System.Object)">
            <summary>
            Servicing step &apos;{0}&apos; failed. (ServicingOperation: &apos;{1}&apos;; Step group: &apos;{2}&apos;)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServicingStepPassed(System.Object,System.Object,System.Object)">
            <summary>
            Servicing step &apos;{0}&apos; passed. (ServicingOperation: &apos;{1}&apos;; Step group: &apos;{2}&apos;)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServicingStepPassedWithWarnings(System.Object,System.Object,System.Object)">
            <summary>
            Servicing step &apos;{0}&apos; passed, with warnings. (ServicingOperation: &apos;{1}&apos;; Step group: &apos;{2}&apos;)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServicingStepPassedWithSkipChildren(System.Object,System.Object,System.Object)">
            <summary>
            Servicing step &apos;{0}&apos; passed, and marked its children steps to be skipped. (ServicingOperation: &apos;{1}&apos;; Step group: &apos;{2}&apos;)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServicingStepStateChange(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Servicing step &apos;{0}&apos; state changed to &apos;{1}&apos;. (ServicingOperation: &apos;{2}&apos;; Step group: &apos;{3}&apos;)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServicingStepValidated(System.Object,System.Object,System.Object)">
            <summary>
            Servicing step &apos;{0}&apos; was validated. (ServicingOperation: &apos;{1}&apos;; Step group: &apos;{2}&apos;)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServicingStepValidatedWithWarnings(System.Object,System.Object,System.Object)">
            <summary>
            Servicing step &apos;{0}&apos; was validated, with warnings. (ServicingOperation: &apos;{1}&apos;; Step group: &apos;{2}&apos;)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ValidatingServicingStep(System.Object,System.Object,System.Object)">
            <summary>
            Validating servicing step {0}. (ServicingOperation: {1}; Step group: {2})
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServicingStepSkipped(System.Object,System.Object,System.Object)">
            <summary>
            Servicing step &apos;{0}&apos; skipped. (ServicingOperation: &apos;{1}&apos;; Step group: &apos;{2}&apos;)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.CollectionDoesNotExist(System.Object)">
            <summary>
            The collection with id &apos;{0}&apos; does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidRegistryValue(System.Object,System.Object)">
            <summary>
            The type converter for type {0} must support conversion from the source type to {1}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GlobalSecurityAdministerConfigurationPermission">
            <summary>
            Administer Configuration
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UriUtility_AbsoluteUriRequired(System.Object)">
            <summary>
            TF205013: The following URL is not valid: {0}. You must specify an absolute path.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UriUtility_RelativePathInvalid(System.Object)">
            <summary>
            TF205014: The following relative path is not valid: {0}. It must be both well formed and relative. It might be an absolute path.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UriUtility_UriNotAllowed(System.Object)">
            <summary>
            TF205012: The following URL is not valid: {0}. It must begin with http or https.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UriUtility_MustBeAuthorityOnlyUri(System.Object,System.Object)">
            <summary>
            TF253018: The following URL is not valid: {0}. Try removing any relative path information from the URL (for example, {1}).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.AccessCheckExceptionPrivilegeFormat(System.Object,System.Object)">
            <summary>
            Access Denied: {0} needs the following permission(s) to perform this action: {1}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.SharePointServiceAccountsGroupNotFound(System.Object)">
             <summary>
             {0} will be filled in with the value from CommonResources.SharePointServiceAccountsGroupName
            
             TF249022: The following group could not be found: {0}. Verify that the group name is correct.
             </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FailedToAddSharePointServiceAccount(System.Object,System.Object)">
            <summary>
            TF205015: Required permissions could not be granted to the service account for the SharePoint Web application in Team Foundation Server. The service account is for the following SharePoint Web application: {0}. Open the Team Foundation Administration Console and make sure that the service account is a member of the following group: {1}. If necessary, manually add the service account to that group.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FailedToAddSharePointServiceAccountWithException(System.Object,System.Object,System.Object)">
            <summary>
            TF205016: Required permissions could not be granted to the service account for the SharePoint Web application in Team Foundation Server. The following error occurred: {2}. The service account is for the following SharePoint Web application: {0}. Open the Team Foundation Administration Console and make sure that the service account is a member of the following group: {1}. If necessary, manually add the service account to that group. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FailedToMapWssBackToTfsWithException(System.Object,System.Object)">
            <summary>
            TF205018: An error occurred when attempting to save the mapping from the SharePoint Web application to Team Foundation Server. The SharePoint Web application is: {0}. The error is: {1}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FailedToAutoConfigureSharePointWebApplication(System.Object,System.Object)">
            <summary>
            TF205019: An error occurred when attempting to automatically configure the following resource: {0}. The error is: {1}. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidPathMissingRoot(System.Object)">
            <summary>
            The path &apos;{0}&apos; must start with $/.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.TeamSystemWebAccessUrlIsMissing(System.Object)">
            <summary>
            &apos;{0}&apos; is missing. Please verify that Team Web Access is configured correctly.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ApplicationUrlIsNotInitialized">
            <summary>
            ApplicationUrl is not initialized.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.CollectionIdIsNotInitialized">
            <summary>
            CollectionId is not initialized.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkEventingServiceDescription">
            <summary>
            Event Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkIdentityServiceDescription">
            <summary>
            Identity Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkIdentityService2Description">
            <summary>
            Identity Service Version 2 for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkJobServiceDescription">
            <summary>
            Job Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkLocationServiceDescription">
            <summary>
            Location Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkMessageQueueServiceDescription">
            <summary>
            Message Queue Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkPropertyServiceDescription">
            <summary>
            Property Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkRegistryServiceDescription">
            <summary>
            Registry Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkSecurityServiceDescription">
            <summary>
            Security Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkMethodologyServiceDescription">
            <summary>
            Methodology Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkMethodologyUploadServiceDescription">
            <summary>
            Methodology Upload Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkProcessTemplateServiceDescription">
            <summary>
            Process Template Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkStrongBoxServiceDescription">
            <summary>
            StrongBox Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkStrongBoxFileUploadServiceDescription">
            <summary>
            StrongBox File Upload Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkStrongBoxFileDownloadServiceDescription">
            <summary>
            StrongBox File Download Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.CatalogServiceDescriptrion">
            <summary>
            Catalog Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.CollectionManagementServiceDescription">
            <summary>
            Team Project Collection Management Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkAdministrationServiceDescription">
            <summary>
            Administration Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServicingResourceUploadServiceDescription">
            <summary>
            Servicing Resource Upload Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkAccessControlServiceDescription">
            <summary>
            Access Control Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.AccessMappingIsDefaultMessage(System.Object)">
            <summary>
            TF205032: You cannot delete the following access mapping: {0}. This mapping is the default access mapping. To delete it, you must first specify another access mapping as the default.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FailedToAutoActivateSharePointWebApplicationFeature(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            TF205021: A feature could not be activated in the following Web application: {0}. The feature is {1}. This feature is part of the following solution: {2}. Without this feature, project dashboards will not function correctly. Verify that the solution has been deployed to the SharePoint farm, and that the feature has been activated in SharePoint Central Administration. The server returned the following error: {3}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UrlNotValid">
            <summary>
            TF249010: The URL that you specified is not valid. The URL must begin with either HTTP or HTTPS and be a valid address.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.NullArtifactUrlInUrlList">
            <summary>
            A null artifact url was found in the url list. Do not pass in a null artifact url.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WorkItemOnlyViewUsersGroupName">
            <summary>
            Work Item Only View Users
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WorkItemOnlyViewUsersGroupDescription">
            <summary>
            Members of this group can only use the Work Item Only View feature in Web Access.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.CannotDetachFailedInitializeCollection(System.Object)">
            <summary>
            TF205047: You cannot detach this team project collection because it has at least one failed servicing operation of the following type: {0}. The operation must be completed before the collection can be detached. You can also choose to delete this collection using the &apos;TfsConfig.exe collection&apos; command.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FailureGetArtifactWithTool(System.Object)">
            <summary>
            Unable to get artifacts from tool: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.MemoryCacheListKeyAlreadyPresent">
            <summary>
            TF205049: The key that you supplied is already present in MemoryCacheList.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UnableToEstablishConnection">
            <summary>
            Unable to establish a connection with the Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.BothStringsCannotBeNull(System.Object,System.Object)">
            <summary>
            One of the following values must not be null or String.Empty: {0}, {1}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.NullValueNecessary(System.Object)">
            <summary>
            The value specified for the following variable must be null: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_AccessZoneNotFound(System.Object)">
            <summary>
            TF249003: The following access mapping was not found: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_AdministratorsMessage(System.Object)">
            <summary>
            Administrators: For more information about how to configure or enable this option, see the {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_CollectionOrganizationalNodeNotFound">
            <summary>
            TF249006: The organizational node for the project collection could not be found.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_DefaultSiteCreationLocationNotConfigured">
            <summary>
            No default location for site creation has been configured for this project collection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_DefaultSiteCreationLocationNotConfiguredSubTitle">
            <summary>
            Your server administrator has not configured a default location for site creation for this project collection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_DefaultZoneRequiresAllPaths(System.Object,System.Object)">
            <summary>
            TF249007: The default zone must have paths specified for the following parameters: {0}, {1}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_HelpLink">
            <summary>
            Microsoft Web Site
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_NoUriForCurrentZone(System.Object)">
            <summary>
            TF249046: The URL could not be resolved for the following service: {0}. Service zone and location information might not be configured for your current location, or the configuration might contain errors. An administrator for Team Foundation Server must create and verify the settings for the service zone.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_PortalOwnerInfo(System.Object,System.Object)">
             <summary>
             This is inserted into the {0} spot in EntityModel_TakeSiteOwnershipConfirmation
            
             Project Portal for the &apos;{0}&apos; Project in the &apos;{1}&apos; Project Collection
             </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_PortalSiteNotConfigured">
            <summary>
            No team project portal has been configured for this project.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_PortalSiteNotConfiguredSubTitle">
            <summary>
            Your project administrator has not configured a portal for this team project.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_ProcessGuidanceNotConfigured">
            <summary>
            No process guidance has been configured for this project.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_ProcessGuidanceNotConfiguredSubTitle">
            <summary>
            Your project administrator has not configured process guidance for this team project.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_ProjectIdNotFound(System.Object)">
            <summary>
            TF249013: No team project could be found in the catalog with the following ID: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_ProjectUriNotFound(System.Object)">
            <summary>
            TF249040: The catalog does not contain a team project with the following URL: {0}. Verify that the specified URL is correct.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_ReadOnly">
            <summary>
            TF249015: The object could not be updated because it is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_ReportingCubeInvalid">
            <summary>
            TF249016: Reports could not be configured for the server. The Visual Studio Team System cube does not point to the data warehouse already specified for SQL Server Reporting Services.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_ReportingNotConfigured">
            <summary>
            Reports have not been enabled for this project collection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_ReportingNotConfiguredSubTitle">
            <summary>
            Your server administrator has not enabled reports for this project collection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_ServiceDefinitionNotFound(System.Object)">
            <summary>
            TF249019: The following service definition was not found: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_WebAccessNotConfigured">
            <summary>
            Team Web Access has not been enabled.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_WebAccessNotConfiguredSubTitle">
            <summary>
            Your server administrator has not enabled Web access to this server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_BadBooleanFormat">
            <summary>
            TF205050: The Boolean value is not formatted correctly.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_BadEnumFormat">
            <summary>
            TF205051: The enumeration value is not valid. It is either not formatted correctly or it has an unknown enumeration value.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_BadGuidFormat">
            <summary>
            TF205052: The GUID value is not formatted correctly.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_BadInt32Format">
            <summary>
            TF205053: The Int32 value is not formatted correctly.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_DataDefinesUnsupportedSchema">
            <summary>
            TF205054: The data defines an unsupported schema.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_DataDoesNotDefineSchema">
            <summary>
            TF205055: The data does not define a schema.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_IncompatibleType">
            <summary>
            TF205056: The item is not a compatible type.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_InvalidInstanceId">
            <summary>
            TF205057: The instance ID is not valid.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_InvalidObjectRefValue_BadFormat">
            <summary>
            TF205058: The object reference value is not formatted correctly.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_InvalidObjectRefValue_BadIdentifier">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_InvalidObjectRefValue_UnknownIdentifier">
            <summary>
            TF205060: The object reference value is not valid. No such identifier exists.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_MustDeriveFromTfsObject">
            <summary>
            TF205061: The type must be inherited from the TfsObject class.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_SessionMissing">
            <summary>
            TF205062: The object is not bound to a session.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_TooManyFieldValues">
            <summary>
            TF205063: The object has more field values than are allowed within the specified schema.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_UnknownType(System.Object)">
            <summary>
            TF205064: The following type is not known: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_AlreadyBoundToAnotherSession">
            <summary>
            TF205065: The object is already bound to another session.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_AlreadyHasParent">
            <summary>
            TF205066: The value already has a parent. You can only set a parent on a new item.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_CannotResolveUriWithoutSession">
            <summary>
            TF205067: The object is not bound to a session. The location service is not available to resolve the URL.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_FieldFiltersNotSupported">
            <summary>
            TF205068: Field filters are not supported when querying the hierarchy in the catalog.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_ParentCannotChange">
            <summary>
            TF205069: The parent cannot be changed once it is set.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_RefreshNotAvailable">
            <summary>
            TF205070: The object is not bound to a session. Refresh is not available.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_SecurityNamespaceNotAvailable">
            <summary>
            TF205071: The security namespace is not available within the current context.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EntityModel_UnsupportedDerivedType">
            <summary>
            TF205072: The data type for the server object is not supported.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WebAccess_UnSupportedArtifactType(System.Object)">
            <summary>
            Unsupported artifact type: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidAsynchronousOperationParameter(System.Object)">
            <summary>
            Invalid asynchronous operation specified for parameter {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DequeueTimeout(System.Object)">
            <summary>
            The asynchronous dequeue operation timed out after {0}. This timeout may be a portion of a larger timeout.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.TeamByIdDoesNotExist(System.Object)">
            <summary>
            TF400461: TeamFoundation Team with Id {0} does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.TeamByNameDoesNotExist(System.Object)">
            <summary>
            TF400460: TeamFoundation Team with Name {0} does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkIdentityManagementWebDescription">
            <summary>
            Identity Management Web Page for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkFileHandlerServiceDescription">
            <summary>
            File Handler Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkDownloadServiceDescription">
            <summary>
            Download Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkSecurityManagementWebDescription">
            <summary>
            Security Management Web Page for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ProjectCollectionContributorsGroupName">
            <summary>
            Project Collection Contributors
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ProjectCollectionContributorsGroupDesc">
            <summary>
            Members of this group can connect to the collection, view its information and create workspaces in version control
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PublicAccessMappingDisplayName">
            <summary>
            Public Access Mapping
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServerAccessMappingDisplayName">
            <summary>
            Server Access Mapping
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.AlternateAccessMappingDisplayName">
            <summary>
            Alternate Public Access Mapping
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.TextLoggerInfoLine(System.Object)">
            <summary>
            [Info] {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.TextLoggerWarningLine(System.Object)">
            <summary>
            [Warn] {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.TextLoggerErrorLine(System.Object)">
            <summary>
            [Error] {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.IdentityPropertyReadOnly(System.Object)">
            <summary>
            {0} is a read-only identity property
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UnknownTypeForSerialization(System.Object)">
            <summary>
            Unknown object type &apos;{0}&apos; for serialization.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServerIncompatible(System.Object)">
            <summary>
            TF205073: The Team Foundation client cannot connect to the following server: {0}. You must connect to Team Foundation Server 2008 or a later version.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidPropertyScope">
            <summary>
            Invalid IdentityPropertyScope for requested operation.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidStringPropertyValueNullAllowed(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            &quot;{0}&quot; is an invalid value for the {1} of a {2}. The text must be null or between {3} and {4} characters long.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidStringPropertyValueNullForbidden(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            &quot;{0}&quot; is an invalid value for the {1} of a {2}. The text must be between {3} and {4} characters long and cannot be null.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ValueTypeOutOfRange(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            {0} is out of range for the {1} of a {2}. The value must be between {3} and {4}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PropertyValueOutOfRange(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Property &apos;{0}&apos; with value &apos;{1}&apos; is out of range for the Team Foundation Properties service. The value must be between {2} and {3}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UnsupportedPropertyValueType(System.Object,System.Object)">
            <summary>
            Property &apos;{0}&apos; of type &apos;{1}&apos; is not supported by Team Foundation Properties. Convert the value to an Int32, DateTime, Double, String or Byte array for storage.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DoubleValueOutOfRange(System.Object,System.Object)">
            <summary>
            Property &apos;{0}&apos; with value &apos;{1}&apos; is out of range for the Team Foundation Properties service. Double values must be 0, within -1.79E+308 to -2.23E-308, or within 2.23E-308 to 1.79E+308.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DateTimeKindMustBeSpecified">
            <summary>
            The DateTimeKind (Local, UTC) must be specified for DateTime arguments.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DateTimeAgoAMinute">
            <summary>
            a minute ago
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DateTimeAgoLessThanMinute">
            <summary>
            less than a minute ago
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DateTimeAgoMinutes(System.Object)">
            <summary>
            {0} minutes ago
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DateTimeAgoADay">
            <summary>
            a day ago
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DateTimeAgoAMonth">
            <summary>
            a month ago
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DateTimeAgoAnHour">
            <summary>
            an hour ago
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DateTimeAgoAWeek">
            <summary>
            a week ago
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DateTimeAgoAYear">
            <summary>
            a year ago
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DateTimeAgoDays(System.Object)">
            <summary>
            {0} days ago
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DateTimeAgoHours(System.Object)">
            <summary>
            {0} hours ago
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DateTimeAgoMonths(System.Object)">
            <summary>
            {0} months ago
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DateTimeAgoWeeks(System.Object)">
            <summary>
            {0} weeks ago
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.DateTimeAgoYears(System.Object)">
            <summary>
            {0} years ago
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.TimeStampTodayAt(System.Object)">
             <summary>
              {0} is a short time. Example: 'Today at 12:23 PM'
            
             Today at {0}
             </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.TimeStampYesterdayAt(System.Object)">
             <summary>
              {0} is a short time. Example: 'Yesterday at 12:23 PM'
            
             Yesterday at {0}
             </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.TimeStampDayAt(System.Object,System.Object)">
             <summary>
              {0} is the day of week . {1} is a short time. Example: 'Monday at 12:23 PM'
            
             {0} at {1}
             </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.TimeStampFullDate(System.Object,System.Object)">
             <summary>
               {0} is the day of week. {1} is a date and time. Example: 'Monday, 10/06/2010, 12:23 PM'
            
             {0}, {1}
             </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UnauthorizedUserForReauthentication">
            <summary>
            TF400459: You are not allowed to change users when re-authenticating.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkAreasManagementWebDescription">
            <summary>
            Work Item Areas Management Web Page for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkIterationsManagementWebDescription">
            <summary>
            Work Item Iterations Management Web Page for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkNewTeamProjectWebDescription">
            <summary>
            New Team Project Web Page for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidPropertyName(System.Object)">
            <summary>
            TF400458: Invalid property name: &apos;{0}&apos;. Property names cannot contain leading or trailing whitespace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PerformanceCounterCategoryNotRegistered(System.Object)">
            <summary>
            Perfromance counter category {0} has not been registered
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkProjectAlertsWebDescription">
            <summary>
            Project Alerts Web Page for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkTaskBoardWebDescription">
            <summary>
            Team Task board Web Page for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.WhiteSpaceNotAllowed">
            <summary>
            The string cannot contain any whitespace characters.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidEmailAddressError">
            <summary>
            The supplied email address is invalid.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GSS_ARGUMENT_EXCEPTION(System.Object)">
            <summary>
            TF50606: Argument {0} is invalid.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GSS_BAD_ACCOUNT_NAME_ARRAY(System.Object)">
            <summary>
            TF50371: Argument {0} is zero length, there must be at least one account name element.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GSS_BAD_ACTIONID(System.Object,System.Object)">
            <summary>
            TF50369: Argument {1} contains an invalid action identifier (&apos;{0}&apos;).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GSS_BAD_ACTIONID_ARRAY(System.Object)">
            <summary>
            TF50370: Argument {0} is zero length, there must be at least one action identifier element.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GSS_BAD_CLASSID_ACTIONID_PAIR_EXCEPTION(System.Object,System.Object)">
            <summary>
            TF50365: The combination of the class ID and the Action ID is not valid. Class ID: &apos;{0}&apos;. Action ID: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GSS_BAD_DISTINGUISHED_NAME(System.Object)">
            <summary>
            TF50364: The following distinguished name (DN) is not formatted correctly or contains an empty string: &apos;{0}&apos;. Make sure that the formatting for the distinguished name is correct for LDAP API naming conventions. For more information, see the topic &quot;Distinguished Names&quot; on the Microsoft Web site (http://go.microsoft.com/fwlink/?LinkId=81167).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GSS_BAD_DISTINGUISHED_NAME_ARRAY(System.Object)">
            <summary>
            TF50372: Argument {0} is zero length, there must be at least one distinguished name element.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GSS_BAD_OBJECTID(System.Object,System.Object)">
            <summary>
            TF50366: Argument {1} contains an invalid object identifier (&apos;{0}&apos;).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GSS_BAD_OBJECTID_ARRAY(System.Object)">
            <summary>
            TF50367: Argument {0} is zero length, there must be at least one object identifier element.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GSS_BAD_OBJECT_CLASS_ID(System.Object,System.Object)">
            <summary>
            TF50368: Argument {1} contains an invalid object class identifier (&apos;{0}&apos;).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GSS_BAD_PARENTOBJECTID_SELFPARENT(System.Object,System.Object)">
            <summary>
            TF50376: Argument {0} is invalid. Object (&apos;{1}&apos;) cannot inherit from itself.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GSS_BAD_PROJECT_URI(System.Object,System.Object)">
            <summary>
            TF50362: Argument {1} contains an invalid project URI (&apos;{0}&apos;).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GSS_BAD_PROJECT_URI_ARRAY(System.Object)">
            <summary>
            TF50373: Argument {0} is zero length, there must be at least one project URI element.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.GSS_BAD_SID_ARRAY(System.Object)">
            <summary>
            TF50361: Argument {0} is zero length, there must be at least one SID element.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.NAMESPACE_CREATE_PROJECTS">
            <summary>
            Create new projects
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.NAMESPACE_DIAGNOSTIC_TRACE">
            <summary>
            Alter trace settings
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.NAMESPACE_GENERIC_READ">
            <summary>
            View collection-level information
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.NAMESPACE_GENERIC_WRITE">
            <summary>
            Edit collection-level information
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.NAMESPACE_MANAGE_LINK_TYPES">
            <summary>
            Manage work item link types
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.NAMESPACE_MANAGE_TEMPLATE">
            <summary>
            Manage process template
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.NAMESPACE_MANAGE_TEST_CONTROLLERS">
            <summary>
            Manage test controllers
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.NAMESPACE_SYNCHRONIZE_READ">
            <summary>
            View system synchronization information
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.NAMESPACE_TRIGGER_EVENT">
            <summary>
            Trigger events
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PROJECT_ADMINISTER_BUILD">
            <summary>
            Administer a build
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PROJECT_CHECK_IN">
            <summary>
            Check files in
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PROJECT_DELETE">
            <summary>
            Delete team project
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PROJECT_DELETE_TEST_RESULTS">
            <summary>
            Delete test runs
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PROJECT_EDIT_BUILD_STATUS">
            <summary>
            Edit build quality
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PROJECT_GENERIC_READ">
            <summary>
            View project-level information
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PROJECT_GENERIC_WRITE">
            <summary>
            Edit project-level information
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PROJECT_MANAGE_TEST_CONFIGURATIONS">
            <summary>
            Manage test configurations
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PROJECT_MANAGE_TEST_ENVIRONMENTS">
            <summary>
            Manage test environments
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PROJECT_OVERRIDE_BUILD_CHECKIN_VALIDATION">
            <summary>
            Override check-in validation by build
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PROJECT_PUBLISH_TEST_RESULTS">
            <summary>
            Create test runs
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PROJECT_START_BUILD">
            <summary>
            Start a build
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PROJECT_UPDATE_BUILD">
            <summary>
            Write to build operational store
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.PROJECT_VIEW_TEST_RESULTS">
            <summary>
            View test runs
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.CannotResolveServerHostUsingAD(System.Object,System.Object)">
            <summary>
            TF255042: Cannot convert {0} to Windows NT 4.0 account name using directory services. Error code: {1}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.MultipleIdentitiesFoundMessage(System.Object,System.Object)">
            <summary>
            Multiple identities found matching &apos;{0}&apos;. Use the unique name to specify one of the following identities:{1}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidServerRequest(System.Object)">
            <summary>
            The request was rejected by the server.Technical information:  {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkConnectedServicesServiceDescription">
            <summary>
            ConnectedServices Service for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.JavaScriptSerializer_JSON_IllegalPrimitive(System.Object)">
            <summary>
            Invalid JSON primitive: {0}..
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.JavaScriptSerializer_JSON_DepthLimitExceeded">
            <summary>
            RecursionLimit exceeded..
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.JavaScriptSerializer_JSON_InvalidArrayStart">
            <summary>
            Invalid array passed in, &apos;[&apos; expected..
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.JavaScriptSerializer_JSON_InvalidArrayExpectComma">
            <summary>
            Invalid array passed in, &apos;,&apos; expected..
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.JavaScriptSerializer_JSON_InvalidArrayExtraComma">
            <summary>
            Invalid array passed in, extra trailing &apos;,&apos;..
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.JavaScriptSerializer_JSON_InvalidArrayEnd">
            <summary>
            Invalid array passed in, &apos;]&apos; expected..
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.JavaScriptSerializer_JSON_ExpectedOpenBrace">
            <summary>
            Invalid object passed in, &apos;{&apos; expected..
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.JavaScriptSerializer_JSON_InvalidMemberName">
            <summary>
            Invalid object passed in, member name expected..
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.JavaScriptSerializer_JSON_InvalidObject">
            <summary>
            Invalid object passed in, &apos;:&apos; or &apos;}&apos; expected..
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.JavaScriptSerializer_JSON_UnterminatedString">
            <summary>
            Unterminated string passed in..
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.JavaScriptSerializer_JSON_BadEscape">
            <summary>
            Unrecognized escape sequence..
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.JavaScriptSerializer_JSON_StringNotQuoted">
            <summary>
            Invalid string passed in, &apos;\&quot;&apos; expected..
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkSignOutWebDescription">
            <summary>
            Sign-Out Web Page for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkFileContainerDescription">
            <summary>
            File Containers Resource for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidSqlTimestampString(System.Object)">
            <summary>
            String &apos;{0}&apos; is not a valid sql timestamp.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServiceChangeError(System.Object)">
            <summary>
            TF400749: Unable to change the service configuration for {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServiceControlManagerOpenError">
            <summary>
            TF400750: Unable to open the service control manager.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.ServiceOpenError(System.Object)">
            <summary>
            TF400751: Unable to open the service configuration for {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.BAD_ALIAS(System.Object)">
            <summary>
            The following alias is not valid: &apos;{0}&apos;. For more information about valid naming conventions, see the topic &quot;Naming Restrictions for Team Foundation Server&quot; on the Microsoft Web site (http://go.microsoft.com/fwlink/?LinkId=77936).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.BAD_ALIAS_NOT_ALPHANUM(System.Object)">
            <summary>
            The following alias is not valid: &apos;{0}&apos;. An alias can only contain letters and/or digits.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.FrameworkRoomsHubWebDescription">
            <summary>
            Rooms hub Web Page for Visual Studio Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.LocationService">
            <summary>
            Location Service
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.LowercaseStringRequired(System.Object)">
            <summary>
            The string argument &apos;{0}&apos; must only consist of lowercase characters.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UppercaseStringRequired(System.Object)">
            <summary>
            The string argument &apos;{0}&apos; must only consist of uppercase characters.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.EmptyOrWhiteSpaceStringNotAllowed">
            <summary>
            The string must have at least one non-white-space character.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.AccountTenantExists">
            <summary>
            Account already belongs to a tenant.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.UnexpectedType(System.Object,System.Object)">
            <summary>
            Expecting &apos;{0}&apos; to be of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidInheritLevelServiceDefinition(System.Object)">
            <summary>
            A service definition exists with the following InheritLevel value: {0}. Only deployment-level service definitions may specify an InheritLevel value.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Internal.CommonResources.InvalidInheritLevelRelativeServiceDefinition(System.Object,System.Object)">
            <summary>
            A service definition with InheritLevel: {0} and RelativeToSetting value: {1} must define a parent service definition.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Base16Encoder">
            <summary>
            Performs encoding to and from of Base-16 (hexadecimal) values
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.Base16Encoder.Default">
            <summary>
            The default <see cref="T:Microsoft.TeamFoundation.Common.Base16Encoder"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Base16Encoder.TryGetBytes(System.String,System.Byte[]@)">
            <summary>
            Tries to convert the provided text into a byte array using Base-16 encoding.
            </summary>
            <param name="text">The text to decode.</param>
            <param name="data">The decoded data.</param>
            <returns>True if the text could be decoded into a byte array; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Base16Encoder.GetBytes(System.String)">
            <summary>
            Converts the provided text into a byte array using Base-16 encoding.
            </summary>
            <param name="text">The text to decode.</param>
            <returns>The decoded data.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Base16Encoder.GetString(System.Byte[])">
            <summary>
            Converts the provided byte array into a Base-16 encoded string.
            </summary>
            <param name="data">The data to encode.</param>
            <returns>The encoded string.</returns>
            <remarks>
            This overload does not prefix the result with the hex specifier ("0x").
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Base16Encoder.GetString(System.Byte[],System.Boolean)">
            <summary>
            Converts the provided byte array into a Base-16 encoded string.
            </summary>
            <param name="data">The data to encode.</param>
            <param name="includeHexSpecifier">A value indicating whether to prefix the result with the hex specifier ("0x").</param>
            <returns>The encoded string.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.ClrHashUtil">
            <summary>
            The version control notifications in Orcas RTM and Orcas SP1 rely on String.GetHashCode in
            order to determine which workspace the notification is for.  It turns out that
            String.GetHashCode is not guaranteed to return the same result across different versions of
            the .NET Framework.  It even returns different values when run as 32bit vs 64bit.
            
            The purpose of this class is to provide point-in-time variants of the 32bit and 64bit hash
            functions that can be used for backwards compatibility with older clients.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ClrHashUtil.GetStringHashOrcas32(System.String)">
            <summary>
            String.GetHashCode for Orcas RTM 32bit (.NET 2.0).
            </summary>
            <remarks>
            This was preserved from $/Orcas/PU/TSADT/ndp/clr/src/BCL/System/String.cs.
            </remarks>
            <param name="str">String to hash</param>
            <returns>Hash value</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ClrHashUtil.GetStringHashOrcas64(System.String)">
            <summary>
            String.GetHashCode for Orcas RTM 64bit (.NET 2.0).
            </summary>
            <remarks>
            This was preserved from $/Orcas/PU/TSADT/ndp/clr/src/BCL/System/String.cs.
            </remarks>
            <param name="str">String to hash</param>
            <returns>Hash value</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.ComputerInfo.ComputerDomain">
            <summary>
            If computer is joined to a domain, returns the domain name computer is joined to; otherwise return null.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.ComputerInfo.MachineName">
            <summary>
            Returns the host name.  Do not use Environment.MachineName because that truncates at
            15 characters (NetBIOS name limit - by design).
            
            http://blogs.msdn.com/brada/archive/2005/08/10/449767.aspx
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ComputerInfo.IsLocalMachine(System.String)">
            <summary>
            Determines if the given host name matches the current machine.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ComputerInfo.IsLocalMachine(System.Uri)">
            <summary>
            Determines if the host name for the given URI matches the current machine.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ComputerInfo.GetComputerDomain(System.String,Microsoft.TeamFoundation.Common.ITFLogger)">
            <summary>
            Gets a NetBIOS domain name of the specified computer. This method is only supported on machines that are joined to a domain.
            On machines that are not joined to a domain, this method throws TfsAdminException exception.
            </summary>
            <param name="computerNameOrAddress">DNS or NetBIOS name of the computer or its ip address.</param>
            <exception cref="T:System.ArgumentNullException">computerNameOrAddress is null.</exception>
            <exception cref="T:System.ArgumentException">computerNameOrAddress is an empty string.</exception>
            <exception cref="T:System.Net.SocketException">An error is encountered when resolving the computer name.</exception>
            <exception cref="T:Microsoft.TeamFoundation.Admin.TfsAdminException">Cannot resolve domain name.</exception>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.CustomTimeZone">
            <summary>
            Represents TimeZone object for a given TimeZoneInfo
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.CustomTimeZone.#ctor(System.TimeZoneInfo)">
            <summary>
            Constructs CustomTimeZone object.
            </summary>
            <param name="timeZoneInfo">Custom TimeZoneInfo</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.CustomTimeZone.DaylightName">
            <summary>
            Gets the Daylight saving name for the current time zone
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.CustomTimeZone.StandardName">
            <summary>
            Gets the Standard name of the current time zone.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.CustomTimeZone.IsDaylightSavingTime(System.DateTime)">
            <summary>
            Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current TimeZone object.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.CustomTimeZone.ToLocalTime(System.DateTime)">
            <summary>
            Returns the local time that corresponds to a specified date and time value.
            </summary>
            <param name="time">A Coordinated Universal Time (UTC) time. </param>
            <returns>A DateTime object whose value is the local time that corresponds to time.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.CustomTimeZone.ToUniversalTime(System.DateTime)">
            <summary>
            Returns the Coordinated Universal Time (UTC) that corresponds to a specified time.
            </summary>
            <param name="time">A date and time. </param>
            <returns>A DateTime object whose value is the Coordinated Universal Time (UTC) that corresponds to time.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.CustomTimeZone.GetDaylightChanges(System.Int32)">
            <summary>
            This method is not implemented.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.CustomTimeZone.GetUtcOffset(System.DateTime)">
            <summary>
            Returns the Coordinated Universal Time (UTC) offset for the specified local time.
            </summary>
            <param name="time">A date and time value.</param>
            <returns>The Coordinated Universal Time (UTC) offset from Time</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.EditionType">
            <summary>
            Which edition is installed: Standard, Express, Hosted
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.ELeadException">
            <summary>
            The base class for all Enterprise ELead exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ELeadException.#ctor">
            <summary>
            Constructor. Needed for serialization scenarios.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ELeadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor. 
            Needed for remoting scenarios when exception is propagated from server to the client.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.EmbeddedResourceUtil.GetResourceAsString(System.String)">
            <summary>
            Gets the contents of the resource of the calling assembly as a string
            </summary>
            <param name="resourceName">the name of the resource within the calling assembly</param>
            <returns>the resource contents from the calling assembly as a string</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.EmbeddedResourceUtil.GetResourceAsString(System.String,System.Reflection.Assembly)">
            <summary>
            Gets the contents of the resource of an assembly as a string
            </summary>
            <param name="resourceName">the name of the resource within the assembly</param>
            <param name="assembly">the assembly that contains the resource</param>
            <returns>the resource contents as a string</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionFormatter.ShowDetails">
            <summary>
            Determine whether to show detailed errors by querying the SOFTWARE\Microsoft\TeamFoundationServerSetup\TfsDetailedErrors registry value
            and by querying the TfsDetailedErrors environment variable
            </summary>
            <returns>true if the registry key or the environment variable is set to 1, false if both are set to another value or not set.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionFormatter.FormatExceptionForDisplay(System.Exception)">
            <summary>
            Formats an exception depending on the value of the ShowDetailedExceptions property.
            </summary>
            <param name="exception">The exception</param>
            <returns>A formatted exception string with the full stack trace if the property is set to true or only the exception message otherwise.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection">
            <summary>
            Encapsulates the ability to pass properties with an exception across soap boundaries.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Count">
            <summary>
            Gets the count of properties currently in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Boolean)">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Boolean[])">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Byte)">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Byte[])">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Char)">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.DateTime)">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.DateTime[])">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Decimal)">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Decimal[])">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Double)">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Double[])">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Guid)">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Guid[])">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Int16)">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Int16[])">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Int32)">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Int32[])">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Int64)">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Int64[])">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Single)">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.Single[])">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.String)">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Set(System.String,System.String[])">
            <summary>
            Sets the property to the specified value.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Remove(System.String)">
            <summary>
            Removes a property from the collection.
            </summary>
            <param name="name">The name of the property to remove</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Copy(Microsoft.TeamFoundation.Common.ExceptionPropertyCollection)">
            <summary>
            Copies the values from the provided properties into the current collection. Existing property values
            will be ignored.
            </summary>
            <param name="properties">The properties which should be copied</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.Copy(Microsoft.TeamFoundation.Common.ExceptionPropertyCollection,System.Boolean)">
            <summary>
            Copies the values from the provided properties into the current collection. Existing property values
            will be ignored.
            </summary>
            <param name="properties">The properties which should be copied</param>
            <param name="replace">True if existing property values should be replaced, false otherwise</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.FromXml(System.Xml.XmlReader)">
            <summary>
            Helper method for deserializing an instance of this class from XML.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ExceptionPropertyCollection.ToXml(System.Xml.XmlWriter,System.String)">
            <summary>
            Helper method for serializing an instance of this class to XML.
            </summary>
            <param name="writer"></param>
            <param name="elementName"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.FileSpec">
            <summary>
            FileSpec is a utility class for manipulating file paths.  It exists primarily to work
            around bugs and inconsistencies in the .NET Framework classes.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.GetFullPath(System.String)">
            <summary>
            Given a path in arbitrary form, return an equivalent fully qualified path.  This should
            simply be a call to Path.GetFullPath but isn't because of bugs in the path class.
            Throws an exception if the filename contains invalid characters other than wildcards.
            </summary>
            <remarks>Not safe for remote paths.  Accesses the local disk to canoncialize filenames.</remarks>
            <param name="path">path to expand into a fully qualified path.</param>
            <returns>The fully qualified path.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.GetFullPath(System.String,System.Boolean)">
            <summary>
            Given a path in arbitrary form, return an equivalent fully qualified path.  This should
            simply be a call to Path.GetFullPath but isn't because of bugs in the path class.
            Throws an exception if the filename contains invalid characters other than wildcards.
            </summary>
            <remarks>Not safe for remote paths.  Accesses the local disk to canoncialize filenames.</remarks>
            <param name="path">path to expand into a fully qualified path.</param>
            <param name="checkForIllegalDollar">if true, an InvalidPathException will be thrown if
              any path component begin with a dollar sign</param>
            <returns>The fully qualified path.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.CheckForIllegalDollarInPath(System.String)">
            <summary>
            This method throws an InvalidPathException if there is a dollar sign ('$') that follows
            a path separator since no part of a path is allowed to start with a dollar sign.
            </summary>
            <param name="path">the path to check (path must already be canonicalized)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.Combine(System.String,System.String)">
            <summary>
            Return a fully qualified and canonicalized path constructed from parent and relative.  If
            relative is already a fully qualified path, just return a canonicalized copy of relative.
            If relative is not fully qualified, return the path that results from appending relative
            to parent and canonicalizing the result.  It is assumed that parent is already
            canonicalized.
            </summary>
            <remarks>Not safe for remote paths.  Accesses the local disk to canoncialize filenames.</remarks>
            <param name="parent">The canonicalized parent path to append relative to (if relative is not fully qualified).</param>
            <param name="relative">The potentially partial path to qualify relative to parent.</param>
            <returns>The combined, canonicalized path.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.UncanonicalizedCombine(System.String,System.String)">
            <summary>
            Return a constructed from parent and relative.  If relative is already a fully qualified path,
            just return a copy of relative.  If relative is not fully qualified, return the path that
            results from appending relative to parent.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="parent">The path to append relative to (if relative is not fully qualified).</param>
            <param name="relative">The potentially partial path to qualify relative to parent.</param>
            <returns>The combined path.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.SplitPath(System.String)">
            <summary>
            Splits the path into its component. This is equivelant to the call
            .Split(new char[] { Path.DirectorySeparatorChar }, StringSplitOptions.RemoveEmptyEntries)
            but handles UNC paths appropriately.
            </summary>
            <param name="path">The path to be split</param>
            <returns>An array of strings that the path is composed of</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.Parse(System.String,System.String@,System.String@)">
            <summary>
            Split the file system spec into a directory and a file or subdirectory.  It is recommended
            that you only parse a fully qualified spec (call GetFullPath first), however this will do
            reasonably things with strings that look a lot like fully file path sections.  If there is
            no file/subdirectory name (e.g "d:\" or "\\server\volume" then fileName is "" on return.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="path">File path to parse.</param>
            <param name="folder">The parsed folder.</param>
            <param name="fileName">The parsed file name (possibly "").</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.FindFileNameIndex(System.String,System.Int32@,System.Int32@)">
            <summary>
            Locates the folder and fileName portions of a path.
            </summary>
            <remarks>See Parse() for details of how to extract the folder and file name strings
            using this method</remarks>
            <param name="path">File path to parse.</param>
            <param name="folderEnd">Length of the folder part.</param>
            <param name="fileNameStart">Starting index of the filename part.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.GetDirectoryName(System.String)">
            <summary>
            Get the directory name for a fully qualified file spec. (See Parse above)
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="path">The fully qualified, canonicalized path to parse.</param>
            <returns>The parent folder.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.AssertPathCanonicalized(System.String,System.String)">
            <summary>
            Rises assertion if value is not canonicalized path.
            </summary>
            <param name="parameter">Name of the value, used to report assertion.</param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.GetFileName(System.String)">
            <summary>
            Get the file name for a fully qualified file spec.  (See Parse above)
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="path">The fully qualified, canonicalized path to parse.</param>
            <returns>The last component of the path.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.GetFolderDepth(System.String)">
            <summary>
             Returns the number of levels of path elements in this spec.
             c:\ will return 0
             c:\abc will return 1
             c:\abc\efg will return 2, and so on...
             \\localhost\share1 will return 0
             \\localhost\share1\foo will return 1, and so on...
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.MakeRelative(System.String,System.String)">
            <summary>
            Given a path and directory, return the path relative to the directory.  If the path is not
            under the directory the path is returned un modified.  Examples:
            MakeRelative(@"d:\src\project\foo.cpp", @"d:\src") -> @"project\foo.cpp"
            MakeRelative(@"d:\src\project\foo.cpp", @"d:\specs") -> @"d:\src\project\foo.cpp"
            MakeRelative(@"d:\src\project\foo.cpp", @"d:\src\proj") -> @"d:\src\project\foo.cpp"
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="path">Path to make relative.</param>
            <param name="folder">Folder to make it relative to.</param>
            <returns>Relative path.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.GetRelativeStartIndex(System.String,System.String)">
            <summary>
            Given a path and directory, return the index of the substring in path relative to the 
            directory.  If the path is not under the directory then 0 is returned (meaning all of 
            path).
            MakeRelative(@"d:\src\project\foo.cpp", @"d:\src") -> 7
            MakeRelative(@"d:\src\project\foo.cpp", @"d:\specs") -> 0
            MakeRelative(@"d:\src\project\foo.cpp", @"d:\src\proj") -> 0
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="path">Path to make relative.</param>
            <param name="folder">Folder to make it relative to.</param>
            <returns>Index of relative path part in path</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.MakeRelative(System.String,System.String,System.Boolean)">
            <summary>
            Given a path and folder, return the path relative to the folder.  If the path is not
            under the folder and the recursive parameter is false, then path is returned unmodified.
            Otherwise, the method iteratively each parent directory in the specified folder and tries
            to make item relative.  Both path and folder are assumed to be in canonical form.  
            Examples:
            MakeRelative(@"d:src\project\foo.cpp", @"d:\src",false)      -> @"project\foo.cpp"
            MakeRelative(@"d:src\project\foo.cpp", @"d:\specs",false)    -> @"d:\src\project\foo.cpp"
            MakeRelative(@"d:src\project\foo.cpp", @"d:\src/proj",false) -> @"d:\src\project\foo.cpp"
            MakeRelative(@"d:src\project\foo.cpp", @"d:\src", true)      -> @"project\foo.cpp"
            MakeRelative(@"d:src\project\foo.cpp", @"d:\specs", true)    -> @"..\src\project\foo.cpp"
            MakeRelative(@"d:src\project\foo.cpp", @"d:\src/proj", true) -> @"..\project\foo.cpp"
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="item">Path to make relative.</param>
            <param name="folder">Folder to make it relative to.</param>
            <param name="recursive">Flag to indicate if method should relativize to folder's parents.</param>
            <returns>Relative path.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.Equals(System.String,System.String)">
            <summary>
            Compare two file specs for equality.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="item1">First item to compare.</param>
            <param name="item2">Second item to compare.</param>
            <returns>Return true if the items match.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.Compare(System.String,System.String)">
            <summary>
            Compare two files or folder specs.  This encapsulation handles case insensitive and other
            rules.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="item1">First item to compare.</param>
            <param name="item2">Second item to compare.</param>
            <returns>0 if they are equal, greater than 0 if the first is greater and less than 0 if the second is greater.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.Compare(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Compare two files or folder specs.  This encapsulation handles case insensitive and other
            rules.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="item1">First item to compare.</param>
            <param name="item2">Second item to compare.</param>
            <param name="item1Length">Length of the first item to compare.</param>
            <param name="item2Length">Length of the second item to compare.</param>
            <returns>0 if they are equal, greater than 0 if the first is greater and less than 0 if the second is greater.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.CompareUI(System.String,System.String)">
            <summary>
            Compare two files or folder specs for display (culture sensitive and case insensitive)
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="item1">First item to compare.</param>
            <param name="item2">Second item to compare.</param>
            <returns>0 if they are equal, greater than 0 if the first is greater and less than 0 if the second is greater.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.CompareUI(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Compare two files or folder specs for display (culture sensitive and case insensitive)
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="item1">First item to compare.</param>
            <param name="item2">Second item to compare.</param>
            <param name="item1Length">Length of the first item to compare.</param>
            <param name="item2Length">Length of the second item to compare.</param>
            <returns>0 if they are equal, greater than 0 if the first is greater and less than 0 if the second is greater.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.CompareCaseSensitive(System.String,System.String)">
            <summary>
            Compare two file paths in a case-insensitive fashion on every portion of the path 
            except for the last item in the path. The last item in the path is compared in a case-
            sensitive fashion.
            </summary>
            <param name="item1">First item to compare.</param>
            <param name="item2">Second item to compare.</param>
            <returns>0 if they are equal, greater than 0 if the first is greater and less than 0 if the second is greater.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.EqualsCaseSensitive(System.String,System.String)">
            <summary>
            Checking two file paths for equality.  Return whether they are equal in a case-insensitive 
            fashion on every portion of the path except for the last item in the path. The last item 
            in the path is compared in a case-sensitive fashion.
            </summary>
            <param name="item1">First item to compare.</param>
            <param name="item2">Second item to compare.</param>
            <returns>true if and only if they are equal in a case-sensitive comparison</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.Compare(System.String,System.String,System.Char,System.StringComparison)">
            <summary>
            Compare two files or folder specs.  This encapsulation handles case insensitive and other
            rules.
            </summary>
            <param name="item1">First item to compare.</param>
            <param name="item2">Second item to compare.</param>
            <param name="slash">The slash separator used in the string.</param>
            <param name="comparison">The type of comparison to use.</param>
            <returns>0 if they are equal, greater than 0 if the first is greater and less than 0 if the second is greater.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.Compare(System.String,System.String,System.Int32,System.Int32,System.Char,System.StringComparison)">
            <summary>
            Compare two files or folder specs.  This encapsulation handles case insensitive and other
            rules.
            </summary>
            <param name="item1">First item to compare.</param>
            <param name="item2">Second item to compare.</param>
            <param name="item1Length">Length of the first item to compare.</param>
            <param name="item2Length">Length of the second item to compare.</param>
            <param name="slash">The slash separator used in the string.</param>
            <param name="comparison">The type of comparison to use.</param>
            <returns>0 if they are equal, greater than 0 if the first is greater and less than 0 if the second is greater.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.Compare(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Char,System.StringComparison)">
            <summary>
            Compare two files or folder specs.  This encapsulation handles case insensitive and other
            rules.
            </summary>
            <param name="item1">First item to compare.</param>
            <param name="item2">Second item to compare.</param>
            <param name="item1Length">Length of the first item to compare.</param>
            <param name="item2Length">Length of the second item to compare.</param>
            <param name="slash">The slash separator used in the string.</param>
            <param name="comparison">The type of comparison to use.</param>
            <returns>0 if they are equal, greater than 0 if the first is greater and less than 0 if the second is greater.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.FileSpec.FullPathComparer">
            <summary>
            Return a string comparer for full local paths.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.FileSpec.PartialPathComparer">
            <summary>
            Return a string comparer for partial/relative local paths.  For example, you can use this
            for sets of file extensions or simple file names (not full file names with paths).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.CompareTopDown(System.String,System.String)">
            <summary>
            Compare two files or folder specs.  This encapsulation handles case insensitive and other
            rules.
            This is like Compare except that it sorts a grandchildren after children.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="item1">First item to compare.</param>
            <param name="item2">Second item to compare.</param>
            <returns>0 if they are equal, greater than 0 if the first is greater and less than 0 if the second is greater.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.CompareTopDownUI(System.String,System.String)">
            <summary>
            Compare two files or folder specs for display (culture sensitive and case insensitive).
            This is like Compare except that it sorts a grandchildren after children.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="item1">First item to compare.</param>
            <param name="item2">Second item to compare.</param>
            <returns>0 if they are equal, greater than 0 if the first is greater and less than 0 if the second is greater.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.CompareTopDown(System.String,System.String,System.Char,System.StringComparison)">
            <summary>
            Compare two files or folder specs.  This encapsulation handles case insensitive and other
            rules.
            This is like Compare except that it sorts a grandchildren after children.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="item1">First item to compare.</param>
            <param name="item2">Second item to compare.</param>
            <param name="slash">The slash separator used in the string.</param>
            <param name="comparison">The type of comparison to use.</param>
            <returns>0 if they are equal, greater than 0 if the first is greater and less than 0 if the second is greater.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.CompareBottomUp(System.String,System.String)">
            <summary>
            Compare two specs and return their relative ordering.  This is like Compare
            except that it sorts a folder after its children and the children of its peers.  This
            results in a "bottom up" ordering of the tree that is very convenient for deleting.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="item1">First item to compare.</param>
            <param name="item2">Second item to compare.</param>
            <returns>0 if they are equal, greater than 0 if the first is greater and less than 0 if the second is greater.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.CompareBottomUpUI(System.String,System.String)">
            <summary>
            Compare two specs and return their relative ordering for display (culture sensitive and case insensitive).
            This is like Compare except that it sorts a folder after its children and the children of
            its peers.  This results in a "bottom up" ordering of the tree that is very convenient for
            deleting.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="item1">First item to compare.</param>
            <param name="item2">Second item to compare.</param>
            <returns>0 if they are equal, greater than 0 if the first is greater and less than 0 if the second is greater.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.CompareBottomUp(System.String,System.String,System.Char,System.StringComparison)">
            <summary>
            Compare two specs and return their relative ordering.  This is like Compare
            except that it sorts a folder after its children and the children of its peers.  This
            results in a "bottom up" ordering of the tree that is very convenient for deleting.
            </summary>
            <param name="item1">First item to compare.</param>
            <param name="item2">Second item to compare.</param>
            <param name="slash">The slash separator used in the string.</param>
            <param name="comparison">The type of comparison to use.</param>
            <returns>0 if they are equal, greater than 0 if the first is greater and less than 0 if the second is greater.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.FileSpec.BottomUpComparer">
            Return a Comparer object for file specs.  Create one and cache it if one has not already
            been created.
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.FileSpec.TopDownComparer">
            Return a Comparer object for file specs.  Create one and cache it if one has not already
            been created.
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.IsSubItem(System.String,System.String)">
            <summary>
            Check to see if an item is underneath a given parent directory
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="item">Item to check.</param>
            <param name="parent">Parent to check against.</param>
            <returns>true if the item is equal to or is under (in the hierarchy) parent.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.IsImmediateChild(System.String,System.String)">
            <summary>
            Returns true if item is an immediate child of parent.
            </summary>
            <param name="item">Item to check.</param>
            <param name="parent">Parent to check against.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.IsWildcard(System.String)">
            <summary>
            Determine if the last component of the specified path contains a wildcard character.  The
            path may or may not be fully qualified.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="path">The path to check.</param>
            <returns>true if the path contains a wildcard.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.Match(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Compare an item to see if it matches a folder and a name that may be a wildcard.  If
            recursive is true then any matching item under the matchFolder will match.  Wildcard
            matching is done using the NT filesystem matching rules.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="item">Item to match</param>
            <param name="matchFolder">Folder to match against.</param>
            <param name="matchPattern">Wildcard to match against.</param>
            <param name="recursive">Whether or not the match occurs recursively.</param>
            <returns>true if the item matches, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.Match(System.String,System.String)">
            <summary>
            Match an item name with a wildcard.  This assumes that each parameter represents a single
            component of a path to match.  Wildcard matching is done using the NT filesystem matching
            rules.
            </summary>
            <param name="itemName">Item to match.</param>
            <param name="matchPattern">Wildcard to match against.</param>
            <returns>true if the item matches the wildcard.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.Match(System.String,System.Int32,System.String)">
            <summary>
            Match an item name with a wildcard.  This assumes that each parameter represents a single
            component of a path to match.  Wildcard matching is done using the NT filesystem matching
            rules.
            </summary>
            <param name="itemName">Item to match.</param>
            <param name="itemIndex">Offset into itemName to begin at.</param>
            <param name="matchPattern">Wildcard to match against.</param>
            <returns>true if the item matches the wildcard.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.MatchFileName(System.String,System.String)">
            <summary>
            Match just the final component of the specidied item to the specified wildcard.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="item">Fully qualified path to match.</param>
            <param name="matchPattern">Wildcard to match to.</param>
            <returns>true if the wildcard matches.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.RemoveInvalidFileNameChars(System.String)">
            <summary>
            Removes invalid characters from the specified file name.  The file name should be just
            the file's name and not contain any of the path, otherwise the separators will be removed.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="fileName">The string to turn into a file name.</param>
            <returns>The string with invalid file name characters removed.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.GetTempFileName">
            <summary>
            Create a 0 byte temp file in the temp directory and return the name.
            </summary>
            <returns>The name of the temp file.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.GetTempDirectory">
            <summary>
            This is the temporary directory in which all temporary files should be placed.
            </summary>
            <returns>the temporary directory in which all temporary files should be placed</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.FileSpec.CurrentDirectory">
            <summary>
            Return the fully qualified path to the current OS working directory.  This will
            always return the long name version of the string even if the process is in "short name mode".
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.GetCommonPathPrefix(System.String,System.String)">
            <summary>
            Given two canonicalized paths, returns the longest path prefix which is common to both paths.
            </summary>
            <param name="path1">First path</param>
            <param name="path2">Second path</param>
            <returns>Longest path prefix common to both paths. Null if the paths have nothing in common</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.GetFilesystemPathCasing(System.String)">
            <summary>
            Corrects the casing (to filesystem casing) on the last path part of the provided path only
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.IsReservedName(System.String)">
            <summary>
            Check if the specified name is in the list of reserved NTFS names.
            </summary>
            <param name="name">File name to check.</param>
            <returns>true if name is a reserved NTFS file name.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.IsLegalNtfsName(System.String,System.Int32)">
            <summary>
            Checks to see if the specified name consists only of legal characters and is less than the maximum
            length.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="name">the name to check</param>
            <param name="maxLength">the maximum allowed length</param>
            <returns>true if the name is legal; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.IsLegalNtfsName(System.String,System.Int32,System.Boolean)">
            <summary>
            Checks to see if the specified name consists only of legal characters and is less than the maximum
            length.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="name">the name to check</param>
            <param name="maxLength">the maximum allowed length</param>
            <param name="permitWildcards">Indicates whether wildcard characters are permitted</param>
            <returns>true if the name is legal; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.IsLegalNtfsName(System.String,System.Int32,System.Boolean,System.String@)">
            <summary>
            Checks to see if the specified name consists only of legal characters and is less than the maximum
            length.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="name">the name to check</param>
            <param name="maxLength">the maximum allowed length</param>
            <param name="permitWildcards">Indicates whether wildcard characters are permitted</param>
            <param name="error">If it is invalid, this is set to a message that can be displayed to the
              user.</param>
            <returns>true if the name is legal; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.IsValidNtfsChar(System.Char)">
            <summary>
            Return true if the specified character is valid for an NTFS file name.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="c">The character to test.</param>
            <returns>true if the character is valid, false if not.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.IsValidPathChar(System.Char)">
            <summary>
            Return true if the specified character is valid for a local path.
            </summary>
            <param name="c">character to check</param>
            <returns>true for valid, false for invalid</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.ValidatePath(System.String)">
            <summary>
            Validate a local path. Wildcards are not allowed.
            Exception is thrown if invalid
            </summary>
            <param name="path">local path</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.IsEmptyDirectory(System.String)">
            <summary>
            Returns true if the fully-qualified directory contains no files or directories.  Throws an 
            exception if the specified path is not a directory or doesn't exist.
            </summary>
            <param name="path">the fully-qualified directory to test</param>
            <returns>true if the directory is empty</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies a file.  If the target parent directory does not exist, this method creates the
            directory.  File.Copy() handles moves across volumes.  If the newPath already exists,
            this method throws an exception (File.Copy() throws IOException in that case).
            </summary>
            <param name="oldPath">the existing file</param>
            <param name="newPath">the target location</param>
            <param name="overwriteExisting">if false, there must not be any item at newPath; if true, 
              newPath will be deleted if it is an existing file, but an existing directory will cause 
              it to fail</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.ResetAttributes(System.String)">
            <summary>
            Reset the file's encryption and compression information to inherit from
            its container.   We need this because we "get" files
            into the user's temp directory which can have attributes than the ultimate 
            destination of the file.  This is very common for web projects.
            </summary>
            <param name="fileName">File to reset encryption and compression of.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.ResetFileDACL(System.String)">
            <summary>
            This resets the DACL to inherit from its container.  We need this because we "get" files
            into the user's temp directory which can have different list of users and permissions 
            than the ultimate destination of the file.  This is very common for web projects.
            </summary>
            <param name="fileName">the file to reset</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.IsRetryableOperation(System.Int32)">
            <summary>
            This method returns true if the Win32 error code should be retried (e.g. sharing violation type errors)
            </summary>
            <param name="exception">exception to check</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file.  If the target parent directory does not exist, this method creates the
            directory.  File.Move() handles moves across volumes.  The ReadOnly and Archive file
            attributes are preserved (others may also be preserved).  If the newPath already exists,
            this method throws an exception (File.Move() throws IOException in that case).
            </summary>
            <param name="oldPath">the existing file</param>
            <param name="newPath">the new location</param>
            <param name="overwriteExisting">if false, there must be anything item at newPath; if true, 
              newPath will be deleted if it is an existing file, but an existing directory will cause 
              it to fail</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.GetLongPathForm(System.String)">
            <summary>
            Appends the \\?\ or \\?\UNC\ prefix appropriately
            to the provided absolute path.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.IsLongPathForm(System.String)">
            <summary>
            Returns true if the path begins with the prefix \\?\ 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.DeleteFile(System.String)">
            <summary>
            Deletes the specified file, even if it is read-only. 
            This method does not throw an exception if the file does not exist.
            Other errors may cause an exception to be thrown.
            </summary>
            <param name="path">The path to the file to delete</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.DeleteFileWithoutException(System.String)">
            <summary>
            Delete the specified file if possible, but don't throw any exception.
            </summary>
            <param name="path">The path to the file to delete</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.DeleteFile(System.String,System.Boolean)">
            <summary>
            Deletes the specified file, even if it is read-only.
            This method does not throw an exception if the file does not exist.
            Other errors will cause an exception to be thrown, if throwExceptionOnFailure is set.
            </summary>
            <param name="path">The path to the file to delete</param>
            <param name="throwExceptionOnFailure">True to throw an exception if an extant file could not be deleted</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.DeleteDirectory(System.String)">
            <summary>
            Deletes the specified directory, even if it is read-only.  This method does not throw an exception
            if the directory does not exist.
            </summary>
            <param name="path">The directory to delete</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory recusively, including read-only files. This method does not
            throw an exception if the directory doesn't exist.
            This method uses native apis to handle long paths. It will prefix the path with the long 
            path notation to make sure these apis work.
            </summary>
            <param name="path">The directory to delete</param>
            <param name="recursive">Whether or not to delete all sub-directories</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.DeleteDirectory(System.String,System.Boolean,System.Boolean)">
            <summary>
            Deletes the specified directory recusively, including read-only files. This method does not
            throw an exception if the directory doesn't exist.
            This method uses native apis to handle long paths. It will prefix the path with the long 
            path notation to make sure these apis work.
            Note: juntion points can be cyclical and this method does not check for cycles. So, the default
                  is not to follow junction points. 
            </summary>
            <param name="path">The directory to delete</param>
            <param name="recursive">Whether or not to delete all sub-directories</param>
            <param name="followJunctionPoints">Whether or not to follow junction points when deleting recursively</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.DeleteDirectoryLongPath(System.String,System.Boolean,System.Boolean)">
            <summary>
            This method is here to allow deletion of long paths in Windows.
            Here we prefix the path accordingly and call Win32 APIs to do the deletion work.
            Note: juntion points can be cyclical and this method does not check for cycles. So, the default
                  is not to follow junction points.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.GetAttributes(System.String)">
            <summary>
            Utility method to get the attributes of the specified path item.  This method does not
            throw an exception if nothing exists at the path (other exceptions, such as security violations,
            are thrown).
            </summary>
            <param name="path">The path to test.</param>
            <returns>The attributes if the item exists or (FileAttributes) -1.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.GetCompressionFormat(System.String)">
            <summary>
            Returns the compression format of the specified file or directory.
            </summary>
            <param name="path">File or directory to examine.</param>
            <returns>Compression format.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.SetCompressionFormat(System.String,Microsoft.TeamFoundation.Common.CompressionFormat)">
            <summary>
            Changes the compressed storage format of the given file or directory.
            </summary>
            <param name="path">File or directory to modify.</param>
            <param name="compressionFormat">Format to use.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.IsVersionControlReservedCharacter(System.Char)">
            <summary>
            Returns true if the character is a reserved version control character
            </summary>
            <param name="c">character to check</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpec.HasVersionControlReservedCharacter(System.String,System.Char@)">
            <summary>
            Returns true if the path contains any character which is a version control reserved character
            </summary>
            <param name="c">character to check</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.FileSpec.StringComparer">
            <summary>
            This is a property for comparison of file paths in instances like a Dictionary hash
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpecBottomUpComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            Compare two file specs.
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.FileSpecTopDownComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            Compare two file specs.
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.CompressionFormat">
            <summary>
            Win32 file compression formats.  Derived from Win32 COMPRESSION_FORMAT_* constants
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.GenerateConstantAttributeBase">
            <summary>
            Base class for constant generation.  Allows types/fields to be generated
            with an alternate name.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.GenerateConstantAttribute">
            <summary>
            Can be applied to a const/readonly-static field of a class/enum/struct, but is 
            only used when the containing type has the 'GenerateSpecificConstants' attribute applied.  
            This allows the developer to specify exactly what constants to include out of the containing type.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.GenerateAllConstantsAttribute">
            <summary>
            Applied to any enum/class/struct.  Causes the constants generator to create javascript constants 
            for all const/readonly-static fields contained by the type.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.GenerateSpecificConstantsAttribute">
            <summary>
            Applied to any enum/class/struct.  Causes the constants generator to create javascript constants at runtime
            for the type for any member constants/enumerated values that are tagged with the 'GenerateConstant' attribute.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.GenerateInterfaceAttribute">
            <summary>
            Applied to a class that represents a data model which is serialized to javascript. 
            This attribute controls how TypeScript interfaces are generated for the class that
            this is applied to.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.GenerateInterfaceAttribute.GenerateInterface">
            <summary>
            Whether or not to generate a typescript interface for this type
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.AdminTraceLogger">
            <summary>
            A logger that provides a configurable via registry tracing,
            which is good for setup including many processes (avoid editing many config files) 
            and processes which we don't own (mmc) where we're hosted.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.#ctor">
            <summary>
            Initializes a new instance of the <c>AdminTraceLogger</c> class.
            This constructors reads TraceLevel from the the HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\TeamFoundationServer\11.0\Admin\TraceLevel.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.#ctor(System.Diagnostics.TraceLevel)">
            <summary>
            Initializes a new instance of the <c>AdminTraceLogger</c> class.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.AdminTraceLogger.Default">
            <summary>
            The default instance of the AdminTraceLogger.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.AdminTraceLogger.TraceLevel">
            <summary>
            Gets the TraceLevel of this logger.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.Verbose(System.String)">
            <summary>
            Writes a verbose message to the trace, provided that TraceLevel of this logger
            is set to TraceLevel.Verbose.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.Verbose(System.String,System.Object[])">
            <summary>
            Writes a verbose message to the trace, provided that TraceLevel of this logger
            is set to TraceLevel.Verbose.
            </summary>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.Info(System.String)">
            <summary>
            Writes an informational message to the trace, provided that TraceLevel of this logger
            is set to TraceLevel.Info or TraceLevel.Verbose.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.Info(System.String,System.Object[])">
            <summary>
            Writes an informational message to the trace, provided that TraceLevel of this logger
            is set to TraceLevel.Info or TraceLevel.Verbose.
            </summary>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.Warning(System.String)">
            <summary>
            Writes a warning message to the trace, provided that TraceLevel of this logger
            is set to TraceLevel.Warning, TraceLevel.Info, or TraceLevel.Verbose.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.Warning(System.String,System.Object[])">
            <summary>
            Writes a warning message to the trace, provided that TraceLevel of this logger
            is set to TraceLevel.Warning, TraceLevel.Info, or TraceLevel.Verbose.
            </summary>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.Warning(System.Exception)">
            <summary>
            Formats an exception and writes it as a warning message to the trace, provided that TraceLevel of this logger
            is set to TraceLevel.Warning, TraceLevel.Info or TraceLevel.Verbose.
            </summary>
            <param name="exception">An exception to write to the trace. Null is allowed.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.Error(System.String)">
            <summary>
            Writes an error message to the trace.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.Error(System.String,System.Object[])">
            <summary>
            Writes an error message to the trace.
            </summary>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.Error(System.Exception)">
            <summary>
            Formats an exception and writes it as an error message to the trace.
            </summary>
            <param name="exception">An exception to write to the trace. Null is allowed.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.Debug(System.String)">
            <summary>
            Writes debug message to the trace.
            This constrained to dev debugging, so it's safe if you want to trace a password etc...
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.Debug(System.String,System.Object[])">
            <summary>
            Writes debug message to the trace.
            This constrained to dev debugging, so it's safe if you want to trace a password etc...
            </summary>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.RegisterPassword(System.String)">
            <summary>
            All Admin logging and tracing comes through the trace class.
            We will error if (1) the TFS_SCAN_PASSWORDS envvar is set and (2) it's debug
            This is expensive to enable but good for testing that passwords don't end up in a flight recorder trace or log
            Debug only so we don't care about passwords not being secure strings
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.WriteLine(System.Diagnostics.TraceLevel,System.String)">
            <summary>
            Writes a message to the trace, provided that traceLevel passed as first argument is
            is not lower than the logger TraceLevel.
            In debug build, this method can also ensure that output does not contain passwords.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.Heading(System.String)">
            <summary>
            Writes a heading lines to the trace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.Heading2(System.String)">
            <summary>
            Writes a heading lines to the trace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.AdminTraceLogger.ReadTraceLevel">
            <summary>
            Reads trace level from the HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\TeamFoundationServer\11.0\Admin\TraceLevel
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.MarshalByRefLogger">
            <summary>
            Enables access to ITFLogger across application domain boundaries in applications
             that support remoting.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.TFLogger">
            <summary>
            An abstract base class to unify logging so common library methods can be used in mutliple scenarios
            such as on-premise install with logging to disk, servicing with detail log data to configDb and 
            azure cloud console scenarios where auditing and logging is a separate DB.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.TraceLogger">
            <summary>
            A logger that only traces. Can be used as the default logger when no logger is supplied.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.OSDetails">
            <summary>
            Provides information regarding the Team Foundation Server operating system.  This
            class does not attempt to provide information for older operating systems the server
            is not supported on (e.g. Windows 2000, Home Server and Windows XP).
            
            If support for those OS's are needed - feel free to extend this class.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.OSDetails.IsClient">
            <summary>
            True if a client OS such as Windows Vista or Windows 7.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.OSDetails.IsMachineInWorkgroup">
            <summary>
            Returns true if computer is joined to a workgroup or not joined. Otherwise, returns false (computer joined to a domain).
            </summary>
            <returns>Returns true if computer is joined to a workgroup or not joined. Otherwise, returns false (computer joined to a domain).</returns>
            <exception cref="t:System.ComponentModel.Win32Exception">Call to native method NetGetJoinInformation failed.</exception>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.OSDetails.IsServer">
            <summary>
            True if a server OS such as Windows 2003 or Windows 2008.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.OSDetails.Is64BitOperatingSystem">
            <summary>
            Returns true if OS is 64 bit.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.OSDetails.IsWow64">
            <summary>
            Returns <c>true</c> if the current process is running in WOW64 mode.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.OSDetails.Is64BitNotWow64">
            <summary>
            Returns <c>true</c> if the current process is running on 64-bit AND NOT in WOW64 mode.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounterManager">
            <summary>
            The Performance Management Service is intended to supply centralized performance API's.
            
            Currently supported:
                Single instance performance counters
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounterManager.#cctor">
            <summary>
            NOTE: Private Constructor - this is acquired through a call to GetService
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounterManager.RegisterMultiInstanceCounterSet(System.Guid,System.String,Microsoft.TeamFoundation.Common.CounterInfo[])">
            <summary>
            RegisterMultiInstanceCounterSet is used to define a counter set category which can have more than one instance of each counter
            </summary>
            <param name="requestContext"></param>
            <param name="counterSetId">CounterSet guid from the performance counter manifest (e.g., TfsAtPerfManifest.xml)</param>
            <param name="counterSetInstanceName">Defines whether this is a single or multi-instance counter set </param>
            <param name="counters">Data describing each of the counters in the counter set</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounterManager.RegisterCounterSet(System.Guid,System.String,Microsoft.TeamFoundation.Common.CounterInfo[])">
            <summary>
            RegisterCounterSet is used to define a counter set category.
            </summary>
            <param name="counterSetId">CounterSet guid from the performance counter manifest (e.g., TfsAtPerfManifest.xml)</param>
            <param name="counterSetType">Defines whether this is a single or multi-instance counter set </param>
            <param name="counters">Data describing each of the counters in the counter set</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounterManager.RegisterCounterSet(System.Guid,System.String,Microsoft.TeamFoundation.Common.CounterInfo[],System.Boolean)">
            <summary>
            RegisterCounterSet is used to define a counter set category.
            </summary>
            <param name="counterSetId">CounterSet guid from the performance counter manifest (e.g., TfsAtPerfManifest.xml)</param>
            <param name="counterSetType">Defines whether this is a single or multi-instance counter set </param>
            <param name="counters">Data describing each of the counters in the counter set</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounterManager.GetPerformanceCounters(System.Guid)">
            <summary>
            The indexer will return a set of performance counters for the given
            performance counter category.
            </summary>
            <param name="categoryName">Name of the performance counter category</param>
            <returns>The set of counters if the category is registered otherwise returns null</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounterManager.CheckIfDisposed">
            <summary>
            Verify this is still a valid service object that hasn't
            been disposed before we start using it.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounters">
            <summary>
            TeamFoundationPerformanceCounters wraps CounterSetInstance.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounters.RegisterInstance(System.String)">
            <summary>
            Registers a new counter instance
            </summary>
            <param name="counterSetInstanceName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounters.Item(System.String)">
            <summary>
            The indexer will return the counter for the given counter name if
            it has been registered otherwise it will return null.
            </summary>
            <param name="counterName">Name of the performance counter required</param>
            <returns>The performance counter for this counter name, or null if it hasn't been registered</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounters.Item(System.String,System.String)">
            <summary>
            The indexer will return the counter for the given counter name if
            it has been registered otherwise it will return null.
            </summary>
            <param name="counterName">Name of the performance counter required</param>
            <param name="instanceName">Name of the Instance required, will be created if it doesn't exist</param>
            <returns>The performance counter for this counter name and instance, or null if it hasn't been registered</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounter">
            <summary>
            This is a  wrapper around the .Net Framework CounterData.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounter.Counter">
            <summary>
            This is the raw .NET Framework counter for associated with this
            TeamFoundationPerformanceCounter.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounter.Decrement">
            <summary>
            Decrement the counter by 1.
            </summary>
            <returns>Returns the updated value of the counter.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounter.Increment">
            <summary>
            Increment the counter by 1.
            </summary>
            <returns>Returns the updated value of the counter.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounter.IncrementTicks(System.Int64)">
            <summary>
            Let callers supply DateTime/TimeSpan ticks when incrementing an average time counter.
            </summary>
            <param name="value">Amount to update the counter by.</param>
            <returns>Returns the updated value of the counter.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounter.IncrementBy(System.Int64)">
            <summary>
            Increment the counter by the specified value
            </summary>
            <param name="value">Amount to update the counter by.</param>
            <returns>Returns the updated value of the counter.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.TeamFoundationPerformanceCounter.RawValue">
            <summary>
            The current value of the performance counter
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.Reporting.ReportingUtilities">
            <summary>
            Provides utility methods for working with Reporting Services.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Reporting.ReportingUtilities.GetReportManagerItemUrl(System.Uri,System.String)">
            <summary>
            Formats the path for accessing the report manager for a particular item path.  
            This is primarily used by TfsRedirect.
            </summary>
            <param name="reportManagerUrl">A report manager url.</param>
            <param name="itemPath">An item path.</param>
            <returns>The corresponding url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Reporting.ReportingUtilities.GetReportViewerUrl(System.Uri,System.String,System.Boolean)">
            <summary>
            Formats the path for accessing a particular report for a particular item path.  
            This is primarily used by TfsRedirect.
            </summary>
            <param name="reportWebServiceUrl">The reporting web service URL.</param>
            <param name="itemPath">An item path.</param>
            <param name="showToolbar">A boolean flag indicating if the toolbar should be visible.</param>
            <returns>The corresponding url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.Reporting.ReportingUtilities.RemoveKnownWebServicePaths(System.Uri)">
            <summary>
            Strip off known service names, like 'ReportService.asmx' and 'ReportService2005.asmx'.
            </summary>
            <param name="input">An input uri.</param>
            <returns>The resulting url, after having trimmed known service paths.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.RetryManager">
            <summary>
            A simple class that allows to execute an Action or Func with retries.
            </summary>
            <example>
            <![CDATA[
            using(SqlConnection conn = new RetryManager(5, TimeSpan.FromMilliseconds(200)).Invoke(() => 
                {
                    SqlConnection connection = new SqlConnection(connectionString);
                    connection.Open();
                    return connection;
                }))
            {
               // use connection
            }
            ]]>
            </example>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.RetryManager.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the the RetryManager class.
            </summary>
            <param name="retryCount">The number of retries.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.RetryManager.#ctor(System.Int32,System.Action{System.Exception})">
            <summary>
            Initializes a new instance of the the RetryManager class.
            </summary>
            <param name="retryCount">The number of retries.</param>
            <param name="onException">A callback method that will be called if exception is thrown.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.RetryManager.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the the RetryManager class.
            </summary>
            <param name="retryCount">The number of retries.</param>
            <param name="delay">A delay between retries.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.RetryManager.#ctor(System.Int32,System.TimeSpan,System.Action{System.Exception})">
            <summary>
            Initializes a new instance of the the RetryManager class.
            </summary>
            <param name="retryCount">The number of retries.</param>
            <param name="delay">A delay between retries.</param>
            <param name="onException">A callback method that will be called if exception is thrown.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.RetryManager.Invoke(System.Action)">
            <summary>
            Executes specified action with retries.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.RetryManager.Invoke``1(System.Action{``0},``0)">
            <summary>
            Executes specified action with retries.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.RetryManager.Invoke``2(System.Action{``0,``1},``0,``1)">
            <summary>
            Executes specified action with retries.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.RetryManager.Invoke``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Executes specified action with retries.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.RetryManager.Invoke``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Executes specified action with retries.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.RetryManager.InvokeFunc``1(System.Func{``0})">
            <summary>
            Executes specified Func with retries.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.RetryManager.InvokeFunc``2(System.Func{``0,``1},``0)">
            <summary>
            Executes specified Func with retries.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.RetryManager.InvokeFunc``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Executes specified Func with retries.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.RetryManager.InvokeFunc``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Executes specified Func with retries.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.RetryManager.InvokeFunc``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Executes specified Func with retries.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ServiceControlManagerUtility.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.TeamFoundation.Common.ServiceControlManagerUtility"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ServiceControlManagerUtility.OpenService(System.String,Microsoft.TeamFoundation.Common.Internal.NativeMethods.ServiceAccessRights)">
            <summary>
            Calls the Win32 OpenService function and performs error checking.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ServiceControlManagerUtility.SetRestartActions(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the nominated service to restart on failure.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ServiceControlManagerUtility.Dispose">
            <summary>
            See <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase">
            <summary>
            Helper class that detects the current state of SharePoint installation, configuration, etc.
            Using this class guarantees that the settings all come from the same version.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.RegistryRoot">
            <summary>
            The root path for the registry values.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.IsInstalled">
            <summary>
            Determines if SharePoint is installed on the local machine.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.InstallDirectory">
            <summary>
            Location where SharePoint files are installed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.InstalledVersion">
            <summary>
            Version of SharePoint installed. 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.IsProvisioned">
            <summary>
            Determine if SharePoint has been provisioned/configured.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.CentralAdminUrl">
            <summary>
            URL to the Central Administration site (even if it is not local).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.ServerRole">
            <summary>
            The ServerRole install type (e.g. Standalone, Farm, Web Front End).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.ServicesTimerName">
            <summary>
            The service name of the Windows SharePoint Services Timer service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.StsadmPath">
            <summary>
            Location of the Stsadm.exe.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.PsconfigPath">
            <summary>
            Location of the Psconfig.exe.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.#ctor">
            <summary>
            Protected constructor.  Use the GetState method.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.GetState">
            <summary>
            Creates an instance of the state.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.Refresh">
            <summary>
            Refreshes the information in the state. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.GetInstallDirectory">
            <summary>
            Gets the installation directory without doing the full initialization of the class.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.GetToolPath(System.String,System.String)">
            <summary>
            Returns the path to a tool, if it exists.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.GetRegistryValue(System.String,System.String)">
            <summary>
            Gets a string value from the Windows HKLM registry.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.SharePoint.SharePointInstallStateBase.GetRegistryRoot">
            <summary>
            Gets the registry root for sharepoint (like "SOFTWARE\Microsoft\Shared Tools\Web Server Extensions\14.0");
            Return null if the registry root cannot be found.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.SharePoint.SharePointSolution">
            <summary>
            Helper class representing a SharePoint Solution (WSP file) and the features.  
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.SharePoint.SharePointSolution.SharePointMajorVersion">
            <summary>
            The major version of the SharePoint instance to which this solution will be deployed
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.SharePoint.SharePointSolution.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Common.SharePoint.WebApplicationFeature},System.Nullable{System.Int32})">
            <summary>
            Private Constructor.
            </summary>
            <param name="sharePointMajorVersion">If specified this is the major version number of SharePoint 
            that is required for this solution to be provisioned. If not specified, this solution will be
            provisioned for all versions of SharePoint.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.SharePoint.SharePointSolution.GetSolutions(System.String)">
            <summary>
            Get the list of solutions that should be activated on web applications.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.SharePoint.WebApplicationFeature">
            <summary>
            Represents a feature that should be activated on a SharePoint Web Application when the integration with TFS is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.SharePoint.WebApplicationFeature.#ctor(System.String,System.Guid)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.SharePoint.SharePointUtilities">
            <summary>
            Provides utility methods for SharePoint.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.SharePoint.SharePointUtilities.GetWellKnownProcessGuidancePageUrl(Microsoft.TeamFoundation.Common.Internal.ProcessGuidanceType,System.Uri,System.String)">
            <summary>
            Transforms the input base URL to the well known process guidance HTML page url, based
            on the process guidance type.
            </summary>
            <param name="type">The type of the process guidance site.</param>
            <param name="baseUrl">The base url for that process guidance site.</param>
            <param name="guidanceFileName">The name of the process guidance file.  If null is specified
            it will use the default.</param>
            <returns>The transformed URL pointing to the process guidance HTML page url, or <c>null</c>
            if not defined.</returns>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.TaggingHelper.TagSeparators">
            <summary>
            Tag seperator characters
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.TaggingHelper.MaxTagNameLength">
            <summary>
            Max length for a Tag Name
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TaggingHelper.SplitTagText(System.String)">
            <summary>
            Splits a string of tags and their delimiters into a collection of individual tag values
            </summary>
            <param name="text">The string to split</param>
            <returns>A collection of tag names</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TaggingHelper.FormatTagsValue(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Return a user friendly string representing a set of tags (does not reorder tags)
            </summary>
            <param name="tags">A collection of tag names</param>
            <returns>delimiter joined string representing the tags.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.GetImageHandle(System.Object)">
            <summary>
            get an image handle from an object
            </summary>
            <param name="obj"> image object can be int or intptr, </param>
            <returns>the handle for the image. returns IntPtr.Zero if it cannot retrive an image from the input</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.IsLonghornOrLater">
            <summary>
            Check to see if the OS we are running under is Longhorn Server, Vista, Windows 7 or later
            </summary>
            <returns>true if we are running on Longhorn server, Vista, Windows 7 or later.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.GetLocalTimeZoneOffset">
            <summary>
            Returns the timezone offset string for the current locale along with the proper sign
            at the begining. 
            </summary>
            <returns>If server locale is Indian Standard Time, then this function will return
            +05:30:00</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.IsAlphaNumString(System.String)">
            <summary>
            Checks if a string contains only letters or digits based on http://www.ietf.org/rfc/rfc2396.txt.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.IsIllegalInputCharacter(System.Char,System.Boolean)">
            <summary>
            Checks if character is not displayable. 
            </summary>
            <param name="allowCrLf">Carriage return and line-feed is considered legal if the allowCrLf parameter is set to true.</param>
            <remarks>A character is "not displayable" if it's UnicodeCategory is in the set {LineSeparator, ParagraphSeparator, Control, Format, OtherNotAssigned}.</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.HasControlCharacters(System.String)">
            <summary>
            Checks if string contains a Control character.
            See also <seealso cref="M:Microsoft.TeamFoundation.Common.TFCommonUtil.IsInvalidString(System.String)"/>
            </summary>
            <remarks>Only use it if you want to check for control characters.</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the collection is null or contains no elements.
            </summary>
            <typeparam name="T">The IEnumerable type.</typeparam>
            <param name="enumerable">The enumerable, which may be null or empty.</param>
            <returns>
                <c>true</c> if the IEnumerable is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckSidNullEmpty(System.String,System.String)">
            <summary>
            Verify that the sid isn't null or empty
            </summary>
            <param name="sid">SID to check</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckSid(System.String,System.String)">
            <summary>
            Verify that the sid is in a valid format
            </summary>
            <param name="sid">SID to check</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CanonicalizeDacl(System.Security.AccessControl.NativeObjectSecurity)">
            <summary>
            Canonicalizes the DACL of any native object security derived class, such as FileSecurity or RegistrySecurity.
            If the DACL is already canonical the method does not perform any actions.
            </summary>
            <param name="objectSecurity">The object which should have the DACL canonicalized</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CombinePaths(System.String,System.String)">
            <summary>
            Replacement for Path.Combine.
            For URL please use UrlUtility.CombineUrl
            </summary>
            <param name="path1">The first half of the path.</param>
            <param name="path2">The second half of the path.</param>
            <returns>The concatenated string with and leading slashes or 
            tildes removed from the second string.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.RemoveInvalidXmlChars(System.String,System.Boolean)">
            <summary>
            Removes invalid XML characters from a string. 
            </summary>
            <param name="strIn">The string to check.</param>
            <param name="allowCrLf">Carriage return and line-feed is considered legal if the allowCrLf parameter is set to true.</param>
            <remarks>A character is "not displayable" if it's UnicodeCategory is in the set {LineSeparator, ParagraphSeparator, Control, Format, OtherNotAssigned}.</remarks>
            <returns>A string containing only valid XML characters.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckForOutOfRange``1(``0,System.String,``0)">
            <summary>
            Throw an exception if the value is out of range.
            </summary>
            <typeparam name="T">The comparable type</typeparam>
            <param name="var">the value to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckForOutOfRange``1(``0,System.String,``0,``0)">
            <summary>
            Throw an exception if the value is out of range.
            </summary>
            <typeparam name="T">The comparable type</typeparam>
            <param name="var">the value to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
            <param name="maximum">maximum legal value</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckForOutOfRange(System.Int32,System.String,System.Int32)">
            <summary>
            Throw an exception if the integer is out of range.
            </summary>
            <param name="var">the int to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckForOutOfRange(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Throw an exception if the integer is out of range.
            </summary>
            <param name="var">the int to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
            <param name="maximum">maximum legal value</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckForOutOfRange(System.Int64,System.String,System.Int64)">
            <summary>
            Throw an exception if the integer is out of range.
            </summary>
            <param name="var">the int to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckForOutOfRange(System.Int64,System.String,System.Int64,System.Int64)">
            <summary>
            Throw an exception if the integer is out of range.
            </summary>
            <param name="var">the int to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
            <param name="maximum">maximum legal value</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckForDateTimeRange(System.DateTime,System.String,System.DateTime,System.DateTime)">
            <summary>
            Throw an exception if the date is not in the range.
            </summary>
            <param name="var">the DateTime to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckGreaterThanOrEqualToZero(System.Single,System.String)">
            <summary>
            Throws an exception if the provided value is less than zero.
            </summary>
            <param name="value">value to check</param>
            <param name="enumerableName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckForNull(System.Object,System.String)">
            <summary>
            Throw an exception if the object is null.
            </summary>
            <param name="var">the object to check</param>
            <param name="varName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.EnsureIsNull(System.Object,System.String)">
            <summary>
            Throw an exception if the object is not null.
            </summary>
            <param name="var">the object to check</param>
            <param name="varName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckStringCasing(System.String,System.String,System.Boolean)">
            <summary>
            Throw an exception if the string is not entirely of a specified casing (lowercase, uppercase).
            </summary>
            <param name="stringVar">The string to check.</param>
            <param name="varName">The variable or parameter name to display.</param>
            <param name="checkForLowercase">Indicates whether the check should require
            lowercase characters, as opposed to uppercase characters.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckForEmptyGuid(System.Guid,System.String)">
            <summary>
            Throw an exception if the guid is equal to Guid.Empty.
            </summary>
            <param name="var">the guid to check</param>
            <param name="varName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckArrayForNullOrEmpty(System.Object[],System.String)">
            <summary>
            Throw an exception if an array is null or empty.
            </summary>
            <param name="array">array to check</param>
            <param name="arrayName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckArrayForNullOrEmpty(System.Int32[],System.String)">
            <summary>
            Throw an exception if an array is null or empty.
            </summary>
            <param name="array">array to check</param>
            <param name="arrayName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckArrayForNullOrEmpty``1(``0[],System.String)">
            <summary>
            Throw an exception if an array is null or empty.
            </summary>
            <param name="array">array to check</param>
            <param name="arrayName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckListForNullOrEmpty(System.Collections.IList,System.String)">
            <summary>
            Throw an exception if IList is null or empty.
            </summary>
            <param name="list">array to check</param>
            <param name="listName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckEnumerableForNullOrEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Throw an exception if IEnumerable is null or empty.
            </summary>
            <param name="enumerable">enumerable to check</param>
            <param name="enumerableName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckEnumerableForEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Throw an exception if IEnumerable is empty.
            </summary>
            <param name="enumerable">enumerable to check</param>
            <param name="enumerableName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckStringForNullOrEmpty(System.String,System.String)">
            <summary>
            Throw an exception if a string is null or empty.
            </summary>
            <param name="stringVar">string to check</param>
            <param name="stringVarName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckStringForNullOrEmpty(System.String,System.String,System.Boolean)">
            <summary>
            Throw an exception if a string is null or empty.  
            </summary>
            <param name="stringVar">string to check</param>
            <param name="stringVarName">the variable or parameter name to display</param>
            <param name="trim">If true, will trim the string after it is determined not to be null</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckStringForNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throw an exception if a string is null, empty, or consists only of white-space characters.
            </summary>
            <param name="stringVar">string to check</param>
            <param name="stringVarName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckForBothStringsNullOrEmpty(System.String,System.String,System.String,System.String)">
            <summary>
            Throw an exception if one of the strings is not null or empty.
            </summary>
            <param name="var1">the first object to check</param>
            <param name="varName1">the variable or parameter name to display for the first object</param>
            <param name="var2">the second object to check</param>
            <param name="varName2">the variable or parameter name to display for the second object</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckStringForAnyWhiteSpace(System.String,System.String)">
            <summary>
            Checks if a string contains any whitespace characters. Throws an exception if it does.
            </summary>
            <param name="stringVar"></param>
            <param name="stringVarName"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckType``1(System.Object,System.String,System.String)">
            <summary>
            Performs a type check on the variable, and throws if there is a mismatch
            </summary>
            <typeparam name="T"></typeparam>
            <param name="var"></param>
            <param name="varName"></param>
            <param name="typeName"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckForDefinedEnum``1(``0,System.String)">
            <summary>
            Checks if an enum value is defined on the enum type
            </summary>
            <typeparam name="TEnum">The type of the enum</typeparam>
            <param name="value">The enum value</param>
            <param name="enumVarName">The name of the enum argument</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.IsValidEmailAddress(System.String)">
            <summary>
            Determines if a string value is a valid email address. Does NOT throw.
            </summary>
            <param name="stringVar"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckEmailAddress(System.String,System.String)">
            <summary>
            Checks if a string is a valid email address. Throws an exception otherwise.
            </summary>
            <param name="stringVar"></param>
            <param name="stringVarName"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckStringForInvalidCharacters(System.String,System.String)">
            <summary>
            Checks for invalid unicode characters
            </summary>
            <param name="stringVar"></param>
            <param name="stringVarName"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckStringForInvalidCharacters(System.String,System.String,System.Boolean)">
            <summary>
            Checks for invalid unicode characters
            </summary>
            <param name="stringVar"></param>
            <param name="stringVarName"></param>
            <param name="allowCrLf"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckStringForInvalidCharacters(System.String[],System.String)">
            <summary>
            
            </summary>
            <param name="stringArrayVar"></param>
            <param name="stringArrayVarName"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CheckStringForInvalidCharacters(System.String[],System.String,System.Boolean)">
            <summary>
            Checks for invalid unicode characters
            </summary>
            <param name="stringArrayVar"></param>
            <param name="stringArrayVarName"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.IsLegalComputerName(System.String)">
            <summary>
            Verify that the computer name is not empty, not too long, and doesn't contain
            characters with ordinal values 0-31
            </summary>
            <param name="computerName">computer name to check</param>
            <returns>true if the computer name is legal; false otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Common.TFCommonUtil.IsLegalComputerName(System.String,System.String@)" -->
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.IsLegalIdentity(System.String)">
            <summary>
            Checks to see if the identity consists only of legal characters and is less than the maximum
            length.
            </summary>
            <param name="identity">identity to check</param>
            <returns>true if the identity is legal; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.IsLegalXmlString(System.String)">
            <summary>
            Returns true if the given string can be transmitted to an XML web service.
            </summary>
            <param name="str">string to check for disallowed XML chars</param>
            <returns>true if the string is legal; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.AddXmlAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Adds an attribute to the node if the value is non-null.
            </summary>
            <param name="node">the XML node</param>
            <param name="attrName">the name of the attribute</param>
            <param name="value">the value of the attribute</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.EnumToString``1(System.Enum)">
            <summary>
            Format the enum as a string for use with XML.
            </summary>
            <typeparam name="T">the type of enum</typeparam>
            <param name="value">the enum value</param>
            <returns>a string representing the enum value</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.EnumFromString``1(System.String)">
            <summary>
            Construct an enum from a string for use with XML.
            </summary>
            <typeparam name="T">the type of enum to return</typeparam>
            <param name="s">the string</param>
            <returns>the enum</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.RunApp(System.String,System.String,System.EventHandler,System.Boolean)">
            <summary>
            Runs an application with the specified argument string.
            </summary>
            <param name="appExe">the application to run</param>
            <param name="arguments">the arguments</param>
            <param name="exitedHandler">event handler to attached for process exit</param>
            <param name="wait">if true, wait for the process to exit</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.RunApp(System.String,System.String,System.EventHandler,System.Boolean,System.Boolean)">
            <summary>
            Runs an application with the specified argument string.
            </summary>
            <param name="appExe">the application to run</param>
            <param name="arguments">the arguments</param>
            <param name="exitedHandler">event handler to attached for process exit</param>
            <param name="wait">if true, wait for the process to exit</param>
            <param name="defaultStartParameters">true to use default values for UseShellExecute and CreateNoWindow; false to use reverted values, usefull for diffmerge.exe</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.RunApp(System.String,System.String,System.EventHandler,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Runs an application with the specified argument string.
            </summary>
            <param name="appExe">the application to run</param>
            <param name="arguments">the arguments</param>
            <param name="exitedHandler">event handler to attached for process exit</param>
            <param name="wait">if true, wait for the process to exit</param>
            <param name="defaultStartParameters">true to use default values for UseShellExecute and CreateNoWindow; false to use reverted values, usefull for diffmerge.exe</param>
            <param name="exitCodeMatters">true if a non-zero exit code ought to throw and exception. False if you don't care.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.BeginRunApp(System.String,System.String)">
            <summary>
            Start an external process running and return back the Process handle.
            This method may throw the System.ComponentModel.Win32Exception.
            </summary>
            <param name="appExe">command to run</param>
            <param name="arguments">arguments for the command</param>
            <returns>Process instance of the running external process</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.BeginRunApp(System.String,System.String,System.Boolean)">
            <summary>
            Start an external process running and return back the Process handle.
            This method may throw the System.ComponentModel.Win32Exception.
            </summary>
            <param name="appExe">command to run</param>
            <param name="arguments">arguments for the command</param>
            <param name="defaultStartParameters">true to use default values for UseShellExecute and CreateNoWindow; false to use reverted values, usefull for diffmerge.exe</param>
            <returns>Process instance of the running external process</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.EndRunApp(System.Diagnostics.Process)">
            <summary>
            Wait for an external process to finish and return back his exit code.
            This method may throw the System.ComponentModel.Win32Exception.
            </summary>
            <param name="process">Process to wait for</param>
            <returns>exit code the process returned</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.AreByteArraysEqual(System.Byte[],System.Byte[])">
            <summary>
            Compare two byte arrays to determine if they contain the same data.
            </summary>
            <param name="a1">First array to compare.</param>
            <param name="a2">Second array to compare.</param>
            <returns>true if the arrays are equal and false if not.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.AreByteArraysEquals(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Compare two byte arrays to determine if they contain the same data.
            </summary>
            <param name="a1">First array to compare.</param>
            <param name="a2">Second array to compare.</param>
            <param name="length"># of bytes to compare.</param>
            <returns>true if the arrays are equal and false if not.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.ConvertFileEncoding(System.String,System.String,System.Text.Encoding,System.Text.Encoding,System.Boolean)">
            <summary>
            Converts a file from one encoding to another.
            </summary>
            <param name="sourcePath">the file to convert</param>
            <param name="destPath">the destination for the converted file</param>
            <param name="sourceEncoding">the original file encoding</param>
            <param name="destEncoding">the encoding to which the contents should be converted</param>
            <param name="includeBom">when true and converting to a Unicode encoding, include the BOM
              in the converted output</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.OpenXmlFile(System.IO.FileStream@,System.String,System.IO.FileShare,System.Boolean)">
            <summary>
            Read in the the cache file as an XML document.
            </summary>
            <param name="file">the config file stream (returned)</param>
            <param name="sharing">the file sharing mode</param>
            <param name="saveFile">if true, create the file if it does not exist</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.OpenFileHelper(System.String,System.IO.FileShare,System.Boolean,System.Boolean,System.Xml.XmlDocument@)">
            <summary>
            A helper for opening files.
            </summary>
            <param name="path"></param>
            <param name="sharing"></param>
            <param name="saveFile"></param>
            <param name="loadAsXmlDocument"></param>
            <param name="xmlDocument"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.GetAppSettingAsInt(System.String,System.Int32)">
            <summary>
            Retrieves the app setting from the application's .config file or uses the default if it
            is not present.  Any environment variables present in the value are expanded.
            </summary>
            <param name="key">the app setting name</param>
            <param name="defaultValue">the value to use if the app setting is not present</param>
            <returns>the value for the setting</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.GetAppSettingAsLong(System.String,System.Int64)">
            <summary>
            Retrieves the app setting from the application's .config file or uses the default if it
            is not present.  Any environment variables present in the value are expanded.
            </summary>
            <param name="key">the app setting name</param>
            <param name="defaultValue">the value to use if the app setting is not present</param>
            <returns>the value for the setting</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.GetAppSettingAsBool(System.String,System.Boolean)">
            <summary>
            Retrieves the app setting from the application's .config file or uses the default if it
            is not present.  Any environment variables present in the value are expanded.
            </summary>
            <param name="key">the app setting name</param>
            <param name="defaultValue">the value to use if the app setting is not present</param>
            <returns>the value for the setting</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.GetAppSetting(System.String,System.String)">
            <summary>
            Retrieves the app setting from the application's .config file or uses the default if it
            is not present.  Any environment variables present in the value are expanded.
            </summary>
            <param name="key">the app setting name</param>
            <param name="defaultValue">the value to use if the app setting is not present</param>
            <returns>the value for the setting</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CombineArrays``1(``0[],``0[])">
            <summary>
            Used by multiple places for combining arrays of items
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CopyCollection``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Used by multiple places for making an array of items from an existing collection.
            This version is around so the compiler can do type inferencing.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.CopyCollection``1(System.Collections.ICollection)">
            <summary>
            Used by multiple places for making an array of items from an existing collection
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.SafeRelease(System.IntPtr)">
            <summary>
            Release a COM object.  The difference between this and Marshal.Release is that we are 
            tolerant of NULL COM pointers.
            </summary>
            <param name="punk">COM object reference to release.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.TranslateEnum(System.Type,System.String[],System.Int32)">
            <summary>
             Translates an array of enum names into an integer bitfield.
             A string of "*" will return the value specified in allPermissions.
             Throws ArgumentException if a string is not found.
            </summary>
            <param name="enumClass">Enumeration class to get names from.</param>
            <param name="array">Permission names.</param>
            <param name="allPermissions">The set of bits that defines all permissions for this type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.TranslateEnum(System.Type,System.Int32)">
            <summary>
             Translates an integer bitfield back into an array of enumeration names.
            </summary>
            <param name="enumClass">Enumeration class to get names from</param>
            <param name="bits">Bitfield</param>
            <returns>Array of enumeration string names</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.SafeDispose(System.IDisposable)">
            <summary>
            invokes dispose safely by checkin that the reference is not null 
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.StripEnd(System.Uri,System.String[])">
            <summary>
            Removes the ending of the input uri if the end of the absolute uri matches one of the strings in the 'stringsToStrip'
            </summary>
            <param name="uri"></param>
            <param name="stringsToStrip"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.StripEnd(System.String,System.String[])">
            <summary>
            Removes the ending of the input string if the end matches one of the strings in the 'stringsToStrip'
            </summary>
            <param name="str"></param>
            <param name="stringsToStrip"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.EscapeString(System.String,System.Char)">
            <summary>
            Repeat each occurance of the specified character. 
            </summary>
            <param name="text">An input string</param>
            <param name="escapeChar">A character to escape.</param>
            <example>
            string text = TFCommonUtil.EscapeString("a'bc", '\'');
            Debug.Assert(text == "a''bc");
            </example>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.ReadRegistryValue``1(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Read a registry value.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.AreTypesEquivalent(System.Type,System.Type)">
            <summary>
            Checks if the two given types are equivalent. This check is preferred over
            type.Equals(otherType) or an == comparison because it handles Embeddable Interop Types.
            This method is a substitute for type.IsEquivalentTo(otherType) for assemblies which target
            framework 3.5 and earlier. See:
            http://devdiv/sites/vsarch/Wiki/Type%20identity%20and%20type%20equivalence%20with%20Embedded%20Interop%20Types.aspx
            </summary>
            <param name="a">The first type</param>
            <param name="b">The second type</param>
            <returns>True if the two given types are equivalent</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.GetSqlTimestamp(System.String)">
            <summary>
            Converts string to sql timestamp byte array
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TFCommonUtil.Retry(System.Int32,System.Int32,System.Action{System.Int32},System.Func{System.Exception,System.Int32,System.Boolean})">
            <summary>
            Handles automatically retrying when exceptions occur.
            </summary>
            <param name="count">Number of times to retry</param>
            <param name="retryDelay">Delay in milliseconds before retrying when an exception occurs</param>
            <param name="action">Action to perform in a retry loop</param>
            <param name="exceptionAction">Optional, action to perform when an exception is thrown prior to retrying.  
            If the function is null or returns 'true' we will continue retrying up to the count limit.  If it returns 'false'
            we will rethrow the exception.</param>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.TFCommonUtil.MaxGroupNameLength">
            <summary>
            Maximum Group Name Length
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.TFCommonUtil.MaxGroupDescriptionLength">
            <summary>
            Maximum Group Description Length
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder">
            <summary>
            A utility class for generating Team Web Access hyperlinks.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.CollectionId">
            <summary>
            A project collection id. 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.CompatibleMode">
            <summary>
            Returns true when working with older servers.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetUrl(System.String,System.String)">
            <summary>
            Get the template for the location of the specified Tswa service. 
            </summary>
            <param name="serviceType">A Tswa service type.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>The template for the location of the specified Tswa serviceType.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetUrl(System.String,System.String,System.Boolean)">
            <summary>
            Get the template for the location of the specified Tswa service. 
            </summary>
            <param name="serviceType">A Tswa service type.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <param name="collectionLevel">A boolean indicating whether the requested service is account or collection level</param>
            <returns>The template for the location of the specified Tswa serviceType.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetHomeUrl">
            <summary>
            Get Team Web Access root url.
            </summary>
            <returns>Team Web Access root url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetHomeUrl(System.String)">
            <summary>
            Get Team Web Access root url.
            </summary>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>Team Web Access root url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetHomeUrl(System.Uri)">
            <summary>
            Gets Team Web Access home url for a specified project.
            </summary>
            <param name="projectUri">Uri of the project to be selected in the home page of Team Web Access.</param>
            <returns>Team Web Access home url for a specified project.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetTeamHomeUrl(System.Uri,System.String)">
            <summary>
            Gets Team Web Access home url for a specified project and team.  Only works against servers that support
            teams.
            </summary>
            <param name="projectUri">Uri of the project to be selected in the home page of Team Web Access.</param>
            <param name="teamName">Name of the team</param>
            <returns>Team Web Access home url for a specified project.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetHomeUrl(System.Uri,System.String)">
            <summary>
            Gets Team Web Access home url for a specified project.
            </summary>
            <param name="projectUri">Uri of the project to be selected in the home page of Team Web Access.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>Team Web Access home url for a specified project.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetSourceExplorerUrl(System.String)">
            <summary>
            Gets a Source Explorer url.
            </summary>
            <param name="serverItemPath">A server item path.</param>
            <returns>A Source Explorer url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetSourceExplorerUrl(System.String,System.String)">
            <summary>
            Gets a Source Explorer url.
            </summary>
            <param name="serverItemPath">A source control path. If null or empty, version control root path "$/" will be used.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A Source Explorer url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetChangesetDetailsUrl(System.Int32)">
            <summary>
            Gets a changeset details url.
            </summary>
            <param name="changesetId">Changeset id.</param>
            <returns>A changeset detail url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetChangesetDetailsUrl(System.Int32,System.String)">
            <summary>
            Gets a changeset details browser url.
            </summary>
            <param name="changesetId">Changeset id.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A changeset detail url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetShelvesetDetailsUrl(System.String,System.String)">
            <summary>
            Gets a shelveset details url.
            </summary>
            <param name="shelvesetName">A shelveset name.</param>
            <param name="shelvesetOwner">A shelveset owner.</param>
            <returns>A changeset detail url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetShelvesetDetailsUrl(System.String,System.String,System.String)">
            <summary>
            Gets a shelveset details url.
            </summary>
            <param name="shelvesetName">A shelveset name.</param>
            <param name="shelvesetOwner">A shelveset owner.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A changeset detail url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetViewSourceControlItemUrl(System.Int32,System.String)">
            <summary>
            Gets a view source control item url.
            </summary>
            <remarks>
            versionSpec can be one of the following:
            Empty | null                  - Latest version
            Integer less than 1           - Latest version
            Integer greater or equal to 1 - Changeset number
            C{changesetNumber}, L{Label}, D{Date}
            T                             - Latest version  
            T{VersionSpec}                - Tip version of the item at version specified by VersionSpec. 
            P{VersionSpec}                - Previous version of the item at version specified by VersionSpec. 
            </remarks>
            <param name="itemId">A source control item id.</param>
            <param name="versionSpec">Source countrol item version specification.</param>
            <returns>A view item url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetViewSourceControlItemUrl(System.Int32,System.String,System.String)">
            <summary>
            Gets a view source control item url.
            </summary>
            <param name="itemId">A source control item id.</param>
            <param name="changesetId">A changeset number. Represents latest version if less than 1.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A view item url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetViewSourceControlItemUrl(System.String,System.Int32)">
            <summary>
            Gets a view source control item url.
            </summary>
            <param name="serverItemPath">A server item path.</param>
            <param name="changesetId">A changeset id.</param>
            <returns>A view item url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetViewSourceControlItemUrl(System.String,System.Int32,System.String)">
            <summary>
            Gets a view source control item url.
            </summary>
            <param name="serverItemPath">A server item path.</param>
            <param name="changesetId">A changeset id.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A view item url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetViewSourceControlItemUrl(System.String,System.String)">
            <summary>
            Gets a view source control item url.
            </summary>
            <remarks>
            versionSpec can be one of the following:
            Empty | null                  - Latest version
            Integer less than 1           - Latest version
            Integer greater or equal to 1 - Changeset number
            C{changesetNumber}, L{Label}, D{Date}
            T                             - Latest version  
            T{VersionSpec}                - Tip version of the item at version specified by VersionSpec. 
            P{VersionSpec}                - Previous version of the item at version specified by VersionSpec. 
            </remarks>
            <param name="serverItemPath">A server item path.</param>
            <param name="versionSpec">Server item version specification.</param>
            <returns>A view item url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetViewSourceControlItemUrl(System.String,System.String,System.String)">
            <summary>
            Gets a view source control item url.
            </summary>
            <remarks>
            versionSpec can be one of the following:
            Empty | null                  - Latest version
            Integer less than 1           - Latest version
            Integer greater or equal to 1 - Changeset number
            C{changesetNumber}, L{Label}, D{Date}
            T                             - Latest version  
            T{VersionSpec}                - Tip version of the item at version specified by VersionSpec. 
            P{VersionSpec}                - Previous version of the item at version specified by VersionSpec. 
            </remarks>
            <param name="serverItemPath">A server item path.</param>
            <param name="versionSpec">Server item version specification.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A view item url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetViewSourceControlShelvedItemUrl(System.String,System.String,System.String)">
            <summary>
            Gets a view source control shelveset item url.
            </summary>
            <param name="serverItemPath">A server item path for a shelved item.</param>
            <param name="shelvesetName">The name of the shelveset containing the shelved item</param>
            <param name="shelvesetOwner">The owner of the shelveset containing the shelved item</param>
            <returns>A view item url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetViewSourceControlShelvedItemUrl(System.String,System.String,System.String,System.String)">
            <summary>
            Gets a view source control shelveset item url.
            </summary>
            <param name="serverItemPath">A server item path for a shelved item.</param>
            <param name="shelvesetName">The name of the shelveset containing the shelved item</param>
            <param name="shelvesetOwner">The owner of the shelveset containing the shelved item</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A view item url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetHistorySourceControlItemUrl(System.String,System.String)">
            <summary>
            Gets history viever URL for a source control item.
            </summary>
            <remarks>
            versionSpec can be one of the following:
            Empty | null                  - Latest version
            Integer less than 1           - Latest version
            Integer greater or equal to 1 - Changeset number
            C{changesetNumber}, L{Label}, D{Date}
            T                             - Latest version  
            T{VersionSpec}                - Tip version of the item at version specified by VersionSpec. 
            P{VersionSpec}                - Previous version of the item at version specified by VersionSpec. 
            </remarks>
            <param name="serverItemPath">A server item path.</param>
            <param name="versionSpec">Server item version specification.</param>
            <returns>A history viever URL for a source control item.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetHistorySourceControlItemUrl(System.String,System.String,System.String)">
            <summary>
            Gets history viever URL for a source control item.
            </summary>
            <remarks>
            versionSpec can be one of the following:
            Empty | null                  - Latest version
            Integer less than 1           - Latest version
            Integer greater or equal to 1 - Changeset number
            C{changesetNumber}, L{Label}, D{Date}
            T                             - Latest version  
            T{VersionSpec}                - Tip version of the item at version specified by VersionSpec. 
            P{VersionSpec}                - Previous version of the item at version specified by VersionSpec. 
            </remarks>
            <param name="serverItemPath">A server item path.</param>
            <param name="versionSpec">Server item version specification.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A history viever URL for a source control item.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetAnnotateSourceControlItemUrl(System.String,System.Int32)">
            <summary>
            Gets an annotate item url.
            </summary>
            <param name="serverItemPath">A server item path.</param>
            <param name="changesetId">A changeset id.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetAnnotateSourceControlItemUrl(System.String,System.Int32,System.String)">
            <summary>
            Gets an annotate item url.
            </summary>
            <param name="serverItemPath">A server item path.</param>
            <param name="changesetId">A changeset id.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>An annotate server item url..</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetAnnotateSourceControlItemUrl(System.String,System.String)">
            <summary>
            Gets an annotate item url.
            </summary>
            <remarks>
            versionSpec can be one of the following:
            Empty | null                  - Latest version
            Integer less than 1           - Latest version
            Integer greater or equal to 1 - Changeset number
            C{changesetNumber}, L{Label}, D{Date}
            T                             - Latest version  
            T{VersionSpec}                - Tip version of the item at version specified by VersionSpec. 
            P{VersionSpec}                - Previous version of the item at version specified by VersionSpec. 
            </remarks>
            <param name="serverItemPath">A server item path.</param>
            <param name="versionSpec">A server item version specification.</param>
            <returns>An annotate server item url..</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetAnnotateSourceControlItemUrl(System.String,System.String,System.String)">
            <summary>
            Gets an annotate item url.
            </summary>
            <remarks>
            versionSpec can be one of the following:
            Empty | null                  - Latest version
            Integer less than 1           - Latest version
            Integer greater or equal to 1 - Changeset number
            C{changesetNumber}, L{Label}, D{Date}
            T                             - Latest version  
            T{VersionSpec}                - Tip version of the item at version specified by VersionSpec. 
            P{VersionSpec}                - Previous version of the item at version specified by VersionSpec. 
            </remarks>
            <param name="serverItemPath">A server item path.</param>
            <param name="versionSpec">A server item version specification.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>An annotate server item url..</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetDifferenceSourceControlItemsUrl(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Gets a url for a diff tool.
            </summary>
            <param name="originalItemServerPath">An original item server path.</param>
            <param name="originalItemChangeset">An original item changeset id.</param>
            <param name="modifiedItemServerPath">A modified item server path.</param>
            <param name="modifiedItemChangeset">A modified item changeset id.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetDifferenceSourceControlItemsUrl(System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Gets a url for a diff tool.
            </summary>
            <param name="originalItemServerPath">An original item server path.</param>
            <param name="originalItemChangeset">An original item changeset id.</param>
            <param name="modifiedItemServerPath">A modified item server path.</param>
            <param name="modifiedItemChangeset">A modified item changeset id.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A url for a diff tool.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetDifferenceSourceControlItemsUrl(System.String,System.String,System.String,System.String)">
            <summary>
            Gets a url for a diff tool.
            </summary>
            <remarks>
            originalItemVersionSpec and modifiedItemVersionSpec parameter can be one of the following:
            Integer less than 1           - Latest version
            Integer greater or equal to 1 - Changeset number
            C{changesetNumber}, L{Label}, D{Date}
            T{VersionSpec}                - Tip version of the item at version specified by VersionSpec. 
            P{VersionSpec}                - Previous version of the item at version specified by VersionSpec. 
            </remarks>
            <param name="originalItemServerPath">An original item server path.</param>
            <param name="originalItemVersionSpec">An original version specification.</param>
            <param name="modifiedItemServerPath">A modified item server path.</param>
            <param name="modifiedItemVersionSpec">A modified item version specification.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetDifferenceSourceControlItemsUrl(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets a url for a diff tool.
            </summary>
            <remarks>
            originalItemVersionSpec and modifiedItemVersionSpec parameter can be one of the following:
            Integer less than 1           - Latest version
            Integer greater or equal to 1 - Changeset number
            C{changesetNumber}, L{Label}, D{Date}
            T{VersionSpec}                - Tip version of the item at version specified by VersionSpec. 
            P{VersionSpec}                - Previous version of the item at version specified by VersionSpec. 
            </remarks>
            <param name="originalItemServerPath">An original item server path.</param>
            <param name="originalItemVersionSpec">An original version specification.</param>
            <param name="modifiedItemServerPath">A modified item server path.</param>
            <param name="modifiedItemVersionSpec">A modified item version specification.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A url for a diff tool.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetDifferenceSourceControlShelvedItemUrl(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Gets a url for a diff tool.
            </summary>
            <param name="originalItemServerPath">An original item server path.</param>
            <param name="originalItemChangeset">An original item changeset id.</param>
            <param name="shelvedItemServerPath">Server path of the shelved item.</param>
            <param name="shelvesetName">The name of the shelveset containing the shelved item</param>
            <param name="shelvesetOwner">The owner of the shelveset containing the shelved item</param>
            <returns>A url for a diff tool.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetDifferenceSourceControlShelvedItemUrl(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets a url for a diff tool.
            </summary>
            <remarks>
            originalItemVersionSpec can be one of the following:
            Integer less than 1           - Latest version
            Integer greater or equal to 1 - Changeset number
            C{changesetNumber}, L{Label}, D{Date}
            T{VersionSpec}                - Tip version of the item at version specified by VersionSpec. 
            P{VersionSpec}                - Previous version of the item at version specified by VersionSpec. 
            </remarks>
            <param name="originalItemServerPath">An original item server path.</param>
            <param name="originalItemVersionSpec">An original version specification.</param>
            <param name="shelvedItemServerPath">Server path of the shelved item.</param>
            <param name="shelvesetName">The name of the shelveset containing the shelved item</param>
            <param name="shelvesetOwner">The owner of the shelveset containing the shelved item</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A url for a diff tool.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetWorkItemEditorUrl(System.Int32)">
            <summary>
            Gets a Work Item Editor Url.
            </summary>
            <param name="workItemId">A workitem id.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetWorkItemEditorUrl(System.Int32,System.String)">
            <summary>
            Gets a Work Item Editor Url.
            </summary>
            <param name="workItemId">A workitem id.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A Work Item Editor url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetWorkItemEditorUrl(System.Uri,System.String)">
            <summary>
            Gets a work item editor Url that creates a work item of a specified work item type.
            </summary>
            <param name="projectUri">Uri of the selected project.</param>
            <param name="workItemType">Type of the work item to be created.</param>
            <returns>Work item editor url that creates a work item of a specified work item type.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetWorkItemEditorUrl(System.Uri,System.String,System.String)">
            <summary>
            Gets a work item editor url that creates a work item of a specified work item type.
            </summary>
            <param name="projectUri">Uri of the selected project.</param>
            <param name="workItemType">Type of the work item to be created.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>Work item editor url that creates a work item of a specified work item type.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetWorkItemQueryResultsUrl(System.Uri,System.String)">
            <summary>
            Gets a work item query results viewer url for Team Web Access.
            </summary>
            <param name="projectUri">The Project Uri of the project that has the stored work item query.</param>
            <param name="queryPath">Query path of the stored work item query.</param>
            <returns>A work item query results viewer url for Team Web Access</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetWorkItemQueryResultsUrl(System.Uri,System.String,System.String)">
            <summary>
            Gets a work item query results viewer url for Team Web Access.
            </summary>
            <param name="projectUri">The Project Uri of the project that has the stored work item query.</param>
            <param name="queryPath">Query path of the stored work item query.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A work item query results viewer url for Team Web Access.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetWorkItemQueryResultsUrl(System.Uri,System.Guid)">
            <summary>
            Gets a work item query results viewer url for Team Web Access.
            </summary>
            <param name="projectUri">The Project Uri of the project that has the stored work item query. Project uri can be null. In this case query will be searched all projects in the collection.</param>
            <param name="queryId">Guid of the stored work item query.</param>
            <returns>A work item query results viewer url for Team Web Access.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetWorkItemQueryResultsUrl(System.Uri,System.Guid,System.String)">
            <summary>
            Gets a work item query results viewer url for Team Web Access.
            </summary>
            <param name="projectUri">The Project Uri of the project that has the stored work item query. Project uri can be null. In this case query will be searched all projects in the collection.</param>
            <param name="queryId">Guid of the stored work item query.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A work item query results viewer url for Team Web Access.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetWorkItemWiqlQueryResultsUrl(System.Uri,System.String,System.String)">
            <summary>
            Gets a work item query results viewer url for Team Web Access.
            </summary>
            <param name="projectUri">The project uri of the project that query will be the selected project in Team Web Access.</param>
            <param name="queryText">A valid Wiql statement.</param>
            <param name="queryDisplayName">Display text for the work item query results in Team Web Access.</param>
            <returns>A work item query results viewer url for Team Web Access.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetWorkItemWiqlQueryResultsUrl(System.Uri,System.String,System.String,System.String)">
            <summary>
            Gets a work item query results viewer url for Team Web Access.
            </summary>
            <param name="projectUri">The project uri of the project that query will be the selected project in Team Web Access.</param>
            <param name="queryText">A valid Wiql statement.</param>
            <param name="queryDisplayName">Display text for the work item query results in Team Web Access.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A work item query results viewer url for Team Web Access.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetWorkItemWiqlQueryEditorUrl(System.Uri,System.String,System.String)">
            <summary>
            Gets a query editor url for Team Web Access.
            </summary>
            <param name="projectUri">The project uri of the project that query will be the selected project in Team Web Access.</param>
            <param name="queryText">A valid Wiql statement.</param>
            <param name="queryDisplayName">Display text for the work item query results in Team Web Access.</param>
            <returns>A query editor url for Team Web Access.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetWorkItemWiqlQueryEditorUrl(System.Uri,System.String,System.String,System.String)">
            <summary>
            Gets a query editor url for Team Web Access.
            </summary>
            <param name="projectUri">The project uri of the project that query will be the selected project in Team Web Access.</param>
            <param name="queryText">A valid Wiql statement.</param>
            <param name="queryDisplayName">Display text for the work item query results in Team Web Access.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A query editor url for Team Web Access.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetWorkItemQueryEditorUrl(System.Uri,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetWorkItemQueryEditorUrl(System.Uri,System.String,System.String)" -->
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetViewBuildDetailsUrl(System.Uri)">
            <summary>
            Gets a view build details url.
            </summary>
            <param name="buildUri">Build uri</param>
            <param name="projectId">Project Guid</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetViewBuildDetailsUrl(System.Uri,System.Guid)">
            <summary>
            Gets a view build details url.
            </summary>
            <param name="buildUri">Build uri</param>
            <param name="projectId">Project Guid</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetViewBuildDetailsUrl(System.Uri,System.Guid,System.String)">
            <summary>
            Gets a view build details url.
            </summary>
            <param name="buildUri">Build uri</param>
            <param name="projectId">Project Guid</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A view build details url.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetArtifactViewerUrl(System.Uri)">
            <summary>
            Gets a viewer URL for a TFS artifact.
            </summary>
            <param name="artifactUri">A valid TFS artifact Uri.</param>
            <returns>A viewer URL for a TFS artifact.</returns>
            <remarks>Valid artifact types are Project, WorkItem, Query, VersionedItem, LatestItemVersion, Changeset, Shelveset, ShelvedItem and Build.</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.TswaHyperlinkBuilder.GetArtifactViewerUrl(System.Uri,System.String)">
            <summary>
            Gets a viewer URL for a TFS artifact.
            </summary>
            <param name="artifactUri">A valid TFS artifact Uri.</param>
            <param name="accessMappingMoniker">A moniker for the desired access mapping.</param>
            <returns>A viewer URL for a TFS artifact.</returns>
            <remarks>Valid artifact types are Project, WorkItem, Query, VersionedItem, LatestItemVersion, Changeset, Shelveset, ShelvedItem and Build.</remarks>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.UriUtility">
            <summary>
            Utility class for general Uri actions.  See LinkingUtilities for artifact uri specific methods.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.UriUtility.UnsafeUriSchemeList">
            <summary>
            List of URI schemes considered to be UNSAFE.  When a URL with this is scheme is navigated to, we will
            inform the user that it is unsafe and prevent navigation.
            </summary>
            <remarks>
            Note: the data scheme is not in this list nor is it in the safe list either, this is by design.
            See http://msdn.microsoft.com/en-us/library/ie/cc848897(v=vs.85).aspx for a reference of the data protocol.
            See http://www.gnucitizen.org/blog/bugs-in-the-browser-firefoxs-data-url-scheme-vulnerability/ for attacks on the data protocol.
            </remarks>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.UriUtility.SafeUriSchemeList">
            <summary>
            List of URI schemes considered to be SAFE. When a URL with this scheme is navigated to (e.g. in WIT client or
            web access), we will not warn the user about it as they are trusted. For any other URL not in this list, we will
            warn the user about it!
            </summary>
            <remarks>
            "x-mvwit" is here as it is used and saved to work item history rich HTML changes. It is used to reference other work
            items in the list. If we remove it from this list, it will not be a navigatable link in e.g. Web Access.
            </remarks>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.UriUtility.AbsoluteUriStringComparer">
            <summary>
            string comparer for uri, is not case sensitive and does not care about trailing '/'
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Common.UriUtility.UrlPathIgnoreSeparatorsComparer">
            <summary>
            Compares URL Paths ignoring any starting or ending path separators.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.IsUriUnsafe(System.Uri)">
            <remarks>
            A URL is considered unsafe IF:
            * It is not an absolute URI (e.g. a relative file.html)
            * It's scheme is part of the unsafe scheme list.
            * It is a file:// URI pointing to a local file, e.g. file://C:\Windows\System32\notepad.exe
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.IsUriSafe(System.Uri)">
            <summary>
            Checks if a URL is considered safe. Users will not e.g. be prompted with a warning when navigating
            to these URLs.
            </summary>
            <param name="uri">A url.</param>
            <remarks>
            A URL is approved IF:
            * It is an absolute URI.
            * It's scheme is part of the safe scheme list.
            * It is NOT a file:// URI pointing to a local file, e.g. file://C:\Windows\System32\notepad.exe
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.IsUriLocalFile(System.Uri)">
            <summary>
            Checks if a URL is pointing to a local file (not on a network share or host), based on the presence of a host/authority in the URL.
            It attempts to do no comparison based on the host name.
            </summary>
            <param name="uri">A url.</param>
            <returns><c>true</c> if the URL points to a file on the local computer.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.GetInvariantAbsoluteUri(System.Uri)">
            <summary>
            returns the absolute Uri but in a consistent way such that the presence of a trailing slash doesnt affect the returned string, 
            also converts the uri to lowerInvariant
            </summary>
            <param name="uri">Uri, cannot be null, must be Absolute</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.Combine(System.String,System.String,System.Boolean)">
            <summary>
            Joins a URI and a relativePath with a single forward slash.  Duplicate slashes at the junction point are removed.
            </summary>
            <param name="baseUri">The base Uri.  Must be an absolute Uri. The last segment of the Uri path (if any) is considered a virtual directory and not removed, even if it does not have a trailing forward slash.</param>
            <param name="relavitePath">The relative path to append to the Uri.</param>
            <param name="treatAbsolutePathAsRelative">If true, any leading forward slashes on the relative path argument are discarded.</param>
            <returns>The base Uri with the relativePath appended to it.</returns>
            <remarks> 
            This is intended to be an alternative the Uri constructor, which can remove several path segments from your arguments.  For example:
            
            new Uri(new Uri("http://localhost/abc/efg/"), "/Hello/World") returns http://localhost/Hello/World ("/abc/efg/" removed due to absolute path argument)
            new Uri(new Uri("http://localhost/dir1/dir2"), "hi.txt") returns http://localhost/dir1/hi.txt ("dir2" removed due to lack of trailing slash)
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.Combine(System.Uri,System.String,System.Boolean)">
            <summary>
            Joins a URI and a relativePath with a single forward slash.  Duplicate slashes at the junction point are removed.
            </summary>
            <param name="baseUri">The base Uri.  Must be an absolute Uri. The last segment of the Uri path (if any) is considered a virtual directory and not removed, even if it does not have a trailing forward slash.</param>
            <param name="relavitePath">The relative path to append to the Uri.</param>
            <param name="treatAbsolutePathAsRelative">If true, any leading forward slashes on the relative path argument are discarded.</param>
            <returns>The base Uri with the relativePath appended to it.</returns>
            <remarks> 
            This is intended to be an alternative the Uri constructor, which can remove several path segments from your arguments.  For example:
            
            new Uri(new Uri("http://localhost/abc/efg/"), "/Hello/World") returns http://localhost/Hello/World ("/abc/efg/" removed due to absolute path argument)
            new Uri(new Uri("http://localhost/dir1/dir2"), "hi.txt") returns http://localhost/dir1/hi.txt ("dir2" removed due to lack of trailing slash)
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.CombinePath(System.String,System.String)">
            <summary>
            Combine two paths using "/" instead of "\" like Path.Combine does
            </summary>
            <param name="part1">the first part of the path</param>
            <param name="part2">the second part of the path</param>
            <returns>combined path</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.IsUriHttp(System.Uri)">
            <summary>
            Returns 'true' if the specified uri is http or https, 'false' otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.CheckUriIsHttp(System.Uri)">
            <summary>
            Check that the Uri has http or https as its scheme.  We don't want anyone pointing at file://virus.exe.
            </summary>
            <param name="uri">Uri to be checked.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.CheckUriIsHttp(System.Uri,System.Boolean)">
            <summary>
            Check that the Uri has http or https as its scheme.  We don't want anyone pointing at file://virus.exe.
            </summary>
            <param name="uri">Uri to be checked.</param>
            <param name="allowPathAndQuery">Allow sub path and query string if true.  If false, the URL must be authority only.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.CheckUriIsAbsoluteAndHttp(System.Uri)">
            <summary>
            Check that a given Uri is an absolute Uri.  Also, ensure its is http or https.
            </summary>
            <param name="uri">Uri to be checked.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.CheckUriIsAbsoluteAndHttp(System.Uri,System.Boolean)">
            <summary>
            Check that a given Uri is an absolute Uri.  Also, ensure its is http or https.
            </summary>
            <param name="uri">Uri to be checked.</param>
            <param name="allowPathAndQuery">Allow sub path and query string if true.  If false, the URL must be authority only.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.CheckRelativePath(System.String)">
            <summary>
            Check the relative path to ensure it is valid.
            </summary>
            <param name="relativePath"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.GetDavUncFromHttpPath(System.String)">
            <summary>
            Given an HTTP URI, returns the UNC URI as known to the Windows Client WebDav Redirector.
            The UNC path is in the following form: 
            \\server[@SSL][@port][\path]
            This function is equivalent to the native API by the same name on Vista/2008+, but provided here for compatibility with XP/2003.
            </summary>
            <param name="httppath">Well-formed http or https path.  Alternate ports are supported.</param>
            <returns>UNC path</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.TryGetHttpUriFromDavUncPath(System.String)">
            <summary>
            Given a input path that might correspond to a UNC path known to the Windows Client WebDav Redirector,
            returns the converted UNC path to an HTTP (or HTTPS) url.
            </summary>
            <param name="uncPath"></param>
            <returns>
            The UNC path is in the following form: 
            \\server[@SSL][@port][\path]
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.GetAbsoluteUriFromString(System.String)">
            <summary>
            Verifies that the specified uri is valid or can be made into a valid http address by prepending 'http://' to it.
            If the uri is not valid an exception is thrown.
            </summary>
            <param name="uriString"></param>
            <returns>The validated uri, including 'http://' if it was prepended to make it valid.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.GetUriFromString(System.String)">
            <summary>
            Creates a URI from a string.  Adds http to the front if its not there.
            Requires that the Uri scheme be http or https.
            </summary>
            <param name="val">String to convert to an absolute uri.</param>
            <returns>The validated uri, including 'http://' if it was prepended to make it valid, or null if the uri is not valid.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.TryCreateAbsoluteUri(System.String,System.Boolean,System.Uri@)">
            <summary>
            Creates an absolute URI from a string.  Adds http to the front if its not there.
            If 'requireHttpScheme' is 'true' this method will return false if the url
            doesn't start with http or https.
            </summary>
            <param name="val">String to convert to an absolute uri.</param>
            <param name="requireHttpScheme">'true' to require that the scheme is http or https, 'false' to allow any scheme.</param>
            <returns>Either the uri or 'null' if it is not valid.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.EnsureStartsWithPathSeparator(System.String)">
            <summary>
            Ensures that a relative path starts with a forward slash.
            </summary>
            <param name="relativePath">The relative path.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.EnsureEndsWithPathSeparator(System.String)">
            <summary>
            Ensures that a relative path ends with a forward slash.
            </summary>
            <param name="relativePath">The relative path.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.TrimStartingPathSeparator(System.String)">
            <summary>
            Trims any starting slashes from the input path.
            </summary>
            <param name="relativePath">The relative path.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.TrimEndingPathSeparator(System.String)">
            <summary>
            Trims any ending slashes from the input path.
            </summary>
            <param name="relativePath">The relative path.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.TrimPathSeparators(System.String)">
            <summary>
            Trims any starting or ending slashes from the input path.
            </summary>
            <param name="relativePath">The relative path.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.IsSameMachine(System.String,System.String)">
            <summary>
            Determine if two hostnames correspond to the same machine.
            </summary>
            <param name="hostname1">First hostname</param>
            <param name="hostname2">Second hostname</param>
            <returns>True, if same machine.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.UriUtility.NormalizePathSeparators(System.Uri)">
            <summary>
            Correct URI content to remove excess(duplicate) separators in path section.
            </summary>        
        </member>
        <member name="P:Microsoft.TeamFoundation.Common.XmlHelper.SecureReaderSettings">
            <summary>
            Returns a single shared instance of secured XML reader settings.
            </summary>
            <remarks>
            The main configuration that is set is to "Harden or Disable XML Entity Resolution",
            which disallows resolving entities during XML parsing.
            
            DO NOT USE this method if you need to resolved XML DTD entities.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.XmlHelper.ArrayOfObjectToXml``1(System.Xml.XmlWriter,``0[],System.String,System.String,System.Boolean,System.Boolean,System.Action{System.Xml.XmlWriter,System.String,``0})">
            <summary>
            Writes an array of objects to xml using the provided callback function to serialize individual objects 
            within the array.
            </summary>
            <typeparam name="T">The type of objects contained in the array</typeparam>
            <param name="writer">The xml writer for serialization</param>
            <param name="array">The array to be serialized</param>
            <param name="arrayName">The name of the array root element</param>
            <param name="arrayElementName">The name of the array elements</param>
            <param name="inline">True if the array elements should be written inline, or false to create the root node</param>
            <param name="allowEmptyArrays">True if an empty array should be serialized, false to omit empty arrays</param>
            <param name="objectToXmlElement">A callback function for serializing an individual array element</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.XmlHelper.EnumerableOfObjectToXml``1(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.Boolean,System.Boolean,System.Action{System.Xml.XmlWriter,System.String,``0})">
            <summary>
            Writes an <c>System.Collections.Generic.IEnumerable&lt;T&gt;</c> of objects to xml using the provided 
            callback function to serialize individual objects.
            </summary>
            <typeparam name="T">The type of objects contained in the array</typeparam>
            <param name="writer">The xml writer for serialization</param>
            <param name="array">The array to be serialized</param>
            <param name="arrayName">The name of the array root element</param>
            <param name="arrayElementName">The name of the array elements</param>
            <param name="inline">True if the array elements should be written inline, or false to create the root node</param>
            <param name="allowEmptyArrays">True if an empty array should be serialized, false to omit empty arrays</param>
            <param name="objectToXmlElement">A callback function for serializing an individual array element</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.XmlHelper.GetCachedString(System.String)">
            <summary>
            Strings are often duplicated in the XML returned by the server. To
            reduce the number of identical String instances, we keep a small
            cache of the last N strings to be deserialized off the wire.
            
            Send your deserialized strings through this method. If they match a
            recently deserialized string, the cached value will be returned and
            your deserialized string will be left in Gen0 for easy collection.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.XmlElementHelper">
            <summary>
            XML element helper class that automatically makes the closing WriteEndElement call
            during dispose.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.XmlElementHelper.#ctor(System.String,System.Xml.XmlWriter)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.XmlElementHelper.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.CatalogConstants.IconRepositoryServiceType">
            <summary>
            The service type for the service definition that holds where
            the catalog icon repository lives.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.CatalogRoots">
            <summary>
            Static class that holds all of the well-known roots of the catalog.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.CatalogRoots.DetermineTree(System.String)">
            <summary>
            Determines which tree the current node is in.
            </summary>
            <param name="path">The path of the current node.</param>
            <returns>The Catalog Tree that the node is in.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.CatalogRoots.DeterminePath(Microsoft.TeamFoundation.Framework.Common.CatalogTree)">
            <summary>
            Determines the path for the specified tree.
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.CatalogTree">
            <summary>
            Static class that holds all of the well-known roots of the catalog.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.MachineCatalogKeys">
            <summary>
            Property, ServiceReference and Dependency keys for the Catalog resource
            type Machine
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.TeamFoundationInstanceCatalogKeys">
            <summary>
            Property, ServiceReference and Dependency keys for the Catalog resource
            type TeamFoundationServerInstance
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.ProjectCollectionCatalogKeys">
            <summary>
            Property, ServiceReference and Dependency keys for the Catalog resource
            type ProjectCollection
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.SQLDatabaseInstanceCatalogKeys">
            <summary>
            Property, ServiceReference and Dependency keys for the Catalog resource
            type SQLDatabaseInstance
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.SQLAnalysisInstanceCatalogKeys">
            <summary>
            Property, ServiceReference and Dependency keys for the Catalog resource
            type SQLAnalysisInstance
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.SQLReportingInstanceCatalogKeys">
            <summary>
            Property, ServiceReference and Dependency keys for the Catalog resource
            type SQLReportingInstance
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.WebApplicationCatalogKeys">
            <summary>
            Property, ServiceReference and Dependency keys for the Catalog resource
            type WebApplication
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.CollectionDBCatalogKeys">
            <summary>
            Property, ServiceReference and Dependency keys for the Catalog resource
            type ProjectCollectionDatabase
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.ApplicationDBCatalogKeys">
            <summary>
            Property, ServiceReference and Dependency keys for the Catalog resource
            type ApplicationDatabase
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.TeamSystemWebAccessCatalogKeys">
            <summary>
            Property, ServiceReference and Dependency keys for the Catalog resource
            type TeamSystemWebAccess
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.TestControllerCatalogKeys">
            <summary>
            Required property keys for the Catalog resource type TestController.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.TestEnvironmentCatalogKeys">
            <summary>
            Required property keys for the Catalog resource type TestEnvironment.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.ProjectServerResourceCatalogKeys">
            <summary>
            Service Definition Keys for Catalog resource ProjectServerResource
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.CatalogChangeType">
            <summary>
            Enumerates the type of changes that can be made on an object
            that lives in the catalog.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.CatalogChangeType.None">
            <summary>
            There is no change on this object
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.CatalogChangeType.CreateOrUpdate">
            <summary>
            Assume this object is new and create it.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.CatalogChangeType.RecursiveDelete">
            <summary>
            Delete this object and if any nodes have to be deleted, do 
            so in a recursive fashion.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.CatalogChangeType.NonRecursiveDelete">
            <summary>
            Delete this object and if any nodes have to be deleted, do 
            so in a recursive fashion.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions.None">
            <summary>
            Don't modify this query in any way.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions.ExpandDependencies">
            <summary>
            Return the dependencies for all of the nodes returned.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions.IncludeParents">
            <summary>
            Populate the parent properties on all of the nodes returned.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.AsyncOperation">
            <summary>
            Provides a common base class for asynchronous operations.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.AsyncOperation.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new <c>Microsoft.TeamFoundation.Framework.Common.AsyncOperation</c> instance with the
            specified callback and state.
            </summary>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.AsyncOperation.AsyncState">
            <summary>
            Gets the user provided state for this operation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.AsyncOperation.AsyncWaitHandle">
            <summary>
            Gets the wait handle for this operation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.AsyncOperation.System#IAsyncResult#AsyncWaitHandle">
            <summary>
            Gets the wait handle for this operation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.AsyncOperation.Callback">
            <summary>
            Gets the callback associated with this operation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.AsyncOperation.CompletedSynchronously">
            <summary>
            Gets a value indicating whether or not this operation completed on the calling thread.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.AsyncOperation.Exception">
            <summary>
            Gets the exception associated with this operation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.AsyncOperation.IsCompleted">
            <summary>
            Gets a value indicating whether or not this operation has completed.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.AsyncOperation.Complete(System.Boolean,System.Exception)">
            <summary>
            Completes an asynchronous operation.
            </summary>
            <param name="completedSynchronously">Indicates whether or not the operation completed synchronously</param>
            <param name="exception">The exception thrown from the operation, if applicable</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.AsyncOperation.End``1(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation.
            </summary>
            <typeparam name="T">The type of asynchronous operation</typeparam>
            <param name="result">The asynchronous operation</param>
            <returns>A completed asynchronous operation of the specified type</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.AsyncOperation.TryEnd``1(System.IAsyncResult,``0@,System.Exception@)">
            <summary>
            Ends an asynchronous operation.
            </summary>
            <typeparam name="T">The type of asynchronous operation</typeparam>
            <param name="result">The asynchronous operation</param>
            <param name="operation">A completed asynchronous operation of the specified type</param>
            <param name="error">The error which occurred, if any</param>
            <returns>True if the operation completed successfully, false otherwise</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.AvailableFeatures">
            <summary>
            RTM 12 Legacy Feature flags- Do not add to this file- see below. After our next release, this file can be removed.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.CollectionDictionary`2">
            <summary>
            A dictionary where keys map to collections of TElement elements. Collections are created on demand as necessary when elements are added. The keys are optionally removed when the last element is removed from a collection.
            </summary>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TElement">The element type</typeparam>
            <remarks>
            The collection type (e.g. List, HashSet) is specified by the delegate supplied to the constructor.
            
            This class is useful if you're tired of writing these 5 lines over and over:
            
             ICollection list;
             if (!myDictionary.TryGetValue(key, out list))
             {
                 list = new List();
                 myDictionary.Add(key, list);
             }
             list.Add(element);
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.CollectionDictionary`2.#ctor(Microsoft.TeamFoundation.Framework.Common.CollectionDictionary{`0,`1}.CreateCollectionDelegate,System.Collections.Generic.IEqualityComparer{`0},System.Boolean)">
            <summary>
            Creates a dictionary where keys map to collections of TElement elements.
            </summary>
            <param name="createCollectionHandler">A delegate to create a new collection to be associated with a key</param>
            <param name="comparer">A comparer to be use for the key values in the dictionary.</param>
            <param name="removeKeyOnEmpty">true to remove keys when the last element associated with the key is removed.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.CollectionDictionary`2.RemoveElement(`0,`1)">
            <summary>
            Remove an element from the key's collection, if present.
            </summary>
            <param name="key"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.CollectionDictionary`2.Remove(`0)">
            <summary>
            Remove a key and its collection, if present.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.CollectionDictionary`2.TryGetValue(`0,System.Collections.Generic.ICollection{`1}@)">
            <summary>
            Get a key's collection.
            </summary>
            <param name="key"></param>
            <param name="collection"></param>
            <returns></returns>
            <remarks>You can lock on collection instance returned to read the collection. This can block Add(TKey, TElement) and Remove(TKey, TElement), but not Remove(TKey)</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.CollectionDictionary`2.TryGetValue``1(`0,``0@)">
            <summary>
            Get a key's collection.
            </summary>
            <typeparam name="TCollection">The type to cast the collection to.</typeparam>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.ConcurrentCollectionDictionary`2">
            <summary>
            A dictionary where keys map to collections of TElement elements. Collections are created on demand as necessary when elements are added. The keys are optionally removed when the last element is removed from a collection.
            </summary>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TElement">The element type</typeparam>
            <remarks>
            The collection type (e.g. List, HashSet) is specified by the delegate supplied to the constructor.
            
            This class is useful if you're tired of writing these 5 lines over and over:
            
             ICollection list;
             if (!myDictionary.TryGetValue(key, out list))
             {
                 list = new List();
                 myDictionary.Add(key, list);
             }
             list.Add(element);
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.ConcurrentCollectionDictionary`2.#ctor(Microsoft.TeamFoundation.Framework.Common.ConcurrentCollectionDictionary{`0,`1}.CreateCollectionDelegate,Microsoft.TeamFoundation.Framework.Common.ConcurrentCollectionDictionary{`0,`1}.CopyCollectionDelegate,System.Collections.Generic.IEqualityComparer{`0},System.Boolean)">
            <summary>
            Creates a dictionary where keys map to collections of TElement elements.
            </summary>
            <param name="createCollectionHandler">A delegate to create a new collection to be associated with a key</param>
            <param name="copyCollectionHandler">An optional delegate to copy a collection before returning it from TryGetValue.</param>
            <param name="comparer">A comparer to be use for the key values in the dictionary.</param>
            <param name="removeKeyOnEmpty">true to remove keys when the last element associated with the key is removed.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.ConcurrentCollectionDictionary`2.RemoveElement(`0,`1)">
            <summary>
            Remove an element from the key's collection, if present.
            </summary>
            <param name="key"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.ConcurrentCollectionDictionary`2.Remove(`0)">
            <summary>
            Remove a key and its collection, if present.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.ConcurrentCollectionDictionary`2.TryGetValue(`0,System.Collections.Generic.ICollection{`1}@)">
            <summary>
            Get a key's collection.
            </summary>
            <param name="key"></param>
            <param name="collection"></param>
            <returns></returns>
            <remarks>You can lock on collection instance returned to read the collection. This can block Add(TKey, TElement) and Remove(TKey, TElement), but not Remove(TKey)</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.ConcurrentCollectionDictionary`2.TryGetValue``1(`0,``0@)">
            <summary>
            Get a key's collection.
            </summary>
            <typeparam name="TCollection">The type to cast the collection to.</typeparam>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.CompletedOperation">
            <summary>
            Provides the ability to return a completed operation with on results.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.CompletedOperation.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new <c>Microsoft.TeamFoundation.Framework.Common.CompletedOperation</c> instance with
            the specified callback and state.
            </summary>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.CompletedOperation.End(System.IAsyncResult)">
            <summary>
            Ends the asynchronous operation represented by the provided result.
            </summary>
            <param name="result">The asynchronous operation</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.CompletedOperation`1">
            <summary>
            Provides the ability to return an completed operation with a single result.
            </summary>
            <typeparam name="TResult">The type of result</typeparam>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.CompletedOperation`1.#ctor(`0,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new <c>Microsoft.TeamFoundation.Framework.Common.CompletedOperation</c> instance with
            the specified result.
            </summary>
            <param name="result">The result of the operation</param>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.CompletedOperation`1.End(System.IAsyncResult)">
            <summary>
            Ends the asynchronous operation represented by the provided result.
            </summary>
            <param name="result">The asynchronous operation</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.OperationNotSupportedException">
            <summary>
            Thrown when a user tries to call a service that doesn't exist on the server they
            are talking to.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.ConfigFileException">
            <summary>
            Thrown when a config file fails to load
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.ExpirationCache`2.#ctor(System.Int32,System.Func{`0,System.Object,`1})">
            <summary>
            Creates a new ExpirationCache.
            </summary>
            <param name="expirationTimeInMilliseconds">The amount of time a cache entry is allowed to continue to exist before it is aged out</param>        
            <param name="valueFactory">A factory method to transform a key into a value on a cache miss</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.ExpirationCache`2.#ctor(System.Int32,System.Func{`0,System.Object,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new ExpirationCache.
            </summary>
            <param name="expirationTimeInMilliseconds">The amount of time a cache entry is allowed to continue to exist before it is aged out</param>        
            <param name="valueFactory">A factory method to transform a key into a value on a cache miss</param>
            <param name="comparer">Comparer for TKey object equality</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.ExpirationCache`2.GetOrAdd(`0,System.Object)">
            <summary>
            Asks the ExpirationCache to return the TValue for this TKey.
            If the TValue does not exist in the cache, it will be created using the value factory.
            </summary>
            <param name="key">Key to look up</param>
            <returns>Corresponding value for the given key</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.ExpirationCache`2.TryRemove(`0,`1@)">
            <summary>
            Tries to remove an entry from the ExpirationCache.
            </summary>
            <param name="key">Key to be removed</param>
            <param name="value">[out] The value that was removed. If no item was removed, the value is undefined.</param>
            <returns>True if the item was returned and the value parameter is valid; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.ExpirationCache`2.RefreshExpirationForKey(`0)">
            <summary>
            Given a cache key, looks up the value for that key. If the value exists,
            its expiration time is refreshed.
            </summary>
            <param name="key">Key whose expiration time should be refreshed</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.ExpirationCache`2.MaybeSweep(System.UInt32)">
            <summary>
            Checks to see if a sweep is needed, given the current tick count.
            If so, a sweep will be performed.
            </summary>
            <param name="tickCount">The current tick count for this operation</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.ExpirationCache`2.Sweep(System.UInt32)">
            <summary>
            Sweeps the ExpirationCache for stale entries.
            </summary>
            <param name="tickCount">The current tick count for this operation</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.ArtifactKinds">
            <summary>
            Defines the Guid of the property family or kind from the framework
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.ProcessTemplateVersionPropertyNames.CreationVersion">
            <summary>
            Property name used with artifact ArtifactKinds.ProcessTemplate to  
            mark the version of the process template the project is created with
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.ProcessTemplateVersionPropertyNames.CurrentVersion">
            <summary>
            Property name used with artifact ArtifactKinds.ProcessTemplate to  
            mark the  version of the process template the project is currently using
            either created or promoted to.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.ProcessTemplateVersionPropertyNames.IsOptOutOfPromote">
            <summary>
            Property name used with artifact ArtifactKinds.ProcessTemplate to flag opting out of promote.
            If set to true, the collection is opted out of promote.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.ProcessTemplateIdPropertyNames.CurrentProcessTemplateId">
            <summary>
            Property name used with artifact ArtifactKinds.ProcessTemplate to  
            mark the id the process template the project is currently using
            either created or promoted to.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.ProcessTemplateIdPropertyNames.OriginalProcessTemplateId">
            <summary>
            Property name used with artifact ArtifactKinds.ProcessTemplate to  
            mark the version of the process template the project is currently using.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.ProcessTemplateIdPropertyNames.ProcessTemplateType">
            <summary>
            Type of the process template
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.ItemDequeuedCallback">
            <summary>
            Callback method which is invoked when an item is dequeued but prior to returning control to the reader.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.InputQueue`1">
            <summary>
            Provides a mechanism for enqueuing and dequeuing items using the asynchronous pattern. Any number of blocking
            readers and waiters may be queued at a time.
            </summary>
            <typeparam name="T">The type of item</typeparam>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.#ctor">
            <summary>
            Initializes a new <c>Microsoft.TeamFoundation.Framework.Common.InputQueue</c> instance.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.Count">
            <summary>
            Gets the count of items in the queue.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.Close">
            <summary>
            Releases all outstanding readers and waiters and closes the queue.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.System#IDisposable#Dispose">
            <summary>
            Releases all outstanding readers and waiters and closes the queue.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.Enqueue(`0,System.Boolean)">
            <summary>
            Enqueues an item.
            </summary>
            <param name="item">The item to queue</param>
            <param name="canDispatchOnThisThread">True if a waiter can be dispatched on this thread, otherwise false</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.Enqueue(`0,Microsoft.TeamFoundation.Framework.Common.ItemDequeuedCallback,System.Boolean)">
            <summary>
            Enqueues an item.
            </summary>
            <param name="item">The item to queue</param>
            <param name="dequeuedCallback">An optional callback which is invoked when the item is dequeued</param>
            <param name="canDispatchOnThisThread">True if a waiter can be dispatched on this thread, otherwise false</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.Enqueue(System.Exception,System.Boolean)">
            <summary>
            Enqueues an exception.
            </summary>
            <param name="exception">The exception to queue</param>
            <param name="canDispatchOnThisThread">True if a waiter can be dispatched on this thread, otherwise false</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.Enqueue(System.Exception,Microsoft.TeamFoundation.Framework.Common.ItemDequeuedCallback,System.Boolean)">
            <summary>
            Enqueues an exception.
            </summary>
            <param name="exception">The exception to queue</param>
            <param name="dequeuedCallback">An optional callback which is invoked when the item is dequeued</param>
            <param name="canDispatchOnThisThread">True if a waiter can be dispatched on this thread, otherwise false</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.EnqueueAndDispatch(Microsoft.TeamFoundation.Framework.Common.InputQueue{`0}.Item,System.Boolean)">
            <summary>
            Enqueues an item on the message queue.
            </summary>
            <param name="item">The item to queue</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.Dequeue(System.TimeSpan,`0@)">
            <summary>
            Dequeue an item from the input queue.
            </summary>
            <param name="timeout">
            The <c>System.TimeSpan</c> that specifies the interval of time to wait for an item to become available.
            </param>
            <item>The dequeued item</item>
            <returns>
            True if an item was dequeued, false otherwise. A shutdown with no pending items remaining returns true
            and outputs <c>default(T)</c>.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.BeginDequeue(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to dequeue an item from the input queue.
            </summary>
            <param name="timeout">
            The <c>System.TimeSpan</c> that specifies the interval of time to wait for an item to become available.
            </param>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
            <returns>An asynchronous operation to dequeue an item</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.EndDequeue(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to dequeue an item.
            </summary>
            <param name="result">The asynchronous operation</param>
            <returns>The dequeued item</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.EndDequeue(System.IAsyncResult,`0@)">
            <summary>
            Ends an asynchronous operation to dequeue an item.
            </summary>
            <param name="result">The asynchronous operation</param>
            <param name="item">The dequeued item</param>
            <returns>True if an item was dequeued, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.WaitForItem(System.TimeSpan)">
            <summary>
            Waits for a new item to be available.
            </summary>
            <param name="timeout">
            The <c>System.TimeSpan</c> that specifies the interval of time to wait for an item to become available.
            </param>
            <returns>True if an item is available in the specified timeout interval, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.BeginWaitForItem(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to wait for a new item to be available.
            </summary>
            <param name="timeout">
            The <c>System.TimeSpan</c> that specifies the interval of time to wait for an item to become available.
            </param>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
            <returns>An asynchronous operation to wait for an item to become available</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.EndWaitForItem(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to wait for an item to become available.
            </summary>
            <param name="result">The asynchronous operation</param>
            <returns>True if an item is available, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.Shutdown">
            <summary>
            Shuts down the input queue. Any outstanding readers are released if there are no pending messages
            left in the queue.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.RemoveWaiter(Microsoft.TeamFoundation.Framework.Common.InputQueue{`0}.IQueueWaiter)">
            <summary>
            Removes a waiter from the list of pending waiters.
            </summary>
            <param name="waiter">The waiter to remove</param>
            <returns>True if the waiter was removed, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.RemoveReader(Microsoft.TeamFoundation.Framework.Common.InputQueue{`0}.IQueueReader)">
            <summary>
            Remves the reader from the list of pending readers.
            </summary>
            <param name="reader">The reader to remove</param>
            <returns>True if the reader was removed, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.SnapshotWaiters">
            <summary>
            Copies the current waiters to an array and clears the member list.
            </summary>
            <returns>The snapshot of waiters when this method is called</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.CompleteWaiters(System.Boolean,Microsoft.TeamFoundation.Framework.Common.InputQueue{`0}.IQueueWaiter[])">
            <summary>
            Handles completing the waiters on the calling thread.
            </summary>
            <param name="itemAvailable">Indicates whether an item is available</param>
            <param name="waiters">The waiters to notify</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.CompleteWaitersLater(System.Boolean,Microsoft.TeamFoundation.Framework.Common.InputQueue{`0}.IQueueWaiter[])">
            <summary>
            Handles completing the waiters on a separate thread if possible.
            </summary>
            <param name="itemAvailable">Indicates whether an item is available</param>
            <param name="waiters">The waiters to notify</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.State">
            <summary>
            Maintains the state of the queue.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.State.Open">
            <summary>
            The queue accepts enqueue and dequeue operations.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.State.Shutdown">
            <summary>
            The queue accepts dequeue operations only.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.State.Closed">
            <summary>
            The queue accepts no operations.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.IQueueReader">
            <summary>
            Abstraction for handling synchronous and asynchronous readers the same.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.IQueueWaiter">
            <summary>
            Abstraction for handling synchronous and asynchronous waiters the same.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.QueueReader">
            <summary>
            Handles synchronous reads to dequeue an item.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.QueueWaiter">
            <summary>
            Handles synchronous waits for an item to be become available.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.AsyncQueueReader">
            <summary>
            Handles asynchonous reads to dequeue an item.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.AsyncQueueWaiter">
            <summary>
            Handles asynchronous waits for an item to become available.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.FastItemQueue">
            <summary>
            Provides an array-based implementation of the queue using a struct array.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.FastItemQueue.Count">
            <summary>
            Gets the count of items currently available.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.FastItemQueue.HasAnyItem">
            <summary>
            Gets a value indicating whether any items are in the queue.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.FastItemQueue.HasAvailableItem">
            <summary>
            Gets a value indicating whether any available items are in the queue.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.FastItemQueue.EnqueueItem(Microsoft.TeamFoundation.Framework.Common.InputQueue{`0}.Item)">
            <summary>
            Enqueues an item if possible.
            </summary>
            <param name="item">The item to enqueue</param>
            <returns>True if the item is enqueued, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.FastItemQueue.DequeueItem">
            <summary>
            Dequeues an item if possible.
            </summary>
            <returns>The dequeued item</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.Item.Dispose">
            <summary>
            Releases all resources associated with the item.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.InputQueue`1.Item.GetValue">
            <summary>
            Gets the value of an item.
            </summary>
            <returns>The value of the item. If the item contains an exception it is thrown.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.TeamFoundationSupportedFeatures">
            <summary>
            Enum which has the features supported by either the client or server
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationSupportedFeatures.None">
            <summary>
            None of the features in this enum are supported.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationSupportedFeatures.IdentityProperties">
            <summary>
            The client supports strongly-typed identity properties.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationSupportedFeatures.All">
            <summary>
            This is a combination of all the features which are supported.
            Subject to change across releases.  You can send this value 
            (from client object model to server, or from server to client object model)
            and mask with it, but you should not test for equality against it.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.IdentitySearchFactor.AccountName">
            <summary>
            NT account name (domain\alias)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.IdentitySearchFactor.DisplayName">
            <summary>
            Display name
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.IdentitySearchFactor.AdministratorsGroup">
            <summary>
            Find project admin group
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.IdentitySearchFactor.Identifier">
            <summary>
            Find the identity using the identifier
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.IdentitySearchFactor.MailAddress">
            <summary>
            Email address
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.IdentitySearchFactor.General">
             <summary>
             A general search for an identity. 
             </summary>
             <remarks>
             This is the default search factor for shorter overloads of ReadIdentity, and typically the correct choice for user input.
             
             Use the general search factor to find one or more identities by one of the following properties:
             * Display name
             * account name
             * UniqueName
            
             UniqueName may be easier to type than display name. It can also be used to indicate a single identity when two or more identities share the same display name (e.g. "John Smith")
             </remarks>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.IdentitySearchFactor.Alias">
            <summary>
            Alternate login username
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.MembershipQuery.None">
            <summary>
            Query will not return any membership data
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.MembershipQuery.Direct">
            <summary>
            Query will return only direct membership data
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.MembershipQuery.Expanded">
            <summary>
            Query will return expanded membership data
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.MembershipQuery.ExpandedUp">
            <summary>
            Query will return expanded up membership data (parents only)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.MembershipQuery.ExpandedDown">
            <summary>
            Query will return expanded down membership data (children only)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.GroupProperty.Name">
            <summary>
            The name of an application group
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.GroupProperty.Description">
            <summary>
            The description of an application group
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions.IncludeReadFromSource">
            <summary>
            read from IMS store only, or also from external sources such as AD.
            </summary>
            <remarks>
            Reading from the identity provider will add an overhead. An example of when
            this option may be required, is to assign permission(s) to some identity
            that may or may not be in the database already.
            </remarks>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions.TrueSid">
            <summary>
            whether to map back well known TFS Sids to their well known form, or expose
            their true value.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions.ExtendedProperties">
            <summary>
            read extended identity properties.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions.DoNotQualifyAccountNames">
            <summary>
            By default, the IdentityService will not permit searches solely by AccountName
            at an Application or lower context. Setting this flag will execute the search as-is
            without attempting to domain-qualify the search
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.IdentityPropertyScope">
            <summary>
            The scope which a property will be scoped to.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.Capture`1">
            <summary>
            Wraps value type to let it be passed "by reference"
            This is used to create a "shared state" between a (s)-service and a cache
            E.g. service may update this value in response to a SQL notification and it immediately becomes available to the cache
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.Capture`1.#ctor">
            <summary>
            Initializes new instance of Capture class with default value and no value check
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.Capture`1.#ctor(`0,System.Predicate{`0})">
            <summary>
            Initializes new instance of Capture class with the provided value and optional value check
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.Capture">
            <summary>
            Factory class to facilitate construction of Capture instances
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.CaptureLength">
            <summary>
            Specialization for capturing MemoryCache length
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.CaptureSize">
            <summary>
            Specialization for capturing MemoryCache size
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.IMemoryCacheCapacityPolicy`2">
            <summary>
            Interface for the MemoryCacheList capacity policy
            Allows to control eviction of elements from cache when its size reaches limits
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.IMemoryCacheCapacityPolicy`2.NeedRoom(`0,`1)">
            <summary>
            Checks whether MemoryCacheList has enough capacity to replace the value of the provided element
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.IMemoryCacheCapacityPolicy`2.NeedRoom(`0,`1,`1)">
            <summary>
            Checks whether MemoryCacheList has enough capacity to insert the provided element
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.IMemoryCacheValidityPolicy`2">
            <summary>
            Interface for the MemoryCacheList validity policy
            Allows to "soft-delete" items in cache by marking them as "not valid" (e.g. expired cache items are invalid ones)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.IMemoryCacheValidityPolicy`2.IsValid(`0,`1)">
            <summary>
            Checks whether provide cache item is valid (and example of invalid item is expired item)
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.ISizeProvider`2">
            <summary>
            Interface that cache policy implementation uses to estimate cache items size in memory
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.IExpiryProvider`2">
            <summary>
            Interface that cache policy implementation uses to control expiry of cache elements
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.ITimeProvider">
            <summary>
            Interface to control time
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.IMemoryCacheList`2">
            <summary>
            Interface for the MemoryCacheList operations
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.IMemoryCacheSubscriber`2">
            <summary>
            Interface to listen on MemoryCacheList notifications
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.DummyMemoryCacheList`2">
            <summary>
            Dummy MemoryCacheList implementation that does nothing
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.UnlimitedCapacityMemoryCachePolicy`2">
            <summary>
            MemoryCacheList policy for the cache that may grow indefinitely
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.AllValidMemoryCachePolicy`2">
            <summary>
            MemoryCacheList policy limiting cache size only by the SUM(size) of elements
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.NoSizeProvider`2">
            <summary>
            ISizeProvider implementation that returns zero size for all objects
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.NoExpiryProvider`2">
            <summary>
            IExpiryProvider implementation for values that never expire
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.DefaultTimeProvider">
            <summary>
            ITimeProvider implementation returning current UTC time
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.MemoryCacheDummySubscriber`2">
            <summary>
            Cache notification subscriber that does nothing
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.MemoryCacheList`2">
            <summary>
            MemoryCacheList implementation that notifies about updates via events
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.MemoryCacheList`2.#ctor(Microsoft.TeamFoundation.Framework.Common.IMemoryCacheCapacityPolicy{`0,`1},Microsoft.TeamFoundation.Framework.Common.IMemoryCacheValidityPolicy{`0,`1},Microsoft.TeamFoundation.Framework.Common.IMemoryCacheSubscriber{`0,`1},System.Boolean)">
            <summary>
            Creates a new MemoryCacheList.
            </summary>
            <param name="capacityPolicy">Policy controlling maximum size of the MemoryCacheList object.</param>
            <param name="validityPolicy">Policy controlling validity of the MemoryCacheList items.</param>
            <param name="subscriber">Cache notification subscriber.</param>
            <param name="synchronized">Flag to pick synchronized or unsafe implementation.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.MemoryCacheList`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},Microsoft.TeamFoundation.Framework.Common.IMemoryCacheCapacityPolicy{`0,`1},Microsoft.TeamFoundation.Framework.Common.IMemoryCacheValidityPolicy{`0,`1},Microsoft.TeamFoundation.Framework.Common.IMemoryCacheSubscriber{`0,`1},System.Boolean)">
            <summary>
            Creates a new MemoryCacheList.
            </summary>
            <param name="comparer">Custom IEqualityComparer implementation to use for comparing keys</param>
            <param name="capacityPolicy">Policy controlling maximum size of the MemoryCacheList object.</param>
            <param name="validityPolicy">Policy controlling validity of the MemoryCacheList items.</param>
            <param name="subscriber">Cache notification subscriber.</param>
            <param name="synchronized">Flag to pick synchronized or unsafe implementation.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.MemoryCacheList`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value to associate with key</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.MemoryCacheList`2.Item(`0)">
            <summary>
            Get or set values for keys in the cache.
            </summary>
            <param name="key">Key to look up or set</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.MemoryCacheMultiSubscriber`2">
            <summary>
            Multicast cache notification subscriber
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.MemoryCacheMultiSubscriber">
            <summary>
            Factory class to facilitate construction of multicast subscriber
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.BaseMemoryCacheCapacityPolicy`2">
            <summary>
            Base MemoryCacheList policy limiting cache size by either the MAX(count) or SUM(size) of elements and handling expiry of elements
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.BaseMemoryCacheCapacityPolicy`2.Length">
            <summary>
            TESTING usage only
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.BaseMemoryCacheCapacityPolicy`2.Size">
            <summary>
            TESTING usage only
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.LengthAndSizeMemoryCachePolicy`2">
            <summary>
            MemoryCacheList policy limiting cache size by either the MAX(count) or SUM(size) of elements
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.LengthOnlyMemoryCachePolicy`2">
            <summary>
            MemoryCacheList policy limiting cache size only by the MAX(count) of elements
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.SizeOnlyMemoryCachePolicy`2">
            <summary>
            MemoryCacheList policy limiting cache size only by the SUM(size) of elements
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListSynchronized`2">
            <summary>
            Base class for the MemoryCacheList implementations (thread-safe)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListSynchronized`2.#ctor(Microsoft.TeamFoundation.Framework.Common.IMemoryCacheCapacityPolicy{`0,`1},Microsoft.TeamFoundation.Framework.Common.IMemoryCacheValidityPolicy{`0,`1},Microsoft.TeamFoundation.Framework.Common.IMemoryCacheSubscriber{`0,`1})">
            <summary>
            Creates a new MemoryCacheList.
            </summary>
            <param name="capacityPolicy">Policy controlling maximum size of the MemoryCacheList object.</param>
            <param name="validityPolicy">Policy controlling validity of the MemoryCacheList items.</param>
            <param name="subscriber">Cache notification subscriber.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListSynchronized`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},Microsoft.TeamFoundation.Framework.Common.IMemoryCacheCapacityPolicy{`0,`1},Microsoft.TeamFoundation.Framework.Common.IMemoryCacheValidityPolicy{`0,`1},Microsoft.TeamFoundation.Framework.Common.IMemoryCacheSubscriber{`0,`1})">
            <summary>
            Creates a new MemoryCacheList.
            </summary>
            <param name="comparer">Custom IEqualityComparer implementation to use for comparing keys.</param>
            <param name="capacityPolicy">Policy controlling maximum size of the MemoryCacheList object.</param>
            <param name="validityPolicy">Policy controlling validity of the MemoryCacheList items.</param>
            <param name="subscriber">Cache notification subscriber.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListSynchronized`2.Clear">
            <summary>
            Clears the MemoryCacheList of all entries.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListSynchronized`2.Add(`0,`1,System.Boolean)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value to associate with key</param>
            <param name="overwrite">If true, will overwrite an existing key</param>
            <returns>True if the key was successfully added; false if the key was already in the dictionary</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListSynchronized`2.Remove(`0)">
            <summary>
            Removes a specific key from the cache.
            </summary>
            <param name="key">Key to remove</param>
            <returns>True if the key was removed from the cache</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListSynchronized`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">Key to look up</param>
            <param name="value">[out] Value associated with key, if found</param>
            <returns>True if a value was found associated with key</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListSynchronized`2.Count">
            <summary>
            The number of items currently in the cache.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListUnsafe`2">
            <summary>
            Base class for the MemoryCacheList implementations (non thread-safe)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListUnsafe`2.#ctor(Microsoft.TeamFoundation.Framework.Common.IMemoryCacheCapacityPolicy{`0,`1},Microsoft.TeamFoundation.Framework.Common.IMemoryCacheValidityPolicy{`0,`1},Microsoft.TeamFoundation.Framework.Common.IMemoryCacheSubscriber{`0,`1})">
            <summary>
            Creates a new MemoryCacheList.
            </summary>
            <param name="capacityPolicy">Policy controlling maximum size of the MemoryCacheList object.</param>
            <param name="validityPolicy">Policy controlling validity of the MemoryCacheList items.</param>
            <param name="subscriber">Cache notification subscriber.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListUnsafe`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},Microsoft.TeamFoundation.Framework.Common.IMemoryCacheCapacityPolicy{`0,`1},Microsoft.TeamFoundation.Framework.Common.IMemoryCacheValidityPolicy{`0,`1},Microsoft.TeamFoundation.Framework.Common.IMemoryCacheSubscriber{`0,`1})">
            <summary>
            Creates a new MemoryCacheList.
            </summary>
            <param name="comparer">Custom IEqualityComparer implementation to use for comparing keys.</param>
            <param name="capacityPolicy">Policy controlling maximum size of the MemoryCacheList object.</param>
            <param name="validityPolicy">Policy controlling validity of the MemoryCacheList items.</param>
            <param name="subscriber">Cache notification subscriber.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListUnsafe`2.Clear">
            <summary>
            Clears the MemoryCacheList of all entries.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListUnsafe`2.Swipe">
            <summary>
            Removes invalid elements from the cache
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListUnsafe`2.Add(`0,`1,System.Boolean)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value to associate with key</param>
            <param name="overwrite">If true, will overwrite an existing key</param>
            <returns>True if the key was successfully added; false if the key was already in the dictionary and overwrite is false</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListUnsafe`2.Remove(`0)">
            <summary>
            Removes a specific key from the cache.
            </summary>
            <param name="key">Key to remove</param>
            <returns>True if the key was removed from the cache</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListUnsafe`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">Key to look up</param>
            <param name="value">[out] Value associated with key, if found</param>
            <returns>True if a value was found associated with key</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListUnsafe`2.Count">
            <summary>
            The number of items currently in the cache.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.MemoryCacheListUnsafe`2.MemoryCacheEntry`2">
            <summary>
            An entry in the MemoryCacheList.
            </summary>
            <typeparam name="UKey">Key type (matches TKey)</typeparam>
            <typeparam name="UValue">Value type (matches TValue)</typeparam>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.SparseTree`1">
            <summary>
            A store for tokens that can be organized hierarchically.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.EnumNodeCallback">
            <summary>
            The EnumNodeCallback is used when enumerating the nodes in the 
            store. It is used with both EnumParents and EnumSubTree.
            </summary>
            <param name="token">token of the element in the store</param>
            <param name="referencedObject">Object referenced by the path</param>
            <param name="additionalData">If an instance of SparseTreeAdditionalData was provided to EnumSubTree or EnumParents, 
            it will be populated with additional data about the node.</param>
            <param name="param">Object passed through for your own use</param>
            <returns>Return true to terminate the enumeration, or false to continue</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.ModifyInPlaceCallback">
            <summary>
            The ModifyInPlaceCallback is used when a caller wants to look up a node
            in the tree with a certain token and then change the referenced object for that
            token, with only a single lookup in the tree.
            </summary>
            <param name="token">Token of the element in the store (immutable)</param>
            <param name="referencedObject">Current referenced object for the token</param>
            <param name="param">Object passed through for your own use</param>
            <returns>The new referenced object for the token</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.#ctor(System.Char)">
            <summary>
            Tokens have variable length segments that are separated by the set
            of characters given to the constructor.
            Tokens are compared with an OrdinalIgnoreCase comparison
            </summary>
            <param name="tokenSeparator">The set of valid token separator characters.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.#ctor(System.Int32)">
            <summary>
            Tokens have fixed length segments that are separated by the element length
            provided.
            Tokens are compared with an OrdinalIgnoreCase comparison
            </summary>
            <param name="fixedElementLength">The fixed element length to 
            separate the tokens by.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.#ctor(System.StringComparison)">
            <summary>
            Tokens are assumed to contain fixed length segments (ie. OrdinalPaths)
            Tokens are compared with the StringComparison method supplied
            </summary>
            <param name="tokenComparison">The type of comparison to use when comparing tokens.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.#ctor(System.Char,System.StringComparison)">
            <summary>
            Tokens have variable length segments that are separated by the set
            of characters given to the constructor.
            Tokens are compared with the StringComparison method supplied
            </summary>
            <param name="tokenSeparator">The token separator character.</param>
            <param name="tokenComparison">The type of comparison to use when comparing tokens.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.#ctor(System.Int32,System.StringComparison)">
            <summary>
            Tokens have fixed length segments that are separated by the length
            provided.
            Tokens are compared with the StringComparison method supplied
            </summary>
            <param name="fixedElementLength">The fixed element length to 
            separate the tokens by.</param>
            <param name="tokenComparison">The type of comparison to use when comparing tokens.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.#ctor(Microsoft.TeamFoundation.Framework.Common.SparseTree{`0})">
            <summary>
            Copy constructor for the SparseTree.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.Add(System.String,`0)">
            <summary>
            This is used to add an object to the store at a specific path
            </summary>
            <param name="token">The token we are adding.</param>
            <param name="referencedObject">The referencedObject we are adding.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.Add(System.String,`0,System.Boolean)">
            <summary>
            This is used to add an object to the store at a specific path
            </summary>
            <param name="token">The token we are adding.</param>
            <param name="referencedObject">The referencedObject we are adding.</param>
            <param name="overwrite">If true and an object already exists for this token,
            that object will be removed and this one will take its place.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.ModifyInPlace(System.String,Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.ModifyInPlaceCallback,System.Object)">
            <summary>
            Given a token, invokes the callback provided. The callback will be provided with
            the referenced object for that token, if one exists. The callback then should return
            the new referenced object for the token. The tree will be updated accordingly.
            </summary>
            <param name="token">Token to look up</param>
            <param name="callback">Callback to invoke</param>
            <param name="param">Object passed through for your own use</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.Remove(System.String,System.Boolean)">
            <summary>
            Removes a token from the store.  If recurse is true,
            all of the children of the token will be removed as well.
            </summary>
            <param name="token">The token to remove.</param>
            <param name="removeChildren">True if all of the children should be removed as well.</param>
            <returns>True if something was removed.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.Item(System.String)">
            <summary>
            Gets or sets the token's value.  If the token doesn't exist, a get will cause
            a KeyNotFoundException to be thrown and a set will cause this item to be created.
            </summary>
            <param name="token">The token whose value we are getting or setting.</param>
            <returns>The referenced object for this token.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.TryGetValue(System.String,`0@)">
            <summary>
            Tries to find the value in the store and sets the out parameter if it is found.
            </summary>
            <param name="token">The token that is being searched for.</param>
            <param name="referencedObject">This is set if the token is found and is
            default(T) otherwise.</param>
            <returns>True if the token is found, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.TryGetValue(System.String,System.Boolean,`0@)">
            <summary>
            Tries to find the value in the store and sets the out parameter if it is found.
            </summary>
            <param name="token">The token that is being searched for.</param>
            <param name="referencedObject">This is set if the token is found and is
            default(T) otherwise.</param>
            <returns>True if the token is found, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.Clear">
            <summary>
            Clears all of the tokens in the store.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.EnumChildren(System.String)">
            <summary>
            Given a token that is in the store, returns the children of that node in
            the SparseTree. Because this data structure is a SparseTree, the children
            may not be immediate children, but there are no items in the SparseTree
            between token and the returned children.
            
            This method can be used to find the root(s) of the SparseTree by passing
            null as the token to query.
            
            If you are not sure, you probably want to be calling EnumSubTree with a
            depth value of 1 instead.
            </summary>
            <param name="token">Token to query (null for the root)</param>
            <returns>Array of referenced objects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.EnumParents(System.String,Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.EnumNodeCallback)">
            <summary>
            Enumerates all parents of the specified token.
            Only nodes that have been specifically added to the SparseTree are enumerated.
            There is no requirement that the specified token exist in the tree. If it does
            exist, it is the first node enumerated.
            The provided callback can return true at any time to halt the enumeration.
            </summary>
            <param name="token">The token whose parents should be enumerated</param>
            <param name="callback">The callback invoked for each enumerated node</param>
            <returns>True if the enumeration was stopped by callback</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.EnumParents(System.String,Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.EnumNodeCallback,Microsoft.TeamFoundation.Framework.Common.EnumParentsOptions,Microsoft.TeamFoundation.Framework.Common.SparseTreeAdditionalData,System.Object)">
            <summary>
            Enumerates all parents of the specified token.
            Only nodes that have been specifically added to the SparseTree are enumerated, unless
            the EnumerateSparseNodes flag is passed as part of the options parameter.
            There is no requirement that the specified token exist in the tree. If it does
            exist, it is the first node enumerated.
            The provided callback can return true at any time to halt the enumeration.
            </summary>
            <param name="token">The token whose parents we are enumerating.</param>
            <param name="callback">The callback to make each time we hit a node.</param>
            <param name="options">EnumParentsOptions flags to control behavior</param>
            <param name="additionalData">If provided, this instance of SparseTreeAdditionalData will be populated with
            additional data and passed to you each time the callback is invoked. Can be null.</param>
            <param name="param">Object passed through for your own use</param>
            <returns>True if we should halt our enumeration</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.EnumParents(System.String,Microsoft.TeamFoundation.Framework.Common.EnumParentsOptions)">
            <summary>
            Queries the SparseTree for the parents of the provided token.
            Only nodes that have been specifically added to the SparseTree are enumerated, unless
            the EnumerateSparseNodes flag is passed as part of the options parameter.
            There is no requirement that the specified token exist in the tree.
            Nodes are enumerated from token to the root of the tree in a streaming fashion.
            Do not modify the SparseTree while enumerating.
            </summary>
            <param name="token">The token whose parents to retrieve</param>
            <param name="options">EnumParentsOptions flags to control behavior</param>
            <returns>The parents of the provided token</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.EnumParentsReferencedObjects(System.String,Microsoft.TeamFoundation.Framework.Common.EnumParentsOptions)">
            <summary>
            Queries the SparseTree for the parents of the provided token.
            Only nodes that have been specifically added to the SparseTree are enumerated, unless
            the EnumerateSparseNodes flag is passed as part of the options parameter.
            There is no requirement that the specified token exist in the tree.
            Nodes are enumerated from token to the root of the tree in a streaming fashion.
            Do not modify the SparseTree while enumerating.
            </summary>
            <param name="token">The token whose parents to retrieve</param>
            <param name="options">EnumParentsOptions flags to control behavior</param>
            <returns>The parents of the provided token</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.EnumSubTree(System.String,Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.EnumNodeCallback)">
            <summary>
            This will enumerate the entire subtree of the path supplied.
            The root of the subtree will not be enumerated.
            Only elements that have been specifically added to the SparseTree are returned.
            The traversal of the tree is depth-first.
            </summary>
            <param name="token">The token whose subtree to enumerate</param>
            <param name="callback">The callback we are invoking on each node</param>
            <returns>True if we should stop our enumeration.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.EnumSubTree(System.String,Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.EnumNodeCallback,Microsoft.TeamFoundation.Framework.Common.EnumSubTreeOptions,System.Int32,Microsoft.TeamFoundation.Framework.Common.SparseTreeAdditionalData,System.Object)">
            <summary>
            This will enumerate the entire subtree of the path supplied.
            The root of the subtree will not be enumerated unless the EnumerateSubTreeRoot flag
            is specified. Only elements that have been specifically added to the SparseTree are
            returned, unless the EnumerateSparseNodes flag is specified.
            The traversal of the tree is depth-first.
            A parameter may be passed through for your own use.
            </summary>
            <param name="token">The token whose subtree to enumerate</param>
            <param name="callback">The callback we are invoking on each node</param>
            <param name="options">EnumSubTreeOptions flags to control behavior</param>
            <param name="depth">The depth of the enumeration. Default is Int32.MaxValue</param>
            <param name="additionalData">If provided, this instance of SparseTreeAdditionalData will be populated with
            additional data and passed to you each time the callback is invoked. Can be null.</param>
            <param name="param">Object passed through for your own use</param>
            <returns>True if we should stop our enumeration.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.EnumSubTree(System.String,Microsoft.TeamFoundation.Framework.Common.EnumSubTreeOptions,System.Int32)">
            <summary>
            This will enumerate the entire subtree of the path supplied.
            The root of the subtree will not be enumerated unless the EnumerateSubTreeRoot flag
            is specified. Only elements that have been specifically added to the SparseTree are
            returned, unless the EnumerateSparseNodes flag is specified.
            The traversal of the tree is depth-first.
            </summary>
            <param name="token">The token whose parents to retrieve</param>
            <param name="options">EnumSubTreeOptions flags to control behavior</param>
            <returns>The children of the provided token</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.EnumSubTreeReferencedObjects(System.String,Microsoft.TeamFoundation.Framework.Common.EnumSubTreeOptions,System.Int32)">
            <summary>
            This will enumerate the entire subtree of the path supplied.
            The root of the subtree will not be enumerated unless the EnumerateSubTreeRoot flag
            is specified. Only elements that have been specifically added to the SparseTree are
            returned, unless the EnumerateSparseNodes flag is specified.
            The traversal of the tree is depth-first.
            </summary>
            <param name="token">The token whose parents to retrieve</param>
            <param name="options">EnumSubTreeOptions flags to control behavior</param>
            <returns>The children of the provided token</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.EnumRoots">
            <summary>
            This enumerates all the immediate children of the root node of the tree -- that is,
            all entries in the SparseTree which have no parent.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.EnumRootsReferencedObjects">
            <summary>
            This enumerates all the immediate children of the root node of the tree -- that is,
            all entries in the SparseTree which have no parent.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.IsRooted(Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.SparseTreeNode{`0})">
            <summary>
            Checks to see if a SparseTreeNode's parents can be followed all the way up to the
            root node. This method is used in validating whether or not a cached FindClosestNode
            result is still valid, since the tree could have changed in the intervening time.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.FindClosestNode(System.String,System.String[],Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.SparseTreeNode{`0},Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.SparseTreeNode{`0}@)">
            <summary>
            Finds the closest node to the token.
            </summary>
            <param name="token">The canonicalized token we're looking for</param>
            <param name="tokenElements">The elements of the token we're looking for</param>
            <param name="nodeList">The current nodeList to look for the token in.</param>
            <param name="closestNode">The current closest node.</param>
            <returns>True if the node found is the exact node we were looking for.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.FindClosestNodeHelper(System.String[],System.Int32,Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.SparseTreeNode{`0},Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.SparseTreeNode{`0}@)">
            <summary>
            Finds the closest node to the token.
            </summary>
            <param name="tokenElements">The token we are looking for.</param>
            <param name="elementIndex">The index of the element that we are looking at.</param>
            <param name="nodeList">The current nodeList to look for the token in.</param>
            <param name="closestNode">The current closest node.</param>
            <returns>True if the node found is the exact node we were looking for.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.AddNode(Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.SparseTreeNode{`0},Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.SparseTreeNode{`0})">
            <summary>
            Add is used to add a childNode to this node.
            
            If there are children of the node being added currently attached
            directly to this node they will be moved under this child node.
            </summary>
            <param name="childNode">The node we are adding to the parent.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.RemoveNode(Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.SparseTreeNode{`0},System.Boolean)">
            <summary>
            This is used to remove a single node, or the entire subtree from
            a section of the hierarchy
            </summary>
            <param name="removeChildren">If true, the children will be removed as well.</param>
            <returns>True if something was removed.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.CountNode(Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.SparseTreeNode{`0})">
            <summary>
            Counts the number of nodes in a subtree of the SparseTree, including the node itself.
            </summary>
            <param name="nodeToCount">Root of the subtree to count</param>
            <returns>Number of nodes in the subtree (returns at least 1)</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.ReparentNode(Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.SparseTreeNode{`0},Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.SparseTreeNode{`0})">
            <summary>
            Reparents childNode under parentNode, but does not add it to its
            children list.
            </summary>
            <param name="parentNode">New parent node for childNode</param>
            <param name="childNode">Node to point to parentNode</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.FindLocation(System.String[],Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.SparseTreeNode{`0})">
            <summary>
            Binary search the sorted children of a SparseTreeNode to find the index of a child node.
            </summary>
            <param name="tokenElements">The token to search for</param>
            <param name="nodeToSearch">The node whose children should be searched</param>
            <returns>The index of the specified child node, if found. If not found, a negative number which is the bitwise
            complement of the index where the element should be inserted to maintain the sorted order is returned.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.FindRange(System.String[],System.Int32,System.Int32,Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.SparseTreeNode{`0})">
            <summary>
            Finds the range of elements in the sorted children list of nodeToSearch which start with the first
            tokenElementsLength elements of tokenElements. The sorted children list is binary searched twice starting
            at startIndex.
            
            If no child nodes are found from startIndex to nodeToSearch.m_children.Count, the range (-1, -1) is returned.
            If at least one child node which starts with the first tokenElementsLength elements of tokenElements is found,
            then the returned range will have a non-negative Start which contains the index of the first child node meeting
            the criteria, and End will contain the index of the last child node meeting the criteria. 
            </summary>
            <param name="tokenElements">Token elements of the range to match</param>
            <param name="tokenElementsLength">Length of tokenElements array (can be shorter than tokenElements.Length)</param>
            <param name="startIndex">The index in the sorted children list of nodeToSearch use as a floor for the binary search (normally 0)</param>
            <param name="nodeToSearch">The node whose children list is to be searched</param>
            <returns>A SparseTreeRange indicating the </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.CompareByElements(System.String[],System.String[],System.Int32,System.Int32)">
            <summary>
            The same functionality as String.Compare except that it treats separators as the heaviest 
            weighted character.
            </summary>
            <param name="tokenElements1">The elements that make up the first token.</param>
            <param name="tokenElements2">The elements that make up the second token.</param>
            <param name="tokenStartIndex">The index to start comparing tokenElements1 and tokenElements2.</param>
            <param name="tokenEndIndex">The index to stop the comparison of tokenElements1 and tokenElements2.</param>
            <returns>0 if all the elements matched.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.CanonicalizeToken(System.String)">
            <summary>
            Canonicalizes a token based on the type of splitting that
            has been supplied.
            </summary>
            <param name="token">The token to canonicalize.</param>
            <returns>The canonicalized token.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.SplitToken(System.String)">
            <summary>
            Splits a canonicalized token into its elements based on the
            type of splitting that has been supplied.
            </summary>
            <param name="token">The canonicalized token to split.</param>
            <returns>The array of elements that make up the token.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.IsSubItem(System.String,System.String)">
            <summary>
            Given an item and a possible parent, returns true if item is a subitem of parent given
            the token separator or fixed element length. This check does NOT depend on the state of
            the tree and is based solely on the contents of the passed strings.
            </summary>
            <param name="item">Item to check</param>
            <param name="parent">Potential parent of item</param>
            <returns>True if parent is a parent of item</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.AddTokenPart(System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Adds a token part to the specified StringBuilder.
            </summary>
            <param name="builder">StringBuilder to which the token part should be added</param>
            <param name="tokenCountInBuilder">Number of tokens currently in the StringBuilder</param>
            <param name="tokenPart">Token part to add</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.GetCommonTokenCount(System.String[],System.String[],System.Int32)">
            <summary>
            Returns the number of tokens the two strings have in common, starting
            from the provided start index.
            </summary>
            <param name="xTokens">Tokens of the first string</param>
            <param name="yTokens">Tokens of the second string</param>
            <param name="startIndex">Index to start counting from</param>
            <returns>Number of common tokens from startIndex</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.GetPartialTokenStringBuilder(System.Text.StringBuilder,System.String,System.String[],System.Int32)">
            <summary>
            Given a (token, tokenElements) pair and a tokenCount, return a
            StringBuilder containing tokenCount nodes from the (token, tokenElements) pair.
            </summary>
            <param name="toUse">If you have an existing StringBuilder you want to use</param>
            <param name="token">Token part of (token, tokenElements) pair</param>
            <param name="tokenElements">tokenElements part of (token, tokenElements) pair</param>
            <param name="tokenCount">Number of tokens from node to put in the StringBuilder</param>
            <returns>StringBuilder containing a substring of node.m_token</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.Count">
            <summary>
            Returns the number of key/value pairs in this SparseTree.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.TokenSeparator">
            <summary>
            The optional separator character.
            If this is the null character, there is no separator and the token 
            assumed to be a fixed length meaning the FixedElementLength
            will be used to split the tokens.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.TokenComparison">
            <summary>
            Comparison type for the tokens
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.FixedElementLength">
            <summary>
            The optional element length.
            If this is -1, a variable length token is assumed and the
            TokenSeparator will be used to split the tokens.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.FindClosestNodeCache">
            <summary>
            A thread-local cache to speed up access patterns that exhibit
            token locality (FindClosestNode)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.m_rootNode">
            <summary>
            The root node in the store. 
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.m_tokenComparison">
            <summary>
            Comparison type for the tokens
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.m_tokenSeparator">
            <summary>
            The optional separator character.
            If this is the null character, there is no separator and the token 
            assumed to be a fixed length meaning the fixedElementLength member
            will be used for splitting
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.m_tokenSeparatorArray">
            <summary>
            Character array for the optional separator character.  Used for 
            splitting and trimming.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.m_fixedElementLength">
            <summary>
            The optional element length.
            If this is -1, a variable length token is assumed and the token
            separator will be used.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.m_count">
            <summary>
            The number of key/value pairs in the SparseTree.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.ts_findClosestNodeCache">
            <summary>
            A thread-local cache to speed up successive calls to FindClosestNode
            that exhibit token locality.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.s_emptyStringArray">
            <summary>
            Empty string array
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.SparseTreeNode`1">
            <summary>
            Represents a node in the tree.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.SparseTreeNode`1.#ctor(System.String,System.String[],`1)">
            <summary>
            Returns a new SparseTreeNode
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.SparseTreeNode`1.#ctor(System.String,System.String[],`1,System.Collections.Generic.List{Microsoft.TeamFoundation.Framework.Common.SparseTree{`0}.SparseTreeNode{`1}})">
            <summary>
            Returns a new SparseTreeNode
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.SparseTreeNode`1.ChildCount">
            <summary>
            The number of children of this SparseTreeNode
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.SparseTreeNode`1.Copy">
            <summary>
            Returns a deep copy of this SparseTreeNode.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.SparseTreeRange">
            <summary>
            A range in the sorted children of a SparseTreeNode.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.SparseTree`1.ReferencedObjectEnumerable`1">
            <summary>
            For callers who want to enumerate just the referenced objects, return a ReferencedObjectEnumerable
            instance instead.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.SparseTreeAdditionalData">
            <summary>
            The SparseTree EnumParents and EnumSubTree methods can return additional data
            back to the caller, if a SparseTreeAdditionalData object is provided to the enumeration
            function.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.SparseTreeAdditionalData.HasChildren">
            <summary>
            True if the enumerated token has no children below it in the SparseTree.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.SparseTreeAdditionalData.NoChildrenBelow">
            <summary>
            Example: When calling EnumParents on $/A/B/C/D in a tree which contains
            nodes $/A and $/A/Z, the first node to be enumerated will be $/A. In this
            case HasChildren will be true because $/A has a child $/A/Z. But this
            child node is not on the path to $/A/B/C/D. In this case, the value for
            NoChildrenBelow for the enumeration of node $/A will be $/A/B, indicating
            that $/A is the first node on the path for items under $/A/B to the root.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.EnumeratedSparseTreeNode`1.Token">
            <summary>
            The token of this SparseTree entry.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.EnumeratedSparseTreeNode`1.ReferencedObject">
            <summary>
            The object referenced by this SparseTree entry.
            The value may be null iff EnumerateSparseNodes was specified as an option.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.EnumeratedSparseTreeNode`1.HasChildren">
            <summary>
            True if the enumerated token has no children below it in the SparseTree.
            This field is only valid if includeAdditionalData was set to true.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.EnumeratedSparseTreeNode`1.NoChildrenBelow">
             <summary>
             If HasChildren is false, then this field contains the same String instance
             as the Token field. If HasChildren is true, then this field may be non-null
             if this is the first token enumerated along an EnumParents traversal where
             HasChildren is true. If it is non-null, then while there are children in
             the tree under the Token field, there are no children under the value of
             NoChildrenBelow.
            
             This field is only valid if includeAdditionalData was set to true. This field
             is also probably only useful to you when you are using EnumParents.
            
             Example: When calling EnumParents on $/A/B/C/D in a tree which contains
             nodes $/A and $/A/Z, the first node to be enumerated will be $/A. In this
             case HasChildren will be true because $/A has a child $/A/Z. But this
             child node is not on the path to $/A/B/C/D. In this case, the value for
             NoChildrenBelow for the enumeration of node $/A will be $/A/B, indicating
             that $/A is the first node on the path for items under $/A/B to the root.
             </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.RegistryUtility">
            <summary>
            Utility methods for the Team Foundation Registry.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationServiceHostStatus.Starting">
            <summary>
            Starting means the host is preparing to accept requests.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationServiceHostStatus.Started">
            <summary>
            Started means the host is ready to accept requests.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationServiceHostStatus.Stopping">
            <summary>
            When the host is stopped, it first transitions to the stopping state
            while active requests are being processed, it will not accept new 
            requests while in this state.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationServiceHostStatus.Stopped">
            <summary>
            Stopped means the host is not currently processing any
            requests, and when clients make requests that target this host
            the requests will be denied before being sent to the services they are
            targetting.
            
            If the host was Started or Paused when the state was switched
            to Stopped any resources associated with the host are disposed
            of and the service host is shutdown.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationServiceHostStatus.Pausing">
            <summary>
            When the host is paused, it first transitions to the
            pausing state while active requests are being processed, it will not
            accept new requests while in this state.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationServiceHostStatus.Paused">
            <summary>
            Paused is the same as stopped except it does not release the resources
            associated with the host. It keeps the host loaded, not notifying
            the services of the state change.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.TimeoutHelper">
            <summary>
            Provides a simple mechanism for dealing with multiple chained calls participating in a single timeout.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.TimeoutHelper.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new <c>Microsoft.TeamFoundation.Framework.Common.TimeoutHelper</c> instance with the 
            specified timeout.
            </summary>
            <param name="timeout">The timeout for the entire operation</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.TimeoutHelper.Value">
            <summary>
            Gets the original timeout value.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.TimeoutHelper.Resume">
            <summary>
            Resumes the countdown timer.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.TimeoutHelper.Suspend">
            <summary>
            Suspends the countdown timer.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.TimeoutHelper.RemainingTime">
            <summary>
            Gets the time remaining on the overall timeout.
            </summary>
            <returns>The remaining time for the overall timeout</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.TimeoutHelper.RemainingTimeInMilliseconds">
            <summary>
            Gets the time remaining, in milliseconds, of the overall timeout.
            </summary>
            <returns>The remaining time, in milliseconds, of the overal timeout</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.TimeoutHelper.Trim(System.TimeSpan)">
            <summary>
            Trims the timespan to ensure no exceptions are thrown from framework methods if TimeSpan.MaxValue
            is provided from a caller.
            </summary>
            <param name="timeout">The original timeout value provided by the caller</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.TimeoutHelper.WaitOne(System.Threading.WaitHandle,System.TimeSpan)">
            <summary>
            Waits for the specified timeout on the wait handle.
            </summary>
            <param name="waitHandle">The wait handle</param>
            <param name="timeout">The maximum time to wait</param>
            <returns>A value indicating whether or not the wait handle was signaled</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.JobPriorityClass">
            <summary>
            Priority associated with a job definition.
            </summary>
            <remarks>
            Modeled after System.Diagnostics.ProcessPriorityClass. RealTime not currently supported.
            </remarks>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.JobPriorityLevel">
            <summary>
            Priority associated with one schedule or execution of a job.
            </summary>
            <remarks>
            Modeled after Windows' thread priority levels and System.Threading.ThreadPriority. TimeCritical not currently supported.
            </remarks>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobState.Dormant">
            <summary>
            The job is not in progress. It will not be executed until the associated service host is accessed by an end-user, or the job is queued on-demand.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobState.QueuedScheduled">
            <summary>
            The job is not in progress. It is ready-to-run (assuming its associated service host is online), or is scheduled for execution.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobState.Running">
            <summary>
            The job is assigned to a job agent and executing.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobState.Paused">
            <summary>
            The job is assigned to a job agent and execution is paused.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobState.Pausing">
            <summary>
            The job is assigned to a job agent and executing. It is requested that it transition to the Paused state.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobState.Resuming">
            <summary>
            The job is assigned to a job agent and transitioning to the Running state.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobState.Stopping">
            <summary>
            The job is assigned to a job agent and executing. It is requested that it immediately complete execution and transition to QueuedScheduled or Dormant.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobResult">
            <summary>
            The result of running an instance of a job definition.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobResult.JobInitializationError">
            <summary>
            Indicates there was an error initializing a job request context or reading the job definition.
            </summary>
            <remarks>
            Generally the job agent will not acquire jobs unless the associated service host is online. Occasionally an offline host notification may be delayed and the job agent will acquire and then release a job associated with an offline host.
            </remarks>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobEnabledState">
            <summary>
            The Enabled state of the job
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobQueuedReasons">
            <summary>
            Flags related to job queue entries and job history entries.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobQueuedReasons.None">
            <summary>
            There is no reason to execute the job.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobQueuedReasons.Scheduled">
            <summary>
            The job has an associated schedule.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobQueuedReasons.Queued">
            <summary>
            The job was queued via QueueJobNow or QueueOneTimeJob.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobQueuedReasons.QueuedWhileInProgress">
            <summary>
            During the previous execution of the job, it was queued again via QueueJobNow.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TeamFoundationJobQueuedReasons.PreviousExecutionResult">
            <summary>
            Job requeued due to previous execution result (e.g. Blocked, Inactive).
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.LocationServiceConstants.DataDirEnvVar">
            <summary>
            This is the environment variable that can be used to override where
            the location services client cache is stored.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.LocationServiceConstants.SelfReferenceLocationServiceIdentifier">
            <summary>
            All Location Services have a reference to their own service definition.  That
            service definition has an identifier of this value.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.LocationServiceConstants.ApplicationLocationServiceIdentifier">
            <summary>
            If a Location Service has an entry for an application location service, that
            location service definition will have an identifier of this value.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.LocationServiceConstants.InvalidServiceDefinitionIdentifier">
            <summary>
            Represents a service definition that hasn't been registered or an invalid
            one.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.RelativeToSetting">
            <summary>
            Indicates what a given ServiceDefinition is relative to.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.RelativeToSetting.Context">
            <summary>
            Indicates that a service definition is relative to the current context.
            The current context refers to the relative path of the collection or
            application that the ServiceDefinition belongs to. For a ServiceDefinition
             have a RelativeToSetting of Context its RelativePath property must not
            null or empty.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.RelativeToSetting.WebApplication">
            <summary>
            Indicates that a ServiceDefinition is relative to the web application.
            For a ServiceDefinition to have a RelativeToSetting of WebApplication
            its RelativePath property must not be null or empty.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.RelativeToSetting.FullyQualified">
            <summary>
            Indicates that a ServiceDefinition isn't relative to anything. For a 
            ServiceDefinition to have a RelativeToSetting of FullyQualified its 
            RelativePath property must be null.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.ConnectOptions">
            <summary>
                Enumeration of the options that can be passed in on Connect.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.ConnectOptions.None">
            <summary>
            Retrieve no optional data.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.ConnectOptions.IncludeServices">
            <summary>
            Includes information about AccessMappings and ServiceDefinitions.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.LocationHelper">
            <summary>
            Helper class for Location Service
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.LocationHelper.GetRootServerUrl(System.String)">
            <summary>
            Gets the root server url from the location service url:
            http://servername:port/vdir/collectionname/Service/v3.0/LocationService.asmx
            returns
            http://servername:port/vdir/collectionname
            
            http://servername:port/vdir/TeamFoundation/Administration/v3.0/LocationService.asmx
            returns
            http://servername:port/vdir
            
            http://servername:80/TeamFoundation/Administration/v3.0/LocationService.asmx
            returns
            http://servername/ with a trailing slash.
            </summary>
            <param name="locationServiceUrl">The url of the location service</param>
            <returns>The root server url for the given location service url</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.TfsMessageQueueVersion">
            <summary>
            The API version of the message queue service.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TfsMessageQueueVersion.V1">
            <summary>
            Version 1 requires in-order acknowledgement of messages.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TfsMessageQueueVersion.V2">
            <summary>
            Version 2 supports out-of-order acknowledgement of messages.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.TfsMessageQueueVersion.V3">
            <summary>
            Version 3 supports simple string-based message containers.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.MakeConnectionConstants">
            <summary>
            Gets constants for reading and writing WS-MakeConnection requests.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.ProjectSettingsCatalogHelper">
            <summary>
            Helper class for retrieving TeamProjectSettings from catalog
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.ProjectSettingsCatalogHelper.GetProjectSettingsResourceTypes``1">
            <summary>
            Get catalog known types relevant  to project settings
            </summary>
            <typeparam name="T">TeamProject Type</typeparam>
            <returns>list of known types</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.ProjectSettingsCatalogHelper.GetProjectCollectionPathSpecs(System.String)">
            <summary>
            Get catalog PathSpecs relevant to project settings
            </summary>
            <param name="tpcFullPath">ProjectCollection's CatalogNode.FullPath</param>
            <returns>array for path specs</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.PropertiesOptions">
            <summary>
            Options for the Get Properties method.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.PropertiesOptions.None">
            <summary>
            No options were specified
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.PropertiesOptions.AllVersions">
            <summary>
            Ignore the Version Property and use all versions for the operation.
            Currently only valid on query properties.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.GetPropertiesOptions">
            <summary>
            Options for the Get Properties method. 
            Used to maintain client OM signature
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.TeamFoundationPropertyValidationException">
            <summary>
            Thrown when validating user input. Similar to ArgumentException but doesn't require the property to be an input parameter.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.PropertyTypeNotSupportedException">
            <summary>
            PropertyTypeNotSupportedException - this is thrown when a type is DBNull or an Object type other than an Byte array.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.PropertyValidation.ValidatePropertyName(System.String)">
            <summary>
            Make sure the property name conforms to the requirements for a
            property name.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.PropertyValidation.ValidatePropertyValue(System.String,System.Object)">
            <summary>
            Make sure the property value is within the supported range of values
            for the type of the property specified.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.PropertyValidation.ValidatePropertyString(System.String,System.Int32,System.String)">
            <summary>
            Validation helper for validating all property strings.
            </summary>
            <param name="propertyString"></param>
            <param name="maxSize"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.PropertyValidation.CheckRange``1(``0,``0,``0,System.String,System.Type,System.String)">
            <summary>
            Verify that a propery is within the bounds of the specified range.
            </summary>
            <param name="propertyValue">The property value</param>
            <param name="minValue">The minimum value allowed</param>
            <param name="maxValue">The maximum value allowed</param>
            <param name="propertyName">The name of the property</param>
            <param name="containerType">The container of the property</param>
            <param name="topLevelParamName">The top level parameter name</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.PropertyValidation.ValidatePropertyFilter(System.String)">
            <summary>
            Make sure the property filter conforms to the requirements for a
            property filter.
            </summary>
            <param name="propertyNameFilter"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.IProxyRegistration">
            <summary>
            This interface will return the collection id associated with the passed in Url
            If no collection is found, this should return null
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.SecurityIdentifierInfo">
            <summary>
            SecurityIdentifier wrapper. In addition to the SecurityIdentifier, this class 
            caches the binary form of the full Sid and AccountDomain Sid after first access.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SecurityIdentifierInfo.#ctor(System.Security.Principal.SecurityIdentifier)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Common.SecurityIdentifierInfo.SecurityId">
            <summary>
            SecurityIdentifier.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SecurityIdentifierInfo.GetBinaryForm">
            <summary>
            Get the cached binary form of SecurityId
            </summary>
            <returns>a byte array</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SecurityIdentifierInfo.GetAccountDomainBinaryForm">
            <summary>
            Get the cached binary form of SecurityId.AccountDomainSid
            </summary>
            <returns>a byte array or null if SecurityId.AccountDomainSid is null</returns>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.FrameworkSecurity.FrameworkNamespaceId">
            <summary>
            This is the set of namespaces that exist in the framework.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.FrameworkSecurity.ProcessTemplatesNamespaceId">
            <summary>
            This is currently pointing to the Integration "Namespace" security namespace
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.FrameworkSecurity.MessageQueueNamespaceId">
            <summary>
            The namespace identifier for message queue security.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.FrameworkSecurity.MessageQueueNamespaceRootToken">
            <summary>
            The root token for message queue security.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.FrameworkSecurity.MessageQueuePathSeparator">
            <summary>
            The path separator character for message queue security.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.FrameworkSecurity.FrameworkNamespaceToken">
            <summary>
            This is the set of tokens used for the framework security namespaces
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.FrameworkSecurity.JobNamespaceToken">
            <summary>
            Token information for the job security tokens.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.FrameworkSecurity.CollectionManagementNamespaceToken">
            <summary>
            This will serve as the collection management namespace.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.FrameworkSecurity.RegistryPathSeparator">
            <summary>
            Token information for the registry security tokens
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.FrameworkSecurity.ProcessTemplateNamespaceToken">
            <summary>
            Token information for the process template namespace.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.FrameworkSecurity.DiagnosticPathSeparator">
            <summary>
            Token information for the registry security tokens
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.EventSubscriptionPermissions">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.MessageQueuePermissions">
            <summary>
            Represents permissions that can be manipulated for a message queue.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.MessageQueuePermissions.Read">
            <summary>
            The ability to see a message queue.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.MessageQueuePermissions.Enqueue">
            <summary>
            The ability to enqueue messages.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.MessageQueuePermissions.Dequeue">
            <summary>
            The ability to dequeue messages.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.MessageQueuePermissions.Create">
            <summary>
            The ability to create a message queue.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.MessageQueuePermissions.Delete">
            <summary>
            The ability to delete a message queue.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.MessageQueuePermissions.AllPermissions">
            <summary>
            Includes all permissions related to message queues.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.RegistryServicePermissions">
            <summary>
            The permissions that can be set and checked for in the registry.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.RegistryServicePermissions.Read">
            <summary>
            The ability to read the value of a given regisry path
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.RegistryServicePermissions.Write">
            <summary>
            The ability to both modify and add registry path/value pairs
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.RegistryServicePermissions.AllPermissions">
            <summary>
            This defines the set of bits that are valid for the RegistryService
            permission space. When reading or writing registry service permissions
            these are the only bits paid attention too.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.CollectionManagementPermissions">
            <summary>
            The permissions that can be set and checked for in the location
            service.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.CollectionManagementPermissions.CreateCollection">
            <summary>
            The ability to create collections
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.CollectionManagementPermissions.DeleteCollection">
            <summary>
            The ability to delete a collection
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.CollectionManagementPermissions.AllPermissions">
            <summary>
            This defines the set of bits that are valid for the collection management
            permission space. When reading or writing collection management permissions
            these are the only bits paid attention too.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.ProcessTemplatePermissions.GenericRead">
            <summary>
            Read process template metadata
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.ProcessTemplatePermissions.ReadTemplateContents">
            <summary>
            This lines up with the 'CreateProjects' permission bit, but if
            process template security had its own security namespace this is what we'd call this permission.
            
            Users who can create projects should be able to read the template contents in order
            to run PCW.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.ProcessTemplatePermissions.ManageTemplates">
            <summary>
            Create/Delete/Update process templates.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.AadSecurity.Permissions">
            <summary>
            The permissions that can be set and checked for.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.SecurityNamespaceStructure">
            <summary>
            Represents the type of organization that a given security namespace
            uses when storing its tokens.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.SecurityNamespaceStructure.Flat">
            <summary>
            Indicates that tokens have no relationship to each other in the 
            security namespace.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Common.SecurityNamespaceStructure.Hierarchical">
            <summary>
            Indicates that tokens are organized in a hierarchical structure
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SecurityUtility.MergePermissions(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Merges existing permissions with new permissions.  Precedence is taken in the 
            following order: Denies, Allows, Removes. If the same bit is set to 1 in
            both the allow and deny permissions, the deny will outweigh the allow.
            </summary>
            <param name="existingAllow">The existing allowed permissions.</param>
            <param name="existingDeny">The existing denied permissions.</param>
            <param name="allow">The new allowed permissions.</param>
            <param name="deny">The new denied permissions.</param>
            <param name="remove">The permissions to remove.</param>
            <param name="updatedAllow">The allowed permissions after the merge.</param>
            <param name="updatedDeny">The denied permissions after the merge.</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Common.SidIdentityHelper">
            <summary>
            Helper methods for SID based descriptors (Windows and TFS).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SidIdentityHelper.NewSid(System.Guid)">
            <summary>
            Create a new ResourceManager Sid.
            We use the SECURITY_RESOURCE_MANAGER_AUTHORITY as our Identifier Authority
            when we create SIDs.  Since many different apps use SECURITY_RESOURCE_MANAGER_AUTHORITY,
            the sub-authorities in our SIDs are composed of 4 parts.  
            1. A constant, which is used to make sure we don't collide with other users of
            SECURITY_RESOURCE_MANAGER_AUTHORITY.
            2. A GUID, which identifies the IMS instance or domain.
            3. The next part is either 0 or 1.  
            0 indicates well known SIDs. In this case, the last part is the constant, well known SID. 
            1 indicates all other SIDs. In this case, the last part is a GUID generated for the SID.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SidIdentityHelper.ConstructWellKnownSid(System.UInt32,System.UInt32)">
            <summary>
            Construct well known Team Foundation identifier.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SidIdentityHelper.ConstructPhantomSid(System.Guid)">
            <summary>
            Phantom identity is a dummy TeamFoundationIdentity for a Guid which is mapped in the collection
            but not found in the Config db. This can happen, for example, if the collection db has
            been restored from a later backup than the config db. For such an identity the SID suffix
            is generated from the Guid.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SidIdentityHelper.DecodePhantomSid(Microsoft.TeamFoundation.Framework.Common.SecurityIdentifierInfo)">
            <summary>
            Extract the phantom Guid from phantom SID. Refer comments for construct method.
            Pre-condition: caller has verified SID matches phantom SID pattern.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SidIdentityHelper.DecodeAadSid(Microsoft.TeamFoundation.Framework.Common.SecurityIdentifierInfo)">
            <summary>
            Extract the AAD Gorup Guid from AAD SID. Refer comments for construct method.
            Pre-condition: caller has verified SID matches AAD SID pattern.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SidIdentityHelper.DecodeSid(System.Byte[],System.Int32@,System.UInt64@)">
            <summary>
            Convert a binary SID into it's parts.
            The code for this conversion comes from the SecurityIdentifier object.
            </summary>
            <param name="binarySid"></param>
            <param name="revision"></param>
            <param name="authority"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SidIdentityHelper.IsServiceAccount(System.Byte[])">
            <summary>
            Is this the the well known Sid for Network Service or
            Local Service
            </summary>
            <param name="sid">Sid to check (in binary form)</param>
            <returns>true if this is Network Service or Local Service, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SidIdentityHelper.IsNTAccount(System.Byte[])">
            <summary>
            Is this the SID of an NT Identity.  NT Identities can come from
            either the SAM database or Active Directory.  They come from the 
            Windows NT Authority (5) and have 21 as their first sub authority.
            </summary>
            <param name="sid">SID to check (in binary form)</param>
            <returns>true if this is an NT Identity, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SidIdentityHelper.IsBuiltInAccount(System.Byte[])">
            <summary>
            Is this the SID of one of the builtin accounts?  All builtin accounts
            come from the Windows NT Authority (5) and have 32 as
            their first sub authority.
            </summary>
            <param name="sid">SID to check</param>
            <returns>true if SID has "BUILTIN" as its domain, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SidIdentityHelper.IsAadGroupSid(System.Byte[])">
            <summary>
            Is this an AAD Group
            </summary>
            <param name="sid">Sid to check (in binary form)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Common.SidIdentityHelper.ResolveSid(Microsoft.TeamFoundation.Framework.Common.SecurityIdentifierInfo,System.String@,System.String@,Microsoft.TeamFoundation.Common.Internal.NativeMethods.AccountType@,System.Boolean@)">
            <summary>
            Resolve SID using OS, and return related identity attributes.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.ExtensionNameAttribute">
            <summary>
            Overrides the fully qualified class name to supply a different name for an extension loaded by Team Foundation.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.ExtensionNameAttribute.#ctor(System.String)">
            <summary>
            Overrides the fully qualified class name to supply a different name for an extension loaded by Team Foundation.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.ILinking.GetArtifactUrl(System.String)">
            Get Url for artifact for addressability in links.
        </member>
        <member name="M:Microsoft.TeamFoundation.ILinking.GetArtifactUrl(Microsoft.TeamFoundation.ArtifactId)">
            Get Url for artifact for addressability in links. This version will
            accept blank tool specific id, to construct a "base" Url for any
            artifact type.
        </member>
        <member name="M:Microsoft.TeamFoundation.ILinking.GetArtifactUrlExternal(System.String)">
            Get Url for artifact for addressability in links.
            This version will is intended to generate a Url for external access.
        </member>
        <member name="M:Microsoft.TeamFoundation.ILinking.GetArtifactUrlExternal(Microsoft.TeamFoundation.ArtifactId)">
            Get Url for artifact for addressability in links. This version will
            accept blank tool specific id, to construct a "base" Url for any
            artifact type.
            This version will is intended to generate a Url for external access.
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.LinkingUtilities.GetArtifactUri(System.String)" -->
        <member name="M:Microsoft.TeamFoundation.LinkingUtilities.GetArtifactUrl(System.String,Microsoft.TeamFoundation.ArtifactId,System.String)">
            <summary>
            Get Url for artifact for addressability in links.
            This will construct the artifact Url using 
            the server Url supplied.
            </summary>
            <param name="artifactDisplayUrl">artifactDisplayUrl from regristry DB extended attribute</param>
            <param name="artId">ArtifactId.</param>
            <param name="serverUrl">server Url.</param>
            <returns>ArtifactUrlExternal</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.LinkingUtilities.GetServerUrl(System.Uri)">
            <summary>
            The server Url for external access
            </summary>
            <param name="serverUri">server Uri</param>
            <returns>Server Url</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.OperationCanceledException.#ctor">
            <summary>
            No-arg constructor that sumply defers to the base class.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.OperationCanceledException.#ctor(System.String)">
            <summary>
            Initializes an exception with the specified error message.
            </summary>
            <param name="message">A human readable message that describes the error</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.OperationCanceledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an exception with the specified error message and an inner exception that caused this exception to be raised.
            </summary>
            <param name="message">A human readable message that describes the error</param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.OperationCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an exception from serialized data
            </summary>
            <param name="info">object holding the serialized data</param>
            <param name="context">context info about the source or destination</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.LoggingDBReportingNames">
            <summary>
            These constants are used in the logging database to record the web service that
            submitted each log record.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.EventLogSourceNames">
            <summary>
            These constants are the "source" used by each web service for Event Log entries.
            </summary>
            These constants are duplicated in the VssAzurePrep\EventSourceInstaller.cs.
            If you change values here, make sure to update that file as well.
        </member>
        <member name="T:Microsoft.TeamFoundation.TraceComponentNames">
            <summary>
            These mnemonics are included in the diagnostic trace output to identify the web service
            that is providing the trace output.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.WatsonReportingNames">
            <summary>
            These are the names used by the Team Foundation components. These names end up in
            the P2 parameter of the TeamFoundationUE event.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.RedirectCommands.Authenticate">
            <summary>
            The Authenticate Command is sent when the server requires the caller
            to authenticate to perform the requested action. Following the 
            command will be one or more providers the server supports. The
            client should choose one of the supported providers if the client
            can. It not the caller can't complete the request.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.RedirectCommands.CreateProfile">
            <summary>
            Profile Commands are sent when users authenticate against the server
            but the identity provider can't give us enough information to give
            a basic profile. TFS requires the caller to provide the basic 
            information and validate it.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.ArtifactTypeNames.Ref">
            <summary>
            A Git Ref
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.IdentityConstants.ActiveUniqueId">
            <summary>
             Special value for the unique user ID for active (non-deleted) users.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.IdentityConstants.SchemaClassGroup">
            <summary>
             Value of attribute that denotes whether user or group.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.IdentityConstants.GlobalScope">
            <summary>
            The Global scope, [SERVER], represents the highest group Scope ID in the given request context.
            For example, [SERVER] at a Deployment context would represent the deployment Scope ID. When
            using the global scope in a search, a search for [SERVER]\Team Foundation Administrators
            at the deployment level would return the deployment administrators group, while the same call
            at the Application host level would return the Account Administrators group. The search will
            not recurse down into sub-scopes. 
            
            [SERVER] is a deprecated concept, introduced before TFS 2010. We recommend using either the 
            collection name in square brackets (i.e. [DefaultCollection] or the scope ID in square brackets
            (i.e. [SCOPE_GUID]) instead. 
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.IdentityAttributeTags">
            <summary>
            Common attributes tags used in the collection of properties of TeamFoundationIdentity.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.TeamFoundation.CommonSqlError" -->
        <member name="T:Microsoft.TeamFoundation.SqlCommandTimeout">
            <summary>
            Predefined SQL command timeouts in seconds
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.StandardSqlError">
            <summary>
            The following SQL error numbers are recognized when part of a SqlException object.
            The error numbers represent either a potentially transient condition (mapped
            into a DatabaseConnection or DatabaseFull object) or a permanent condition (mapped
            into a DatabaseConfiguration object).
            </summary>
            <remarks>
            Sorted by error number for clarity.
            </remarks>
        </member>
        <member name="T:Microsoft.TeamFoundation.CollectionServicingTokens">
            <summary>
            Provides access to Team Project Collection servicing token names and values
            used when setting up or invoking a collection servicing method.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.ProxyConstants.DownloadUrlSuffix">
            URL suffix used to download items from the web service using pure HTTP protocol
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamConstants">
            <summary>
            Constants associated with 'Teams' in TFS.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.TeamPropertyName">
            <summary>
            Property on a group which indicates that it is a team.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.DefaultTeamPropertyName">
            <summary>
            Property on a project which indicates the team foundation id of the default team.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.TeamSettingsPropertyName">
            <summary>
            Property on a group which indicates that it is a team.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.TileZoneTileOrderPropertyName">
            <summary>
            Property on a group which indicates the tile order for a given tile zone.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.DefaultValueIndexPropertyName">
            <summary>
            Property name for the property that specifies the default value to use in the area path field since there can be more than one
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.DefaultIncludeChildrenValue">
            <summary>
            Default value for Include children for Team Area paths
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.TeamFieldSettingsPropertyName">
            <summary>
            Property name for the property which team field settings.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.TeamFieldDefaultValueIndexPropertyName">
            <summary>
            Property name for the property which contains the 'team field' default values.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.TeamFieldValuesPropertyName">
            <summary>
            Property name for the property which contains the 'team field' default values.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.TeamFieldValueFormat">
            <summary>
            Format string for setting the default team value for a team.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.BacklogIterationPropertyName">
            <summary>
            Property name for the Backlog iteration (set to the Guid of the iteration that holds the backlog)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.TeamIterationPropertyName">
            <summary>
            Property name for the collection of iteration paths that are associated with a team
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.TeamIterationIdPropertyNameFormat">
            <summary>
            Property name format for the collection of iteration paths that are associated with a team
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.TeamChartCachePropertyName">
            <summary>
            Property name for cached chart data associated with Team Identity.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.WIPLimitsPropertyName">
            <summary>
            Property name for Work In Progress Limit data for a teams backlog board
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.CumulativeFlowDiagramStartDate">
            <summary>
            Property name for Cumulative Flow Diagram start date
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamConstants.CumulativeFlowDiagramHideIncoming">
            <summary>
            Property name for Cumulative Flow Diagram hide incoming flag
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.NotificationConstants">
            <summary>
            Constant strings used in Notifications
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.MyProjectNameMacro">
            <summary>
            Macro used in subscriptions which will be replaced by the project name when evaluated
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.MyDisplayNameMacro">
            <summary>
            Macro used in subscriptions which will be replaced by the subscriber's Display Name when evaluated
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.MyUniqueNameMacro">
            <summary>
            Macro used in subscriptions which will be replaced by the subscriber's Unique User Name when evaluated
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.CustomNotificationAddressesIdentityProperty">
            <summary>
            TeamFoundationIdentity property name for a user's custom list of Email addresses to receive notifications at
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.ConfirmedNotificationAddressIdentityProperty">
            <summary>
            TeamFoundationIdentity propery name for a user's confirmed Email address to receive notifications.  This is used in Hosted environments only.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.WorkItemChangedEventTypeName">
            <summary>
            The name of the WorkItemChangedEvent
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.BuildStatusChangeEventName">
            <summary>
            The name of the BuildStatusChangedEvent type
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.BuildCompletedEventName">
            <summary>
            The name of the BuildCompletedEvent type
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.CheckinEventName">
            <summary>
            The name of the CheckinEvent type
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.CodeReviewChangedEventName">
            <summary>
            The name of the CodeReviewChangedEvent type
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.GitPushEventName">
            <summary>
            The name of the GitPushEvent type
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.GitPullRequestEventName">
            <summary>
            The name of the GitPullRequestEvent type
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.AlertsPageRelativePath">
            <summary>
            The relative path to the alerts admin web page
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.AlertsPage">
            <summary>
            The alerts page name
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.AlertsAdminPage">
            <summary>
            The admin alerts page
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.EmailConfirmationSendDates">
            <summary>
            Property used to keep track of how many confirmations were sent for this user.  Used to limit the number
            of confirmations a single user is allowed to send out for their account.
            The value is updated and monitored by the SendEmailConfirmationJob.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.ProcessedFlagCharacter">
            <summary>
            Prefix to denote that identity field value have been processed
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.ProcessedTfIdFlagCharacter">
            <summary>
            Prefix to denote that identity field value have been processed and converted to TFID
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.DisplayNameFlagCharacter">
            <summary>
            Prefix to denote that this is the start of displayname value for this identity field
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.TfIdFlagCharacter">
            <summary>
            Prefix to denote that this is the start of TFID value for this identity field
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.AllowUserRegexInMatchConditionFeatureFlag">
            <summary>
            Optional Feature flag to enable escaping Regex expressions when creating Notification subscriptions.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.NotificationConstants.RegexMatchTimeout">
            <summary>
            Regex Match timeout, 30 seconds by default
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.DragDropConstants">
            <summary>
            Constant strings used in drag drop
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.CodeReviewContextKeyNames">
            <summary>
            Constants used for saving/restoring the code review context in the Team Explorer
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamFoundationServerException">
            <summary>
            Base class for all custom exceptions thrown from TeamFoundation code.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerException.#ctor">
            <summary>
            No-arg constructor that sumply defers to the base class.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerException.#ctor(System.String)">
            <summary>
            Initializes an exception with the specified error message.
            </summary>
            <param name="message">A human readable message that describes the error</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an exception with the specified error message and an inner exception that caused this exception to be raised.
            </summary>
            <param name="message">A human readable message that describes the error</param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an exception from serialized data
            </summary>
            <param name="info">object holding the serialized data</param>
            <param name="context">context info about the source or destination</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationServerException.IsRemoteException">
            <summary>
            Returns true if the exception was thrown by the server and received by the client.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerException.GetProperty``1(System.String)">
            <summary>
            Retrieves a property from the list of properties returned from the server if it exists. If no such property
            exists then a default value is returned for the requested type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationServerException.Data">
            <summary>
            Gets the data associated with this exception, if any.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.CredentialProcurement.Failed">
            <summary>
            Failed to refresh or acquire new credentials.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.CredentialProcurement.Succeeded">
            <summary>
            Successfully refreshed or acquired new credentials.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.CredentialProcurement.Cancelled">
            <summary>
            The refresh or acquire operation was cancelled.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamFoundationAuthenticationError">
            <summary>
            Specifies the errors which may occur during authentication.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamFoundationAuthenticationError.None">
            <summary>
            No authentication-related error occurred.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamFoundationAuthenticationError.Cancelled">
            <summary>
            The authentication attempt was cancelled.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamFoundationAuthenticationError.GetTokenFailed">
            <summary>
            The authentication attempt encountered an error. See the inner exception for more details.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamFoundationAuthenticationError.InteractiveRequired">
            <summary>
            An interactive environment is required for the credentials to be authenticated.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamFoundationAuthenticationError.TokenUnauthorized">
            <summary>
            The token retrieved from the provider is not able to authenticate with the remote server.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamFoundationAuthenticationError.UserMismatched">
            <summary>
            The authenticated user is not the user currently associated with the connection.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamFoundationServerUnauthorizedException">
            <summary>
            This exception is thrown when the user is rejected by the web server (IIS rejects the
            request because the user isn't authorized to access the specified site/service).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerUnauthorizedException.#ctor">
            <summary>
            No-arg constructor that simply defers to the base class.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerUnauthorizedException.#ctor(System.String)">
            <summary>
            Initializes an exception with the specified server name or URL.
            </summary>
            <param name="nameOrUrl">The server name or URL</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerUnauthorizedException.#ctor(System.Exception)">
            <summary>
            Initializes an exception with the message from the inner exception and an inner exception that caused this exception to be raised.
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerUnauthorizedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an exception with the specified server name or URL and an inner exception that caused this exception to be raised.
            </summary>
            <param name="nameOrUrl">The server name or URL</param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerUnauthorizedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an exception from serialized data
            </summary>
            <param name="info">object holding the serialized data</param>
            <param name="context">context info about the source or destination</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationServerUnauthorizedException.AuthenticationError">
            <summary>
            Gets a value indicating details about the particular error encountered.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationServerUnauthorizedException.WebException">
            <summary>
            Gets the web exception which triggered this exception, or null if not available.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationServerUnauthorizedException.WebResponse">
            <summary>
            Gets the web response which triggered this exception, or null if not available.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamFoundationInvalidAuthenticationException">
            <summary>
            Indicates that the authentication with the remote server cannot be fulfilled.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationInvalidAuthenticationException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationInvalidAuthenticationException.#ctor(System.String,Microsoft.TeamFoundation.TeamFoundationAuthenticationError)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="error"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationInvalidAuthenticationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an exception from serialized data
            </summary>
            <param name="info">object holding the serialized data</param>
            <param name="context">context info about the source or destination</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamFoundationServerVersionCheckException">
            <summary>
            This exception is thrown when the user is rejected by the web server (IIS rejects the
            request because the user isn't authorized to access the specified site/service).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerVersionCheckException.#ctor(System.String)">
            <summary>
            Initializes an exception with the specified server name or URL.
            </summary>
            <param name="nameOrUrl">The server name or URL</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerVersionCheckException.#ctor(System.String,System.String)">
            <summary>
            Initializes an exception with the specified server name or URL as well as the accepted range of versions.
            </summary>
            <param name="nameOrUrl">The server name of URL</param>
            <param name="range">The range of server version</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerVersionCheckException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an exception from serialized data
            </summary>
            <param name="info">object holding the serialized data</param>
            <param name="context">context info about the source or destination</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamFoundationInvalidServerNameException">
            <summary>
            This exception is thrown when the server name passed in to the client is invalid.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationInvalidServerNameException.#ctor(System.String)">
            <summary>
            Initializes an exception with the specified server name or URL.
            </summary>
            <param name="nameOrUrl">The server name or URL</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationInvalidServerNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an exception from serialized data
            </summary>
            <param name="info">object holding the serialized data</param>
            <param name="context">context info about the source or destination</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamFoundationServiceUnavailableException">
            <summary>
            This exception is thrown when the server name passed in to the client is invalid.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServiceUnavailableException.#ctor(System.String,System.String)">
            <summary>
            Initializes an exception with the specified server name or URL.
            </summary>
            <param name="nameOrUrl">The server name or URL</param>
            <param name="reason">The server-provided reason why servicing isn't possible</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServiceUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an exception with the specified message and inner exception.
            </summary>
            <param name="message">The error message to provide for the exception</param>
            <param name="innerException">The original exception which caused this exception</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServiceUnavailableException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes an exception with the specified server name or URL and the specified
            inner exception.
            </summary>
            <param name="nameOrUrl">The server name or URL</param>
            <param name="reason">The server-provided reason why servicing isn't possible</param>
            <param name="innerException">The original exception which caused this exception</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServiceUnavailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an exception from serialized data
            </summary>
            <param name="info">object holding the serialized data</param>
            <param name="context">context info about the source or destination</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServiceUnavailableException.#ctor(System.String)">
            <summary>
            Initializes an exception with the specified server name or URL.
            </summary>
            <param name="reason">The server-provided reason why servicing isn't possible</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.DatetimeShiftDetectedException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamFoundationServerInvalidResponseException">
            <summary>
            This exception is thrown when HTML is returned from a SOAP call.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerInvalidResponseException.#ctor(System.String,System.Exception,System.Net.HttpStatusCode,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Message.  To get the default message, use the results of calling FormatInvalidServerResponseMessage.</param>
            <param name="innerException">Inner Exception.  Pass null if none.</param>
            <param name="statusCode">HttpWebResponse.StatusCode</param>
            <param name="responseData">String representing the response data.  Use the GetResponseString to assist with this.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerInvalidResponseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerInvalidResponseException.FormatInvalidServerResponseMessage(System.Net.HttpWebResponse)">
            <summary>
            Formats the HttpWebResponse into a string suitable for throwing in an exception.
            </summary>
            <param name="response">The response object</param>
            <returns>A string suitable for throwing in an exception</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerInvalidResponseException.FormatHttpStatus(System.Net.HttpWebResponse)">
            <summary>
            Formats the HttpStatusCode into a string suitable for throwing in an exception.
            </summary>
            <param name="response">The response object</param>
            <returns>A string suitable for throwing in an exception</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationServerInvalidResponseException.GetResponseString(System.IO.Stream)">
            <summary>
            Gets the response stream as a string.
            If the stream is a TracingStream, it'll get logged.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamFoundationServerInvalidRequestException">
            <summary>
            Thrown when the server returns a 400 (Bad Request) status code.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamFoundationClientVersionCheckException">
            <summary>
            This exception is thrown when the server version is not supported by the client
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationClientVersionCheckException.#ctor(System.String)">
            <summary>
            Initializes an exception with the specified server name or URL.
            </summary>
            <param name="nameOrUrl">The server name or URL</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationClientVersionCheckException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an exception from serialized data
            </summary>
            <param name="info">object holding the serialized data</param>
            <param name="context">context info about the source or destination</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamFoundationExceptionFormatter">
            <summary>
            Team Foundation exception format class
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationExceptionFormatter.FormatException(System.Exception,System.Boolean)">
            <summary>
             Format a exception, including all inner exceptions.
            </summary>
            <param name="e">The top-level exception.</param>
            <param name="UseBriefFormat">Omit exception details from return value</param>
            <returns>A formatted exception string that includes nested exceptions.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationExceptionFormatter.formatOneException(System.Exception,System.Boolean)">
            <summary>
             Format a single exception.
            </summary>
            <param name="exception">The exception</param>
            <param name="useBriefFormat">Omit exception details</param>
            <returns>A formatted exception string.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationExceptionFormatter.formatSqlErrors(System.Data.SqlClient.SqlException)">
            <summary>
            Format a SqlError collection
            </summary>
            <param name="exception">SQL Exception to format the error collection of.</param>
            <returns>String form of the SQLError collection.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationExceptionFormatter.formatDataDictionary(System.Exception)">
            <summary>
            Format an exception's Data dictionary.
            </summary>
            <param name="exception">Exception to format the .Data dictionary.</param>
            <returns>String form of the .Data dictioanry.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.InvalidPathException">
            <summary>
            INTERNAL Exception thrown when something is wrong with the syntax of a path.  It derives
            from ArgumentException to match the exception used by System.IO.Path.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamFoundationTextWriterTraceListener">
            <summary>
            Summary description for TeamFoundationTextWriterTraceListener.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTextWriterTraceListener.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTextWriterTraceListener.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTextWriterTraceListener.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTextWriterTraceListener.InitializeFile(System.String)">
            <summary>
            Initialize and open the specified file.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTextWriterTraceListener.WriteInternal(System.String,System.Boolean)">
            <summary>
            Write the message, prefixing with a header on a new line if one is not detected.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationTextWriterTraceListener.TraceFileDirectoryName">
            <summary>
            Get/set the static trace file directory name.  If no filename is specified,
            trace logs are written to this directory.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationTextWriterTraceListener.TraceFileName">
            <summary>
            Get the current filename.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTextWriterTraceListener.Fail(System.String,System.String)">
            <summary>
            Log assertion failures.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamFoundationVersion">
            <summary>
            Helper class for checking if the versions of client and application are compatible.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.TeamFoundationVersion.MinimumTeamFoundationVersion">
            <summary>
            These two constants represent the interval of valid versions. <see cref="F:Microsoft.TeamFoundation.TeamFoundationVersion.CurrentTeamFoundationVersion"/> is
            the current version of both server and client and is used as the highest version allowed while 
            <see cref="F:Microsoft.TeamFoundation.TeamFoundationVersion.MinimumTeamFoundationVersion"/> is the lowest version.
            
            Whenever the interface of the services changes the <see cref="F:Microsoft.TeamFoundation.TeamFoundationVersion.CurrentTeamFoundationVersion"/> version is to 
            be updated. If the changes causes older versions to fail, the <see cref="F:Microsoft.TeamFoundation.TeamFoundationVersion.MinimumTeamFoundationVersion"/> 
            version is updated as well.
            
            Versions are to be specified using "major.minor[.build[.revision]]". If build and/or revision are omitted they
            are initialized with 0 (zero) instead of the default -1.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationVersion.#cctor">
            <summary>
            Initialize static versions
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationVersion.MinimumContractVersion">
            <summary>
            Get the lowest supported version.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationVersion.CurrentContractVersion">
            <summary>
            Get the current version.
            </summary>
            <remarks>
            <see cref="T:System.Version"/> is the highest allowed version while <see cref="P:Microsoft.TeamFoundation.TeamFoundationVersion.MinimumContractVersion"/> is the lowest.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationVersion.Validate(System.String)">
            <summary>
            Validate the version.
            </summary>
            <param name="version">Must be in the form "major.minor[.build[.revision]]"</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationVersion.Validate(System.Version)">
            <summary>
            Validate the version.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationVersion.ContractVersionRange">
            <summary>
            Get the range specified by the minimum and current versions.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.TraceKeywords">
             <summary>
             Common trace keywords that may be used across teams.  Feel free to add additional
             keywords that will be useful to all teams.  Team-specific feature keywords should
             be kept within the team's own code area.
             </summary>
             <remarks>
             Trace keywords provide a mechanism to compartmentalize the trace messages to
             functional areas.  The keywords are provided as a string array, and can be
             any string with which the caller wants to tag the trace output.
            
             Each keyword corresponds to a TraceSwitch object, which can be set via the
             app config file (exe.config, web.config) or at runtime.  As an optimization,
             the TraceSettings class keeps track if any trace switches are enabled and
             exposes a boolean (IsTracingEnabled) that can be quickly checked to see
             if trace output should be attempted.
            
             Each TraceSwitch has a TraceLevel that is one of the following values:
            
                 Off: No output
                 Error: Errors that occur in your code.
                    E.g., you have an exception filter and wish to trace the exception.
                    Note: you should be sending information about these to the event log as errors.
                 Warning: Conditions noticed by your application that are problematic but may
                   be transient and/or self-correcting. Note: these should probably be sent to
                   the event log as warnings also.
                 Info: Informative messages, concise and brief.
                 Verbose: Other information; no limits on how much information is provided here.
             </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.TraceKeywords.BuildKeyword(System.String[])">
             <summary>
             Build a formatted keyword from the keyword fragments.  Having all callers build
             their keywords with this method promotes consistency and ease of tweaking the
             keyword format.
             
             FUTURE: To avoid collisions with other products, the convention may be changed to
             a format like this:
            
                 TFS.KeywordFragment1[.KeywordFragment2...]
            
             This function will provide the TFS prefix and append all other provided fragments.
             </summary>
             <param name="keywordFragments">One or more keyword fragments used to build the full keyword</param>
             <returns>Formatted keyword</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.TraceKeywordSets">
            <summary>
            Set of common trace keyword arrays.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.TraceType">
            <summary>
            This class is used for back-compat with code that was previously using the TraceType
            enum.  This will be replaced in the future, once all uses of TraceType have been
            replaced with keywords.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamFoundationTraceSettings">
            <summary>
            TeamFoundation trace settings class.
            
            This class manages:
            
                - Trace keywords used with the .NET tracing system
                - TextFileTraceListener used to log trace output to file
                - Event provider used to send events to ETW logging sessions
            </summary>
            <remarks>
            Keywords are currently only supported for .NET tracing.  To set specific keyword
            tracing levels, one of the approaches to change the keywords must be used.  These
            include modifying the app config file, using the tftrace.ashx web page, changing
            the tracing keywords via commands in the client app (DTE, UI), etc.
            
            When an ETW logging session connects to our event provider, tracing will be automatically
            enabled.  The ETW trace level is mapped to our override level.  In other words, if
            an ETW session is logging errors, we enable all tracing for errors, regardless of keyword.
            Keywords are not currently supported for ETW because each event has a keyword bit set
            with only 48 slots available.  This is not as flexible as our dynamic string keywords and
            we cannot easily map between the two.
            
            An ETW logging session can be managed with these commands:
            
                (replace LEVEL_NUM with a # where 0=Any, 1=Critical, 2=Error, 3=Warning, 4=Info, 5=Verbose)
            
                logman start mysession -p {78EB1F5E-D85E-4FFF-AF60-8F3B4051E50D} 0 LEVEL_NUM -o C:\TFTraceOutput.etl -ets
                logman stop mysession -ets
            
            This will give you TFTraceOutput.etl binary output file, which can be converted to XML:
            
                tracerpt TFTraceOutput.etl
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTraceSettings.#ctor">
            <summary>
            Constructor.
            </summary>
            <remarks>
            Trace switches are obtained from the application's configuration settings
            (which may be in a database or web.config file).
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTraceSettings.Finalize">
            <summary>
            Release the ETW event provider.  This is done in the finalizer since this is a static
            class instance that is never cleaned up until app shutdown.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationTraceSettings.IsTracingEnabled">
            <summary>
            Master switch that enables or disables tracing.  This switch is used
            as a global switch that is checked to see if tracing is enabled before
            doing keyword lookup for specific switches.  This is a perf optimization
            for the case where no tracing is enabled.
            </summary>
            <remarks>
            NOTE: The getter for this property is intentionally not surrounded by a
            read lock for performance reasons.  The read of the boolean should be an
            atomic operation.  The setter is only called from within code that has
            already obtained a write lock.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTraceSettings.IsOverrideEnabled(System.Diagnostics.TraceLevel)">
            <summary>
            Check to see if the override is enabled for the specified trace level.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationTraceSettings.OverrideLevel">
            <summary>
            Global trace switch to set a tracing level for all keywords.  This allows the caller
            to easily turn on all tracing at the specified TraceLevel.
            </summary>
            <remarks>
            NOTE: The getter for this property is intentionally not surrounded by a
            read lock for performance reasons.  The read of the integer should be an
            atomic operation.
            
            NOTE: ETW uses bitflags for keywords, so they cannot be mapped directly
                  to our unlimited dynamic string keywords.  Therefore, ETW session
                  trace levels are currently only mapped to the override level, and
                  keywords are not checked.
            </remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationTraceSettings.Item(System.String)">
            <summary>
            Get/set the trace level for the specified keyword.
            
            NOTE: ETW uses bitflags for keywords, so they cannot be mapped directly
                  to our unlimited dynamic string keywords.  Therefore, ETW session
                  trace levels are currently only mapped to the override level, and
                  keywords are not checked.
            </summary>
            <param name="keyword">Keyword</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTraceSettings.OriginalTraceLevel(System.String)">
            <summary>
            Returns the TraceLevel for the given keyword that was set in the config file
            </summary>
            <param name="keyword">the keyword to look up</param>
            <returns>The trace level or Off if not found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTraceSettings.GetEnabledKeywords">
            <summary>
            Get a list of the enabled keywords and their trace levels.  Keywords that are disabled
            are not included since they are usually not kept in the internal dictionary.
            </summary>
            <returns>SortedDictionary of keyword to trace level.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTraceSettings.GetTraceSwitch(System.String,System.Boolean)">
            <summary>
            Get the trace switch for the specified keyword.
            
            IMPORTANT: This method accesses the dictionary but does not do any locking.
            This is intentional since it returns a TraceSwitch from the dictionary that
            may be modified afterward.  The caller must wrap the GetTraceSwitch call and
            any use of the returned TraceSwitch with the appropriate locking using
            m_switchLock.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTraceSettings.GetTraceSwitchesFromConfiguration">
            <summary>
            Get the trace switches that exist in the config file (.exe.config, web.config, etc).
            </summary>
            <returns>List of trace switch names found in the configuration</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTraceSettings.UpdateTracingEnabledFlag">
            <summary>
            Update the global tracing enabled switch based on the values of the existing trace
            switches.
            
            IMPORTANT: This method accesses the dictionary but does not do any locking.
            This is intentional since it is always called just after a block of code that
            has already obtained a write lock.  The caller should call this while still
            inside the write lock.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationTraceSettings.MillisecondsElapsed">
            <summary>
            Get the milliseconds that have elapsed since this class was created.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTraceSettings.InitializeTraceWriter">
            <summary>
            Initialize the trace writer (if configured).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTraceSettings.EnableLogging(System.String)">
            <summary>
            Enable trace logging to the specified path.
            </summary>
            <param name="path">Filename for the log file.  Pass null to be given
            a default filename (likely in the %TEMP% dir).</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTraceSettings.DisableLogging">
            <summary>
            Disable trace logging.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationTraceSettings.IsLogging">
            <summary>
            Returns true if trace logging is active.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationTraceSettings.LogFileName">
            <summary>
            Returns the log filename if trace logging is active.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationTraceSettings.EventProviderSupported">
            <summary>
            Get the flag denoting whether our ETW EventProvider is supported on this platform.  This
            class is only supported on Vista/2008 or higher.
            </summary>   
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationTraceSettings.IsEventProviderSessionActive">
            <summary>
            Check to see if any ETW session is active for our event provider.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationTraceSettings.EventProvider">
            <summary>
            Get the ETW event provider.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTraceSettings.CreateEventProvider">
            <summary>
            Create our ETW event provider.  This is only supported on Vista/2008 or higher.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTraceSettings.ConvertLevelToETW(System.Diagnostics.TraceLevel)">
            <summary>
            Convert the .NET TraceLevel to an ETW event level.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.ITeamFoundationTraceable">
            <summary>
            Interface for customizing TeamFoundationTrace output.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.ITeamFoundationTraceable.GetTraceString(System.Diagnostics.TraceLevel)">
            <summary>
            Get the string representation of this object for trace output.  The trace
            level should be taken into consideration when building the string.
            </summary>
            <param name="traceLevel">Trace level</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamFoundationTrace">
            <summary>
            Team Foundation tracing.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationTrace.IsTracingEnabled">
            <summary>
            Check to see if tracing is enabled.  For efficiency, this method can be
            called before any other trace methods that would do more work (keyword
            lookup, etc).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.IsTracing(System.String)">
            <summary>
            Check to see if tracing is enabled for any of the specified keywords.
            </summary>
            <param name="keyword">Keyword</param>
            <returns>True if tracing is enabled for any of the keywords</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.IsTracing(System.String[])">
            <summary>
            Check to see if tracing is enabled for any of the specified keywords.
            </summary>
            <param name="keywords">One or more keywords</param>
            <returns>True if tracing is enabled for any of the keywords</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.IsTracing(System.String,System.Diagnostics.TraceLevel)">
            <summary>
            Check to see if tracing is enabled at the specified level for any of the keywords.
            </summary>
            <param name="keyword">One or more keywords</param>
            <param name="traceLevel">Trace level</param>
            <returns>True if tracing is enable for any of the keywords at the trace level</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.IsTracing(System.String[],System.Diagnostics.TraceLevel)">
            <summary>
            Check to see if tracing is enabled at the specified level for any of the keywords.
            </summary>
            <param name="keywords">One or more keywords</param>
            <param name="traceLevel">Trace level</param>
            <returns>True if tracing is enable for any of the keywords at the trace level</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationTrace.IsLogging">
            <summary>
            Returns true if trace logging is active.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationTrace.LogFileName">
            <summary>
            Returns the log filename if trace logging is active.  If not
            active, this returns null.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.EnableLogging(System.String)">
            <summary>
            Enable trace logging.
            </summary>
            <param name="path">Filename for the log file.  Pass null to be given
            a default filename (likely in the %TEMP% dir).</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.DisableLogging">
            <summary>
            Disable trace logging.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.TraceAndDebugFailException(System.Exception)">
            <summary>
            Write an exception to the trace output and Debug.Fail with the exception message
            </summary>
            <param name="exception">The exception to be traced.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.TraceAndDebugFailException(System.String[],System.Exception)">
            <summary>
            Write an exception to the trace output and Debug.Fail with the exception message
            </summary>
            <param name="keywords">One or more keywords</param>
            <param name="exception">The exception to be traced.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.TraceException(System.Exception)">
            <summary>Write an exception to the trace output</summary>
            <remarks> See overload </remarks>
            <param name="exception">The exception to be traced.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.TraceException(System.String[],System.Exception)">
            <summary>
             Write an exception to the trace category output.
            </summary>
            <param name="keywords">One or more keywords</param>
            <param name="exception">The exception to be traced.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.TraceException(System.String,System.String,System.Exception)">
            <summary>Write an exception to the trace output</summary>
            <remarks>The exception is traced using the General keyword, trace level Error</remarks>
            <param name="message">An application defined message (may be null)</param>
            <param name="method">An application defined method (may be null)</param>
            <param name="exception">The exception that should be traced</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.TraceException(System.String[],System.String,System.Exception)">
            <summary>Write an exception to the trace output</summary>
            <remarks>The exception is traced using the General keyword, trace level Error</remarks>
            <param name="keywords">One or more keywords</param>
            <param name="method">An application defined method (may be null)</param>
            <param name="exception">The exception that should be traced</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.TraceCallStack(System.String[])">
            <summary>
            TrackStack is used to output the current call stack.
            </summary>
            <param name="keywords">One or more keywords</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.ErrorIf(System.Boolean,System.String)">
            <summary>Conditionally write a message to the trace output</summary>
            <remarks>Uses General keyword, level Error</remarks>
            <param name="condition">Condition, which if true, causes the message to be traced</param>
            <param name="info">The text message</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.ErrorIf(System.Boolean,System.String,System.Object[])">
            <summary>Conditionally write a message to the trace output</summary>
            <remarks>Uses General keyword, level Error</remarks>
            <param name="condition">Condition, which if true, causes the message to be traced</param>
            <param name="format">The string format to which args is applied</param>
            <param name="args">One or more aguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Error(System.String)">
            <summary>Write a message to the trace output</summary>
            <remarks>Uses General keyword, level Error</remarks>
            <param name="info">The message to write</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Error(System.String[],System.String)">
            <summary>Trace a message if the error level is set for the category</summary>
            <param name="keywords">One or more keywords</param>
            <param name="info">The message to write.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Error(System.String,System.Object[])">
            <summary>Write a message to the trace output</summary>
            <remarks>Uses General keyword, level Error</remarks>
            <param name="format">The string format to which args is applied</param>
            <param name="args">One or more aguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Error(System.String[],System.String,System.Object[])">
            <summary>Write a message to the trace output using the specified category</summary>
            <param name="keywords">One or more keywords</param>
            <param name="format">The string format to which args is applied</param>
            <param name="args">One or more aguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Error(System.String,System.Exception)">
            <summary>Write an exception to the trace output</summary>
            <remarks>Uses General keyword, level Error</remarks>
            <param name="info">The message giving exception context</param>
            <param name="exception">The exception to write</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Error(System.String[],System.Exception)">
            <summary>Write an exception to the trace output</summary>
            <remarks>Uses General keyword, level Error</remarks>
            <param name="keywords">One or more keywords</param>
            <param name="exception">The exception to write</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Error(System.String[],System.String,System.String,System.Exception)">
            <summary>
            Write an exception, info, and method to the trace output
            </summary>
            <param name="keywords">One or more keywords</param>
            <param name="info">Application defined information (may be null)</param>
            <param name="method">Application defined method (may be null)</param>
            <param name="exception">The exception to write</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.WarningIf(System.Boolean,System.String)">
            <summary>Conditionally write a message to the trace output</summary>
            <remarks>Uses General keyword, level Warning</remarks>
            <param name="condition">Condition, which if true, causes the message to be traced</param>
            <param name="info">The text message</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Warning(System.String)">
            <summary>Write a message to the trace output</summary>
            <remarks>Uses General keyword, level Warning</remarks>
            <param name="info">The message to write</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Warning(System.String,System.Object[])">
            <summary>Write a message to the trace output</summary>
            <remarks>Uses General keyword, level Warning</remarks>
            <param name="format">The string format to which args is applied</param>
            <param name="args">One or more aguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.WarningIf(System.Boolean,System.String,System.Object[])">
            <summary>Conditionally write a message to the trace output</summary>
            <remarks>Uses General keyword, level Warning</remarks>
            <param name="condition">Condition, which if true, causes the message to be traced</param>
            <param name="format">The string format to which args is applied</param>
            <param name="args">One or more aguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Warning(System.String[],System.String,System.Object[])">
            <summary>Write a message to the trace output</summary>
            <param name="keywords">One or more keywords</param>
            <param name="format">The string format to which args is applied</param>
            <param name="args">One or more aguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Warning(System.String[],System.String)">
            <summary>Trace a message if the warning level is set for the keyword</summary>
            <param name="keywords">One or more keywords</param>
            <param name="info">The message to write.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.InfoIf(System.Boolean,System.String)">
            <summary>Conditionally write a message to the trace output</summary>
            <remarks>Uses General keyword, level Info</remarks>
            <param name="condition">Condition, which if true, causes the message to be traced</param>
            <param name="info">The text message</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Info(System.String,System.Object[])">
            <summary>Write a message to the trace output</summary>
            <remarks>Uses General keyword, level Info</remarks>
            <param name="format">The string format to which args is applied</param>
            <param name="args">One or more aguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.InfoIf(System.Boolean,System.String,System.Object[])">
            <summary>Conditionally write a message to the trace output</summary>
            <remarks>Uses General keyword, level Info</remarks>
            <param name="condition">Condition, which if true, causes the message to be traced</param>
            <param name="format">The string format to which args is applied</param>
            <param name="args">One or more aguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Info(System.String)">
            <summary>Write a message to the trace output</summary>
            <remarks>Uses General keyword, level Info</remarks>
            <param name="information">The message to write</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Info(System.String[],System.String,System.Object[])">
            <summary>Write a message to the trace output</summary>
            <param name="keywords">One or more keywords</param>
            <param name="format">The string format to which args is applied</param>
            <param name="args">One or more aguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Info(System.String[],System.String)">
            <summary>Trace a message if the info level is set for the keywords</summary>
            <param name="keywords">One or more keywords</param>
            <param name="information">The message to write.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Verbose(System.String)">
            <summary>Write a message to the trace output</summary>
            <remarks>Uses General keyword, level Verbose</remarks>
            <param name="info">The message to write</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.VerboseIf(System.Boolean,System.String)">
            <summary>Conditionally write a message to the trace output</summary>
            <remarks>Uses General keyword, level Verbose</remarks>
            <param name="condition">Condition, which if true, causes the message to be traced</param>
            <param name="info">The text message</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.VerboseIf(System.Boolean,System.String,System.Object[])">
            <summary>Conditionally write a message to the trace output</summary>
            <remarks>Uses General keyword, level Verbose</remarks>
            <param name="condition">Condition, which if true, causes the message to be traced</param>
            <param name="format">The string format to which args is applied</param>
            <param name="args">One or more aguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Verbose(System.String,System.Object[])">
            <summary>Write a message to the trace output</summary>
            <remarks>Uses General keyword, level Verbose</remarks>
            <param name="format">The string format to which args is applied</param>
            <param name="args">One or more aguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Verbose(System.String[],System.String,System.Object[])">
            <summary>Write a message to the trace output</summary>
            <param name="keywords">One or more keywords</param>
            <param name="format">The string format to which args is applied</param>
            <param name="args">One or more aguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Verbose(System.String[],System.String)">
            <summary>Trace a message if the verbose level is set for the keywords</summary>
            <param name="keywords">One or more keywords</param>
            <param name="info">The message to write.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.WriteLine(System.String[],System.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
            Write a formatted message to the output.  The args will be inspected and certain types
            will be handled specially.
            
                ITeamFoundationTraceable - Call GetTraceString to get trace representation.
            
                ICollection - If any ICollections are found, their contents are written out one
                              item per line.  This avoids building a string representation for the
                              entire collection in memory.
            </summary>
            <param name="keywords">One or more keywords</param>
            <param name="level">Trace level</param>
            <param name="format">Format string</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.WriteLine(System.String[],System.Diagnostics.TraceLevel,System.String)">
            <summary>Write a message to the trace output</summary>
            <param name="keywords">One or more keywords</param>
            <param name="level">The trace level governing the message output</param>
            <param name="info">The message to write</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.WriteLine(System.Text.StringBuilder,System.Diagnostics.TraceLevel)">
            <summary>Write a message to the trace output</summary>
            <param name="formattedInfo">Formatted string</param>
            <param name="level">The trace level governing the message output</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.GetStringBuilder(System.String[],System.Diagnostics.TraceLevel)">
            <summary>
            Get a StringBuilder that already contains the trace header.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Enter(System.String)">
            <summary>
            See overload
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Enter(System.String[],System.String)">
            <summary>
            See overload
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Enter(System.String[],System.Diagnostics.TraceLevel,System.String)">
            <summary>
            Start a nested trace block; the block is completed using Exit()
            </summary>
            <param name="keywords">One or more keywords</param>
            <param name="level">The trace level required to write the message</param>
            <param name="info">The message to write</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.SafeEnter(System.String[],System.Diagnostics.TraceLevel,System.String)">
            <summary>
            Start a nested trace block; the block is completed using Exit().
            Returns a "trace token" value that should be passed to SafeExit() to ensure correct 
            elapsed times if caller avoids overhead by not enclosing Exit() in finally blocks.
            </summary>
            <param name="keywords">One or more keywords</param>
            <param name="level">The trace level required to write the message</param>
            <param name="info">The message to write</param>
            <returns>"Trace token" value that should be passed to SafeExit()</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Exit(System.String)">
            <summary>
             See overload.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Exit(System.String[],System.String)">
            <summary>
             See overload.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.Exit(System.String[],System.Diagnostics.TraceLevel,System.String)">
            <summary>
             Complete a nested trace block created by Enter()
            </summary>
            <param name="keywords">One or more keywords</param>
            <param name="level">The trace level required to write the message</param>
            <param name="info">The message to write</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.SafeExit(System.Int32,System.String[],System.Diagnostics.TraceLevel,System.String)">
            <summary>
             Complete a nested trace block created by SafeEnter()
            </summary>
            <param name="traceToken">Value returned from matching call to SafeEnter()</param>
            <param name="keywords">One or more keywords</param>
            <param name="level">The trace level required to write the message</param>
            <param name="info">The message to write</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.MethodEntry(System.Object[])">
            <summary>See overload</summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.MethodEntry(System.Int32,System.Object[])">
             <summary>Trace entry into a method, including the method's signature</summary>
             <remarks>
             The API traceswitch setting determines whether any trace output appears
             This method is only available in DEBUG builds.
            
             The 'depth' parameter is useful when a utility function is invoking this function
             and the actual method of interest is "above" the utility function.
             </remarks>
             <param name="depth">Indicates how many frames "up" the stack the method signature of interest is.</param>
             <param name="parameters">The parameter(s), if any, associated with the method</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.MethodExit">
            <summary>See overload</summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.MethodExit(System.Int32)">
            <summary>Trace method exit, including the method's signature</summary>
            <remarks>
            The API traceswitch setting determines whether any trace output appears
            This method is only available in DEBUG builds.
            </remarks>
            <param name="depth">Indicates how many frames "up" the stack the method signature of interest is.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.ReportErrorCondition(System.String[],System.String,System.String,System.Exception)">
            <summary>
            Trace an exception and a message.
            </summary>
            <param name="keywords">One or more keywords</param>
            <param name="info">Message</param>
            <param name="method">Method name</param>
            <param name="e">Exception</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationTrace.TraceSettings">
            <summary>
            Return the TraceSettings configured. The trace settings are a collection
            of trace switches.  These are contained in a separate class so they can be
            lazily instantiated on first use.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.TeamFoundationTrace.TeamFoundationTraceFormatter">
            <summary>
            TeamFoundationTrace formatter class.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.TeamFoundationTraceFormatter.Create(System.Diagnostics.TraceLevel)">
            <summary>
            Create a trace formatter for the specified trace level.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.TeamFoundationTraceFormatter.CreateFormatters">
            <summary>
            Create a formatter for each trace level.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.TeamFoundationTraceFormatter.#ctor(System.Diagnostics.TraceLevel)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.TeamFoundationTrace.TeamFoundationTraceFormatter.TraceLevel">
            <summary>
            Get the trace level for this formatter.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.TeamFoundationTraceFormatter.GetFormat(System.Type)">
            <summary>
            Get the format provider for the specified type.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.TeamFoundationTrace.TeamFoundationTraceFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Format the argument.
            </summary>
        </member>
    </members>
</doc>
