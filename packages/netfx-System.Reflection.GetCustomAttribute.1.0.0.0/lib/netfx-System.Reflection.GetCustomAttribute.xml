<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Source</name>
    </assembly>
    <members>
        <member name="T:GetCustomAttributeExtension">
            <summary>
            Allows retrieving custom attributes from assemblies, types, methods, properties, etc. using a generic method.
            </summary>
            <nuget id="netfx-System.Reflection.GetCustomAttribute" />
        </member>
        <member name="M:GetCustomAttributeExtension.GetCustomAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Retrieves the first defined attribute of the given type from the provider if any.
            </summary>
            <typeparam name="TAttribute">Type of the attribute, which must inherit from <see cref="T:System.Attribute"/>.</typeparam>
            <param name="provider" this="true">Any type implementing the interface, which can be an assembly, type, 
            property, method, etc.</param>
            <param name="inherit">Optionally, whether the attribute will be looked in base classes.</param>
            <returns>The attribute instance if defined; <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:GetCustomAttributeExtension.GetCustomAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Retrieves the first defined attribute of the given type from the provider if any.
            </summary>
            <typeparam name="TAttribute">Type of the attribute, which must inherit from <see cref="T:System.Attribute"/>.</typeparam>
            <param name="provider" this="true">Any type implementing the interface, which can be an assembly, type, 
            property, method, etc.</param>
            <param name="inherit">Optionally, whether the attribute will be looked in base classes.</param>
            <returns>The attribute instance if defined; <see langword="null"/> otherwise.</returns>
        </member>
        <member name="T:Guard">
            <summary>
            Common guard class for argument validation.
            </summary>
        </member>
        <member name="M:Guard.NotNull``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Ensures the given <paramref name="value"/> is not null.
            Throws <see cref="T:System.ArgumentNullException"/> otherwise.
            </summary>
        </member>
        <member name="M:Guard.NotNullOrEmpty(System.Linq.Expressions.Expression{System.Func{System.String}},System.String)">
            <summary>
            Ensures the given string <paramref name="value"/> is not null or empty.
            Throws <see cref="T:System.ArgumentNullException"/> in the first case, or 
            <see cref="T:System.ArgumentException"/> in the latter.
            </summary>
        </member>
    </members>
</doc>
