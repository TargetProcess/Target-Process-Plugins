<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.TeamFoundation.Client</name>
    </assembly>
    <members>
        <member name="T:Microsoft.TeamFoundation.Client.AadCredential">
            <summary>
            Provides a credential for AAD authentication against a Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.AadCredential.#ctor">
            <summary>
            Initializes a new <c>AadCredential</c> instance with no token specified.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.AadCredential.#ctor(Microsoft.TeamFoundation.Client.AadToken)">
            <summary>
            Initializes a new <c>AadCredential</c> instance with the specified token.
            </summary>
            <param name="initialToken">An optional token which, if present, should be used before obtaining a new token</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.AadToken">
            <summary>
            Provides a token for AAD authentication of internet identities.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.AadTokenProvider.OnGetToken(Microsoft.TeamFoundation.Client.IssuedToken,System.TimeSpan)">
            <summary>
            Temporary implementation since we don't have a good configuration story here at the moment.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.BasicAuthCredential">
            <summary>
            Provides a credential for basic authentication against a Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BasicAuthCredential.#ctor">
            <summary>
            Initializes a new <c>BasicAuthCredential</c> instance with no token specified.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BasicAuthCredential.#ctor(System.Net.ICredentials)">
            <summary>
            Initializes a new <c>BasicAuthCredential</c> instance with the specified token.
            </summary>
            <param name="initialToken">An optional token which, if present, should be used before obtaining a new token</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BasicAuthCredential.#ctor(Microsoft.TeamFoundation.Client.BasicAuthToken)">
            <summary>
            Initializes a new <c>BasicAuthCredential</c> instance with the specified token.
            </summary>
            <param name="initialToken">An optional token which, if present, should be used before obtaining a new token</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.BasicAuthToken">
            <summary>
            Provides a token for basic authentication of internet identities.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BasicAuthToken.#ctor(System.Net.ICredentials)">
            <summary>
            Initializes a new <c>BasicAuthToken</c> instance with the specified token value.
            </summary>
            <param name="credentials">The credentials which should be used for authentication</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CookieCredential">
            <summary>
            Provides federated authentication with a hosted <c>TfsConnection</c> instance using cookies.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CookieCredential.#ctor">
            <summary>
            Initializes a new <c>CookieCredential</c> instance.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CookieCredential.#ctor(System.Boolean)">
            <summary>
            Initializes a new <c>CookieCredential</c> instance.
            </summary>
            <param name="useCache">True to load cached cookies if possible or false to force a prompt</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CookieCredential.#ctor(System.Boolean,Microsoft.TeamFoundation.Client.CookieToken)">
            <summary>
            Initializes a new <c>CookieCredential</c> instance.
            </summary>
            <param name="useCache">True to load cached cookies if possible or false to force a prompt</param>
            <param name="initialToken">The initial token if available</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CookieToken">
            <summary>
            Provides a cookie-based authentication token.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CookieToken.#ctor(System.Net.CookieCollection)">
            <summary>
            Initializes a new <c>CookieToken</c> instance using the specified cookies.
            </summary>
            <param name="cookies"></param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CookieToken.CookieCollection">
            <summary>
            Returns the CookieCollection contained within this token. For internal use only.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CookieTokenProvider">
            <summary>
            Provides authentication for internet identities using single-sign-on cookies.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CookieTokenProvider.Credential">
            <summary>
            Gets the cookie credential from which this provider was created.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CookieTokenProvider.GetTokenIsInteractive">
            <summary>
            Gets a value indicating whether or not a call to get token will require interactivity.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CookieTokenProvider.Issuer">
            <summary>
            Gets the issuer for the token provider.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CookieTokenProvider.Realm">
            <summary>
            Gets the realm for the token provider.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CookieTokenProvider.ReplyTo">
            <summary>
            Gets the reply-to location for this provider.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.FederatedCredential">
            <summary>
            Provides a common implementation for federated credentials.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.IConvertibleToVssCredential">
            <summary>
            This interface should be implemented by TFS client credential objects that will be
            able to convert to Microsoft.VisualStudio.Services federated credential objects.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IConvertibleToVssCredential.ConvertToVssCredential">
            <summary>
            Converts the current credential object to the Microsoft.VisualStudio.Services
            federated credential object equivalant.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.IssuedToken">
            <summary>
            Provides a common base class for issued tokens.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IssuedToken.IsAuthenticated">
            <summary>
            Gets a value indicating whether or not this token has been successfully authenticated with the remote server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IssuedToken.CredentialType">
            <summary>
            Type of the credential.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IssuedToken.UserId">
            <summary>
            Id of the owner of the token.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IssuedToken.UserName">
            <summary>
            Name of the owner of the token.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IssuedToken.FromStorage">
            <summary>
            True if the token is retrieved from the token storage.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedToken.Authenticated">
            <summary>
            Invoked when the token is successfully authenticated with the server.
            </summary>
            <returns>True if the token is authenticated the first time.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedToken.RequestUserData(System.Net.HttpWebRequest)">
            <summary>
            Send <c>HttpHeaders.VssUserData</c> header to request for the authenticated 
            user information in the response.
            </summary>
            <param name="webRequest">The target web request</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedToken.GetUserData(System.Net.HttpWebResponse)">
            <summary>
            Get the value of the <c>HttpHeaders.VssUserData</c> response header and
            populate the <c>UserId</c> and <c>UserName</c> properties. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedToken.ApplyTo(System.Net.HttpWebRequest)">
            <summary>
            Applies the token to the provided request.
            </summary>
            <param name="webRequest">The target web request</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.IssuedTokenCredential">
            <summary>
            Provides a common base class for issued token credentials.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IssuedTokenCredential.InitialToken">
            <summary>
            The initial token to use to authenticate if available. 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IssuedTokenCredential.SyncContext">
            <summary>
            Gets or sets the synchronization context which should be used for UI prompts.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IssuedTokenCredential.CredentialType">
            <summary>
            Type of the credential.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IssuedTokenCredential.TokenStorage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenCredential.CreateTokenProvider(System.Uri,System.Net.HttpWebResponse,Microsoft.TeamFoundation.Client.IssuedToken)">
            <summary>
            Creates a token provider suitable for handling the challenge presented in the response.
            </summary>
            <param name="serverUrl">The targeted server</param>
            <param name="response">The challenge response</param>
            <param name="failedToken">The failed token</param>
            <returns>An issued token provider instance</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ISupportSignOut">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.IssuedTokenProvider">
            <summary>
            Provides a common base class for providers of the token authentication model.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IssuedTokenProvider.Credential">
            <summary>
            Gets the credential associated with the provider.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IssuedTokenProvider.CurrentToken">
            <summary>
            Gets the current token.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IssuedTokenProvider.GetTokenIsInteractive">
            <summary>
            Gets a value indicating whether or not a call to get token will require interactivity.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IssuedTokenProvider.InvokeRequired">
            <summary>
            Gets a value indicating whether or not an ISynchronizeInvoke call is required.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IssuedTokenProvider.SignInUrl">
            <summary>
            Gets the sign-in URL for the token provider.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IssuedTokenProvider.ServerUrl">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.IsAuthenticationChallenge(System.Net.HttpWebResponse)">
            <summary>
            Determines whether the specified web response is an authentication challenge.
            </summary>
            <param name="webResponse">The web response</param>
            <returns>True if the web response is a challenge for token authentication; otherwise, false</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.ValidateToken(Microsoft.TeamFoundation.Client.IssuedToken@,System.Net.HttpWebResponse)">
            <summary>
            Validates the current token if the provided reference is the current token and it 
            has not been validated before.
            </summary>
            <param name="token">The token which should be validated</param>
            <param name="webResponse">The web response which used the token</param>
            <returns>The validated token</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.InvalidateToken(Microsoft.TeamFoundation.Client.IssuedToken)">
            <summary>
            Invalidates the current token if the provided reference is the current token.
            </summary>
            <param name="token">The token reference which should be invalidated</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.GetToken(System.TimeSpan)">
            <summary>
            Retrieves a token for the credentials.
            </summary>
            <param name="timeout">The maximum amount of time allowed for the operation</param>
            <returns>A security token for the current credentials</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.GetToken(Microsoft.TeamFoundation.Client.IssuedToken,System.TimeSpan)">
            <summary>
            Retrieves a token for the credentials.
            </summary>
            <param name="failedToken">The token which previously failed authentication, if available</param>
            <param name="timeout">The maximum amount of time allowed for the operation</param>
            <returns>A security token for the current credentials</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.GetToken(Microsoft.TeamFoundation.Client.IssuedToken,System.TimeSpan,System.Boolean)">
            <summary>
            Retrieves a token for the credentials.
            </summary>
            <param name="failedToken">The token which previously failed authentication, if available</param>
            <param name="timeout">The maximum amount of time allowed for the operation</param>
            <param name="canRefresh">Specifies whether or not the token may be refreshed if invalid</param>
            <returns>A security token for the current credentials</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.GetToken(Microsoft.TeamFoundation.Client.IssuedToken,Microsoft.TeamFoundation.Framework.Common.TimeoutHelper,System.Boolean)">
            <summary>
            Retrieves a token for the credentials.
            </summary>
            <param name="failedToken">The token which previously failed authentication, if available</param>
            <param name="timeout">The maximum amount of time allowed for the operation</param>
            <param name="canRefresh">Specifies whether or not the token may be refreshed if invalid</param>
            <returns>A security token for the current credentials</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.OnGetToken(Microsoft.TeamFoundation.Client.IssuedToken,System.TimeSpan)">
            <summary>
            When overridden in a dervied class, retrieves a token for the credentials.
            </summary>
            <param name="failedToken">The token which previously failed authentication, if available</param>
            <param name="timeout">The maximum amount of time allowed for the operation</param>
            <returns>A security token for the current credentials</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.OnValidatingToken(Microsoft.TeamFoundation.Client.IssuedToken,System.Net.HttpWebResponse)">
            <summary>
            Invoked when the current token is being validated. When overriden in a derived class,
            validate and return the validated token.
            </summary>
            <remarks>Is called inside a lock in <c>ValidateToken</c></remarks>
            <param name="token">The token to validate</param>
            <param name="webResponse">The web response which used the token</param>
            <returns>The validated token</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.OnTokenValidated(Microsoft.TeamFoundation.Client.IssuedToken)">
            <summary>
            Invoked when the issued token has been validated by successfully authorized with the server.
            </summary>
            <param name="token">The valid token.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.OnTokenInvalidated(Microsoft.TeamFoundation.Client.IssuedToken)">
            <summary>
            Is called when the current token is invalidated.
            </summary>
            <param name="token">The invalid token.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.BeginGetToken(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to retrieve a token for the credentials.
            </summary>
            <param name="timeout">The maximum amount of time allowed for the operation</param>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
            <returns>The asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.BeginGetToken(Microsoft.TeamFoundation.Client.IssuedToken,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to retrieve a token for the credentials.
            </summary>
            <param name="failedToken">The token which previously failed authentication, if available</param>
            <param name="timeout">The maximum amount of time allowed for the operation</param>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
            <returns>The asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.BeginGetToken(Microsoft.TeamFoundation.Client.IssuedToken,System.TimeSpan,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to retrieve a token for the credentials.
            </summary>
            <param name="failedToken">The token which previously failed authentication, if available</param>
            <param name="timeout">The maximum amount of time allowed for the operation</param>
            <param name="canRefresh">Specifies whether or not the token may be refreshed if invalid</param>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
            <returns>The asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.BeginGetToken(Microsoft.TeamFoundation.Client.IssuedToken,Microsoft.TeamFoundation.Framework.Common.TimeoutHelper,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to retrieve a token for the credentials.
            </summary>
            <param name="failedToken">The token which previously failed authentication, if available</param>
            <param name="timeout">The maximum amount of time allowed for the operation</param>
            <param name="canRefresh">Specifies whether or not the token may be refreshed if invalid</param>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
            <returns>The asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.OnBeginGetToken(Microsoft.TeamFoundation.Client.IssuedToken,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            When overridden in a derived class, begins an asynchronous operation to retrieve a token for the 
            credentials.
            </summary>
            <param name="failedToken">The token which previously failed authentication, if available</param>
            <param name="timeout">The maximum amount of time allowed for the operation</param>
            <param name="canRefresh">Specifies whether or not the token may be refreshed if invalid</param>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
            <returns>The asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.EndGetToken(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to retrieve a security token for the credentials.
            </summary>
            <param name="result">The asynchronous operation</param>
            <returns>An security token for the current credentials</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IssuedTokenProvider.GetTokenOperation.SendCallback(System.Object)">
            <summary>
            Handles the synchronization context callback to ensure UI is invoked on the appropriate thread.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.OAuthTokenType">
            <summary>
            The type of OAuth token
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.OAuthToken">
            <summary>
            Provides a token used for OAuth delegation based authentication
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.OAuthToken.#ctor(System.String,Microsoft.TeamFoundation.Client.OAuthTokenType)">
            <summary>
            
            </summary>
            <param name="token"></param>
            <param name="tokenType"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.OAuthToken.#ctor(System.String,Microsoft.TeamFoundation.Client.OAuthTokenType,System.DateTime)">
            <summary>
            
            </summary>
            <param name="token"></param>
            <param name="tokenType"></param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.OAuthToken.Token">
            <summary>
            Gets the underlying token as string
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.OAuthToken.TokenType">
            <summary>
            Gets the type of OAuth token
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.OAuthToken.Expiration">
            <summary>
            The expiration time of the token
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.OAuthToken.ApplyTo(System.Net.HttpWebRequest)">
            <summary>
            
            </summary>
            <param name="webRequest"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.OAuthTokenContainer">
            <summary>
            A container to encapsulate an OAuth access token and an OAuth refresh token (or authorization code)
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.OAuthTokenContainer.AccessToken">
            <summary>
            The access code used to prove authorization on the resource server
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.OAuthTokenContainer.RefreshToken">
            <summary>
            The refresh token (or authorization code)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.OAuthTokenContainer.ApplyTo(System.Net.HttpWebRequest)">
            <summary>
            
            </summary>
            <param name="webRequest"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.OAuthTokenContainer.ExtractTokens(System.Byte[],System.Text.Encoding)">
            <summary>
            Extract the oauth tokens from the response data
            </summary>
            <param name="responseData"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.OAuthTokenContainer.FromAccessToken(System.String)">
            <summary>
            Build an OAuth token from an access token.
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.OAuthTokenContainer.FromAuthCodeOrRefreshToken(System.String)">
            <summary>
            Build an OAuth token from a refresh token or an authorization code.
            </summary>
            <param name="authCodeOrRefreshToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.OAuthTokensReceivedCallback">
            <summary>
            A consumer provided delegate on which to be notified when the underlying API has received
            a set of tokens (an Access Token and a Refresh Token) in exchange for an Authorization Code
            or a previous Refresh Token.
            </summary>
            <param name="receivedTokens">A container with the OAuth access token and refresh token
            which was received from the authorization server</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.OAuthTokenCredential.#ctor(System.String)">
            <summary>
            Initializes a new <c>OAuthTokenCredential</c> instance with the provided access token.
            </summary>
            <param name="accessToken">The OAuth access token</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.OAuthTokenCredential.#ctor(System.Uri,System.String,System.String,System.String)">
            <summary>
            Initializes a new <c>OAuthTokenCredential</c> instance with the specified client id and secret and either an
            authorization code or a refresh token
            </summary>
            <param name="clientId">The client id</param>
            <param name="clientSecret">The client secret</param>
            <param name="authCodeOrRefreshToken">Either an authorization code or a refresh token which can be used
            to obtain an access token (and a new refresh token)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.OAuthTokenCredential.#ctor(System.Uri,System.String,System.String,System.String,Microsoft.TeamFoundation.Client.OAuthTokensReceivedCallback)">
            <summary>
            Initializes a new <c>OAuthTokenCredential</c> instance with the specified client id and secret and either an
            authorization code or a refresh token
            </summary>
            <param name="authorizationUri">The base URI of the authorization server. This is usually the same
            as the URI of the TFS server</param>
            <param name="clientId">The client id</param>
            <param name="clientSecret">The client secret</param>
            <param name="authCodeOrRefreshToken">Either an authorization code or a refresh token which can be used
            to obtain an access token (and a new refresh token)</param>
            <param name="callback">Allow API consumers to obtain the received access token and refresh token in case they need to be
            persisted for future access</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.OAuthTokenCredential.#ctor(Microsoft.TeamFoundation.Client.OAuthTokenContainer)">
            <summary>
            Initializes a new <c>OAuthTokenCredential</c> instance with the specified initial token
            </summary>
            <param name="initialToken">The initial token to use  on the resource server before attempting to contact the authorization server
            (for another grant or new access token). Usually this token will have been persisted by the caller and is
            used here to resume the session</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.OAuthTokenCredential.#ctor(System.Uri,System.String,System.String,Microsoft.TeamFoundation.Client.OAuthTokenContainer,Microsoft.TeamFoundation.Client.OAuthTokensReceivedCallback)">
            <summary>
            Initializes a new <c>OAuthTokenCredential</c> instance with the specified client id and secret and an
            initial token
            </summary>
            <param name="authorizationUri">The base URI of the authorization server. This is usually the same
            as the URI of the TFS server</param>
            <param name="clientId">The client id</param>
            <param name="clientSecret">The client secret</param>
            <param name="initialToken">The initial token to use  on the resource server before attempting to contact the authorization server
            (for another grant or new access token). Usually this token will have been persisted by the caller and is
            used here to resume the session</param>
            <param name="callback">Allow API consumers to obtain the received access token and refresh token in case they need to be
            persisted for future access</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.OAuthTokenCredential.AuthorizationUrl">
            <summary>
            Gets the authorization url.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.OAuthTokenCredential.ClientId">
            <summary>
            Gets the client id.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.OAuthTokenCredential.ClientSecret">
            <summary>
            Gets the client secret.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.OAuthTokenCredential.TokensReceived">
            <summary>
            The API-consumer-provided callback to invoke when an access token and a refresh token
            are obtained from the authorization server
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.OAuthTokenCredential.IsAuthenticationChallenge(System.Net.HttpWebResponse)">
            <summary>
            
            </summary>
            <param name="webResponse"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.OAuthTokenCredential.OnCreateTokenProvider(System.Uri,System.Net.HttpWebResponse)">
            <summary>
            Creates a provider for retrieving security tokens for the provided credentials.
            </summary>
            <returns>An issued token provider for the current credential</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.OAuthTokenProvider.Credential">
            <summary>
            Gets the OAuth token credential from which this provider was created.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.OAuthTokenProvider.GetTokenIsInteractive">
            <summary>
            Gets a value indicating whether or not a call to get token will require interactivity.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.OAuthTokenProvider.OnGetToken(Microsoft.TeamFoundation.Client.IssuedToken,System.TimeSpan)">
            <summary>
            Issues a request to synchronously retrieve a token for the associated credential.
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.SimpleWebToken">
            <summary>
            Provides simple web token used for OAuth authentication.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SimpleWebToken.#ctor(System.String)">
            <summary>
            Initializes a new <c>SimpleWebToken</c> instance with the specified token value.
            </summary>
            <param name="token">The token value as a string</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.SimpleWebTokenCredential">
            <summary>
            Provides federated authentication with a hosted <c>TfsConnection</c> instance using simple web tokens.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SimpleWebTokenCredential.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <c>SimpleWebTokenCredential</c> instance with the specified user name and password.
            </summary>
            <param name="userName">The user name</param>
            <param name="password">The password</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SimpleWebTokenCredential.#ctor(System.String,System.String,Microsoft.TeamFoundation.Client.SimpleWebToken)">
            <summary>
            Initializes a new <c>SimpleWebTokenCredential</c> instance with the specified user name and password. The
            provided token, if not null, will be used before attempting authentication with the credentials.
            </summary>
            <param name="userName">The user name</param>
            <param name="password">The password</param>
            <param name="initialToken">An optional token which, if present, should be used before obtaining a new token</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.SimpleWebTokenCredential.UserName">
            <summary>
            Gets the user name.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.SimpleWebTokenCredential.Password">
            <summary>
            Gets the password.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SimpleWebTokenCredential.OnCreateTokenProvider(System.Uri,System.Net.HttpWebResponse)">
            <summary>
            Creates a provider for retrieving security tokens for the provided credentials.
            </summary>
            <returns>An issued token provider for the current credential</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.SimpleWebTokenProvider.Credential">
            <summary>
            Gets the simple web token credential from which this provider was created.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.SimpleWebTokenProvider.GetTokenIsInteractive">
            <summary>
            Gets a value indicating whether or not a call to get token will require interactivity.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.SimpleWebTokenProvider.Realm">
            <summary>
            Gets the realm for the token provider.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SimpleWebTokenProvider.OnGetToken(Microsoft.TeamFoundation.Client.IssuedToken,System.TimeSpan)">
            <summary>
            Issues a request to synchronously retrieve a token for the associated credential.
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TfsClientCredentials">
            <summary>
            Provides credentials to use when connecting to a Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentials.#ctor">
            <summary>
            Initializes a new <c>TfsClientCredentials</c> instance with default credentials.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentials.#ctor(System.Boolean)">
            <summary>
            Initializes a new <c>TfsClientCredentials</c> instance with default credentials if specified.
            </summary>
            <param name="useDefaultCredentials">True to use default windows credentials; otherwise, false</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentials.#ctor(Microsoft.TeamFoundation.Client.WindowsCredential)">
            <summary>
            Initializes a new <c>TfsClientCredentials</c> instance with the specified windows credential and
            default issued token credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentials.#ctor(Microsoft.TeamFoundation.Client.WindowsCredential,System.Boolean)">
            <summary>
            Initializes a new <c>TfsClientCredentials</c> instance with the specified windows credential and
            default issued token credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
            <param name="allowInteractive">True if interactive prompts are allowed, otherwise false</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentials.#ctor(Microsoft.TeamFoundation.Client.FederatedCredential)">
            <summary>
            Initializes a new <c>TfsClientCredentials</c> instance with the specified windows credential and
            default issued token credential.
            </summary>
            <param name="windowsCredential">The federated credential to use for authentication</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentials.#ctor(Microsoft.TeamFoundation.Client.WindowsCredential,Microsoft.TeamFoundation.Client.FederatedCredential)">
            <summary>
            Initializes a new <c>TfsClientCredentials</c> instance with the specified windows and issued token 
            credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
            <param name="federatedCredential">The federated credential to use for authentication</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentials.#ctor(Microsoft.TeamFoundation.Client.WindowsCredential,Microsoft.TeamFoundation.Client.FederatedCredential,System.Boolean)">
            <summary>
            Initializes a new <c>TfsClientCredentials</c> instance with the specified windows and issued token 
            credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
            <param name="issuedTokenCredential">The federated credential to use for authentication</param>
            <param name="allowInteractive">True if interactive prompts are allowed, otherwise false</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentials.#ctor(Microsoft.TeamFoundation.Client.WindowsCredential,Microsoft.TeamFoundation.Client.FederatedCredential,System.Boolean,System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new <c>TfsClientCredentials</c> instance with the specified windows and issued token 
            credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
            <param name="federatedCredential">The federated credential to use for authentication</param>
            <param name="allowInteractive">True if interactive prompts are allowed; otherwise, false</param>
            <param name="synchronizationContext">
            An optional synchronization context to ensure credentials prompting occurs on the UI thread
            </param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentials.op_Implicit(Microsoft.TeamFoundation.Client.FederatedCredential)~Microsoft.TeamFoundation.Client.TfsClientCredentials">
            <summary>
            Implicitly converts a <c>FederatedCredential</c> instance into a <c>TfsClientCredentials</c> instance.
            </summary>
            <param name="credential">The federated credential instance</param>
            <returns>A new <c>TfsClientCredentials</c> instance which wraps the specified credential</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentials.op_Implicit(Microsoft.TeamFoundation.Client.WindowsCredential)~Microsoft.TeamFoundation.Client.TfsClientCredentials">
            <summary>
            Implicitly converts a <c>WindowsCredential</c> instance into a <c>TfsClientCredentials</c> instance.
            </summary>
            <param name="credential">The windows credential instance</param>
            <returns>A new <c>TfsClientCredentials</c> instance which wraps the specified credential</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsClientCredentials.AllowInteractive">
            <summary>
            Gets or sets a value indicating whether or not interactive prompts are allowed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsClientCredentials.Federated">
            <summary>
            Gets or sets a value indicating the issued token credentials to use for authentication with the server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsClientCredentials.Windows">
            <summary>
            Gets the windows credential to use for NTLM authentication with the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentials.CreateTokenProvider(System.Uri,System.Net.HttpWebResponse,Microsoft.TeamFoundation.Client.IssuedToken)">
            <summary>
            Creates a token provider for the configured issued token credentials.
            </summary>
            <param name="serverUrl">The targeted server</param>
            <param name="webResponse">The failed web response</param>
            <param name="failedToken">The failed authentication token</param>
            <returns>A provider for retrieving tokens for the configured credential</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentials.TryGetTokenProvider(System.Uri,Microsoft.TeamFoundation.Client.IssuedTokenProvider@)">
            <summary>
            Retrieves the token provider for the provided server URL if one has been created.
            </summary>
            <param name="serverUrl">The targeted server</param>
            <param name="provider">Stores the active token provider, if one exists</param>
            <returns>True if a token provider was found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentials.IsAuthenticationChallenge(System.Net.HttpWebResponse)">
            <summary>
            Determines if the web response is an authentication redirect for issued token providers.
            </summary>
            <param name="webResponse">The web response</param>
            <returns>True if this is an token authentication redirect, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentials.LoadCachedCredentials(System.Uri,System.Boolean,System.Boolean)">
            <summary>
            Loads stored credentials for the specified server if found. If no credentials are found in the windows
            credential store for the specified server and options then default credentials are returned.
            </summary>
            <param name="serverUrl">The server location</param>
            <param name="requireExactMatch">A value indicating whether or not an exact or partial match of the server is required</param>
            <param name="allowInteractive">A value indicating whether or not the credentials may support interactivity</param>
            <returns>A credentials object populated with stored credentials for the server if found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentials.LoadCachedCredentials(System.String,System.Uri,System.Boolean,System.Boolean)">
            <summary>
            Loads stored credentials for the specified server if found. If no credentials are found for the specified server and options then default credentials are returned.
            This overload assumes that the credentials are to be stored under the TFS server's registry root
            </summary>
            <param name="serverUrl">The server location</param>
            <param name="requireExactMatch">A value indicating whether or not an exact or partial match of the server is required</param>
            <param name="allowInteractive">A value indicating whether or not the credentials may support interactivity</param>
            <returns>A credentials object populated with stored credentials for the server if found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentials.LoadCachedCredentials(System.String,System.Uri,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Loads stored credentials for the specified server if found. If no credentials are found in the windows
            credential store for the specified server and options then default credentials are returned.
            </summary>
            <param name="serverUrl">The server location</param>
            <param name="requireExactMatch">A value indicating whether or not an exact or partial match of the server is required</param>
            <param name="allowInteractive">A value indicating whether or not the credentials may support interactivity</param>
            <param name="registryRootPath">A registry root path under which the credentials should be found (pass null for the default TFS registry root)</param>
            <param name="useWOW6432Hive">Pass true if the registryRootPath is under the WOW6432 hive on 64-bit environments</param>
            <returns>A credentials object populated with stored credentials for the server if found</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TfsClientCredentialStorage">
            <summary>
            Token storage helper class that stores and retrieves authentication tokens for Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentialStorage.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentialStorage.#ctor(System.String)">
            <summary>
            For testing purposes only.
            </summary>
            <param name="tokenNamespace"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentialStorage.RetrieveToken(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentialsType)">
            <summary>
            
            </summary>
            <param name="serverUrl"></param>
            <param name="credentialType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentialStorage.StoreToken(System.Uri,Microsoft.TeamFoundation.Client.IssuedToken,System.Boolean)">
            <summary>
            
            </summary>
            <param name="serverUrl"></param>
            <param name="token"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentialStorage.RemoveToken(System.Uri)">
            <summary>
            
            </summary>
            <param name="serverUrl"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentialStorage.RemoveTokenValue(System.Uri,Microsoft.TeamFoundation.Client.IssuedToken)">
            <summary>
            
            </summary>
            <param name="serverUrl"></param>
            <param name="token"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentialStorage.RemoveTokenValuesByUser(System.Guid)">
            <summary>
            
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentialStorage.GetTokenProperty(System.Uri,System.String)">
            <summary>
            
            </summary>
            <param name="serverUrl"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentialStorage.BuildTokenKey(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentialsType)">
            <summary>
            
            </summary>
            <param name="resource"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentialStorage.RetrieveConnectedUserToken">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentialStorage.GetTokenFromString(Microsoft.VisualStudio.Services.Common.VssCredentialsType,System.String)">
            <summary>
            
            </summary>
            <param name="credentialType"></param>
            <param name="tokenValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentialStorage.GetTokenAsString(Microsoft.TeamFoundation.Client.IssuedToken)">
            <summary>
            
            </summary>
            <param name="credentialType"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsCredential">
            <summary>
            Provides a credential for windows authentication against a Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsCredential.#ctor">
            <summary>
            Initializes a new <c>WindowsCredential</c> instance using a default user interface provider implementation 
            and the default network credentials.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsCredential.#ctor(System.Boolean)">
            <summary>
            Initializes a new <c>WindowsCredential</c> instance using a default user interface provider implementation 
            and the default network credentials, if specified.
            </summary>
            <param name="useDefaultCredentials">True if the default credentials should be used; otherwise, false</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsCredential.#ctor(System.Net.ICredentials)">
            <summary>
            Initializes a new <c>WindowsCredential</c> instance using a default user interface provider implementation 
            and the specified network credentials.
            </summary>
            <param name="credentials">The windows credentials which should be used for authentication</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsCredential.#ctor(System.Net.ICredentials,Microsoft.TeamFoundation.Client.ICredentialsProvider)">
            <summary>
            Initializes a new <c>WindowsCredential</c> instance using the specified network credentials and fallback 
            credentials provider.
            </summary>
            <param name="credentials">The windows credentials which should be used for authentication</param>
            <param name="credentialsProvider">
            The windows credentials provider which should be used for authentication if the default credentials fail
            </param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.BaseDialog">
            <summary>
            Base class for Team Foundation dialogs.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.#ctor(System.Boolean)">
            <summary>
            Constructor of BaseDialog
            </summary>
            <param name="forwardWndMsgOutsideVS">whether WndMsg should be forwarded outside of VS</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.ShowDialog">
             <summary>
             This is overridden to ensure that our UIHost mechanism is used to show the dialogs.  
             UIHost will deal with a whole slew of default property configuration appropriate to the
             environment we are running under.
            
             Note that this does not result in recursive death because the UIHost is passed a 
             reference to a Form object and the "new" ShowDialog will not get called because it is 
             not visible from the Form scope since this is not a virtual method.
             </summary>
             <param name="parent">window to parent to for modality</param>
             <returns>Standard DialogResult return codes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.BaseDialog_HelpRequested(System.Object,System.Windows.Forms.HelpEventArgs)">
            <summary>
            This is handled that we can have UIHost render the HelpTopic.
            </summary>
            <param name="sender">the object sending the event</param>
            <param name="e">help event args</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.BaseDialog_HelpButtonClicked(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            This is handled so that we can have UIHost render the HelpTopic when the user clicks
            on the ? in the caption.
            </summary>
            <param name="sender">the object sending the event</param>
            <param name="e">cancel event args</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.BaseDialog_Move(System.Object,System.EventArgs)">
            <summary>
            This is handled to indicate that the form was moved.  This flag is later 
            checked prevent to see if it is necessary to persist changes to form size/position.
            </summary>
            <param name="sender">the object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.BaseDialog_Resize(System.Object,System.EventArgs)">
            <summary>
            This is handled to indicate that the form was resized.  This flag is later 
            checked prevent to see if it is necessary to persist changes to form size/position.
            </summary>
            <param name="sender">the object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.BaseDialog_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            This is handled to persist dialog size and position if it has changed.
            </summary>
            <param name="sender">the object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.OnLoad(System.EventArgs)">
            <summary>
            This is overloaded to reposition and resize a dialog to it's previously saved state.
            </summary>
            <param name="e">event args</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.RestoreSizePosition">
            <summary>
            This will reposition and resize a dialog to it's previously saved state.
            But only if SaveRestorePosition is set to true.
            This method is called during the OnLoad method of the dialog.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.EnsureDialogFitsInWorkingArea">
            <summary>
            This will check to see if a dialog is bigger than the current monitor's working
            area (screen minus taskbar/docked toolbars/etc), and shrink it to fit without
            any clipping.
            </summary>
            <remarks>
            This is usually not needed on "normal" sized dialogs, but is useful
            for dialogs that are likely to scale larger than the screen size in large fonts or
            high dpi.  It will resize the dialog to fill all of the working area.  Note that
            this must be called *after* the layout has finished, so the dialog is already at
            its final size.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.BaseDialog_FontChanged(System.Object,System.EventArgs)">
            <summary>
            This will update the font for the dialog and get the children updated as well.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.HostFontChanged(System.Object,System.EventArgs)">
            <summary>
            This is called by the UI host to notify us that environment fonts have been changed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.BaseDialog.HelpTopic">
            <summary>
            Derived classes can overload this to return their help topic string if more complex
            processing is required.  Otherwise, just assign the value.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.BaseDialog.SaveRestorePosition">
            <summary>
            This property controls whether or not dialog size and position will automatically be
            saved and restored during OnLoad and OnFormClosing.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.BaseDialog.AlwaysShowHelpButton">
            <summary>
            This property controls whether or not we will always have a help button available on the 
            dialog.  The default is true but derived classes can modify this for simple cases where
            help is not required.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.BaseDialog.MessageFilter">
            <summary>
            This property exposes an IMessageFilter which will automatically be registered to the 
            Application object by UIHost.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override the wndproc so we can encapsulate some functionality.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.ProcessKeyPreview(System.Windows.Forms.Message@)">
            <summary>
            Override ProcessKeyPreview so we can encapsulate some functionality.  
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.OnContextMenu(System.Windows.Forms.Message)">
            <summary>
            This method is provided so derived classes can easily intercept WM_CONTEXTMENU.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.OnFocusToolbar">
            <summary>
            This method is provided for derived classes to set focus to their toolbar if they have
            using the standard keyboard accelerators.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.CloseDuringOnLoad(System.Windows.Forms.DialogResult)">
            <summary>
            Call CloseDuringOnLoad to close the dialog during the OnLoad method without ever showing
            the dialog on screen.
            </summary>
            <param name="result">Result of the dialog</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.OnCreateControl">
            <summary>
            OnCreateControl calls OnLoad, so we only allow calls to CloseDuringOnLoad from within this
            window.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BaseDialog.OnVisibleChanged(System.EventArgs)">
            <summary>
            OnVisibleChanged is raised as part of showing the dialog. At that time Visible will be
            set to true. If CloseDuringOnLoad has previously been called, close the dialog at this
            time.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.BoardCacheServiceBase">
            <summary>
            Service base to retrive and cache board suggested value.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.BoardColumnCacheService">
            <summary>
            Service to retrive and cache board column suggested value.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BoardColumnCacheService.GetValueAsync(System.Guid,Microsoft.TeamFoundation.Client.SuggestedValueCacheService.ScopeSuggestedValue)">
            <summary>
            Refreshes the cache of the scope
            </summary>
            <param name="scope">Scope Id (usually team project guid)</param>
            <returns>A Refresh task</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.BoardRowCacheService">
            <summary>
            Service to retrive and cache board row suggested value.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BoardRowCacheService.GetValueAsync(System.Guid,Microsoft.TeamFoundation.Client.SuggestedValueCacheService.ScopeSuggestedValue)">
            <summary>
            Refreshes the cache of the scope
            </summary>
            <param name="scope">Scope Id (usually team project guid)</param>
            <returns>A Refresh task</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.BorderPanel">
            <summary>
            A Panel that allows the designer to change the border style, color, and padding.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.BorderPanel.Sides">
            <summary>
            This enumeration allows the designer to specify which sides have borders
            Values can be ORed together. i.e. All == Top | Bottom | Left | Right
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BorderPanel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.BorderPanel.BorderColor">
            <summary>
            Get or Set the color used when drawing the border.
            Default == UIHostColors.BorderColor
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.BorderPanel.BorderStyle">
            <summary>
            Get or Set the style that the border has.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.BorderPanel.BorderPadding">
            <summary>
            Get or Set the padding that determines where the border is drawn
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.BorderPanel.BorderSides">
            <summary>
            Get or Set the Sides of the border that are drawn
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.BorderPanel.InnerColor">
            <summary>
            Get or Set the color of the area inside the border.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.BorderPanel.UseInnerColor">
            <summary>
            Get or Set a flag that determines if the InnerColor property is used.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BypassProxyOnLocalHelper.IsHostLocal(System.String)">
            <summary>
            Given a hostname, determines whether WinHTTP would consider it to be
            'local' for the purposes of proxy evaluation.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel">
            <summary>
            Provides a common interface for all request channels targeting a Team Foundation Server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel.Uri">
            <summary>
            Gets the URI of the client.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel.Credentials">
            <summary>
            Gets the credentials for the channel.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel.Culture">
            <summary>
            Gets the culture which will be sent to the server in the accept-language header.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel.SessionId">
            <summary>
            Gets the session identifier for this channel.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel.Settings">
            <summary>
            Gets the settings for the channel.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel.State">
            <summary>
            Gets the current state of the channel.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel.Abort">
            <summary>
            Aborts all outstanding requests on the channel.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel.BeginRequest(Microsoft.TeamFoundation.Client.Channels.TfsMessage,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request operation.
            </summary>
            <param name="message">The request message</param>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
            <returns>The asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel.BeginRequest(Microsoft.TeamFoundation.Client.Channels.TfsMessage,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request operation.
            </summary>
            <param name="message">The request message</param>
            <param name="timeout">The maximum time allowed for the request to complete</param>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
            <returns>The asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel.EndRequest(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request operation.
            </summary>
            <param name="result">The asynchronous operation</param>
            <returns>The response message</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel.Request(Microsoft.TeamFoundation.Client.Channels.TfsMessage)">
            <summary>
            Sends a request and retrieves the response on the calling thread.
            </summary>
            <param name="message">The request message</param>
            <returns>The response message</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel.Request(Microsoft.TeamFoundation.Client.Channels.TfsMessage,System.TimeSpan)">
            <summary>
            Sends a request and retrieves the response on the calling thread.
            </summary>
            <param name="message">The request message</param>
            <param name="timeout">The maximum time allowed for the request to complete</param>
            <returns>The response message</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannelFactory">
            <summary>
            Provides an extensibility mechanism for environments to plug in customizations to the channel stack.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannelFactory.CreateChannel(Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel)">
            <summary>
            Creates a custom <c>ITfsRequestChannel</c> instance for communications to the server.
            </summary>
            <returns>A custom <c>ITfsRequestChannel</c> implementation</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Channels.ITfsRequestListener">
            <summary>
            Exposes methods which are invoked during the request life cycle for tracing.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.ITfsRequestListener.AfterReceiveReply(System.Int64,System.String,System.Net.HttpWebResponse)">
            <summary>
            The method invoked after a reply is received from the remote server.
            </summary>
            <param name="requestId">The previously generated request identifier</param>
            <param name="methodName">The name of the web method</param>
            <param name="contentLength">The response content length</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.ITfsRequestListener.BeforeSendRequest(System.Int64,System.String,System.Net.HttpWebRequest)">
            <summary>
            The method invoked before a request is issued to the remote server.
            </summary>
            <param name="methodName">The name of the web method</param>
            <param name="contentLength">The request content length</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.ITfsRequestListener.BeginRequest">
            <summary>
            The method invoked when a request begins the entire lifecycle.
            </summary>
            <returns>A unique request identifier for correlation between calls</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.ITfsRequestListener.EndRequest(System.Int64,System.Exception)">
            <summary>
            The method invoked when a request completes the entire lifecycle.
            </summary>
            <param name="requestId">The request identifier</param>
            <param name="exception">The exception which occurred, if any</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Channels.TfsClientOperation">
            <summary>
            Provides an operation descriptor for interaction with a Team Foundation Server Web Service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsClientOperation.BodyName">
            <summary>
            Gets the name of the body element for the message.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsClientOperation.HasOutputs">
            <summary>
            Gets a value indicating whether or not this message contains outputs.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsClientOperation.OutputHeaders">
            <summary>
            Gets the headers which were returned from the operation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsClientOperation.ResultName">
            <summary>
            Gets the name of the result element for the message.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsClientOperation.SoapAction">
            <summary>
            Gets the fully qualified soap action for the message.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsClientOperation.SoapNamespace">
            <summary>
            Gets the fully qualified soap namespace for the message.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsClientOperation.CreateBodyWriter(System.Object[])">
            <summary>
            Creates a body writer which encapsulates writing the body of the message to xml.
            </summary>
            <param name="parameters">The parameters which should be provided to the method</param>
            <returns>A body writer which can serialize the method call into a message body</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsClientOperation.InitializeOutputs(System.Object[]@)">
            <summary>
            When invoked this method should initialize the return value and output or reference parameters
            to the desired default values.
            </summary>
            <param name="parameters">The output or reference parameters</param>
            <returns>The default value for message return value</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsClientOperation.ReadResult(System.IServiceProvider,System.Xml.XmlReader)">
            <summary>
            When invoked this method should read the return value.
            </summary>
            <param name="reader">The xml reader for reading from the message stream</param>
            <returns>The object read from the xml reader</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsClientOperation.ReadOutput(System.IServiceProvider,System.Xml.XmlReader,System.Object[])">
            <summary>
            When invoked this method should read the output at the current reader position.
            </summary>
            <param name="reader">The xml reader for reading from the message stream</param>
            <param name="parameters">The preinitialized array of output objects</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsClientOperation.WriteParameters(System.Xml.XmlDictionaryWriter,System.Object[])">
            <summary>
            When overridden in a derived class, this method serializes the provided parameters to the writer.
            </summary>
            <param name="writer">The xml writer used for serialization</param>
            <param name="parameters">The parameter values which should be serialized</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Channels.TfsHttpClient">
            <summary>
            Provides a common base class for all Team Foundation Server web service proxies which require a 
            <c>TfsConnection</c> instance.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClient.#ctor(Microsoft.TeamFoundation.Client.TfsConnection)">
            <summary>
            Initializes a new <c>TfsHttpClient</c> instance with the specified connection.
            </summary>
            <param name="connection">The connection to which this client belongs</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClient.#ctor(Microsoft.TeamFoundation.Client.TfsConnection,System.Uri)">
            <summary>
            Initializes a new <c>TfsHttpClient</c> instance with the specified connection and optional service
            location. If the service location is non null it will be used as the service URL, otherwise the
            <c>ILocationService</c> will be utilized to determine the location of the service.
            </summary>
            <param name="connection">The connection to which this client belongs</param>
            <param name="serviceLocation">An optional value which specifies the location of the service</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpClient.Connection">
            <summary>
            Gets the connection which created this http client.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpClient.CollectionServiceIdentifier">
            <summary>
            When overridden in a derived class this gets the service identifier registered with the project 
            collection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpClient.ConfigurationServiceIdentifier">
            <summary>
            When overridden in a derived class this gets the service identifier registered with the configuration
            server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpClient.ServiceType">
            <summary>
            Returns the BIS registered service name for retrieving URL information.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClient.GetService(System.Type)">
            <summary>
            Provides access to the <c>TfsConnection</c> instance associated with this http client.
            </summary>
            <param name="serviceType">The type of service desired</param>
            <returns>An object of type <paramref name="serviceType" /> which represents the requested service</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClient.OnCreateChannel(Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel)">
            <summary>
            Wrap the channel implementation in custom wrapper provided by the connection object.
            </summary>
            <param name="innerChannel">The inner most channel implementation which must be used</param>
            <returns>An implementation of the <c>ITfsRequestChannel</c> interface</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClient.GetServiceLocation">
            <summary>
            When overridden in a derived class this method gets the endpoint address of the service.
            </summary>
            <returns>An endpoint address for the target service</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClient.GetServiceLocation(System.String,System.Guid)">
            <summary>
            Retrieves the service location for the specified service by type and identifier.
            </summary>
            <param name="serviceType">The service type</param>
            <param name="serviceIdentifier">The service identifier</param>
            <returns>The service location</returns>
            <exception cref="T:Microsoft.TeamFoundation.TeamFoundationServiceUnavailableException" />
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClient.OnAfterReceiveReply(System.Int64,System.String,System.Net.HttpWebResponse)">
            <summary>
            The method invoked after a reply is received from the remote server.
            </summary>
            <param name="requestId">The previously generated request identifier</param>
            <param name="methodName">The name of the web method</param>
            <param name="contentLength">The response content length</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClient.OnBeforeSendRequest(System.Int64,System.String,System.Net.HttpWebRequest)">
            <summary>
            The method invoked before a request is issued to the remote server.
            </summary>
            <param name="methodName">The name of the web method</param>
            <param name="contentLength">The request content length</param>
            <returns>A unique request identifier for correlation between calls</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClient.OnEndRequest(System.Int64,System.Exception)">
            <summary>
            The method invoked after a request encounters an error.
            </summary>
            <param name="requestId"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClient.TryGetServiceLocation(System.String,System.Guid,System.Uri@)">
            <summary>
            Attempts to retrieve the service location for the specified service by type and identifier.
            </summary>
            <param name="serviceType">The service type</param>
            <param name="serviceIdentifier">The service identifier</param>
            <param name="serviceLocation">The service location if found, otherwise null</param>
            <returns>True if the service was located, otherwise false</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientState">
            <summary>
            Represents the state of a <c>TfsHttpClientBase</c> instance.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientState.Created">
            <summary>
            The client has been created but not yet opened.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientState.Opening">
            <summary>
            The client is current in the process of being opened.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientState.Opened">
            <summary>
            The client is opened and ready to accept requests.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientState.Aborted">
            <summary>
            The client is aborted and is no longer usable.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase">
            <summary>
            Provides a common base class for Team Foundation Server HTTP client proxies.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.#ctor(System.Uri,System.Nullable{System.Guid},System.Globalization.CultureInfo,Microsoft.VisualStudio.Services.Common.VssCredentials)">
            <summary>
            Initializes a new <c>TfsHttpClientBase</c> instance.
            </summary>
            <param name="uri">The service location</param>
            <param name="sessionId">An optional session identifier</param>
            <param name="culture">The desired culture for the client</param>
            <param name="credentials">The credentials used to authenticate to the service</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.#ctor(System.Uri,System.Nullable{System.Guid},System.Globalization.CultureInfo,Microsoft.VisualStudio.Services.Common.VssCredentials,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Initializes a new <c>TfsHttpClientBase</c> instance.
            </summary>
            <param name="uri">The service location</param>
            <param name="sessionId">An optional session identifier</param>
            <param name="culture">The desired culture for the client</param>
            <param name="credentials">The credentials used to authenticate to the service</param>
            <param name="identityToImpersonate">The descriptor of an identity which should be impersonated</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.Channel">
            <summary>
            Gets the channel used for communication.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.ComponentName">
            <summary>
            When overridden in a derived class this returns the Team Foundation Server component name which is
            used for identification in traces.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.Credentials">
            <summary>
            Gets the credentials associated with this client.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.Culture">
            <summary>
            Gets the culture which should be used for all outgoing requests.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.Headers">
            <summary>
            Gets the collection of message headers which will be appended to all outgoing requests.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.RemoteServerName">
            <summary>
            Gets or sets a friendly name of the remote server for error messages.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.SessionId">
            <summary>
            Gets the session identifier which should be used for all outgoing requests.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.Settings">
            <summary>
            Gets the request settings associated with this proxy instance.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.State">
            <summary>
            Gets the current state of the http client.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.Url">
            <summary>
            Gets the web service URI for this proxy.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.ThisLock">
            <summary>
            Gets the lock used to synchronize access to this client.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.Abort">
            <summary>
            Aborts all outstanding active requests on the client.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.AddMessageHeader(Microsoft.TeamFoundation.Client.Channels.TfsMessageHeader)">
            <summary>
            Adds a message header which should be appended to all outgoing messages.
            </summary>
            <param name="header">The header which should apply to outgoing messages</param>
            <exception cref="T:System.ArgumentException">if <paramref name="header"/> is null</exception>
            <exception cref="T:System.InvalidOperationException">if the client is already opened</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.ApplyCustomSettings(Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings)">
            <summary>
            When overridden in a derived class, the default settings may be customized or replaced during
            initialization of the client.
            </summary>
            <param name="settings">The default settings for the client</param>
            <returns>The customized settings</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.CreateMessageEncoder">
            <summary>
            When overridden in a derived class, the default message encoder may be replaced during initialization
            of the client.
            </summary>
            <returns>The message encoder which should be used</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.Open">
            <summary>
            Opens the communications channel and prepares for communication with the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.Open(System.TimeSpan)">
            <summary>
            Opens the communications channel and prepares for communication with the server.
            </summary>
            <param name="timeout">The maximum amount of time allotted for the operation</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.OnCreateChannel(Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel)">
            <summary>
            When overridden in a derived class this method returns a custom implementation of a request channel
            which utilizes the provided channel for communications over the wire.
            </summary>
            <param name="innerChannel">The innermost channel which should be used for communication</param>
            <returns>A custom <see cref="T:Microsoft.TeamFoundation.Client.Channels.ITfsRequestChannel" /> implementation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.ConvertException(System.Web.Services.Protocols.SoapException)">
            <summary>
            Provides the ability to convert exceptions to strongly typed exceptions if desired.
            </summary>
            <param name="e">The SoapException which was returned from the server</param>
            <returns>An exception which should be thrown to the caller</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.GetService(System.Type)">
            <summary>
            Provides the ability to retrieve a service from the client object.
            </summary>
            <param name="serviceType">The type of service desired</param>
            <returns>An object of type <paramref name="serviceType" /> which represents the requested service</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.GetService``1">
            <summary>
            Provides the ability to retrieve a service from the client object.
            </summary>
            <typeparam name="T">The type of service desired</typeparam>
            <returns>An object of type <typeparamref name="T" /> which represents the requested service</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.GetServiceLocation">
            <summary>
            When overridden in a derived class this method should locate the service and return the URI.
            </summary>
            <returns>The URI of the service which is being located</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.Invoke(Microsoft.TeamFoundation.Client.Channels.TfsClientOperation,System.Object[])">
            <summary>
            Invokes a client operation synchronously on the calling thread.
            </summary>
            <param name="operation">The client operation</param>
            <param name="parameters">The input parameters</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.Invoke(Microsoft.TeamFoundation.Client.Channels.TfsClientOperation,System.Object[],System.Object[]@)">
            <summary>
            Invokes a client operation synchronously on the calling thread.
            </summary>
            <param name="operation">The client operation</param>
            <param name="parameters">The input parameters</param>
            <param name="timeout">The maximum time allowed for the request to complete</param>
            <param name="outputs">An array of outputs or null if the operation has no outputs</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.Invoke(Microsoft.TeamFoundation.Client.Channels.TfsClientOperation,System.Object[],System.TimeSpan,System.Object[]@)">
            <summary>
            Invokes a client operation synchronously on the calling thread.
            </summary>
            <param name="operation">The client operation</param>
            <param name="parameters">The input parameters</param>
            <param name="timeout">The maximum time allowed for the request to complete</param>
            <param name="outputs">An array of outputs or null if the operation has no outputs</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.BeginInvoke(Microsoft.TeamFoundation.Client.Channels.TfsClientOperation,System.Object[],System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous client operation.
            </summary>
            <param name="operation">The client operation</param>
            <param name="parameters">The input parameters</param>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
            <returns>The asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.BeginInvoke(Microsoft.TeamFoundation.Client.Channels.TfsClientOperation,System.Object[],System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous client operation.
            </summary>
            <param name="operation">The client operation</param>
            <param name="parameters">The input parameters</param>
            <param name="timeout">The maximum time allowed for the request to complete</param>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
            <returns>The asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.EndInvoke(System.IAsyncResult)">
            <summary>
            Ends an asynchronous client operation.
            </summary>
            <param name="result">The asynchronous operation</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.EndInvoke(System.Object[]@,System.IAsyncResult)">
            <summary>
            Ends an asynchronous client operation.
            </summary>
            <param name="outputs">An array of outputs or null if the operation has no outputs</param>
            <param name="result">The asynchronous operation</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.Microsoft#TeamFoundation#Client#Channels#ITfsRequestListener#AfterReceiveReply(System.Int64,System.String,System.Net.HttpWebResponse)">
            <summary>
            Explicit implementation of the interface method to avoid exposing on the public contract.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.Microsoft#TeamFoundation#Client#Channels#ITfsRequestListener#BeforeSendRequest(System.Int64,System.String,System.Net.HttpWebRequest)">
            <summary>
            Explicit implementation of the interface method to avoid exposing on the public contract.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.Microsoft#TeamFoundation#Client#Channels#ITfsRequestListener#BeginRequest">
            <summary>
            Explicit implementation of the interface method to avoid exposing on the public contract.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.Microsoft#TeamFoundation#Client#Channels#ITfsRequestListener#EndRequest(System.Int64,System.Exception)">
            <summary>
            Explicit implementation of the interface method to avoid exposing on the public contract.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.OnAfterReceiveReply(System.Int64,System.String,System.Net.HttpWebResponse)">
            <summary>
            The method invoked after a reply is received from the remote server.
            </summary>
            <param name="requestId">The previously generated request identifier</param>
            <param name="methodName">The name of the web method</param>
            <param name="contentLength">The response content length</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.OnBeforeSendRequest(System.Int64,System.String,System.Net.HttpWebRequest)">
            <summary>
            The method invoked before a request is issued to the remote server.
            </summary>
            <param name="methodName">The name of the web method</param>
            <param name="contentLength">The request content length</param>
            <returns>A unique request identifier for correlation between calls</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.OnBeginRequest">
            <summary>
            The method invoked before starting the request lifecycle.
            </summary>
            <returns>A unique request identifier for correlation between callbacks</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.OnEndRequest(System.Int64,System.Exception)">
            <summary>
            The method invoked after completing the request lifecycle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.HandleReply(Microsoft.TeamFoundation.Client.Channels.TfsClientOperation,Microsoft.TeamFoundation.Client.Channels.TfsMessage,System.Object[]@)">
            <summary>
            Handles processing the reply from a request message.
            </summary>
            <param name="operation">THe client operation</param>
            <param name="message">The response message</param>
            <param name="outputs">An array of outputs or null if the operation has no outputs</param>
            <returns>The result of the web method if one exists; otherwise, null</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Channels.TfsHttpClientBase.InvokeOperation">
            <summary>
            Encapsulates asynchronously invoking a client operation on the provided channel.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel">
            <summary>
            Provides a standard implementation of the HTTP request/response pattern for TFS clients.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.Credentials">
            <summary>
            Gets the credentials used for all outgoing messages on this channel.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.Culture">
            <summary>
            Gets the culture which is used for all outgoing messages on this channel.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.Encoder">
            <summary>
             Gets the message encoder for this channel.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.Headers">
            <summary>
            Gets the message headers which should be applied to all outgoing messages on this channel.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.Impersonate">
            <summary>
            Gets the identity which is being impersonated.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.Listener">
            <summary>
            Gets the request listener for this channel.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.ServerName">
            <summary>
            Gets the friendly name of the server for use in error messages.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.SessionId">
            <summary>
            Gets the session identifier which should be applied to all outgoing messages on this channel.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.Settings">
            <summary>
            Gets the settings to use for this channel.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.State">
            <summary>
            Gets the current state of the channel.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.Uri">
            <summary>
            Gets the remote service URI for this channel.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.Abort">
            <summary>
            Aborts all outstanding requests for the this channel.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.ApplyHeaders(Microsoft.TeamFoundation.Client.Channels.TfsMessage)">
            <summary>
            Applies message headers to the specified message.
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.Request(Microsoft.TeamFoundation.Client.Channels.TfsMessage)">
            <summary>
            Sends a request and retrieves the response on the calling thread.
            </summary>
            <param name="message">The request message</param>
            <returns>The response message</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.Request(Microsoft.TeamFoundation.Client.Channels.TfsMessage,System.TimeSpan)">
            <summary>
            Sends a request and retrieves the response on the calling thread.
            </summary>
            <param name="message">The request message</param>
            <param name="timeout">The maximum time allowed for the request to complete</param>
            <returns>The response message</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.BeginRequest(Microsoft.TeamFoundation.Client.Channels.TfsMessage,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request operation.
            </summary>
            <param name="message">The request message</param>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
            <returns>The asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.BeginRequest(Microsoft.TeamFoundation.Client.Channels.TfsMessage,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request operation.
            </summary>
            <param name="message">The request message</param>
            <param name="timeout">The maximum time allowed for the request to complete</param>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
            <returns>The asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestChannel.EndRequest(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request operation.
            </summary>
            <param name="result">The asynchronous operation</param>
            <returns>The response message</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestHelpers.CreateUri(System.String,System.String)">
            <summary>
            Creates a URI given a base URL and a query string.
            </summary>
            <param name="url">The service URL</param>
            <param name="queryString">The query string</param>
            <returns>A combined URL with the query string attached</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpRequestHelpers.CreateArtifactRequest(System.Uri,Microsoft.TeamFoundation.Client.TfsConnection)">
            <summary>
            Creates an <c>HttpWebRequest</c> instance for retrieving a TFS artifact.
            </summary>
            <param name="uri">The request URL</param>
            <returns>An <c>HttpWebRequest</c> instance for getting an artifact from the server</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Channels.TfsHttpRetryChannelFactory">
            <summary>
            Provides a factory for creating a transport channel with automatic retries when network connectivity
            issues to a Team Foundation Server are present.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpRetryChannelFactory.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new <c>TfsHttpRetryChannelFactory</c> instance with the specified retry count
            and sleep duration.
            </summary>
            <param name="maxTimeout">The duration of time which the operation is idle between retries</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpRetryChannelFactory.Enabled">
            <summary>
            Gets or sets a value indicating whether or not the retry fuctionality is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpRetryChannelFactory.MaxTimeout">
            <summary>
            Gets the time duration which the operation will be retried before failing.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpWebRequest.Request">
            <summary>
            Gets request message.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpWebRequest.Response">
            <summary>
            Gets the response message.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpWebRequest.RequestUri">
            <summary>
            Gets the target service location for this request.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpWebRequest.Credentials">
            <summary>
            Gets the credentials for the request.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpWebRequest.Settings">
            <summary>
            Gets the settings for the request.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsHttpWebRequest.Timeout">
            <summary>
            Gets the remaining time allowed for the operation to complete.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpWebRequest.SendRequest">
            <summary>
            Sends a request and receives the response using synchronous APIs. The message may be buffered and replayed
            on authentication failure, and may spawn a user interface depending on the configured credentials.
            </summary>
            <returns>The response message</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpWebRequest.IsLegacyAuthenticationChallenge(System.String,Microsoft.TeamFoundation.Client.Channels.TfsMessage)">
            <summary>
            This method should be removed once Orcas (Dev9) and Rosario (Dev10) servers are no longer supported.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpWebRequest.FormatServiceUnavailableMessage(System.String)">
            <summary>
            Formats a message appropriate for display to an end user.
            </summary>
            <param name="reason">The detailed reason the server is unavailable</param>
            <returns>A string suitable for display to the end user</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpWebRequest.FormatServiceUnauthorizedMessage">
            <summary>
            Formats a message appropriate for display to an end user.
            </summary>
            <returns>A string suitable for display to the end user</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsHttpWebRequest.EnsureTokenProvider(System.Net.HttpWebResponse)">
            <summary>
            Makes sure that the token provider has been initialized and validates the ability to retrieve a token.
            </summary>
            <param name="webResponse">The token authentication redirect response</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Channels.TfsHttpWebRequest.HttpWebResponseStream">
            <summary>
            Provides a stream wrapper that manages the lifetime of the response and corresponding stream.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Channels.TfsMessage">
            <summary>
            Represents a single message for remote communication with a Team Foundation Server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsMessage.Action">
            <summary>
            Gets the action for this message.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsMessage.Encoder">
            <summary>
            Gets the encoder for this message.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsMessage.Headers">
            <summary>
            Gets the header collection for this message.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsMessage.IsEmpty">
            <summary>
            Gets a value indicating whether or not this message has any content.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsMessage.IsFault">
            <summary>
            Gets a value indicating whether or not this message is a fault.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsMessage.To">
            <summary>
            Gets the target endpoint address for this message.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsMessage.EmptyMessage">
            <summary>
            Gets the empty message.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsMessage.CreateMessage(System.Uri,System.String,System.Collections.Generic.IList{Microsoft.TeamFoundation.Client.Channels.TfsMessageHeader},System.Xml.XmlDictionaryReader)">
            <summary>
            Creates a new <c>TfsMessage</c> instance using the specified reader for deserialization.
            </summary>
            <param name="to"></param>
            <param name="action"></param>
            <param name="headers"></param>
            <param name="bodyReader">The <c>System.Xml.XmlDictionaryReader</c> positioned at the body contents</param>
            <returns>A client message for the specified <paramref name="bodyReader"/></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsMessage.CreateMessage(System.Uri,System.String,System.Collections.Generic.IList{Microsoft.TeamFoundation.Client.Channels.TfsMessageHeader},System.Exception)">
            <summary>
            Creates a new <c>TfsMessage</c> instance using the specified fault.
            </summary>
            <param name="to"></param>
            <param name="action"></param>
            <param name="headers"></param>
            <param name="fault"></param>
            <returns>A client message for the specified <paramref name="fault"/></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsMessage.CreateMessage(System.String,Microsoft.TeamFoundation.Client.Channels.TfsBodyWriter)">
            <summary>
            Creates a new <c>TfsMessage</c> instance for the specified action. The body writer is used
            to serialize the message body and must be buffered.
            </summary>
            <param name="action">The message action</param>
            <param name="bodyWriter">The body writer for serializing the body contents</param>
            <returns>A client message for the specified action</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsMessage.Close">
            <summary>
            Releases all resources associated with the message.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsMessage.CreateException">
            <summary>
            Creates a <c>Exception</c> from the current message.
            </summary>
            <returns>An <c>Exception</c> class representing the fault contained in the message</returns>
            <exception cref="T:System.InvalidOperationException">if the message is not a fault</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsMessage.GetBodyReader">
            <summary>
            Retrieves a <c>System.Xml.XmlDictionaryReader</c> at the body contents of the message.
            </summary>
            <returns>A <c>System.Xml.XmlDictionaryReader</c> postioned at the start of the body contents</returns>
            <exception cref="T:System.InvalidOperationException">if the message is a fault</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsMessage.WriteBodyContents(System.Xml.XmlDictionaryWriter)">
            <summary>
            Writes the contents of the message to the provided <c>System.Xml.XmlDictionaryWriter</c>.
            </summary>
            <param name="writer">The message writer</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Channels.TfsMessageEncoder">
            <summary>
            Provides an abstraction layer for reading and writing different types of messages.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsMessageEncoder.ContentType">
            <summary>
            Gets the content type for this encoder.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsMessageEncoder.IsContentTypeSupported(System.String)">
            <summary>
            Determines whether or not the specified content type is supported by the encoder.
            </summary>
            <param name="contentType">The content type</param>
            <returns>True if <paramref name="contentType"/> is supported; otherwise, false</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsMessageEncoder.ReadMessage(System.String)">
            <summary>
            Creates a message object by reading the specified string.
            </summary>
            <param name="messageString">The string representation of the message</param>
            <returns>A message object</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsMessageEncoder.ReadMessage(System.IO.Stream)">
            <summary>
            Creates a message object by wrapping the specified stream.
            </summary>
            <param name="stream">The stream containing the message</param>
            <returns>A message object</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsMessageEncoder.WriteMessage(Microsoft.TeamFoundation.Client.Channels.TfsMessage,System.IO.Stream)">
            <summary>
            Writes the provided message to the specified request stream.
            </summary>
            <param name="message">The message</param>
            <param name="stream">The request stream</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Channels.TfsMessageHeader">
            <summary>
            Represents an individual header associated with a message.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsMessageHeader.Name">
            <summary>
            Gets the name of the header.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsMessageHeader.Namespace">
            <summary>
            Gets the namespace of the header.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsMessageHeader.Write(System.Xml.XmlDictionaryWriter)">
            <summary>
            Writes the header into the specified <c>System.Xml.XmlDictionaryWriter</c>.
            </summary>
            <param name="writer">The target writer</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsMessageHeader.GetReader">
            <summary>
            When overridden in a derived class, this method returns an <c>XmlDictionaryReader</c> instance to
            read the XML header contents.
            </summary>
            <returns>An xml reader for reading the header contents</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsMessageHeader.OnWriteStartHeader(System.Xml.XmlDictionaryWriter)">
            <summary>
            Writes the start element of the header using the <see cref="P:Microsoft.TeamFoundation.Client.Channels.TfsMessageHeader.Name"/> and
            <see cref="P:Microsoft.TeamFoundation.Client.Channels.TfsMessageHeader.Namespace"/> properties.
            </summary>
            <param name="writer">The target writer</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsMessageHeader.OnWriteEndHeader(System.Xml.XmlDictionaryWriter)">
            <summary>
            Writes the end element of the header.
            </summary>
            <param name="writer">The target writer</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsMessageHeader.OnWriteHeaderContents(System.Xml.XmlDictionaryWriter)">
            <summary>
            When overridden in a derived class, this method should write the custom header contents to the
            provided writer.
            </summary>
            <param name="writer">The target writer</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings">
            <summary>
            Provides access to common settings which control the behavior of requests for a <c>TfsHttpClient</c> instance.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings.BypassProxyOnLocal">
            <summary>
            Gets or sets a value indicating whether or not to bypass the configured proxy for local requests.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings.CompressionEnabled">
            <summary>
            Gets or sets a value indicating whether or not to enable compression.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings.CompressRequestBody">
            <summary>
            Gets or sets a value indicating whether the request body should be compressed with GZip.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings.ConnectionLimit">
            <summary>
            Gets the total number of simultaneous connections allowed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings.SendTimeout">
            <summary>
            Gets or sets the send timeout for a request operation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings.SoapTraceEnabled">
            <summary>
            Gets a value indicating whether or not SOAP tracing is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings.Tracing">
            <summary>
            Gets the tracing switch for the current request settings.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings.UserAgent">
            <summary>
            Gets the user agent which will be assigned to all outgoing requests.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings.AgentId">
            <summary>
            This is a kind of combination between SessionId and UserAgent.
            If supplied, the value should be a string that uniquely identifies
            this application running on this particular machine.
            The server will then use this value
            to correlate user requests, even if the process restarts.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings.Default">
            <summary>
            Gets the default request settings.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings.RequestEncoding">
            <summary>
            Gets the request encoding.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings.TestDelay">
            <summary>
            Gets or sets an artificial delay to wait before issuing requests.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings.EnsureDefaultSettings">
            <summary>
            Creates an instance of the default request settings.
            </summary>
            <returns>The default request settings</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsRequestSettings.SetDefaultQuotas(System.Xml.XmlDictionaryReaderQuotas)">
            <summary>
            Adjusts the max limits on the provided reader quotas to match expected team foundation message sizes.
            </summary>
            <param name="readerQuotas">The quotas which should be modified</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Channels.TfsSoapMessageEncoder.ContentType">
            <summary>
            Gets the content type for this encoder.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsSoapMessageEncoder.IsContentTypeSupported(System.String)">
            <summary>
            Determines whether or not the specified content type is supported by the encoder.
            </summary>
            <param name="contentType">The content type</param>
            <returns>True if <paramref name="contentType"/> is supported; otherwise, false</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsSoapMessageEncoder.ReadMessage(System.IO.Stream)">
            <summary>
            Creates a message object by wrapping the specified stream.
            </summary>
            <param name="stream">The stream containing the message</param>
            <returns>A message object</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsSoapMessageEncoder.ReadMessage(System.String)">
            <summary>
            Creates a message object by reading the specified string.
            </summary>
            <param name="messageString">The string representation of the message</param>
            <returns>A message object</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TfsSoapMessageEncoder.IsDetailNode(System.Xml.XmlDictionaryReader)">
            <summary>
            Determines whether or not the reader is positioned on the soap detail node.
            </summary>
            <param name="reader">The reader to test</param>
            <returns>True if the reader is positioned at a soap detail node; otherwise, false</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Channels.TfsSoapMessageEncoder.BufferedMessageHeader">
            <summary>
            Provides buffered access to a message header from a response message.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Channels.TracingStream.ToPrettyXml(System.String)">
            <summary>
            Convert the passed-in XML (if it's valid) to an easier-to-read version for trace logs.
            </summary>
            <param name="xml">valid XML</param>
            <returns>pretty-printed XML if valid, original string if not</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.#ctor">
            <summary>
            Creates a new ClientCertificateManager.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.Invalidate">
            <summary>
            Invalidates the cached data in the ClientCertificateManager.
            Should be called after receiving a 403 on an https request, to pick up
            new client certificates if necessary.
            An invalidation is guaranteed to cause only one refresh.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.ApplyCertificatesToWebRequest(System.Net.HttpWebRequest)">
            <summary>
            Given an HttpWebRequest, apply the ClientCertificates collection from this object to the
            web request, if the web request is using https.
            </summary>
            <param name="request">Request to potentially add client authentication certificates to</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ClientCertificateManager.ClientCertificates">
            <summary>
            The set of client certificates held by this ClientCertificateManager.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ClientCertificateManager.Instance">
            <summary>
            Static instance of the ClientCertificateManager.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.ApplyCertificatesToWebRequest(System.Net.HttpWebRequest,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
            <summary>
            Given an HttpWebRequest and a collection of X.509 certificates, adds the certificates as client
            authentication certificates to the web request, if the web request is using https.
            </summary>
            <param name="request">Request to potentially add client authentication certificates to</param>
            <param name="certificates">Client authentication certificates to add</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.GetClientAuthCertificates(System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Given a store location, returns the certificates in the store which:
            a. Are valid given the current date and time
            b. Can be used for client authentication
            </summary>
            <param name="storeLocation">Store location from which to load certificates</param>
            <returns>The matching certificates from the store location</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.ReadDisableClientCertificates(System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Reads (from the registry) whether or not client certificates are disabled.
            </summary>
            <param name="machineOrUserLevel">Specifies HKLM vs. HKCU</param>
            <returns>True, false, or null</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.ReadEffectiveDisableClientCertificates">
            <summary>
            Reads (from the registry) whether or not client certificates are disabled.
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.ReadEffectiveSpecifiedCertificateThumbprints">
            <summary>
            Reads (from the registry) the unified set of thumbprints specified by
            the environment variable, .config setting, registry (HKCU), and registry (HKLM).
            This method will not return duplicate thumbprints.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.ReadSpecifiedCertificateThumbprints(System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Reads (from the registry) the specified certificate thumbprints.
            Returns an empty array if no thumbprints are found.
            This method does not filter out duplicates.
            </summary>
            <param name="machineOrUserLevel">Specifies HKLM vs. HKCU</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.WriteDisableClientCertificates(System.Boolean,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Writes (to the registry) whether or not client certificates are disabled.
            </summary>
            <param name="disableClientCertificates">True to disable client certificates, false otherwise</param>
            <param name="machineOrUserLevel">Specifies HKLM vs. HKCU</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.WriteSpecifiedCertificateThumbprints(System.String[],System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Writes (to the registry) the specified certificate thumbprints.
            This method will filter out duplicate thumbprints.
            </summary>
            <param name="thumbprints">Thumbprints to write to the registry, or null for none</param>
            <param name="machineOrUserLevel">Specifies HKLM vs. HKCU</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.RefreshIfNeeded">
            <summary>
            Refreshes the certificates if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.Refresh">
            <summary>
            Loads the certificates from the certificate stores into the ClientCertificateManager.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.SplitDelimitedString(System.String)">
            <summary>
            Splits a delimited string and never returns null.
            </summary>
            <param name="delimitedString">String to split, or null</param>
            <returns>Array of string splits</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.GetClientCertificateByThumbprint(System.String)">
            <summary>
            Given a certificate thumbprint (which is a SHA-1 hash in the form of a string),
            return the matching X.509 certificate from the certificate store. The certificate
            will only be returned if it is valid and supports client authentication.
            </summary>
            <param name="thumbprint">Thumbprint of the certificate to find</param>
            <returns>The X.509 certificate with the specified thumbprint</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.CertificateSupportsClientAuth(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Given an X.509 certificate, returns whether or not the certificate declares
            that it can be used for client authentication.
            </summary>
            <param name="certificate">X.509 certificate to check</param>
            <returns>True if the certificate can be used for client authentication; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.IsPrivateKeyAvailable(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Int32@)">
            <summary>
            Determines if the private key of the certificate is currently
            accessible.
            </summary>
            <param name="toCheck">Certificate to check</param>
            <returns>True if the private key is available and the key can be used; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.GetBooleanValue(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Reads a boolean value from the client certificates registry key.
            If there is no name/value pair with the given name, null is returned.
            This method does not throw if an error occurs; null is returned.
            </summary>
            <param name="name">Name of name/value pair</param>
            <param name="machineOrUserLevel">Specifies HKLM vs. HKCU</param>
            <returns>Value of name/value pair</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.GetStringValue(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Reads a string value from the client certificates registry key.
            If there is no name/value pair with the given name, null is returned.
            This method does not throw if an error occurs; null is returned.
            </summary>
            <param name="name">Name of name/value pair</param>
            <param name="machineOrUserLevel">Specifies HKLM vs. HKCU</param>
            <returns>Value of name/value pair</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ClientCertificateManager.WriteStringValue(System.String,System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Writes a string value to the client certificates registry key.
            If the value is null, the name/value pair is deleted from the registry.
            This method will throw if an error occurs.
            </summary>
            <param name="name">Name for name/value pair</param>
            <param name="value">Value for name/value pair</param>
            <param name="machineOrUserLevel">Specifies HKLM vs. HKCU</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.IClientContext">
            <summary>
            Context for a command initiated by a client application
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IClientContext.Id">
            <summary>
            A unique Id for this context.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IClientContext.Command">
            <summary>
            The command (in the client's parlance) that was 
            invoked leading to the context being created
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ClientContext">
            <summary>
            Basic implementation of IClientContext
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ClientContext.Id">
            <summary>
            A unique ID for this context.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ClientContext.Command">
            <summary>
            The command (in the client's parlance) that was 
            invoked leading to the context being created
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ComboTree">
            <summary>
            Control to extend Combobox to show TreeControl for dropdown.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ComboTree.m_trvNodes">
            <summary>
            Reference to the embedded tree control.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Client.ComboTree.#ctor" -->
        <member name="P:Microsoft.TeamFoundation.Client.ComboTree.TreeNodes">
            <summary>
            Returns underlying Nodes collection
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ComboTree.Tree">
            <summary>
            Returns the underlying Tree object
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.Client.ComboTree.BeforeExpandTreeNode">
            <summary>
            Event raised when tree node is about to expand. Can be used to add nodes, update image index, etc
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.Client.ComboTree.BeforeCollapseTreeNode">
            <summary>
            Event raised when tree node is about to collapse. Can be used update image index, etc.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTree.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTree.GetValidNode(System.Windows.Forms.TreeNode)">
            <summary>
            Returns a valid selected node based on a selected node
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTree.OnBeforeExpand(System.Object,System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            Overrides BeforeExpand to raise the event to calling classes
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTree.OnBeforeCollapse(System.Object,System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            Overrides BeforeCollapse to raise the event to calling classes
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ComboTreeView">
            <summary>
            Subclassed treeview control that overrides few operations such as key processing.
            
            By default this control prefers the non-VS style. Users must explicitly re-style with VS Style preference.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ComboTreeView.cMinDropdownItems">
            <summary>
            Sizing constants.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ComboTreeView.m_parent">
            <summary>
            Reference to the parent ComboTree
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTreeView.#ctor(Microsoft.TeamFoundation.Client.ComboTree)">
            <summary>
            Constructor, initializes a new instance and sets the host control.
            </summary>
            <param name="host">Reference to the ComboTree control that is the parent of this control.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTreeView.GetSelectedText(System.Int32@)">
            <summary>
            Retrieves the text for the currently selected item.  This text will be shown in the edit control 
            of the combobox.
            </summary>
            <param name="caretPos">Retreives the location in the string where the caret should be positioned.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTreeView.Filter(System.String)">
            <summary>
            Filter down the contents of the control to match the specified filter text.
            May be a no-op.
            </summary>
            <param name="text">Filter text</param>
            <returns>'false' in all cases since this control does not support filtering.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTreeView.GetDesiredControlSize">
            <summary>
            Returns the desired size of the control, used for sizing the dropdown.  The dropdown may 
            not use this size.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTreeView.GetMinimumControlSize">
            <summary>
            Returns the minimum size of the dropdown.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTreeView.HandleComboControlFocusLost">
            <summary>
            Called when the textbox portion of the combobox looses focus.  Allows
            the dropdown control to decide if it wants to close the dropdown.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTreeView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles few keys to simulate combobox functionality
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTreeView.PreProcessMessage(System.Windows.Forms.Message@)">
            <summary>
            Handles the Escape and Tab keys, as those are not passed to the OnKeyDown override
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTreeView.m_trvNodes_LostFocus(System.Object,System.EventArgs)">
            <summary>
            Handles the 'LostFocus' event.  Closes the dropdown.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTreeView.m_trvNodes_NodeMouseClick(System.Object,System.Windows.Forms.TreeNodeMouseClickEventArgs)">
            <summary>
            Handles the mouse-click event on the tree, commits the selection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTreeView.m_trvNodes_AfterExpand(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Handles the treeviews 'AfterExpand' event.  
            Recomputes dropdown height to show more nodes on expand
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTreeView.SetSelection">
            <summary>
            Updates the parent control with the currently selected node's text and closes the dropdown.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ComboTreeView.GetTotalVisibleCount(System.Windows.Forms.TreeNodeCollection)">
            <summary>
            (recursive) returns the total number of visible nodes for collection of nodes
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CommandLine.ArgumentParser">
            <summary>
            ArgumentParser parses an argument list into Option objects and free rawArguments 
            (i.e., non-option rawArguments) based on a set of OptionDescriptions.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.ArgumentParser.#ctor(Microsoft.TeamFoundation.Client.CommandLine.Options.ID[],Microsoft.TeamFoundation.Client.CommandLine.Options.ID[])">
            <summary>
            Constructs an ArgumentParser.
            </summary>
            <param name="globalOptionIDs">array of options that are always present; may be null</param>
            <param name="localOptionIDs">array of options for the specific use; may be null</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.ArgumentParser.Parse(System.String,System.Int32,System.String[])">
            <summary>
            Parses the rawArguments into <code>Option</code> objects and free rawArguments
            (i.e., rawArguments that are not options).
            </summary>
            <param name="commandName">the name by which the command was invoked</param>
            <param name="start">the index at which to begin parsing the rawArguments</param>
            <param name="rawArguments">the rawArguments to parse</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.ArgumentParser.ParseValues(Microsoft.TeamFoundation.Client.CommandLine.Options.ID,Microsoft.TeamFoundation.Client.CommandLine.Options.Style,System.String,Microsoft.TeamFoundation.Client.CommandLine.Option,System.String,System.Int32)">
            <summary>
            Parses the values attached to an option.
            </summary>
            <param name="id">the option ID for the option being parsed</param>
            <param name="style">the option style for the option being parsed</param>
            <param name="invokedAs">how the option was invoked</param>
            <param name="option">the option instance to which value(s) will be added</param>
            <param name="argument">the option argument String</param>
            <param name="startIndex">the index of the first character of the first value</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CommandLine.Arguments">
            <summary>
            This class holds the name under which the command was invoked, the parsed command options, and 
            the free arguments (i.e., non-option arguments).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Arguments.#ctor(System.String)">
            <summary>
            Constructor for Arguments.
            </summary>
            <param name="CommandName">the name by which the command was invoked</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Arguments.Contains(Microsoft.TeamFoundation.Client.CommandLine.Options.ID)">
            <summary>
            Returns true if the specified option is present in the list of parsed options.
            </summary>
            <param name="optionID">the option to find</param>
            <returns>true if the specified option is present in the list of parsed options</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Arguments.GetOptionValue(Microsoft.TeamFoundation.Client.CommandLine.Options.ID)">
            <summary>
            Gets the value associated with an option.  If there is more than one value associated with
            the option, it returns only the first value.  If the option has no values associated with
            it, this method returns null.
            </summary>
            <param name="optionID">the ID of the option for which to get the value</param>
            <returns>the first value for the option or null if the option has no value</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Arguments.GetOptionValue(Microsoft.TeamFoundation.Client.CommandLine.Options.ID,System.Int32)">
            <summary>
            Gets the value associated with an option at the specified index.  If the index is invalid
            (i.e., if index >= option value count), this method returns null.
            </summary>
            <param name="optionID">the option</param>
            <param name="index">index of the desired value</param>
            <returns>the option value at the specified index or null if the index is invalid</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Arguments.GetAllOptionValues(Microsoft.TeamFoundation.Client.CommandLine.Options.ID)">
            <summary>
            Gets all of the values associated with an option.  Returns an empty array if there are no
            values for the option.
            </summary>
            <param name="optionID">the option</param>
            <returns>an array of values for the option or a zero-length array if there are no values</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Arguments.GetAllOptionsByID(Microsoft.TeamFoundation.Client.CommandLine.Options.ID)">
            <summary>
            Gets all of the options associated with an ID.  Returns an empty array if there are no
            options for the ID.
            </summary>
            <param name="optionID">the option</param>
            <returns>an array of options for the ID or a zero-length array if there are no options</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Arguments.GetOption(Microsoft.TeamFoundation.Client.CommandLine.Options.ID)">
            <summary>
            Gets the Option object given the option ID.
            </summary>
            <param name="optionID">the option ID</param>
            <returns>the Option object matching the option ID or null if not present</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Arguments.AppendOption(Microsoft.TeamFoundation.Client.CommandLine.Option)">
            <summary>
            Appends the specified option to the list of options.
            </summary>
            <param name="option">the option to append</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Arguments.FindOptionByID(Microsoft.TeamFoundation.Client.CommandLine.Options.ID)">
            <summary>
            Finds the Option object in the parsed option list matching the specified option ID.
            </summary>
            <param name="optionID">the option ID to find</param>
            <returns>the matching Option object or null if not found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Arguments.GetFreeArgument(System.Int32)">
            <summary>
            Gets the specified free argument.  It returns null if the index is not valid rather than
            throw an exception, as directly indexing FreeArguments would.
            </summary>
            <param name="index">the index of the desired free argument</param>
            <returns>the free argument at the index or null if the index is invalid</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Arguments.GetFreeArgumentsAsArray">
            <summary>
            Converts the free arguments to a String array.
            </summary>
            <returns>a String array containing the free arguments</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CommandLine.Arguments.CommandName">
            <summary>
            The name by which the command was invoked
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CommandLine.Arguments.Options">
            <summary>
            The options held by this Arguments
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CommandLine.Command">
            <summary>
            Command is base class for all commands.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.#ctor(Microsoft.TeamFoundation.Client.CommandLine.Arguments)">
            <summary>
            The Command constructor simply records references to the Arguments object.
            </summary>
            <param name="arguments">the parsed options specified with the command</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.Run">
            <summary>
            This method is used to run an instance of a command.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.ReportBadOptionIfPresent(Microsoft.TeamFoundation.Client.CommandLine.Options.ID,System.String)">
            <summary>
            Reports a conflict by throwing an exception if the specified option ID is present.
            </summary>
            <param name="conflictingID">secondary option that conflicts with primary</param>
            <param name="messageFormat">the format string to use; the string must have one 
            formatting argument</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.ReportBadOptionCombinationIfPresent(Microsoft.TeamFoundation.Client.CommandLine.Options.ID,Microsoft.TeamFoundation.Client.CommandLine.Options.ID)">
            <summary>
            Reports a conflict by throwing an exception if both options are present.
            </summary>
            <param name="optionId1">option 1</param>
            <param name="optionId2">option 2</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.ReportBadOptionCombinationIfPresent(Microsoft.TeamFoundation.Client.CommandLine.Options.ID,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Client.CommandLine.Options.ID})">
            <summary>
            Takes a set of options and returns a conflict if any one of them is present with option1.
            </summary>
            <param name="optionId1">option 1</param>
            <param name="optionId2">list of invalid co-options</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.ReportMissingAssociatedOption(Microsoft.TeamFoundation.Client.CommandLine.Options.ID,Microsoft.TeamFoundation.Client.CommandLine.Options.ID)">
            <summary>
            Checks that a second option is specified with the first and throws an ArgumentListException
            if the required option is missing.
            </summary>
            <param name="optionId1">option 1</param>
            <param name="optionId2">option 2</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.ReportMissingAssociatedOption(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Client.CommandLine.Options.ID},Microsoft.TeamFoundation.Client.CommandLine.Options.ID)">
            <summary>
            Takes a list of options and that require teh presence of a second option and throws
            an ArgumentListException if the one of the options is present without the associated option.
            </summary>
            <param name="optionId1">A list of options that require a second option to be present.</param>
            <param name="optionId2">The associated option that is required for each item in the list.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.GetUserNameAndPassword(System.String@,System.String@)">
            <summary>
            Get the user name and password using the login option or env var.
            </summary>
            <param name="userName">the user name -- will be null if no /login specified</param>
            <param name="password">the password -- set to the empty string if not specified</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.GetImpersonationUserName(System.String@)">
            <summary>
            If the command has the /impersonate switch specified, get the username from the option
            and return it. Otherwise return null.
            </summary>
            <param name="impersonationUserName">The username for impersonate, or null if not
            impersonating</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.IsNoPromptSpecified">
            <summary>
            Returns false if the /prompt option appears in the command's arguments 
            and either /noprompt option is not specified or standard output is redirected; returns true otherwise.
            Standard out being redirected is ignored if IgnoreStdOutRedirection is set to 1 in the 
            environment.
            </summary>
            <returns>
            true if interactive prompts should be disabled, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.GetCollectionOption">
            <summary>
            Get option /server or /collection.
            Prints warning if /server was used.
            Fails if both of them were used.
            </summary>
            <returns>Option of /server or /collection option.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.GetCollectionOptionValue">
            <summary>
            Get option /server or /collection.
            Prints warning if /server was used.
            Fails if both of them were used.
            </summary>
            <returns>Option of /server or /collection option. Null if none was specified.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.ParseString(System.String,System.Char,System.String@,System.String@)">
            <summary>
            This helper method breaks a string at the specified separator.  The separator is escaped
            whenever it appears twice in a row.
            </summary>
            <param name="s">the string to parse</param>
            <param name="separator">the separator character</param>
            <param name="value">the extracted string prior to the separator; the escape sequences are
              replaced with the single char; the value does not include the terminating separator</param>
            <param name="remainder">the rest of the string; the separator is not included at the front</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.IsOptionSpecified(Microsoft.TeamFoundation.Client.CommandLine.Options.ID)">
            <summary>
            Indicates whether a particular command-line option was provided.
            </summary>
            <param name="optionId">The option to check.</param>
            <returns>True if the option was specified, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.GetStringStyleOption(Microsoft.TeamFoundation.Client.CommandLine.Options.ID,System.Int32)">
            <summary>
            Gets string-style option, it can either be an actual string or a filename starting with @
            </summary>
            <param name="optionId">the option</param>
            <param name="maxSize">the maximum number of characters allowed or zero for no limit</param>
            <returns>the string from the command line argument or contents of specified file</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.GetStringStyleOption(Microsoft.TeamFoundation.Client.CommandLine.Arguments,Microsoft.TeamFoundation.Client.CommandLine.Options.ID,System.Int32)">
            <summary>
            Gets string-style option, it can either be an actual string or a filename starting with @
            </summary>
            <param name="arguments">arguments</param>
            <param name="optionId">the option</param>
            <param name="maxSize">the maximum number of characters allowed or zero for no limit</param>
            <returns>the string from the command line argument or contents of specified file</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.ReadFile(System.String,System.Int32)">
            <summary>
            Read the contents of a file as a string and return it.
            </summary>
            <param name="fileName">name of the file to read</param>
            <param name="maxSize">the maximum number of characters allowed or zero for no limit</param>
            <returns>contents of file as a string</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.ParseOption(Microsoft.TeamFoundation.Client.CommandLine.Options.ID,Microsoft.TeamFoundation.Client.CommandLine.Options.Value[],Microsoft.TeamFoundation.Client.CommandLine.Options.Value)">
            <summary>
            Returns the Options.Value enum constant representing the value specified by the user.
            If the option is not specified, Options.Value.None is returned.
            </summary>
            <param name="optionId">the option to process</param>
            <param name="supportedValues">the supported values for the option</param>
            <param name="fallback">the value to return if the option is not specified</param>
            <returns>the format or Options.Value.None if the option is not present</returns>
            <exception cref="T:Microsoft.TeamFoundation.Client.CommandLine.Command.ArgumentListException">invalid option value</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.GetExitCode">
            <summary>
            Returns the current exit code value.
            </summary>
            <returns>the current exit code</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.SetExitCode(Microsoft.TeamFoundation.Client.CommandLine.ExitCode)">
            <summary>
            Set the exit code for the commands.  Setting the exit code multiple times composes in 
            interesting ways here.
            If all exitCodes match, the result is the value.
            If the new setting is greater, keep the new one (that way if 100 happens at the end, it wins).
            Otherwise, if different, the result is ExitCode.PartialSuccess.
            </summary>
            <param name="exitCode">Exit code to set.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.IsEnvVarSet(System.String)">
            <summary>
            Returns true if the environment variable is set.
            </summary>
            <param name="osVersion">the name of the environment variable</param>
            <returns>true if the specified variable is set; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Command.AskQuestion(Microsoft.TeamFoundation.Client.CommandLine.QuestionType,System.String)">
            <summary>
            Ask the user a question.
            </summary>
            <param name="questionResource">the name of the resource</param>
            <param name="args">arguments to format</param>
            <returns>user's response</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CommandLine.Command.TfsConnection">
            The TfsConnection object.  Note that object is not created until the command has
            determined the Url.
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CommandLine.Command.ArgumentListException">
            Thrown for invalid argument lists.
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CommandLine.Command.BlockedException">
            Thrown when a command becomes blocked.
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CommandLine.Command.UnrecognizedCommandException">
            Thrown when the user supplies a command that does not match a defined command.
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CommandLine.CommandLine">
            <summary>
            Derive your "Main" command line class from this one
            It gives you a framework for parsing the command line
            in a consistent way and for running commands from a 
            file.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.LogException(System.Exception)">
            <summary>
            Logs an exception in the exception log file.  Each exception is time stamped.
            Putting the exception details in a log file enables the same baseline test files to 
            be used for testing debug and checkin builds.
            </summary>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.RunCommand(System.String[])">
            <summary>
            This method calls the abstact method RunCommand
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.UpdateHelpCommandArgs(System.Boolean)">
            <summary>
            If a command subgroup has been specified, we need to shift the arguments array by one to the 
            right since the commandSubgroupIdentifier is not an argument to the help command.
            </summary>
            <param name="commandGroupSpecified"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.Initialize(System.String[])">
            <summary>
            Override this method to perform initialization 
            before any commands are run
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.RunCommand(System.String,System.String[],System.Boolean@)">
            <summary>
            Override this method to run your commands.
            </summary>
            <param name="commandName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.GetApplicationIcon">
            <summary>
            Override this method to return the icon to use for this application.
            </summary>
            <returns>Icon for this application</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.LogCategory">
            <summary>
            Override this property to return the LogCategory for your 
            application.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.Shutdown">
            <summary>
            Shutdown the command-line program.
            Override this method to add any clean up code you may need
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.Console_CancelKeyPress(System.Object,System.ConsoleCancelEventArgs)">
            <summary>
            Ctrl-C and Ctrl-Break handler
            </summary>
            <param name="sender">the console object</param>
            <param name="e">cancel event args</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.CancelKeyPressed(System.ConsoleCancelEventArgs)">
            <summary>
            Override this method to respond to Ctrl-C or Ctrl-Break
            </summary>
            <param name="e">cancel event args</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.RunMultipleCommands(System.String,System.String[])">
            <summary>
            Runs a list of commands from either standard in or a file, based on the argument passed in.
            </summary>
            <param name="arg">either a single character to indicate standard in or a file name after
              skipping the first character</param>
            <param name="parameters">parameters for expansion in the list of commands</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.RunCommandsFromStream(System.IO.TextReader,System.String[],System.String)">
            <summary>
            Runs a list of commands, one per line, read from a TextReader stream.
            The format of the stream has the following rules:
              * A line whose first non-whitespace character is '#' is treated as a comment.
              * A command may be split on multiple lines by having '\' at the end of each line but
                the last.
              * Placing 'quit' or 'exit' (case insensitive) on a line by itself terminates processing.
            All strings of the form %var% are expanded from environment variables.
            All strings of the form %n where n >= 1 are treated as parameters and are transformed to the
            positional argument.
            An uncaught exception from a command terminates processing.
            The current directory name is printed before the command is executed.
            </summary>
            <param name="stream">the stream containing lines of commands or comments</param>
            <param name="parameters">the parameters for the list of commands</param>
            <param name="fileName">the name of the file associated with the stream</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.RunExtendedCommand(System.String[],System.String,System.String[],System.String)">
            <summary>
            Override this method to add additional built in commands.
            Built in commands are only available in Debug builds or
            when the environment variable DD_SUITES is set.
            They are also only availabe when executing multiple 
            commands from a stream
            </summary>
            <param name="args">command line args in a string array</param>
            <param name="fullCommandLine">command line args as a string</param>
            <param name="parameters">command line args passed in to actual command line program</param>
            <param name="fileName">name of the file that we are reading commands from</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.ExpandVariables(System.String,System.String[])">
            <summary>
            Utility method to expand environment variables and parameters.
            </summary>
            <param name="line">the line being processed</param>
            <param name="parameters">the list of positional parameters</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.CheckNumArgs(System.String[],System.Int32)">
            <summary>
            Utility method to check that the number of args for a built-in command is correct.
            </summary>
            <param name="args">the parsed line (command itself is args[0])</param>
            <param name="numArgs">the number of args the command takes</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.CheckNumArgs(System.String[],System.Int32,System.Int32)">
            <summary>
            Utility method to check that the number of args for a built-in command is correct.
            </summary>
            <param name="args">the parsed line (command itself is args[0])</param>
            <param name="minArgs">the minimum number of args the command takes</param>
            <param name="maxArgs">the maximum number of args the command takes</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.DisplayTree(System.String,System.Int32,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Displays the files and directories under path in a manner similar to Windows 'tree /f'.
            </summary>
            <param name="path">the root</param>
            <param name="level">the current level</param>
            <param name="prefix">the prefix for the level</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.CountFiles(System.String)">
            <summary>
            Count all files in the specified folder recursively.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.DisplayFileContents(System.String)">
            <summary>
            Utility method to display the contents of a file.  The file is assumed to be in the default
            encoding unless it has the Unicode BOM.
            </summary>
            <param name="fileName">the file to display</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.CreateFile(System.String[])">
            <summary>
            Utility method to create a dummy file on disk.
            </summary>
            <param name="args">the arguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.Sleep(System.String)">
            <summary>
            Utility method to pause the current thread; no validity checks
            are performed on the valuse passed as the sleep time
            </summary>
            <param name="arg">The value to sleep, expressed in seconds.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.AttribFile(System.String[])">
            <summary>
            Utility method to toggle a file's read only bit.
            e.g.:
            attrib -r file.txt
            attrib +r file.txt
            </summary>
            <param name="args">the arguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.AppendLine(System.String[])">
            <summary>
            Utility method to append a line of content to a file.
            append file.txt "Some line of text"
            append /front file.txt "Some line of text"
            </summary>
            <param name="args">the arguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.RunOSCommand(System.String)">
            <summary>
            Runs a new process based on commandline and 
            waits for the result
            </summary>
            <param name="commandLine"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.GetConnectedServers">
            <summary>
            This method returns the list of servers that have been
            created using the CreateTfs method.
            </summary>
            <returns>TeamFoundationServer array</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.CanonicalizeTfsName(System.String)">
            <summary>
            Utility method that attempts to reduce different names for the same server to the same
            representation.  e.g. "HTTP://FOO:8080", "http://foo:8080///" and "FoosFriendlyName" all
            return "http://foo:8080/".  Useful for hash keys.
            </summary>
            <param name="tfsName">the friendlyname or a uri for a tfs server.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.CreateTfs(System.String,Microsoft.TeamFoundation.Client.CommandLine.Command)">
            <summary>
            Creates an instance of a TeamFoundationServer using either the user name and password provided with the
            /login option or the current user's credentials.
            </summary>
            <param name="tfsName">the name of the Team Foundation Server to be used</param>
            <param name="command">the command that is running</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.GetCredentials(System.String,System.String)">
            <summary>
            Gets the user name and password and then returns the appropriate credentials.
            </summary>
            <param name="userName">the user name to use</param>
            <param name="password">the password to use</param>
            <returns>the credentials</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.IsEnvVarSet(System.String)">
            <summary>
            Returns true if the environment variable is set.
            </summary>
            <param name="osVersion">the name of the environment variable</param>
            <returns>true if the specified variable is set; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.SetShowExitCode(System.String)">
            <summary>
            Utility method to set the global "show exit code" setting
            </summary>
            <param name="setting">the new setting as a string, "on" or "off"</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.SetShowExitMarker(System.String)">
            <summary>
            When true, this will cause the ENDOFSTREAM text marker to be output on both stdout and stderr
            when a command completes.
            </summary>
            <param name="setting">the new setting as a string, "on" or "off"</param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.CommandLineArgs" -->
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.IsNoPromptSet">
            <summary>
            Returns true if no prompt is set to true globally; false otherwise
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.NoPrompt">
            <summary>
            Returns the raw NoPromptState.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.SetNoPrompt(System.String)">
            <summary>
            Utility method to set the global "noprompt" setting
            </summary>
            <param name="setting">the new setting as a string, "on" or "off"</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.CommandLine.MsdnRequested">
            <summary>
            Checks if first argument is msdn
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CommandLine.NoPromptState">
            <summary>
            Enum providing a way to specify if we want to add Prompt flag, NoPrompt flag or keep the default behavior
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CommandLine.Option">
            <summary>
            Summary description for Option.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Option.#ctor(Microsoft.TeamFoundation.Client.CommandLine.Options.ID,System.String)">
            <summary>
            Creates an option object that ties the ID to the alias used to invoke the option.
            The Values field contains any values associated with the option and is accessed directly
            for efficiency (e.g., /option:value1,value2).
            </summary>
            <param name="id">option ID</param>
            <param name="invokedAs">alias string invoking the option</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CommandLine.Options">
            <summary>
            This class contains the definitions for option styles and IDs along with functions for
            converting strings to option IDs and styles.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Options.MatchesValue(System.String,Microsoft.TeamFoundation.Client.CommandLine.Options.Value)">
            <summary>
            Tests (case insensitive) to see if the input value matches the specified option value.
            </summary>
            <param name="inputValue">the input value to test</param>
            <param name="val">the Options.Value to test against</param>
            <returns>true if the input value matches; otherwise, false</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Options.GetIDAndStyle(System.String,Microsoft.TeamFoundation.Client.CommandLine.Options.ID@,Microsoft.TeamFoundation.Client.CommandLine.Options.Style@)">
            <summary>
            This function gets the option ID and style for the specified alias.  If no match is found,
            the id is set to UnknownOption.  The check is case insensitive.
            </summary>
            <param name="alias">the alias by which the option is being invoked</param>
            <param name="id">the option ID found or UnknownOption</param>
            <param name="style">the option style if the ID is not UnknownOption</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Options.GetIDFromAlias(System.String)">
            <summary>
            Get the option ID given the alias used to invoke the option.  To add an alias for an existing
            option ID, just add a case statement below.  The check is case insensitive.
            </summary>
            <param name="alias">the alias for which an option ID is desired</param>
            <returns>returns the corresponding option ID or UnknownOption</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Options.GetStyleFromID(Microsoft.TeamFoundation.Client.CommandLine.Options.ID)">
            <summary>
            Gets the style (e.g., one value, multiple values, etc.) given an option ID.
            </summary>
            <param name="id">the option ID for which to return the option style</param>
            <returns>returns the option style for the specified option ID</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommandLine.Options.GetOccurrencesFromID(Microsoft.TeamFoundation.Client.CommandLine.Options.ID)">
            <summary>
            Gets the occurrence (e.g., once , multiple ) given an option ID.
            </summary>
            <param name="id">the option ID for which to return the option occurrence</param>
            <returns>returns the option occurrence for the specified option ID</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.AddDomainDialog">
            <summary>
            Summary description for AddDomainDialog.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.AddDomainDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.AddDomainDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.AddDomainDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.AddDomainDialogDataSource.StartConnect(System.Action{Microsoft.TeamFoundation.Client.TfsConnection,System.Exception})">
            <summary>
            Starts the connection process asychronously
            </summary>
            <param name="connectionCompleted"> delegate that will be called when the connection is completed, 
            first param is the authenticated server (or null if failed), 
            second param is the failure excpetion (null if successful)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.AddDomainDialogDataSource.StopConnect">
            <summary>
            stops the connection process
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.AddDomainDialogDataSource.ServerName">
            <summary>
            Server Name or url
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.AddDomainDialogDataSource.SetTimeouts">
            <summary>
            Sets the timeouts for the framework and registration service components to 30 seconds.
            In some cases some hosts will not respond at all, so an error in the host name could 
            cause long delays.
            
            Currently these need to be set globally, there isn't a facility to specify timeouts 
            on individual calls made during connection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.AddDomainDialogDataSource.SetTimeout(System.String)">
            <summary>
            Sets the timeout for the specified component to 30 seconds.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.AddDomainDialogDataSource.RestoreTimeouts">
            <summary>
            Restores the timeouts for the framework and registration services components to their
            original values, if any.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.AddDomainDialogDataSource.RestoreTimeout(System.String)">
            <summary>
            Restores the timeout for the specified component to the original values, if any.
            </summary>
            <param name="componentName"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.AddDomainDialogDataSource.HandleConnectionCompleted(Microsoft.TeamFoundation.Client.AddDomainDialogDataSource.AuthenticateResult)">
            <summary>
            Process the result from an AuthenticateWorker.
            Done in priority order. if a higher pri has not finished the results we be stored and processed later
            </summary>
            <param name="completedResult">result of the AuthenticateWorker</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.AddDomainDialogDataSource.OnConnectionCompleted(Microsoft.TeamFoundation.Client.TfsConnection,System.Exception)">
            <summary>
            calls back the call with the result of the connect request 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.AddDomainDialogDataSource.ProcessResult(Microsoft.TeamFoundation.Client.AddDomainDialogDataSource.AuthenticateResult)">
            <summary>
            Process a result
            </summary>
            <param name="completedResult"> the completed result from the authenticate worker, must not be null</param>
            <returns>true if not further processing is needed, false if this result is a failure</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.AddDomainDialogDataSource.PropertyName">
            <summary>
            Property names constanct used with the propery changed event
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.AddDomainDialogDataSource.AuthenticateResult">
            <summary>
            Object to hold the results of an AuthenticateWorker
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ManageRegisteredServersDialog">
            <summary>
            ManageTfsListInternal dialog is a proxy dialog for ManageTfsList. 
            It is used so that it can hide other extraneous Forms properties from the caller.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ManageRegisteredServersDialog.#ctor(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection)">
            <summary>
            Dialog  for adding/removing servers from RegisteredServers
            </summary>
            <param name="activeServer">Currently active server. cannot be removed</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ManageRegisteredServersDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ManageRegisteredServersDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ITeamProjectPickerDefaultSelectionProvider">
            <summary>
            interface for providing default selection to ConnectToTFsDialog
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITeamProjectPickerDefaultSelectionProvider.GetDefaultServerUri">
            <summary>
            reutrns the uri for the selected server
            </summary>
            <returns>The Uri for the selected server</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITeamProjectPickerDefaultSelectionProvider.GetDefaultCollectionId(System.Uri)">
            <summary>
            return the default selected collection per server
            </summary>
            <param name="instanceUri"> the fully qualifed uri for an configuration server</param>
            <returns>the Id of the default selected collection</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITeamProjectPickerDefaultSelectionProvider.GetDefaultProjects(System.Guid)">
            <summary>
             returns the list of selected prjects for a collection with this Id
            </summary>
            <param name="collectionId"> InstanceId for a team foundation server</param>
            <returns> list of default selected projects uri's</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TeamProjectPicker">
            <summary>
            Lets you pick a team foundation collection of projects
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamProjectPicker.#ctor">
            <summary>
            Defualt Constructor, lets your select a single project from a collection
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamProjectPicker.#ctor(Microsoft.TeamFoundation.Client.TeamProjectPickerMode,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="mode">ProjectSelection mode</param>
            <param name="disableCollectionChange">Disables changing the default team project collection</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamProjectPicker.#ctor(Microsoft.TeamFoundation.Client.TeamProjectPickerMode,System.Boolean,Microsoft.TeamFoundation.Client.ICredentialsProvider)">
            <summary>
            Constructor
            </summary>
            <param name="mode">ProjectSelection mode</param>
            <param name="disableCollectionChange">Disables changing the default team project collection</param>
            <param name="credentialsProvider">Credentials provider to use when failing to authenticate to a server</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamProjectPicker.SetDefaultSelectionProvider(Microsoft.TeamFoundation.Client.ITeamProjectPickerDefaultSelectionProvider)">
            <summary>
            Sets the default selection provider
            </summary>
            <param name="provider">DefautlSelectionProvider, null = nohing is selected by default</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.Client.TeamProjectPicker.AcceptButtonClick">
            <summary>
            event fires when the accept event is clicked, you can do custom validation here and cancel closing the dialog
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamProjectPicker.Text">
            <summary>
            Title of the dialog
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamProjectPicker.HelpTopic">
            <summary>
            Help topic
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamProjectPicker.AcceptButtonText">
            <summary>
            Text for the accept button, by default its connect
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamProjectPicker.AutoCommitConnectionChanges">
            <summary>
            Specifies if the project picker should automatically update cached connection information on
            positive completion of the dialog after cancellation handlers have had an opportunity to intervene.
            </summary>
            <remarks>
            Default value is true. Call <c>CommitConnectionChange</c> to perform the same operation manually.
            </remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamProjectPicker.SelectedProjects">
            <summary>
            default selected project for the SelectedTeamProjectCollection 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamProjectPicker.SelectedTeamProjectCollection">
            <summary>
            the selected collection
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamProjectPicker.HasNewCredentials">
            <summary>
            Indicate that the selected connection has been re-authenticated and the new credentials
            could be different from the cached one. 
            </summary>
            <remarks>
            If <c>AutoCommitCollectionChanges</c> is surpressed, call <c>CommitConnectionChange</c> 
            manually to commit the changes and perist the credentials to the token storage.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamProjectPicker.CommitConnectionChange(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection)">
            <summary>
            Commit the connection changes to the local storage and in-memory cache.
            </summary>
            <remarks>
            Use to manually commit changes when suppressing <c>AutoCommitCollectionChanges</c>.
            </remarks>
            <param name="collection">The newly selected Team Project Collection</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamProjectPicker.CommitConnectionChange(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.Boolean)">
            <summary>
            Commit the connection changes to the local storage and in-memory cache and persist
            the credentials to the token storage.
            </summary>
            <remarks>
            Use to manually commit changes when suppressing <c>AutoCommitCollectionChanges</c> 
            and <c>HasNewCredentials</c> is set.
            </remarks>
            <param name="collection">The newly selected Team Project Collection</param>
            <param name="storeCredentials">True to also persist the credentials to the token storage</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnectDataSource.ServerNode.RetrieveProjects">
            <summary>
            Set to false, if mode is DisableProjectSelect
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnectDataSource.ServerNode.HasNewCredentials">
            <summary>
            True if the existing connection is re-authenticated
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnectDataSource.ServerNode.CredentialsSwitchingServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnectDataSource.ServerNode.RefreshWithNewCredentials">
            <summary>
            Refresh the connection by prompting for new credentials.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.TfsConnectDialog.m_teamProjectsCheckedListBox">
            <summary>
            For multi project select
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.TfsConnectDialog.m_teamProjectsListBox">
            <summary>
            For single project select
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.TfsConnectDialog.m_hookedCollectionsEvent">
            <summary>
            We hook to the status changed events of retrievable collection, this is to insure we only hook 1 handler/event
            in WPF, we wouldn't need this, as it will hook/unhook the handler as collection is added/removed from the UI
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.TfsConnectDialog.m_credentialStorage">
            <summary>
            The storage where connection user information is retrieved when the selected server is not connected.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.TfsConnectDialog.m_connectionUserMap">
            <summary>
            Cache the connection user information.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnectDialog.m_serversButton_Click(System.Object,System.EventArgs)">
            <summary>
            Launch the dialog to allow the user to browse and find more servers. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnectDialog.StyleControls">
            <summary>
            Styles the controls.  This is separated out from 'SetupControls' because it needs to be done after the controls are created (during 'OnLoad' 
            instead of during construction).  This can cause some painting issues when there are scrollbars, specifically the last item is not visible 
            (cannot scroll to it).
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.TfsConnectDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnectDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnectDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ConnectedUserContext.Namespace">
            <summary>
            The namespace of the connected user.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ConnectedUserContext.TokenKind">
            <summary>
            The token kind of the connected user.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ConnectedUserContext.ServerUri">
            <summary>
            The server endpoint of the connected user.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ConsoleHost.EnvironmentFlags">
            <summary>
            Flags describing the runtime environment.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ConsoleHost.Write(Microsoft.TeamFoundation.Client.LogFlags,Microsoft.TeamFoundation.Client.LogCategory,System.String)">
            <summary>
            Log an output message.
            </summary>
            <param name="flags">Indicates the importance/severity of the message as well if it should be
            persisted</param>
            <param name="category">Indicates the source of the message.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ConsoleHost.OutputEncoding">
            <summary>
            Provides the display object's character encoding
            </summary>
            <returns>display's character encoding</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ConsoleHost.OnModalDialogFormActivate(System.Object,System.EventArgs)">
            <summary>
            On form activate for a modal dialog for the console.  We check to see if we are the 
            foreground window and flash the taskbar if we aren't.
            </summary>
            <param name="sender">Form to activate</param>
            <param name="e">Standard event args</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ConsoleHost.ReadLine">
            <summary>
            Reads in characters up to a new line.
            </summary>
            <returns>a string with the contents of what was read in</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ConsoleHost.Initialize">
            <summary>
            Ensure that we have an instance of the console host.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ConsoleHost.WriteBuffer(System.Byte[],System.Int32)">
            <summary>
            Prints a buffer to the console via stdout.
            </summary>
            <param name="rawBytes">buffer to display</param>
            <param name="numBytesToWrite">number of bytes to actually write</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ConsoleHost.WriteBuffer(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Prints a buffer to either stdout or stderror.  Control characters are replaced with 
            spaces on output.
            </summary>
            <param name="rawBytes">the buffer to display</param>
            <param name="numBytesToWrite">number of bytes to actually write</param>
            <param name="stdErr">true for stderr, false for stdout</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ConsoleHost.GetOutputStream">
            <summary>
            Provides a reference to the display object's output stream.
            DO NOT CLOSE THE STREAM !!! (unless you're absolutely sure it's OK)
            </summary>
            <returns>display's output stream</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ConsoleHost.GetErrorStream">
            <summary>
            Provides a reference to the display object's error stream.
            DO NOT CLOSE THE STREAM !!! (unless you're absolutely sure it's OK)
            </summary>
            <returns>display's error stream</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ConsoleHost.ThrowIfCanceled">
            <summary>
            Throw the OperationCanceledException if the user has hit cancel (Ctrl-C or Ctrl-Break).
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ConsoleHandle">
             <summary>
             Simple wrapper for console handles.
            
             Note that there is no Dispose pattern here.  Calling CloseHande on a handle returned from
             GetStdHandle is a bad idea because doing so kills it for the CLR later.  The giveaway
             should be that this is a "Get" API vs. a "Create" or "Open" type API.
             </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ConsoleHandle.IsValid">
            <summary>
            IsValid returns true if it's a valid console handle.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ConsoleHandle.Handle">
            <summary>
            return console handle.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ConsoleUtils">
            <summary>
            Helper class for Console apps.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ConsoleUtils.IsPrintableConsoleChar(System.Char)">
            <summary>
            Test to see if a character is printable on the console.
            </summary>
            <param name="ch">character to test</param>
            <returns>true if the character is printable, false otherwise</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ConsoleUtils.RedirectedOutputEncoding">
            <summary>
            Return the encoding to use for redirected console output for closer consistency with 
            CMD.EXE output.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ConsoleUtils.Write(System.String,System.Boolean)">
            <summary>
            Write a string to the console.  Unprintable characters will be converted to spaces if the
            console handle is not redirected.
            </summary>
            <param name="message">the message to display</param>
            <param name="toStandardOutput">true for stdout, false for stderr</param>
            <returns>true if the write succeeded</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ConsoleUtils.Write(System.Char[],System.Boolean)">
            <summary>
            Write a char array to the console.  Unprintable characters will be converted to spaces if
            the console handle is not redirected.
            </summary>
            <param name="chars">the characters to display</param>
            <param name="toStandardOutput">true for stdout, false for stderr</param>
            <returns>true if the write succeeded</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ConsoleUtils.Write(System.Char[],System.Int32,System.Boolean)">
            <summary>
            Write a char array to the console.  Unprintable characters will be converted to spaces if
            the console handle is not redirected.
            </summary>
            <param name="chars">the characters to display</param>
            <param name="numCharsToWrite">the number of characters to display</param>
            <param name="toStandardOutput">true for stdout, false for stderr</param>
            <returns>true if the write succeeded</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ConsoleUtils.Write(System.Byte[],System.Boolean)">
            <summary>
            Write a byte array to the console.  Unprintable characters will be converted to spaces if 
            the console handle is not redirected.
            </summary>
            <param name="bytes">the bytes to display</param>
            <param name="toStandardOutput">true for stdout, false for stderr</param>
            <returns>true if the write succeeded</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ConsoleUtils.Write(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Write a byte array to the console.  Unprintable characters will be converted to spaces if 
            the console handle is not redirected.
            </summary>
            <param name="bytes">the bytes to display</param>
            <param name="numBytesToWrite">the number of bytes to display</param>
            <param name="toStandardOutput">true for stdout, false for stderr</param>
            <returns>true if the write succeeded</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ConsoleUtils.IsStdInRedirected">
            <summary>
            Test to see if STDIN is being redirected.
            </summary>
            <returns>true if it is being redirected</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ConsoleUtils.IsStdOutRedirected">
            <summary>
            Test to see if STDOUT is being redirected.
            </summary>
            <returns>true if it is being redirected</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ConsoleUtils.IsStdErrRedirected">
            <summary>
            Test to see if STDERR is being redirected.
            </summary>
            <returns>true if it is being redirected</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ConsoleUtils.IsRedirected(System.Int32)">
            <summary>
            Test to see if the specified console stream is being redirected.
            </summary>
            <param name="nStdHandle">ID of handle to test from the Win32 API</param>
            <returns>true if it is being redirected</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BrowserHelper.LaunchBrowser(System.String)">
            <summary>
            Launches a url using the default browser
            </summary>
            <param name="url">url to browse</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BrowserHelper.LaunchBrowser(System.String,System.Net.NetworkCredential)">
            <summary>
            Launches a url using the default browser started with the specified credentials
            </summary>
            <param name="url">url to browse</param>
            <param name="credentials">credentials to start the default browser with</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.BrowserHelper.IsWellFormedUri(System.String,System.UriKind)">
            <summary>
            Checks if the url is a well formed uri
            </summary>
            <param name="url">url to check</param>
            <param name="uriKind">the kind of the uri to verify</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CommandTarget.IOleCommandTarget">
            <summary>
            IOleCommandTarget interface declaration so classes outside VS can support QueryStatus and Exec.  This is isolated
            in its own namespace in order to avoid collisions with the VS version.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.UICredentialsProvider">
            <summary>
            UICredentialsProvider is used to prompt for Windows credentials.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UICredentialsProvider.#ctor">
            <summary>
            Initializes a new <c>UICredentialsProvider</c> instance with a default parent window.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UICredentialsProvider.#ctor(System.Windows.Forms.IWin32Window)">
            <summary>
            Initializes a new <c>UICredentialsProvider</c> instance with the specified parent window. If null is
            specified the default parent window will be used.
            </summary>
            <param name="parentWindow">The parent window for modal dialogs</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.UICredentialsProvider.VistaCredentialsProvider">
            <summary>
            This credentials provider is available on Vista and higher, and has the benefit
            of not using plaintext passwords.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UICredentialsProvider.VistaCredentialsProvider.Microsoft#TeamFoundation#Client#ICredentialsProvider#GetCredentials(System.Uri,System.Net.ICredentials)">
            <summary>
            Implementation of ICredentialsProvider.GetCredentials.
            </summary>
            <param name="uri"></param>
            <param name="failedCredentials"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UICredentialsProvider.VistaCredentialsProvider.Microsoft#TeamFoundation#Client#IUICredentialsProvider#GetCredentials(System.Uri,System.Net.ICredentials,System.String,System.String,System.IntPtr)">
            <summary>
            Implementation of IUICredentialsProvider.GetCredentials.
            </summary>
            <param name="uri"></param>
            <param name="failedCredentials"></param>
            <param name="caption"></param>
            <param name="messageText"></param>
            <param name="parentWindowHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UICredentialsProvider.VistaCredentialsProvider.GetPrimerCredentialsBlob(System.String)">
            <summary>
            Builds the credentials blob used to prime the credentials prompt.
            The input may be in either "DOMAIN\user" form or just "user".
            This method may return null, in which case no blob should be passed to
            CredUIPromptForWindowsCredentials.
            </summary>
            <param name="userName">Username used to prepopulate the username field.</param>
            <returns>Blob to pass to CredUIPromptForWindowsCredentials</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UICredentialsProvider.VistaCredentialsProvider.Microsoft#TeamFoundation#Client#ICredentialsProvider#NotifyCredentialsAuthenticated(System.Uri)">
            <summary>
            Implementation of ICredentialsProvider.NotifyCredentialsAuthenticated.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UICredentialsProvider.VistaCredentialsProvider.GetFullyQualifiedDnsName(System.String)">
            <summary>
            Attempts to resolve the host into a fully qualified Dns name.  If it fails, it will return the host name.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UICredentialsProvider.PreVistaCredentialsProvider.Microsoft#TeamFoundation#Client#ICredentialsProvider#GetCredentials(System.Uri,System.Net.ICredentials)">
            <summary>
            Implementation of ICredentialsProvider.GetCredentials.
            </summary>
            <param name="uri"></param>
            <param name="failedCredentials"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UICredentialsProvider.PreVistaCredentialsProvider.Microsoft#TeamFoundation#Client#IUICredentialsProvider#GetCredentials(System.Uri,System.Net.ICredentials,System.String,System.String,System.IntPtr)">
            <summary>
            Implementation of IUICredentialsProvider.GetCredentials.
            </summary>
            <param name="uri"></param>
            <param name="failedCredentials"></param>
            <param name="caption"></param>
            <param name="messageText"></param>
            <param name="parentWindowHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UICredentialsProvider.PreVistaCredentialsProvider.Microsoft#TeamFoundation#Client#ICredentialsProvider#NotifyCredentialsAuthenticated(System.Uri)">
            <summary>
            Implementation of ICredentialsProvider.NotifyCredentialsAuthenticated.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CssHierarchyControl.OnBeforeExpand(System.Object,System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            Overrides BeforeExpand to fill the expanding node with children and set the icon to
            an open folder.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CssHierarchyControl.OnBeforeCollapse(System.Object,System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            Overrides BeforeCollapse to set the icon to a closed folder.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CssHierarchyControl.OnTextChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the 'TextChanged' event.  When the text changes we need to select the appropriate tree
            node so that painting the item in the text box will work correctly (gets the correct icon for example).
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.IComboHostedControl">
            <summary>
            Interface the control hosted in the dropdown must implement.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IComboHostedControl.GetSelectedText(System.Int32@)">
            <summary>
            Retrieves the text for the currently selected item.  This text will be shown in the edit control 
            of the combobox.
            </summary>
            <param name="caretPos">Retreives the location in the string where the caret should be positioned.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IComboHostedControl.Filter(System.String)">
            <summary>
            Filter down the contents of the control to match the specified filter text.
            May be a no-op.
            </summary>
            <param name="text">Filter text</param>
            <returns>'true' if filtering is supported and the dropdown should be shown, 'false' otherwise.  If
            filtering is supported returning 'true' will automatically cause the dropdown to show 
            but it will not take focus from the textbox.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IComboHostedControl.GetDesiredControlSize">
            <summary>
            Returns the desired size of the control, used for sizing the dropdown.  The dropdown may 
            not use this size.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IComboHostedControl.GetMinimumControlSize">
            <summary>
            Returns the minimum size of the dropdown.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IComboHostedControl.HandleComboControlFocusLost">
            <summary>
            Called when the textbox portion of the combobox loses focus.  Allows
            the dropdown control to decide if it wants to close the dropdown.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CustomCombo`1">
            <summary>
            Control to extend Combobox to show a custom control in the dropdown.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.CustomCombo`1.cMinDropdownHeight">
            <summary>
            Smallest allowed dropdown height.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.CustomCombo`1.cDropDownTickDelay">
            <summary>
            Number of ticks to wait to process certain keyboard events after the combobox is displayed
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.CustomCombo`1.m_dropDown">
            <summary>
            Dropdown container control.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.CustomCombo`1.m_hostedControl">
            <summary>
            Control which is to be hosted in the dropdown.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.CustomCombo`1.m_currentPosition">
            <summary>
            Records the position of the combobox so we can close the dropdown if the combobox moved.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.CustomCombo`1.m_moveTimer">
            <summary>
            Timer that is activated when the dropdown is visible.  Checks to see if the combobox has moved
            and closes the dropdown if it has.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.CustomCombo`1.m_textChangedTimer">
            <summary>
            Timer to delay filtering when text is entered.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.CustomCombo`1.m_lastTimeStamp">
            <summary>
            Used to filter dropdown messages that windows sends.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.CustomCombo`1.m_textChanging">
            <summary>
            Counter to indicate if we are manually changing the text.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.CustomCombo`1.m_suspendAutoComplete">
            <summary>
            Counter to enable/disable the autocomplete functionality so it's not enabled when we are setting the text manually.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.CustomCombo`1.m_cachedCaretPos">
            <summary>
            Caret position which is cached when showing the dropdown.  
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.CustomCombo`1.m_accessibilityMode">
            <summary>
            Indicates if the accessibility object has been retrieved for this control.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.#ctor">
            <summary>
            Initializes the combobox and sets up the dropdown with the custom control.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.Initialize(`0)">
            <summary>
            Initializes the combobox with a control to show in the dropdown.  Must be called before attempting to use the control.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override winproc to handle the drop down event so we can show our own dropdown instead of the combobox's
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.PreProcessMessage(System.Windows.Forms.Message@)">
            <summary>
            Handles the 'escape' key so it doesn't cause the 'bell' to sound.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handle keystrokes in the combobox to allow opening the dropdown, selection, and filtering.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handle keystrokes in the combobox.  This is used to keep track of a cached version of the
            caret position.  Must be done on key up instead of keydown, SelectionStart is not updated
            in KeyDown.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles mouse click events in the combobox.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.OnFontChanged(System.EventArgs)">
            <summary>
            Overrides OnFontChanged to set the embedded control's font
            </summary>
            <param name="sender"></param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CustomCombo`1.Text">
            <summary>
            Overrides the base class 'Text' property so we can tell when the text is being set
            programmatically rather than by the user.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.OnTextChanged(System.EventArgs)">
            <summary>
            Handle text changed events and do filtering if the hosted control supports it.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.OnLostFocus(System.EventArgs)">
            <summary>
            Handle the control losing focus, delegate reponsibility to the embedded control
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.CreateAccessibilityInstance">
            <summary>
            Get a custom accessibility object for this control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.ComboBox_SizeChanged(System.Object,System.EventArgs)">
            <summary>
            Handle resize events.  If the combobox is being resized we should close the dropdown.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.MoveTimer_TimerTick(System.Object,System.EventArgs)">
            <summary>
            Check to see if the combobox has moved.  If it has, then close the dropdown.
            This timer should only be running while the dropdown is open.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.TextChangedTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Handles filtering after text has changed.  When text is typed we delay filtering by setting a timer
            so users with slower machines and long lists of users do not see delays during typing.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.FilterItems">
            <summary>
            Filters the items based on input text
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.PostKey(System.Windows.Forms.Keys,System.Windows.Forms.Keys)">
            <summary>
            Posts a keydown message to the host control.  This is generally used by the embedded control to handle
            the 'tab' key so focus shifts properly even when focus is in the dropdown.
            </summary>
            <param name="wParam"></param>
            <param name="lParam"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.SetSelection(System.String,System.Int32,System.Boolean)">
            <summary>
            Called by the child dropdown when an item is selected by the child control
            </summary>
            <param name="selectedText">the node to be selected</param>
            <param name="caretPos">The location in the string where the caret should be positioned.</param>
            <param name="closeDropdown">if 'true', closes the dropdown.  if 'false', leaves the dropdown in it's current state.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.StartFilter">
            <summary>
            Queue a filter operation just as if the text changed.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.OnItemSelected(System.String)">
            <summary>
            Gets called when an item is selected.  This is intended to be overridden by 
            derived classes.
            </summary>
            <param name="item">the selected text</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.GetControlAreaSize">
            <summary>
            Returns the actual size that the control must fit into.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CustomCombo`1.IsDroppedDown">
            <summary>
            Gets whether the child control is dropped down
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.HideDropDown">
            <summary>
            Hide our tree drop down
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.ShowDropDown(System.Boolean)">
            <summary>
            shows the list dropdown, dynamically determines if its displayed on top or below combobox 
            </summary>
            <param name="giveFocus">'true' to set focus to the dropdown, 'false' to keep focus in the control.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.RecalculateSize">
            <summary>
            Updates the size of the dropdown
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CustomCombo`1.CaretPosition">
            <summary>
            Retrieves the caret position in the combobox control.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CustomCombo`1.HostedDropDownControl">
            <summary>
            Helper to retrieve the embedded control as a Winforms 'Control'
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.SetCaretPosition(System.Int32)">
            <summary>
            Sets the caret position in the text box.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.SetDelayedFiltering(System.Boolean)">
            <summary>
            Toggle the delayed filtering functionality on/off
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.SetSelectedText(System.String,System.Int32)">
            <summary>
            set the text of the combobox
            </summary>
            <param name="text">new combobox string</param>
            <param name="caretPos">The location in the string where the caret should be positioned.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CustomCombo`1.HostedControl">
            <summary>
            Helper to the the embedded control as a IComboHostedControl
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.SetDropDownVisibility(System.Boolean)">
            <summary>
            Shows or hides the custom dropdown
            </summary>
            <param name="show">'true' to show the dropdown, 'false' to hide it.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.AsyncHideComboBoxDropDown">
            <summary>
            Hides the default dropdown.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.GetDropdownSize">
            <summary>
            Get the side we should set the dropdown control to.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CustomCombo`1.SetDropdownSize">
            <summary>
            Sets the optimal size of the drop down and embedded control
            </summary>
            <returns> the direction fo the drop down</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CustomCombo`1.CustomComboAccessibilityObject">
            <summary>
            Custom accessibility object for the custom combobox
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.DataGridViewWithDetails">
            <summary>
            DataGridViewWithDetails class.
            </summary>
            <remarks>
            Limitations:
            
                - The embedded UserControl must have a calculable height based on a provided width.
                  In other words, it should not contain any TableLayoutPanel rows that are percentages.
                  The embedded control will display best when all rows are autosized.  This is due to
                  how the control is docked into its parent container.
                  
                - Due to the order of events when focus changes in the DataGridView, the details panel
                  cannot be collapsed automatically during OnRowEnter or OnRowLeave.  Changing the row
                  height during these two events will cause the DataGridView to miscalculate which row
                  the user clicked on and will end up selecting all of the rows that will fit in the
                  area where the details panel used to occupy.
                  
                - This control currently does not match custom border styles.
                
                - Resizable rows are currently not supported.
                
                - Scrolling horizontally causes us to erase border of the DGV (bug 442567). The workaround is to set BorderStyle to None
                  and embed DGV in ColorPanel
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.InitialExpandDetails">
            <summary>
            Get/set the initial details expansion flag.  Set this to true to have the details panel
            expand when the control is first shown.  This flag is only honored when AutoExpandDetails
            is also true.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.SelectionChangeInvalidatesDetails">
            <summary>
            Get/set SelectionChangeInvalidatesDetails flag. If true selection change will cause DetailsPanel to refresh
            even if the focus row didn't change.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.AutoExpandDetails">
            <summary>
            Get/set the auto details expansion flag.  Set this to true to have the details panel
            automatically expand when a new row is focused.  The expansion will happen after the
            specified AutoExpandDetailsDelay time limit has passed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.AutoExpandDetailsDelay">
            <summary>
            Get/set the auto details expansion timer interval in milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.DetailsControl">
            <summary>
            Get/set the details control.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.DetailsBackColor">
            <summary>
            Get/set the details panel back color.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.DetailsRow">
            <summary>
            Get the index of the row that contains the details control.  If the details control
            is not expanded on any row, -2 will be returned.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.DetailsImageColumnIndex">
            <summary>
            Get/set the column index where the expanded/collapsed image should be painted.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.DetailsImageMode">
            <summary>
            Get/set the image display mode.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.DetailsCollapsedImage">
            <summary>
            Get/set the image displayed when the details panel is collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.DetailsExpandedImage">
            <summary>
            Get/set the image displayed when the details panel is expanded.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.IsExpandDelayed">
            <summary>
            True if timer should be used to delay expanding of the panel.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.ExpandDetails">
            <summary>
            Expand the details panel for the currently focused row.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.ExpandDetails(System.Int32)">
            <summary>
            Expand the details panel for the specified row.
            </summary>
            <param name="rowIndex">Row index</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.ExpandDetails(System.Int32,System.Boolean)">
            <summary>
            Expand the details panel for the specified row.
            </summary>
            <param name="rowIndex">Row index</param>
            <param name="userInitiated">True if user explicitly requested to expand the row</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.CollapseDetails">
            <summary>
            Collapse the details panel.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.CollapseDetails(System.Boolean)">
            <summary>
            Collapse the details panel.
            </summary>
            <param name="userInitiated">True if user explicitly requested to expand the row</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.DetailsWidth">
            <summary>
            Get the width of the client area of the details panel.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.BorderWidth">
            <summary>
            Get the width of the border based on the current border style.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.GridLineWidth">
            <summary>
            Get the width of the vertical grid lines.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.GridLineHeight">
            <summary>
            Get the height of the horizontal grid lines.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnBeforeExpandDetails(Microsoft.TeamFoundation.Client.DataGridViewDetailsEventArgs)">
            <summary>
            Raises the BeforeExpandDetails event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnAfterExpandDetails(Microsoft.TeamFoundation.Client.DataGridViewDetailsEventArgs)">
            <summary>
            Raises the AfterExpandDetails event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnBeforeCollapseDetails(Microsoft.TeamFoundation.Client.DataGridViewDetailsEventArgs)">
            <summary>
            Raises the BeforeCollapseDetails event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnAfterCollapseDetails(Microsoft.TeamFoundation.Client.DataGridViewDetailsEventArgs)">
            <summary>
            Raises the AfterCollapseDetails event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnResize(System.EventArgs)">
            <summary>
            OnResize event override.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            OnScroll event override.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.VerticalScrollBar_VisibleChanged(System.Object,System.EventArgs)">
            <summary>
            VerticalScrollBar VisibleChanged event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnVisibleChanged(System.EventArgs)">
            <summary>
            OnVisibleChanged event override.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            OnPaint event override.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.CalculateDetailsImageRects(System.Int32,System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Drawing.Rectangle@)">
            <summary>
            Calculate the rectangles for the expanded and collapsed images.
            </summary>
            <param name="rowIndex">Index for the row that contains the cell</param>
            <param name="cell">Rect for the bounding cell</param>
            <param name="expanded">Rect for the expanded image</param>
            <param name="collapsed">Rect for the collapsed image</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnRowPostPaint(System.Windows.Forms.DataGridViewRowPostPaintEventArgs)">
            <summary>
            OnRowPostPaint event override.  This is used to paint the expand/collapse glyph in the
            row header.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnGridColorChanged(System.EventArgs)">
            <summary>
            OnGridColorChanged event override.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            OnKeyUp event override.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            OnMouseUp event override.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.BeginExpandDetails">
            <summary>
            Starts the timer if expanding should be delayed or expands immediatelly otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnRowEnter(System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            OnRowEnter event override.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnRowsRemoved(System.Windows.Forms.DataGridViewRowsRemovedEventArgs)">
            <summary>
            OnRowsRemoved event override.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnRowLeave(System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            OnRowLeave event override.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            OnMouseDown event override.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.ProcessKeyPreview(System.Windows.Forms.Message@)">
            <summary>
            ProcessKeyPreview event override.
            Ignores certain keys.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Process the specified dialog key.
            </summary>
            <param name="keyData">Key data</param>
            <returns>True if key handled</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            OnKeyDown event override.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.detailsTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Details timer tick event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.UpdateDetailsPanelHeight">
            <summary>
            Update the location and size of the details panel for the current state of the control.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.UpdateDetailsPanel">
            <summary>
            Update the location and size of the details panel for the current state of the control.
            Does not query hosted control for its height.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.UpdateDetailsPanel(System.Boolean)">
            <summary>
            Update the location and size of the details panel for the current state of the control.
            </summary>
            <param name="updateRowHeight">True to query the hosted control for its height and update
            the row height accordingly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.CreateAccessibilityInstance">
            <summary>
            Creates new object of DataGridWithDetailsAccessibleObject class.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.DataGridWithDetailsAccessibleObject">
            <summary>
            Accessibility object for DataGridViewWithDetails.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.DataGridWithDetailsAccessibleObject.GetChild(System.Int32)">
            <summary>
            This method behaves as DataGridViewAccessibleObject.GetChild but instead of returning
            DataGridViewRowAccessibleObject it returns DataGridViewWithDetailsRowAccessibleObject.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.DataGridViewWithDetailsRowAccessibleObject">
            <summary>
            Accessibility object for the DataGridViewWithDetailsRow.
            Most of the members are delegated to the original DataGridViewRowAccessibilityObject.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.DataGridViewWithDetailsRowAccessibleObject.GetChildCount">
            <summary>
            Returns number of children, incremented by 1 if this is expanded row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.DataGridViewWithDetailsRowAccessibleObject.GetChild(System.Int32)">
            <summary>
            Returns child AccessibilityObject. Handles the extra column containing AccessibilityObject for DetailsPanel.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewWithDetails.DataGridViewWithDetailsRowAccessibleObject.GetFocused">
            <summary>
            Returns focused object from DataGridViewWithDetails including the DetailsPanel.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.DataGridViewDetailsImageMode">
            <summary>
            DataGridViewWithDetails expanded/collapsed image mode.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.DataGridViewDetailsImageMode.None">
            <summary>
            Show no expander image on any row.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.DataGridViewDetailsImageMode.AllRows">
            <summary>
            Show expander image on all rows.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.DataGridViewDetailsImageMode.FocusedRow">
            <summary>
            Show expander image on focused row.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.DataGridViewDetailsEventArgs">
            <summary>
            DataGridViewDetailsEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DataGridViewDetailsEventArgs.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="rowIndex">Index of the row that was expanded</param>
            <param name="userInitiated">True if action was executed by explicit user operation (clicking the detailsImage or hitting Enter)</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewDetailsEventArgs.RowIndex">
            <summary>
            Get the index of the row that was expanded.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewDetailsEventArgs.UserInitiated">
            <summary>
            True if action was executed by explicit user operation
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DataGridViewDetailsEventArgs.CollapseDetails">
            <summary>
            True if details panel should be collapsed, instead of being expanded
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CommonDiagnosticProvider">
            <summary>
            Common
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommonDiagnosticProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CommonDiagnosticProvider.Name">
            <summary>
            Get the provider's name.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CommonDiagnosticProvider.AreaPaths">
            <summary>
            Get the provider's area paths.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.CommonDiagnosticProvider.WriteState(System.String,System.Xml.XmlWriter)">
            <summary>
            Write the state to the provided XML writer.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ITfsDiagnosticProvider">
            <summary>
            ITfsDiagnosticProvider interface.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITfsDiagnosticProvider.Name">
            <summary>
            Provider name.  This string should be consistent and never localized.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITfsDiagnosticProvider.AreaPaths">
            <summary>
            Provider area paths.  These paths should conform to the following structure:
            
                /TFS/FeatureTeam[/Feature][/SubFeature]
            
            Below the /TFS/FeatureTeam level, each team has flexibility to subdivide
            their diagnostic providers in a way that meets their needs.
            
            If this class provides multiple area paths, return one string per area path
            in the array.  The requested area path will be provided to the WriteState
            call.
            
            Examples:
            
                /TFS/Common
                /TFS/Common/Environment
                /TFS/TeamBuild
                /TFS/TeamBuild/BuildExplorer
                /TFS/VersionControl
                /TFS/VersionControl/SolutionExplorer
                /TFS/VersionControl/SourceControlExplorer
                /TFS/WorkItemTracking
                /TFS/WorkItemTracking/QueryEditor
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITfsDiagnosticProvider.WriteState(System.String,System.Xml.XmlWriter)">
            <summary>
            Write the state information collected by this diagnostic provider.  The requested
            area path is provided to support the scenario where this diagnostic provider
            registered for multiple area paths.
            </summary>
            <param name="areaPath">Area path</param>
            <param name="writer">XML writer</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticHelper.WriteRegKeyContent(Microsoft.Win32.RegistryKey,System.Xml.XmlWriter)">
            <summary>
            Write the entire context of a registy key to a XmlWriter
            </summary>
            <param name="key">reg key</param>
            <param name="writer">xml writer</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticHelper.GetGuidsInDefaultValues(Microsoft.Win32.RegistryKey,System.Collections.Generic.List{System.Guid})">
            <summary>
            Retrives a list of all guids in the default values of all sub keys. if content is not guid, it will be skipped
            </summary>
            <param name="key">the key to look under</param>
            <returns>list of guid in default values</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TfsDiagnosticService">
            <summary>
            TfsDiagnosticService class.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsDiagnosticService.Instance">
            <summary>
            Get the static TfsDiagnosticService instance.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.BuildAreaPath(System.String,System.String[])">
            <summary>
            Helper to build diagnostic area paths for team features.  This promotes the use of the
            recommended area path format.
            
                /TFS/FeatureTeam[/Feature][/SubFeature]
            </summary>
            <param name="featureTeam">Feature team name</param>
            <param name="featureNames">(optional) Feature name, feature subname, ...</param>
            <returns>Consistently formatted area path</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsDiagnosticService.AreaPathDelimiters">
            <summary>
            Get the area path delimiters.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.Register(Microsoft.TeamFoundation.Client.ITfsDiagnosticProvider)">
            <summary>
            Register for participation in state data collection.
            </summary>
            <param name="provider">Diagnostic provider</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.Unregister(Microsoft.TeamFoundation.Client.ITfsDiagnosticProvider)">
            <summary>
            Unregister for participation in state data collection.
            </summary>
            <param name="provider">Diagnostic provider</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.GetProviders">
            <summary>
            Get a copy of the provider list.  A copy is returned so the list
            will not be modifiable outside of this class.
            </summary>
            <returns>Array of ITfsDiagnosticProviders</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.GetProvidersAsTree">
            <summary>
            Get a tree of the area paths.  The provider for each area path is included
            in the TreeNode.Tag.
            </summary>
            <returns>Tree of area paths</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.SaveState(System.String,System.Boolean,System.String)">
            <summary>
            Write the current state to an output file.
            </summary>
            <param name="areaPath">Area path</param>
            <param name="recursive">True if the area path should be used recursively</param>
            <param name="outputFilename">Output filename</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.SaveState(System.String[],System.Boolean,System.String)">
            <summary>
            Write the current state to an output file.
            </summary>
            <param name="areaPaths">Area paths</param>
            <param name="recursive">True if the area paths should be used recursively</param>
            <param name="outputFilename">Output filename</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.GetState(System.String,System.Boolean)">
            <summary>
            Write the current state to a string.  Note that this could result in a large string
            being created and should be used primarily for testing or for small results.
            </summary>
            <param name="areaPath">Area path</param>
            <param name="recursive">True if the area path should be used recursively</param>
            <returns>StringBuilder containing the state as XML</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.GetState(System.String[],System.Boolean)">
            <summary>
            Write the current state to a string.  Note that this could result in a large string
            being created and should be used primarily for testing or for small results.
            </summary>
            <param name="areaPaths">Area paths</param>
            <param name="recursive">True if the area paths should be used recursively</param>
            <returns>StringBuilder containing the state as XML</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.TraceState(System.String,System.Boolean)">
            <summary>
            Write the current state to the trace output.
            </summary>
            <param name="areaPath">Area path</param>
            <param name="recursive">True if the area path should be used recursively</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.TraceState(System.String[],System.Boolean)">
            <summary>
            Write the current state to the trace output.
            </summary>
            <param name="areaPaths">Area paths</param>
            <param name="recursive">True if the area paths should be used recursively</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.WriteState(System.Collections.Generic.SortedDictionary{System.String,Microsoft.TeamFoundation.Client.ITfsDiagnosticProvider},System.IO.TextWriter)">
            <summary>
            Create an XmlWriter with the provided TextWriter and write state to it for the list of providers.
            </summary>
            <param name="providers">List of providers</param>
            <param name="textWriter">Writer where the output should be written</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.WriteStateForNode(Microsoft.TeamFoundation.Common.Internal.TreeNode{Microsoft.TeamFoundation.Client.TfsDiagnosticNodeInfo},System.Xml.XmlWriter)">
            <summary>
            Build the XML for a specific node and have the associated provider write its state.
            </summary>
            <param name="node">Tree node</param>
            <param name="writer">XML writer</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.NormalizeAreaPath(System.String)">
            <summary>
            Normalize the area path for consistency.
            </summary>
            <param name="areaPath">Area path</param>
            <returns>Normalized area path</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.GetProvidersForAreaPath(System.String[],System.Boolean)">
            <summary>
            Get a list of all providers matching the specified area paths.
            </summary>
            <param name="areaPaths">List of area paths</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.BuildTree(System.Collections.Generic.SortedDictionary{System.String,Microsoft.TeamFoundation.Client.ITfsDiagnosticProvider})">
            <summary>
            Build a tree of providers based on their area path.
            </summary>
            <param name="providers">List of providers to include in the tree</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.BuildAreaPathForNode(Microsoft.TeamFoundation.Common.Internal.TreeNode{Microsoft.TeamFoundation.Client.TfsDiagnosticNodeInfo},System.String)">
            <summary>
            Build the full area path for a node based on its parent.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TfsDiagnosticService.TfsDiagnosticTraceWriter">
            <summary>
            TextWriter implementation that writes to TeamFoundationTrace.  This is used
            to bridge the diagnostic XmlWriter to the trace output.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticService.TfsDiagnosticTraceWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Write the value to the trace output.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsDiagnosticService.TfsDiagnosticTraceWriter.Encoding">
            <summary>
            Get the encoding.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TfsDiagnosticNodeInfo">
            <summary>
            Node info class used in the diagnostic provider tree.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticNodeInfo.#ctor(System.String,System.String,Microsoft.TeamFoundation.Client.ITfsDiagnosticProvider)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsDiagnosticNodeInfo.Name">
            <summary>
            Get/set the node name.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsDiagnosticNodeInfo.AreaPath">
            <summary>
            Get/set the area path.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsDiagnosticNodeInfo.Provider">
            <summary>
            Get/set the ITfsDiagnosticProvider.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsDiagnosticNodeInfo.ToString">
            <summary>
            ToString override.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DialogPerfListener.dataGridViewHistory_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            When double click on a selected row, the stack trace will be copied to the clipboard.
            To identify the content, the row index, the name of the web service, running time and 
            time stamp is copied on the top
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DialogPerfListener.dataGridViewHistory_Click(System.Object,System.EventArgs)">
            <summary>
            Set the font color back to black when you click on the row again
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.DialogPerfListener.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DialogPerfListener.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DialogPerfListener.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Dpi.DpiHelper">
            <summary>
            Helper class for scaling coordinates and images according to current DPI scaling set in Windows for the screen.
            
            This class can be used in assemblies that can't take a dependency on Microsoft.VisualStudio.Shell.[MajorVersion].0
            This class doesn't use any VS-specific interfaces or services. 
            
            The code running in Visual Studio or other appids should not be using this class. Instead, it should use the static
            DpiHelper class from Microsoft.VisualStudio.PlatformUI namespace from the VS Framework assembliy.
            
            Usually the code needing Dpi scaling functionality provided by this class will want to access it by calling the 
            members of the static DpiHelper.Default instance. 
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Dpi.DpiHelper._default">
            <summary>
            Returns a DpiHelper class suitable for scaling images designed for 100% DPI zoom levels (96dpi).
            The static member can be used in bindings like DpiHelper.Default.BitmapScalingMode or direct 
            properties/methods calls like DpiHelper.Default.LogicalToDevicePixels(), similar to the way the 
            static class DpiHelper in Microsoft.VisualStudio.PlatformUI namespace can be used in VS-specific 
            assemblies to bind to DpiHelper.BitmapScalingMode or call DpiHelper.LogicalToDevicePixels()
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.GetHelper(System.Int32)">
            <summary>
            Returns a DpiHelper that can scale images created for the specified DPI zoom factor.
            E.g. If you have images that were designed for multiple resolutions (e.g. one image for 96dpi, 
            other for 192dpi, etc), and need to use the 192dpi image to scale it to the actual display DPI,
            you'll need to call GetHelper(200) to get a DpiHelper that will scale correctly that image.
            </summary>
            <param name="zoomPercent">Zoom factor for original images</param>
            <returns>The scaling helper</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.#ctor(System.Double)">
            <summary>
            Protected constructor.
            To use the functionality of this clas, use DpiHelper.Default or call DpiHelper.GetHelper() public methods.
            </summary>
            <param name="logicalDpi">The logical DPI for which the helper should be created</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.GetDefaultImageScalingMode(System.Int32)">
            <summary>
            Retuns the default/shell preference for the ImageScalingMode algorithm to be used for resizing images in WinForms/Win32.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.GetDefaultBitmapScalingMode(System.Int32)">
            <summary>
            Retuns the default/shell preference for the BitmapScalingMode algorithm to be used for resizing images in WPF.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.ImageScalingMode">
            <summary>
            Retuns the ImageScalingMode algorithm to be used for resizing images in WinForms/Win32.
            This allows the shell to control the algorithm depending on the DPI zoom scale, and allows the user to override it via registry settings like
            General\ImageScalingXXX = (ImageScalingMode)value, with XXX the zoom factor in percents, e.g. ImageScaling150, etc.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.GetInterpolationMode(Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Returns the interpolation mode to be used for the specified image scaling mode
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.GetActualScalingMode(Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Returns the actual scaling mode to be used for the specified suggested mode
            </summary>
            <param name="scalingMode">Suggested scaling mode</param>
            <returns>Actual scaling mode</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.BitmapScalingMode">
            <summary>
            Retuns the BitmapScalingMode algorithm to be used for resizing images in WPF.
            This allows the shell to control the algorithm depending on the DPI zoom scale, and allows the user to override it via registry settings like
            General\BitmapScalingXXX = (BitmapScalingMode)value, with XXX the zoom factor in percents, e.g. BitmapScaling150, etc.
            Note that for WPF scaling, there is an additional registry value that applies for zoom factors > 200%, UseBitmapPreScalingXXX
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.UsePreScaledImages">
            <summary>
            Returns whether images should be pre-scaled at zoom levels higher than 200%, using NearestNeighbor up to the largest multiple of 100%
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.DeviceDpiX">
            <summary>
            The screen's (device) current horizontal DPI
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.DeviceDpiY">
            <summary>
            The screen's (device) current vertical DPI
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalDpiX">
            <summary>
            The helper's logical horizontal DPI
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalDpiY">
            <summary>
            The helper's logical vertical DPI
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.IsScalingRequired">
            <summary>
            Returns whether scaling is required when converting between logical-device units 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnitsX(System.Double)">
            <summary>
            Transforms a horizontal coordinate from logical to device units
            </summary>
            <param name="value">The horizontal value in logical units</param>
            <returns>The horizontal value in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnitsY(System.Double)">
            <summary>
            Transforms a vertical coordinate from logical to device units
            </summary>
            <param name="value">The vertical value in logical units</param>
            <returns>The vertical value in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.DeviceToLogicalUnitsX(System.Double)">
            <summary>
            Transforms a horizontal coordinate from device to logical units
            </summary>
            <param name="value">The horizontal value in device units</param>
            <returns>The horizontal value in logical units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.DeviceToLogicalUnitsY(System.Double)">
            <summary>
            Transforms a vertical coordinate from device to logical units
            </summary>
            <param name="value">The vertical value in device units</param>
            <returns>The vertical value in logical units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnitsX(System.Single)">
            <summary>
            Transforms a horizontal coordinate from logical to device units
            </summary>
            <param name="value">The horizontal value in logical units</param>
            <returns>The horizontal value in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnitsY(System.Single)">
            <summary>
            Transforms a vertical coordinate from logical to device units
            </summary>
            <param name="value">The vertical value in logical units</param>
            <returns>The vertical value in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnitsX(System.Int32)">
            <summary>
            Transforms a horizontal integer coordinate from logical to device units
            by scaling it up  for current DPI and rounding to nearest integer value
            </summary>
            <param name="value">The horizontal value in logical units</param>
            <returns>The horizontal value in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnitsY(System.Int32)">
            <summary>
            Transforms a vertical integer coordinate from logical to device units
            by scaling it up  for current DPI and rounding to nearest integer value
            </summary>
            <param name="value">The vertical value in logical units</param>
            <returns>The vertical value in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.DeviceToLogicalUnitsX(System.Single)">
            <summary>
            Transforms a horizontal coordinate from device to logical units
            </summary>
            <param name="value">The horizontal value in device units</param>
            <returns>The horizontal value in logical units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.DeviceToLogicalUnitsY(System.Single)">
            <summary>
            Transforms a vertical coordinate from device to logical units
            </summary>
            <param name="value">The vertical value in device units</param>
            <returns>The vertical value in logical units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.DeviceToLogicalUnitsX(System.Int32)">
            <summary>
            Transforms a horizontal integer coordinate from device to logical units
            </summary>
            <param name="value">The horizontal value in device units</param>
            <returns>The horizontal value in logical units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.DeviceToLogicalUnitsY(System.Int32)">
            <summary>
            Transforms a vertical integer coordinate from device to logical units
            </summary>
            <param name="value">The vertical value in device units</param>
            <returns>The vertical value in logical units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.RoundToDeviceUnitsX(System.Double)">
            <summary>
            Returns the closest value in logical units that will be converted
            to an integer value if it is converted back to device units using 
            functions for horizontal coordinates/widths such as DeviceToLogicalUnitsX.
            </summary>
            <param name="value">The logical value to round</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.RoundToDeviceUnitsY(System.Double)">
            <summary>
            Returns the closest value in logical units that will be converted
            to an integer value if it is converted back to device units using 
            functions for vertical coordinates/widths such as DeviceToLogicalUnitsY.
            </summary>
            <param name="value">The logical value to round</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Point)">
            <summary>
            Returns a new Point with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">Point in logical units</param>
            <returns>Point in device coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Rect)">
            <summary>
            Returns a new Rect with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalRect">Rect in logical coordinates</param>
            <returns>Rect in device coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Size)">
            <summary>
            Returns a new Size with the input's
            dimensions converted from logical units to device units.
            </summary>
            <param name="logicalSize">Size in logical units</param>
            <returns>Size in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Thickness)">
            <summary>
            Returns a new Thickness with the input's
            dimensions converted from logical units to device units.
            </summary>
            <param name="logicalThickness">Thickness in logical units</param>
            <returns>Thickness in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Forms.Padding)">
            <summary>
            Returns a new Padding with the input's
            dimensions converted from logical units to device units.
            </summary>
            <param name="logicalPadding">Padding in logical units</param>
            <returns>Padding in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.DeviceToLogicalUnits(System.Windows.Point)">
            <summary>
            Returns a new Point with the input's
            coordinates converted from device units to logical units.
            </summary>
            <param name="devicePoint">Point in device coordinates</param>
            <returns>Point in logical coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.DeviceToLogicalUnits(System.Windows.Rect)">
            <summary>
            Returns a new Rect with the input's
            coordinates converted from device units to logical units.
            </summary>
            <param name="deviceRect">Rect in device coordinates</param>
            <returns>Rect in logical coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.DeviceToLogicalUnits(System.Windows.Size)">
            <summary>
            Returns a new Size with the input's
            dimensions converted from device units to logical units.
            </summary>
            <param name="deviceSize">Size in device units</param>
            <returns>Size in logical units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.DeviceToLogicalUnits(System.Windows.Thickness)">
            <summary>
            Returns a new Thickness with the input's
            dimensions converted from device units to logical units.
            </summary>
            <param name="logicalThickness">Thickness in device units</param>
            <returns>Thickness in logical units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.SetDeviceLeft(System.Windows.Window@,System.Double)">
            <summary>
            Sets the window's Left coordinate using device units
            </summary>
            <param name="window">Window to modify</param>
            <param name="deviceLeft">New left coordinate in device units</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.GetDeviceLeft(System.Windows.Window)">
            <summary>
            Gets the window's Left coordinate in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Left coordinate in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.SetDeviceTop(System.Windows.Window@,System.Double)">
            <summary>
            Sets the window's Top coordinate using device units
            </summary>
            <param name="window">Window to modify</param>
            <param name="deviceTop">New top coordinate in device units</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.GetDeviceTop(System.Windows.Window)">
            <summary>
            Gets the window's Top coordinate in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Top coordinate in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.SetDeviceWidth(System.Windows.Window@,System.Double)">
            <summary>
            Sets the window's Width using device units
            </summary>
            <param name="window">Window to modify</param>
            <param name="deviceWidth">New width in device units</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.GetDeviceWidth(System.Windows.Window)">
            <summary>
            Gets the window's Width in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Width in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.SetDeviceHeight(System.Windows.Window@,System.Double)">
            <summary>
            Sets the window's Height using device units
            </summary>
            <param name="window">Window to modify</param>
            <param name="deviceHeight">New height in device units</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.GetDeviceHeight(System.Windows.Window)">
            <summary>
            Gets the window's Height in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Height in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.GetDeviceRect(System.Windows.Window)">
            <summary>
            Gets the window's Rectangle in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Window rectangle in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.GetDeviceActualSize(System.Windows.FrameworkElement)">
            <summary>
            Get the FrameworkElement's Size in device units
            </summary>
            <param name="element">FrameworkElement to inspect</param>
            <returns>Actual Size in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Point)">
            <summary>
            Returns a new System.Drawing.Point with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">Point in logical units</param>
            <returns>Point in device coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Size)">
            <summary>
            Returns a new System.Drawing.Size with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">Size in logical units</param>
            <returns>Size in device coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Rectangle)">
            <summary>
            Returns a new System.Drawing.Rectangle with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">Rectangle in logical units</param>
            <returns>Rectangle in device coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.PointF)">
            <summary>
            Returns a new System.Drawing.PointF with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">PointF in logical units</param>
            <returns>PointF in device coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.SizeF)">
            <summary>
            Returns a new System.Drawing.SizeF with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">SizeF in logical units</param>
            <returns>SizeF in device coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.RectangleF)">
            <summary>
            Returns a new System.Drawing.RectangleF with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">RectangleF in logical units</param>
            <returns>RectangleF in device coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image by scaling it to device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="bitmapImage">The bitmap image to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the image. When the interpolation mode is Bilinear or Bicubic, a transparent color will be used for background and the image's magins will be interpolated with the background. As result, the returned image will use alpha blending.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,System.Drawing.Color,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image by scaling it to device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="bitmapImage">The bitmap image to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the image</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Image@,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image by scaling it to device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="image">The image to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the image. When the interpolation mode is Bilinear or Bicubic, a transparent color will be used for background and the image's magins will be interpolated with the background. As result, the returned image will use alpha blending.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Image@,System.Drawing.Color,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image by scaling it to device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="image">The image to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the image</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.GetPrescaledImageSize(System.Drawing.Size)">
            <summary>
            Returns the size of the image that should be used as intermediate size when scaling  in 2 steps (with NearestNeighbor up to the largest multiple of 100% zoom of the initial image, from where the image should be scaled with HighQualityBicubic up to the final size suitable for device)
            (to be used with ImageScalingMode.MixedNearestNeighborHighQualityBicubic scaling)
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.PreScaledImageLayoutTransformScaleX">
            <summary>
            Return the horizontal scale value that should be used with a LayoutTransform/ScaleTransform to scale back 
            an image pre-scaled in HighDPI with DpiPrescaleImageSourceConverter in order to obtain crisp results
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.PreScaledImageLayoutTransformScaleY">
            <summary>
            Return the vertical scale value that should be used with a LayoutTransform/ScaleTransform to scale back 
            an image pre-scaled in HighDPI with DpiPrescaleImageSourceConverter in order to obtain crisp results
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Image,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Creates and returns a new bitmap or metafile from the logical System.Drawing.Image scaled for the device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="logicalImage">The image to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the image</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.ScaleLogicalImageForDeviceSize(System.Windows.Media.ImageSource,System.Windows.Size,System.Windows.Media.BitmapScalingMode)">
            <summary>
            Scale a WPF image to the indicated size, using the specified scalingMode
            </summary>
            <param name="image">The image to scale</param>
            <param name="deviceImageSize">The resultant image size</param>
            <param name="scalingMode">The BitmapScalingMode to be used during image resize</param>
            <returns>The scaled up image</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Image,System.Drawing.Color,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Creates and returns a new bitmap or metafile from the logical System.Drawing.Image scaled for the device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="logicalImage">The image to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the image</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,System.Drawing.Size,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image strip to device units, using NearestNeighbor interpolation..
            When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi.
            
            This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap,
            because the resultant bitmap strip size may be different from just upscaling as bitmap
            N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale)
            This may happen depending on the image width because dpiscale is a double not an int.
            </summary>
            <param name="imageStrip">The image strip to scale from logical units to device units</param>
            <param name="logicalImageSize">The size in logical unit of each image in the strip</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the strip</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,System.Drawing.Size,System.Drawing.Color,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image strip to device units, using NearestNeighbor interpolation..
            When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi.
            
            This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap,
            because the resultant bitmap strip size may be different from just upscaling as bitmap
            N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale)
            This may happen depending on the image width because dpiscale is a double not an int.
            </summary>
            <param name="imageStrip">The image strip to scale from logical units to device units</param>
            <param name="logicalImageSize">The size in logical unit of each image in the strip</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the strip</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Bitmap,System.Drawing.Size,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Creates and returns a new bitmap strip from the logical System.Drawing.Bitmap strip scaled for the device units, using NearestNeighbor interpolation.
            When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi.
            
            This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap,
            because the resultant bitmap strip size may be different from just upscaling as bitmap
            N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale)
            This may happen depending on the image width because dpiscale is a double not an int.
            </summary>
            <param name="logicalBitmapStrip">The image strip to scale from logical units to device units</param>
            <param name="logicalImageSize">The size in logical unit of each image in the strip</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the strip</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Bitmap,System.Drawing.Size,System.Drawing.Color,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Creates and returns a new bitmap strip from the logical System.Drawing.Bitmap scaled for the device units
            When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi.
            
            This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap,
            because the resultant bitmap strip size may be different from just upscaling as bitmap
            N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale)
            This may happen depending on the image width because dpiscale is a double not an int.
            </summary>
            <param name="logicalBitmapStrip">The image strip to scale from logical units to device units</param>
            <param name="logicalImageSize">The size in logical unit of each image in the strip</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the strip</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Icon@,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the icon by scaling it to device units. 
            When displayed on the device, the scaled icon will have same size as the original icon would have when displayed at 96dpi.
            </summary>
            <param name="icon">The icon to scale from logical units to device units</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Icon,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Creates and returns a new icon scaled for the device units.
            When displayed on the device, the scaled icon will have same size as the original icon would have when displayed at 96dpi.
            </summary>
            <param name="logicalIcon">The icon to scale from logical units to device units</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Forms.ImageList@,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the imagelist by scaling it to device units.
            When displayed on the device, the scaled imagelist will have same size as the original imagelist would have when displayed at 96dpi.
            </summary>
            <param name="imageList">The imagelist to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the imagelist</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Forms.ImageList@,System.Drawing.Color,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the imagelist by scaling it to device units.
            When displayed on the device, the scaled imagelist will have same size as the original imagelist would have when displayed at 96dpi.
            </summary>
            <param name="imageList">The imagelist to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the imagelist</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Windows.Forms.ImageList,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Creates and returns a new imagelist scaled for the device units
            When displayed on the device, the scaled imagelist will have same size as the original imagelist would have when displayed at 96dpi.
            </summary>
            <param name="logicalImageList">The imagelist to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the imagelist</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Windows.Forms.ImageList,System.Drawing.Color,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Creates and returns a new imagelist scaled for the device units
            When displayed on the device, the scaled imagelist will have same size as the original imagelist would have when displayed at 96dpi.
            </summary>
            <param name="logicalImageList">The imagelist to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the imagelist</param>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ImageScalingMode.Default">
            <summary>
            Let the shell pick what looks best depending on the current DPI zoom factor
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ImageScalingMode.BorderOnly">
            <summary>
            Keep the actual image unscaled, add a border around the image
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ImageScalingMode.NearestNeighbor">
            <summary>
            Sharp results, but pixelated, and possibly distorted unless multiple of 100% scaling
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ImageScalingMode.Bilinear">
            <summary>
            Smooth results, without distorsions, but fuzzy (uses GDI+ InterpolationMode.Bilinear)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ImageScalingMode.Bicubic">
            <summary>
            Smooth results, without distorsions, but fuzzy (uses GDI+ InterpolationMode.Bicubic)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ImageScalingMode.HighQualityBilinear">
            <summary>
            Smooth results, without distorsions, but fuzzy (uses GDI+ InterpolationMode.HighQualityBilinear)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ImageScalingMode.HighQualityBicubic">
            <summary>
            Smooth results, without distorsions, but fuzzy (uses GDI+ InterpolationMode.HighQualityBicubic)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ImageScalingMode.MixedNearestNeighborHighQualityBicubic">
            <summary>
            Sharper results than Bicubic for large zoom levels, without distorsions, but fuzzy (2 steps-scaling, uses NearestNeighbor up to the closest multiple of 100%, then GDI+ InterpolationMode.HighQualityBicubic from there)
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.DpiHelper">
             <summary>
             Helper class providing static properties, static methods and extension methods
             for scaling coordinates and images according to current System DPI set in 
             Windows's Display Properties.
             The class scales images designed for 100% zoom levels (96dpi).
            
             This class should be used by code running inside Visual Studio or other
             appids. The class provides public static properties and methods for easy 
             binding/calling, and public static extension methods; the actual scaling
             implementation is delegated to the DpiHelper class from Microsoft.VisualStudio.Utilities. 
            
             This class allows the user to override the shell default scaling algorithms 
             via registry settings under the running appid's hive.
             E.g. The user can set ImageScaling125, ImageScaling200, etc with values from ImageScalingMode
             enumeration to control the scaling algorithm used for managed Image objects at 125% and 200%.
             Similarly, the user can set BitmapScaling150, BitmapScaling200, etc to control the scaling 
             algorithm of WPF ImageSources. And the user can set boolean registry values like 
             UseBitmapPreScaling250 to control whether image scaling at 250% should be done in 2 steps,
             with NearestNeighbor up to the largest 100% multiple (200%), and from there with the algorithm
             specified by BitmapScaling250.
             </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.DpiHelper.DpiHelperImplementation">
            <summary>
            The DpiHelper actual implementation.
            Derives from the Microsoft.VisualStudio.Utilities.Dpi.DpiHelper scaling helper, 
            and overrides a couple of functions allowing user-override of the scaling 
            algorithms via registry settings under the running appid's hive.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DpiHelper.ImageScalingMode">
            <summary>
            Retuns the ImageScalingMode algorithm to be used for resizing images in WinForms/Win32.
            This allows the shell to control the algorithm depending on the DPI zoom scale, and allows the user to override it via registry settings like
            General\ImageScalingXXX = (ImageScalingMode)value, with XXX the zoom factor in percents, e.g. ImageScaling150, etc.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DpiHelper.BitmapScalingMode">
            <summary>
            Retuns the BitmapScalingMode algorithm to be used for resizing images in WPF.
            This allows the shell to control the algorithm depending on the DPI zoom scale, and allows the user to override it via registry settings like
            General\BitmapScalingXXX = (BitmapScalingMode)value, with XXX the zoom factor in percents, e.g. BitmapScaling150, etc.
            Note that for WPF scaling, there is an additional registry value that applies for zoom factors > 200%, UseBitmapPreScalingXXX
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DpiHelper.UsePreScaledImages">
            <summary>
            Returns whether images should be pre-scaled at zoom levels higher than 200%, using NearestNeighbor up to the largest multiple of 100%
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DpiHelper.DeviceDpiX">
            <summary>
            The screen's (device) current horizontal DPI
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DpiHelper.DeviceDpiY">
            <summary>
            The screen's (device) current vertical DPI
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DpiHelper.LogicalDpiX">
            <summary>
            The helper's logical horizontal DPI
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DpiHelper.LogicalDpiY">
            <summary>
            The helper's logical vertical DPI
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DpiHelper.IsScalingRequired">
            <summary>
            Returns whether scaling is required when converting between logical-device units 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnitsX(System.Double)">
            <summary>
            Transforms a horizontal coordinate from logical to device units
            </summary>
            <param name="value">The horizontal value in logical units</param>
            <returns>The horizontal value in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnitsY(System.Double)">
            <summary>
            Transforms a vertical coordinate from logical to device units
            </summary>
            <param name="value">The vertical value in logical units</param>
            <returns>The vertical value in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.DeviceToLogicalUnitsX(System.Double)">
            <summary>
            Transforms a horizontal coordinate from device to logical units
            </summary>
            <param name="value">The horizontal value in device units</param>
            <returns>The horizontal value in logical units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.DeviceToLogicalUnitsY(System.Double)">
            <summary>
            Transforms a vertical coordinate from device to logical units
            </summary>
            <param name="value">The vertical value in device units</param>
            <returns>The vertical value in logical units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnitsX(System.Single)">
            <summary>
            Transforms a horizontal coordinate from logical to device units
            </summary>
            <param name="value">The horizontal value in logical units</param>
            <returns>The horizontal value in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnitsY(System.Single)">
            <summary>
            Transforms a vertical coordinate from logical to device units
            </summary>
            <param name="value">The vertical value in logical units</param>
            <returns>The vertical value in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnitsX(System.Int32)">
            <summary>
            Transforms a horizontal integer coordinate from logical to device units
            by scaling it up  for current DPI and rounding to nearest integer value
            </summary>
            <param name="value">The horizontal value in logical units</param>
            <returns>The horizontal value in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnitsY(System.Int32)">
            <summary>
            Transforms a vertical integer coordinate from logical to device units
            by scaling it up  for current DPI and rounding to nearest integer value
            </summary>
            <param name="value">The vertical value in logical units</param>
            <returns>The vertical value in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.DeviceToLogicalUnitsX(System.Single)">
            <summary>
            Transforms a horizontal coordinate from device to logical units
            </summary>
            <param name="value">The horizontal value in device units</param>
            <returns>The horizontal value in logical units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.DeviceToLogicalUnitsY(System.Single)">
            <summary>
            Transforms a vertical coordinate from device to logical units
            </summary>
            <param name="value">The vertical value in device units</param>
            <returns>The vertical value in logical units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.DeviceToLogicalUnitsX(System.Int32)">
            <summary>
            Transforms a horizontal integer coordinate from device to logical units
            </summary>
            <param name="value">The horizontal value in device units</param>
            <returns>The horizontal value in logical units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.DeviceToLogicalUnitsY(System.Int32)">
            <summary>
            Transforms a vertical integer coordinate from device to logical units
            </summary>
            <param name="value">The vertical value in device units</param>
            <returns>The vertical value in logical units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.RoundToDeviceUnitsX(System.Double)">
            <summary>
            Returns the closest value in logical units that will be converted
            to an integer value when converted to horizontal device units
            </summary>
            <param name="value">The logical value to round</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.RoundToDeviceUnitsY(System.Double)">
            <summary>
            Returns the closest value in logical units that will be converted
            to an integer value when converted to vertical device units
            </summary>
            <param name="value">The logical value to round</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Windows.Point)">
            <summary>
            Extension method for Point that returns a new Point with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">Point in logical units</param>
            <returns>Point in device coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Windows.Rect)">
            <summary>
            Extension method for Rect that returns a new Rect with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalRect">Rect in logical coordinates</param>
            <returns>Rect in device coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Windows.Size)">
            <summary>
            Extension method for Size that returns a new Size with the input's
            dimensions converted from logical units to device units.
            </summary>
            <param name="logicalSize">Size in logical units</param>
            <returns>Size in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Windows.Thickness)">
            <summary>
            Extension method for Thickness that returns a new Thickness with the input's
            dimensions converted from logical units to device units.
            </summary>
            <param name="logicalThickness">Thickness in logical units</param>
            <returns>Thickness in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.DeviceToLogicalUnits(System.Windows.Point)">
            <summary>
            Extension method for Point that returns a new Point with the input's
            coordinates converted from device units to logical units.
            </summary>
            <param name="devicePoint">Point in device coordinates</param>
            <returns>Point in logical coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.DeviceToLogicalUnits(System.Windows.Rect)">
            <summary>
            Extension method for Rect that returns a new Rect with the input's
            coordinates converted from device units to logical units.
            </summary>
            <param name="deviceRect">Rect in device coordinates</param>
            <returns>Rect in logical coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.DeviceToLogicalUnits(System.Windows.Size)">
            <summary>
            Extension method for Size that returns a new Size with the input's
            dimensions converted from device units to logical units.
            </summary>
            <param name="deviceSize">Size in device units</param>
            <returns>Size in logical units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.DeviceToLogicalUnits(System.Windows.Thickness)">
            <summary>
            Extension method for Thickness that returns a new Thickness with the input's
            dimensions converted from device units to logical units.
            </summary>
            <param name="logicalThickness">Thickness in device units</param>
            <returns>Thickness in logical units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.SetDeviceLeft(System.Windows.Window,System.Double)">
            <summary>
            Extension method for Window that sets its Left coordinate using device units
            </summary>
            <param name="window">Window to modify</param>
            <param name="deviceLeft">New left coordinate in device units</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.GetDeviceLeft(System.Windows.Window)">
            <summary>
            Extension method for Window that returns its Left coordinate in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Left coordinate in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.SetDeviceTop(System.Windows.Window,System.Double)">
            <summary>
            Extension method for Window that sets its Top coordinate using device units
            </summary>
            <param name="window">Window to modify</param>
            <param name="deviceTop">New top coordinate in device units</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.GetDeviceTop(System.Windows.Window)">
            <summary>
            Extension method for Window that returns its Top coordinate in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Top coordinate in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.SetDeviceWidth(System.Windows.Window,System.Double)">
            <summary>
            Extension method for Window that sets its Width using device units
            </summary>
            <param name="window">Window to modify</param>
            <param name="deviceWidth">New width in device units</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.GetDeviceWidth(System.Windows.Window)">
            <summary>
            Extension method for Window that returns its Width in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Width in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.SetDeviceHeight(System.Windows.Window,System.Double)">
            <summary>
            Extension method for Window that sets its Height using device units
            </summary>
            <param name="window">Window to modify</param>
            <param name="deviceHeight">New height in device units</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.GetDeviceHeight(System.Windows.Window)">
            <summary>
            Extension method for Window that returns its Height in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Height in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.GetDeviceRect(System.Windows.Window)">
            <summary>
            Extension method for Window that returns its Rectangle in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Window rectangle in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.GetDeviceActualSize(System.Windows.FrameworkElement)">
            <summary>
            Extension method for FrameworkElement that returns its Size in device units
            </summary>
            <param name="element">FrameworkElement to inspect</param>
            <returns>Actual Size in device units</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Drawing.Point)">
            <summary>
            Extension method for System.Drawing.Point that returns a new Point with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">Point in logical units</param>
            <returns>Point in device coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Drawing.Size)">
            <summary>
            Extension method for System.Drawing.Size that returns a new Size with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">Size in logical units</param>
            <returns>Size in device coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Drawing.Rectangle)">
            <summary>
            Extension method for System.Drawing.Rectangle that returns a new Rectangle with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">Rectangle in logical units</param>
            <returns>Rectangle in device coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Drawing.PointF)">
            <summary>
            Extension method for System.Drawing.PointF that returns a new PointF with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">PointF in logical units</param>
            <returns>PointF in device coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Drawing.SizeF)">
            <summary>
            Extension method for System.Drawing.SizeF that returns a new SizeF with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">SizeF in logical units</param>
            <returns>SizeF in device coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Drawing.RectangleF)">
            <summary>
            Extension method for System.Drawing.RectangleF that returns a new RectangleF with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">RectangleF in logical units</param>
            <returns>RectangleF in device coordinates</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image by scaling it to device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="bitmapImage">The bitmap image to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the image. When the interpolation mode is Bilinear or Bicubic, a transparent color will be used for background and the image's magins will be interpolated with the background. As result, the returned image will use alpha blending.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,System.Drawing.Color,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image by scaling it to device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="bitmapImage">The bitmap image to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the image</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Drawing.Image@,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image by scaling it to device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="image">The image to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the image. When the interpolation mode is Bilinear or Bicubic, a transparent color will be used for background and the image's magins will be interpolated with the background. As result, the returned image will use alpha blending.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Drawing.Image@,System.Drawing.Color,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image by scaling it to device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="image">The image to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the image</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DpiHelper.PreScaledImageLayoutTransformScaleX">
            <summary>
            Return the horizontal scale value that should be used with a LayoutTransform/ScaleTransform to scale back 
            an image pre-scaled in HighDPI with DpiPrescaleImageSourceConverter in order to obtain crisp results
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.DpiHelper.PreScaledImageLayoutTransformScaleY">
            <summary>
            Return the vertical scale value that should be used with a LayoutTransform/ScaleTransform to scale back 
            an image pre-scaled in HighDPI with DpiPrescaleImageSourceConverter in order to obtain crisp results
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Image,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Extension method for System.Drawing.Image that creates and returns a new bitmap or metafile scaled for the device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="logicalImage">The image to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the image</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.ScaleLogicalImageForDeviceSize(System.Windows.Media.ImageSource,System.Windows.Size,System.Windows.Media.BitmapScalingMode)">
            <summary>
            Scale a WPF image to the indicated size, using the specified scalingMode
            </summary>
            <param name="image">The image to scale</param>
            <param name="deviceImageSize">The resultant image size</param>
            <param name="scalingMode">The BitmapScalingMode to be used during image resize</param>
            <returns>The scaled up image</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Image,System.Drawing.Color,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Extension method for System.Drawing.Image that creates and returns a new bitmap or metafile scaled for the device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="logicalImage">The image to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the image</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,System.Drawing.Size,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image strip to device units, using NearestNeighbor interpolation..
            When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi.
            
            This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap,
            because the resultant bitmap strip size may be different from just upscaling as bitmap
            N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale)
            This may happen depending on the image width because dpiscale is a double not an int.
            </summary>
            <param name="imageStrip">The image strip to scale from logical units to device units</param>
            <param name="logicalImageSize">The size in logical unit of each image in the strip</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the strip</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,System.Drawing.Size,System.Drawing.Color,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image strip to device units, using NearestNeighbor interpolation..
            When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi.
            
            This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap,
            because the resultant bitmap strip size may be different from just upscaling as bitmap
            N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale)
            This may happen depending on the image width because dpiscale is a double not an int.
            </summary>
            <param name="imageStrip">The image strip to scale from logical units to device units</param>
            <param name="logicalImageSize">The size in logical unit of each image in the strip</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the strip</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Bitmap,System.Drawing.Size,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Extension method for System.Drawing.Bitmap that creates and returns a new bitmap strip scaled for the device units, using NearestNeighbor interpolation.
            When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi.
            
            This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap,
            because the resultant bitmap strip size may be different from just upscaling as bitmap
            N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale)
            This may happen depending on the image width because dpiscale is a double not an int.
            </summary>
            <param name="logicalBitmapStrip">The image strip to scale from logical units to device units</param>
            <param name="logicalImageSize">The size in logical unit of each image in the strip</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the strip</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Bitmap,System.Drawing.Size,System.Drawing.Color,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Extension method for System.Drawing.Bitmap that creates and returns a new bitmap strip scaled for the device units
            When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi.
            
            This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap,
            because the resultant bitmap strip size may be different from just upscaling as bitmap
            N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale)
            This may happen depending on the image width because dpiscale is a double not an int.
            </summary>
            <param name="logicalBitmapStrip">The image strip to scale from logical units to device units</param>
            <param name="logicalImageSize">The size in logical unit of each image in the strip</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the strip</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Drawing.Icon@,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the icon by scaling it to device units. 
            When displayed on the device, the scaled icon will have same size as the original icon would have when displayed at 96dpi.
            </summary>
            <param name="icon">The icon to scale from logical units to device units</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Icon,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Creates and returns a new icon scaled for the device units.
            When displayed on the device, the scaled icon will have same size as the original icon would have when displayed at 96dpi.
            </summary>
            <param name="logicalIcon">The icon to scale from logical units to device units</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Windows.Forms.ImageList@,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the imagelist by scaling it to device units.
            When displayed on the device, the scaled imagelist will have same size as the original imagelist would have when displayed at 96dpi.
            </summary>
            <param name="imageList">The imagelist to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the imagelist</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.LogicalToDeviceUnits(System.Windows.Forms.ImageList@,System.Drawing.Color,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Converts (if necessary) the imagelist by scaling it to device units.
            When displayed on the device, the scaled imagelist will have same size as the original imagelist would have when displayed at 96dpi.
            </summary>
            <param name="imageList">The imagelist to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the imagelist</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.CreateDeviceFromLogicalImage(System.Windows.Forms.ImageList,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Creates and returns a new imagelist scaled for the device units
            When displayed on the device, the scaled imagelist will have same size as the original imagelist would have when displayed at 96dpi.
            </summary>
            <param name="logicalImageList">The imagelist to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the imagelist</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DpiHelper.CreateDeviceFromLogicalImage(System.Windows.Forms.ImageList,System.Drawing.Color,Microsoft.TeamFoundation.Client.ImageScalingMode)">
            <summary>
            Creates and returns a new imagelist scaled for the device units
            When displayed on the device, the scaled imagelist will have same size as the original imagelist would have when displayed at 96dpi.
            </summary>
            <param name="logicalImageList">The imagelist to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the imagelist</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ExpanderButton">
            <summary>
            A control that represents a +/- box and a label to the right.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ExpanderButton.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ExpanderButton.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ExpanderButton.Expanded">
            <summary>
            True if the button is in expanded mode (showing -)
            False if in contracted mode (showint +)
            </summary>
            <value></value>
        </member>
        <member name="E:Microsoft.TeamFoundation.Client.ExpanderButton.ExpandEvent">
            <summary>
            Event fired when user expands this control
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.Client.ExpanderButton.ContractEvent">
            <summary>
            Event fired when user contracts this control
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ExpanderButton.OnExpand">
            <summary>
            Raist the Expand event
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ExpanderButton.OnContract">
            <summary>
            Raise the contract event
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ExpanderButton.Expand(System.Boolean)">
            <summary>
            Attempt to expand/contract.  If a listener cancels the operation do not expand or contract
            </summary>
            <param name="bExpand"></param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ExpanderButton.TextFormat">
            <summary>
            Return the text format for this control
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ExpanderButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint the expander button
            TODO Needs to handle drawing box in disabled state
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ExpanderButton.OnSizeChanged(System.EventArgs)">
            <summary>
            Hook to determine if the tooltip is needed and what text to be shown in the tooltip.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ExpanderButton.MeasureText(System.Drawing.Graphics,System.Drawing.Rectangle@,System.Drawing.Size@,System.Drawing.Size@,System.Windows.Forms.TextFormatFlags@)">
            <summary>
            Calculate the text size inside its bounding area.
            </summary>
            <param name="g">graphics context</param>
            <param name="textRect">returning text bounding rectangle</param>
            <param name="textSize">returning text size restricted inside its bounding box</param>
            <param name="unboundTextSize">returning unrestricted text size</param>
            <param name="format">returning text formatting flags</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Client.ExpanderButton.StripHotKey(System.String)" -->
        <member name="M:Microsoft.TeamFoundation.Client.ExpanderButton.OnMouseHover(System.EventArgs)">
            <summary>
            Now that we ownerdraw the control, we need to manually show the tooltip.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ExpanderButton.OnMouseLeave(System.EventArgs)">
            <summary>
            Hook to hide the tooltip.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ExpanderButton.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Expandex">
            <summary>
            A composite control that consists of an expander button (a +/- button), a label to the right,
            a horizontal line to the right of the label and a panel containing a set of controls.  When the
            Expandex control is contracted all the user sees is the + button, label, and horizontal line.  When
            it is expanded they see the - button and the embedded control(s)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Expandex.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Expandex.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Expandex.Text">
            <summary>
            Text for the label
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Expandex.ExpandedPanel">
            <summary>
            The panel that is expanded/contracted containing one or more controls
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Expandex.ExpandedPanelSize">
            <summary>
            Size of this control when it is expanded
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Expandex.HeightFromExpandedPanelHeight(System.Int32)">
            <summary>
            Return the height the Expandex would be if the panel were set to the specified height.
            </summary>
            <param name="epHeight">Height of the expanded panel.</param>
            <returns>Resultant height of the Expandex control.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Expandex.m_expander_ExpandEvent(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when user has pressed on the expander button to expand
            the control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Expandex.m_expander_ContractEvent(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called by the expander button when the user clicks on the expander
            button to contract the control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Expandex.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ExternalHelpLinks">
            <summary>
            Common location for 'fwlink' ids and a method of launching them.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ExternalHelpLinks.SharePointTfsIntegration">
            How TFS and SharePoint play nicely together...
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ExternalHelpLinks.ReportingTfsIntegration">
            How TFS and Reporting play nicely together...
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ExternalHelpLinks.LabManagementSqmConfiguration">
            Lab Management links	 
            Lab SQM option information
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ExternalHelpLinks.LabManagementConfiguration">
            Base page Link for Configuring Lab Management for the First Time
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ExternalHelpLinks.LabManagementAppTierConfiguration">
            How to configure Lab Management at Application Tier
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ExternalHelpLinks.LabManagementTpcHgConfiguration">
            How to configure Host Groups at TPC
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ExternalHelpLinks.LabManagementTpcLsConfiguration">
            How to configure Library Shares at TPC
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ExternalHelpLinks.LabManagementTPCSvcActConfiguration">
            How to configure Service Account at TPC
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ExternalHelpLinks.HostedLandingPage">
            <summary>
            Landing page for hosted Team Foundation Service
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.ExternalHelpLinks.LearnMoreAboutVso">
            <summary>
            Landing page for learning more about VSTS
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ExternalHelpLinks.GetUri(System.Int32)">
            <summary>
            Retrieves the URI for a fwlink given the link id.
            </summary>
            <param name="linkId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ExternalHelpLinks.GetHtmlLink(System.Int32,System.String)">
            <summary>
            Gets an HTML anchor element for a forward link that includes a custom caption.
            </summary>
            <param name="linkId">The id of the link to calulate</param>
            <param name="text">The text for the link</param>
            <returns>A string containing an HTML anchor element</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ExternalHelpLinks.Launch(System.Int32)">
            <summary>
            Launches the browser for a fwlink
            Handles all exceptions and displays an error message if it fails.
            </summary>
            <param name="linkId"></param>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.DialogAuthenticate.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DialogAuthenticate.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.DialogAuthenticate.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.FocusableToolStrip">
            <summary>
            This class exists to work around issues with the ToolStrip implementation.  They don't 
            properly eat the Enter key when the ToolStrip is receiving the keyboard input.  So when
            you hit the Enter key it gets processed by the ToolStrip and then the default button on 
            the dialog is invoked.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.FormUtils.AdjustToClientRect(System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Adjust the specified XY to the client rectangle
            </summary>
            <param name="menuX">proposed menu X</param>
            <param name="menuY">proposed menu Y</param>
            <param name="clientRect">client area bounds</param>
            <returns>adjust XY</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.FormUtils.IsDesignMode(System.Windows.Forms.Control)">
            <summary>
            Determine if we are in DesignMode by walking up our parent chain if necessary since 
            controls within UserControls do not get their DesignMode property set.
            </summary>
            <param name="ctl">control to check</param>
            <returns>true if we are in design mode</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.FormUtils.DoAnyWishToCancel``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Utility for raising cancelable events.  When the first handler decides to cancel, 
            none of the rest of the handlers are called.
            </summary>
            <typeparam name="T">CancelEventArgs subclass for passing to handlers</typeparam>
            <param name="handlers">the optional list of delegates to call for this event</param>
            <param name="sender">sender for raising the event</param>
            <param name="e">event arguments</param>
            <returns>whether any of the registered handlers decided to cancel the event</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.FormUtils.IsMnemonicMsg(System.Windows.Forms.Message)">
            <summary>
            Check if the Windows Message is a possible mnemonic character with
            an active Alt modifier.
            </summary>
            <param name="msg">message</param>
            <returns>true for mnemonic character, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.FormUtils.IsWindowNavigationMsg(System.Windows.Forms.Message)">
            <summary>
            Check if the Windows Message is a window navigation message
            i.e. Ctrl + Tab OR Ctrl + Shift + Tab
            </summary>
            <param name="msg">message</param>
            <returns>true if it is a window navigation message, false otherwise</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.HelpUtilities">
            <summary>
            Provides utility methods for invoking the help subsystem.
            </summary>
            <remarks>
            Code mirrored from bliss\common\source\framework\help\helpviewerprovider.cs and env\msenv\vsbrowse\help3utilities.cpp, 
            with help from Paul O'Rear (paorear).
            Ideally, the VS Help classes should be consumable outside of VS, but they are not, so we have to duplicate this.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.HelpUtilities.LaunchHelpTopic(System.String)">
            <summary>
            Launches a help topic for a given keyword.
            </summary>
            <param name="keyword">A help keyword.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Client.HelpUtilities.LaunchLocalHelp(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Client.HelpUtilities.LaunchOnlineHelp(System.String)" -->
        <member name="M:Microsoft.TeamFoundation.Client.HelpUtilities.GetOnlineStatus">
            <summary>
            Returns a flag indicating whether the help system preference is online or not.
            </summary>
            <returns><c>true</c> if we the user prefers to use online help, <c>false</c> if they prefer to use local help.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.HelpUtilities.GetHelpViewerPath">
            <summary>
            Attempts to lookup the path to the local HlpViewer.exe file.
            </summary>
            <returns>The path to the executable, or <c>null</c> if not available or not found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.HelpUtilities.GetHelpAppRoot">
            <summary>
            Attempts to lookup the root foldr for the Help application (that contains HlpViewer.exe).
            </summary>
            <returns>The path to the folder, or <c>null</c> if not found.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.IArtifactProvider">
            <summary>
            An IArtifactProvider defines methods for retrieving an artifact and the
            generalized document form.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IArtifactProvider.GetArtifactDocument(System.Uri)">
            <summary>
            GetArtifactDocument returns the actual data for the artifact.
            This document is or a variable structure based on the artifact 
            type. See the XSD definitions for each of the artifacts to
            determine the structure for a given type.
            
            This document may have references to other Artifiacts.
            These other artifacts are not expanded and other calls may be
            made to retrieve the contained details.
            </summary>
            <param name="ArtifactUri">This is a single artifact Uri to retrieve</param>
            <returns>An XML document that contains the details of the doucment.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ICancelableAsyncResult">
            <summary>
            interface for cancelable async actions, user can call Cancel() to cancel an async action.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ICancelableAsyncResult.Cancel">
            <summary>
            Cancel the Async action
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ICancelableAsyncResult.IsCanceled">
            <summary>
            return whether or not the action has already been canceled
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.InformationBar">
            <summary>
            Panel that displays information to the user.
            It includes an Icon, Text Message, and ProgressBar.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.InformationBar.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.InformationBar.StartMarquee(System.Int32)">
            <summary>
            Shows progress indicator and sets style to Marquee
            </summary>
            <param name="speed">Marquee Animation Speed desired</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.InformationBar.StopMarquee">
            <summary>
            Hides progress indicator and changes style back to Blocks
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.InformationBar.WarningBackColor">
            <summary>
            Background color used for warning and errors
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.InformationBar.WarningForeColor">
            <summary>
            Foregound color used for warning and errors
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.InformationBar.InfoBackColor">
            <summary>
            Background color used for default and info
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.InformationBar.InfoForeColor">
            <summary>
            Foreground color used for default and info
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.InformationBar.LinkForeColor">
            <summary>
            Foreground color used for default and info
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.InformationBar.Text">
            <summary>
            Get or Set the text message that the information bar displays.
            Changing the text clears any links that have been set.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.InformationBar.ProgressText">
            <summary>
            Gets to set the Text to display next to the progress bar when visible
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.InformationBar.Icon">
            <summary>
            Get or Set the type of icon that information bars displays
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.InformationBar.ProgressBarValue">
            <summary>
            Get or Set the value of the progress indicator (range 0-100)
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.InformationBar.PreferredSize">
            <summary>
            Returns the PrefferedSize of the InformationBar based on the current width
            and the length of the text.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.InformationBar.AutoGrowMaxHeight">
            <summary>
            Maximum height that the control is allowed to grow to.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.InformationBar.WrapText">
            <summary>
            Use this to allow the control to AutoGrow and Wrap its text.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.InformationBar.LabelLinks">
            <summary>
            Links collection for the info bar text label.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.Client.InformationBar.LabelLinkClicked">
            <summary>
            LinkClicked event for the info bar text label.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.InformationBar.ProgressBarPanelInternal">
            <summary>
            Used by QA tests
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ITfsResult">
            <summary>
            Web methods can return multiple result sets.  These result sets are returned in 
            the same stream and that stream must be processed linearly.  In order to realize
            results from a result set that comes later in the stream, all results prior to it
            must be realized first.  This interface provides a way to associate result sets that
            are returned in the same stream and to ensure that the stream can be positioned
            properly when data is requested from a particular result set.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITfsResult.ReadAll">
            <summary>
            Forces all of the items for this result set to be realized.
            IsComplete will always return true after ReadAll is called.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITfsResult.Previous">
            <summary>
            The Previous property references the result set that comes prior to this one in
            the stream.  Together with ReadAll(), it allows a result set to ensure that the
            stream is at the correct position to begin realizing its results.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITfsResult.IsComplete">
            <summary>
            Indicates whether all of the items for this result have been realized.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITfsResult.Context">
            <summary>
            The TfsRequestContext associated with this result set
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITfsResult.XmlElement">
            <summary>
            The element name for the result set in the XML stream.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ITfsXmlSerializable">
            <summary>
            This interface should be implemented by TFS client objects that will be
            serialized to and from XML.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITfsXmlSerializable.WriteXml(System.Xml.XmlWriter,System.String)">
            <summary>
            Serializes the object to XML using the specified element name.
            </summary>
            <param name="writer">The XMLWriter used to write the element</param>
            <param name="xmlElement">The name to use for the XML element</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITfsXmlSerializable.ReadXml(System.Xml.XmlReader,System.String)">
            <summary>
            Deserializes the object from XML using the specified XML element name.
            </summary>
            <param name="reader">The XMLReader from which the element will be read</param>
            <param name="xmlElement">The name that the XML element is expected to have</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.IResultCollection`1">
            <summary>
            For ResultCollections, We want to return IEnumerables to the client 
            application.  However, we also want the client to dispose the collections
            when they are done with them so that we can dispose the associated internal
            resources.  This interface provides both mechanisms.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.LinkingService">
            <remarks/>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.LinkingService.GetArtifacts(System.String[])">
            <summary>
            
            </summary>
            <param name="artifactUriList"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.LinkingService.GetReferencingArtifacts(System.String[])">
            <summary>
            
            </summary>
            <param name="uriList"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.LinkingService.GetReferencingArtifacts(System.String[],Microsoft.VisualStudio.Services.Common.LinkFilter[])">
            <summary>
            
            </summary>
            <param name="uriList"></param>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.LinkingService.GetArtifactUrl(System.String)">
            <summary>
            Get Url for artifact for addressability in links.
            This version will get the server Url part from the TF server object.
            </summary>
            <param name="uri">Artifact Uri.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.LinkingService.GetArtifactUrl(Microsoft.VisualStudio.Services.Common.ArtifactId)">
            <summary>
            Get Url for artifact for addressability in links.
            This version will get the server Url part from the TF server object.
            </summary>
            <param name="artId">ArtifactId.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.LinkingService.GetArtifactUrlExternal(System.String)">
            <summary>
            Get Url for artifact for addressability in links.
            This version will get the server Url part from web.config.
            It is intended to generate a Url for external access.
            </summary>
            <param name="uri">Artifact Uri.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.LinkingService.GetArtifactUrlExternal(Microsoft.VisualStudio.Services.Common.ArtifactId)">
            <summary>
            Get Url for artifact for addressability in links.
            This version will get the server Url part from web.config.
            It is intended to generate a Url for external access.
            </summary>
            <param name="artId">ArtifactId.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.LinkingService.ServerUrlPublic">
            <summary>
            The server Url for external access
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.LinkingService.InitializeProviders">
            <summary>
            Linking Providers' Service Url from Registration data. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.LinkingService.GetArtifactsProcess(System.String[])">
            <summary>
            
            </summary>
            <param name="artifactUriList"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.LinkingService.GetArtifactsProcess(System.String,Microsoft.VisualStudio.Services.Common.ArtifactId[])">
            <summary>
            
            </summary>
            <param name="tool"></param>
            <param name="artifactIds"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.LinkingService.GetArtifactUrl(Microsoft.VisualStudio.Services.Common.ArtifactId,System.String)">
            <summary>
            Get Url for artifact for addressability in links.
            This private version will construct the artifact Url using 
            the server Url supplied.
            </summary>
            <param name="uri">Artifact Uri.</param>
            <param name="serverUrl">server Url.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.LinkingService.GetNullElementIndexes(System.Object[],System.Int32[]@,System.Object[]@)">
            <summary>
            
            </summary>
            <param name="arr"></param>
            <param name="nullElementIndices"></param>
            <param name="filteredArr"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.LinkingService.MergeNullElements(System.Object[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="arr"></param>
            <param name="nullElementIndices"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ListViewResize.AnyItemsChecked">
            <summary>
            Return true if at least one item in the list is checked.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ListViewResizeX">
            <summary>
            Summary description for ListViewResizeX.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.NonConfiguredSiteHelper">
            <summary>
            Utility class to create a HTML for showing the user that a particular site type is not configured for a project.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NonConfiguredSiteHelper.ShowNonConfiguredSitePage(Microsoft.TeamFoundation.Client.NonConfiguredSiteHelper.SiteType)">
            <summary>
            Shows the 'not configured' web page in an external browser.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NonConfiguredSiteHelper.GenerateNotFoundUri(Microsoft.TeamFoundation.Client.NonConfiguredSiteHelper.SiteType)">
            <summary>
            Creates a local html file in the temp folder.  Recreates the file once per session at the most.
            Considered routing this to an embedded resource, but since it needs to be localized and I cannot find a
            way to figure out which satelite resource assembly is being used we have to write a file.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NonConfiguredSiteHelper.GetNonConfiguredSiteHtml(Microsoft.TeamFoundation.Client.NonConfiguredSiteHelper.SiteType,System.Boolean)">
            <summary>
            Creates the html for the not configured site page.
            </summary>
            <param name="type"></param>
            <param name="imagesFromAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NonConfiguredSiteHelper.GetNonConfiguredSiteHtml(Microsoft.TeamFoundation.Client.NonConfiguredSiteHelper.SiteType,System.String)">
            <summary>
            Creates the html for the not configured site page.
            </summary>
            <param name="type"></param>
            <param name="location">Base url for external resources</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NonConfiguredSiteHelper.LoadResource(System.String)">
            <summary>
            Load and return an embedded resource string.
            
            Assumes resource is UTF8; does not cache the resource.
            </summary>
            <param name="resourceName">Resource name.</param>
            <returns>Value of the resource.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Internal.RegistryUtilities">
            <summary>
            Provides utility methods for manipulating our registry settings.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.RegistryUtilities.GetUserOrApplicationRegistryValue(System.String,System.String)">
            <summary>
            Attempts to read a registry value under the user registry root, and if not found, falls back
            to the application registry root (Visual Studio).
            </summary>
            <param name="keyPath">The relative path of the registry key to read.</param>
            <param name="name">The name of the registry name-value pair.</param>
            <returns>The read value, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.RegistryUtilities.GetApplicationRegistryValue(System.String,System.String)">
            <summary>
            Attempts to read a registry value under the application registry root (Visual Studio).
            </summary>
            <param name="keyPath">The relative path of the registry key to read.</param>
            <param name="name">The name of the registry name-value pair.</param>
            <returns>The read value, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.RegistryUtilities.GetUserRegistryValue(System.String,System.String)">
            <summary>
            Attempts to read a registry value under the user registry root.
            </summary>
            <param name="keyPath">The relative path of the registry key to read.</param>
            <param name="name">The name of the registry name-value pair.</param>
            <returns>The read value, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.RegistryUtilities.SetUserRegistryValue(System.String,System.String,System.Object)">
            <summary>
            Attempts to write a registry value under the user registry root.
            </summary>
            <param name="keyPath">The relative path of the registry key.</param>
            <param name="name">The name of the registry name-value pair.</param>
            <param name="value">The value to write (passing <c>null</c> will delete any existing value).</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Internal.WaitCursor">
             <summary>
             This is a class to help display a busy cursor during long operations
             that will automatically revert to a "normal" cursor when it's through.
            
             Note that unlike a lot of similar WaitCursor classes nothing actually 
             happens in the constructor here because we need to have different 
              behaviors for different environments.
             </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Internal.AutoWaitCursor">
            <summary>
            This is just your everyday automatic busy cursor class.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.#cctor">
            Creates the resource manager instance.
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.Get(System.String)">
            Returns a localized string given a resource string name.
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.GetInt(System.String)">
            Returns a localized integer given a resource string name.
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.GetBool(System.String)">
            Returns a localized string given a resource string name.
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.Format(System.String,System.Object[])">
            A little helper function to alleviate some typing associated with loading resources and
            formatting the strings.  In DEBUG builds, it also asserts that the number of format
            arguments and the length of args match.
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.AnswerAll">
            <summary>
            a
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.AnswerNo">
            <summary>
            n
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.AnswerYes">
            <summary>
            y
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.AnswerAllFull">
            <summary>
            all
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.AnswerNoFull">
            <summary>
            no
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.AnswerYesFull">
            <summary>
            yes
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.Yes">
            <summary>
            Yes
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.No">
            <summary>
            No
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.BasicAuthenticationRequiresSsl">
            <summary>
            Basic authentication requires a secure connection to the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.CannotGetTempFileName(System.Object)">
            <summary>
            Unable to generate a temporary file name for : {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.CannotModifyBuiltinService(System.Object)">
            <summary>
            TF249050: You cannot modify the service for the following type: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ComboTreeHelpText">
            <summary>
            Displays a dropdown tree.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.CommandCanceled">
            <summary>
            Command canceled by the user.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.CommandFileLineTooLongWarning(System.Object)">
            <summary>
            Command file line exceeds {0} characters. Environment variables were not expanded.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ContentsOfFileTooBig(System.Object,System.Object)">
            <summary>
            Contents of file {0} are too big. Contents must be {1} characters or less.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.CouldNotParseParameter(System.Object,System.Object)">
            <summary>
            Could not parse {0} parameter {1}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.DoesNotAcceptAValue(System.Object)">
            <summary>
            Option {0} does not accept a value.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.DuplicateOption(System.Object)">
            <summary>
            Option {0} is specified more than once.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.EmptyStringNotAllowed">
            <summary>
            TF249052: The string must have at least one character.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ErrorTitle">
            <summary>
            Error
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ExceptionCaption">
            <summary>
            Team Foundation Error
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ExitCode(System.Object)">
            <summary>
            ExitCode: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ServerOptionIsDeprecated(System.Object)">
            <summary>
            Option /{0} is deprecated. Use /collection instead.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ExtraCommaInOption(System.Object)">
            <summary>
            There is an extra comma in option {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.InvalidOptionCombination(System.Object,System.Object)">
            <summary>
            Option /{0} cannot be combined with option /{1}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.MissingAssociatedOption(System.Object,System.Object)">
            <summary>
            Option /{0} cannot be used without option /{1}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.InvalidOptionValue(System.Object,System.Object)">
            <summary>
            TF10120: The value {0} is not supported for option {1}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.InvalidResponse">
            <summary>
            Invalid response.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.MissingOptionValue(System.Object)">
            <summary>
            Option {0} requires a value.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.NoRootFolder">
            <summary>
            TF30075: Team Foundation could not find the specified root folder or the folder is missing.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.PressEnterKey">
            <summary>
            Press the Enter key to continue.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.QuestionYNSuffix">
            <summary>
            (Yes/No) 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.QuestionYNASuffix">
            <summary>
            (Yes/No/All) 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ServerNameNotValid(System.Object)">
            <summary>
            TF249051: No URL can be found that corresponds to the following server name: {0}. Verify that the server name is correct.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ServiceNotRegistered(System.Object)">
            <summary>
            The service &apos;{0}&apos; is not registered on the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.StandardErrorDlgTitle">
            <summary>
            Team Foundation Error
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ThreadingMustBeSTA">
            <summary>
            TF249049: Team Foundation Server could not open the dialog because the threading model must be single-threaded apartment.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.UICredProvider_MessageText">
            <summary>
            Please provide credentials to connect to Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.UICredProvider_TitleText(System.Object)">
            <summary>
            Connecting to {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.UnrecognizedOption(System.Object)">
            <summary>
            Unrecognized command option &apos;{0}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ValueLengthExceedsMaxForOption(System.Object,System.Object)">
            <summary>
            The length of the value for option {0} must not exceed {1} characters.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.WrongNumberOfArgsForBuiltIn(System.Object)">
            <summary>
            Wrong number of arguments for built-in interpreter command {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.InformationBarImages">
            <summary>
            .\resources\InformationBarImages.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.FileTypeFilter">
             <summary>
             {StrEnds="|*.*"}The part after the pipe (which is the actual file filter) should not be localized
            
             All files (*.*)|*.*
             </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ClientCertificateMissing(System.Object)">
            <summary>
            No certificate capable of client authentication was found in the certificate store with thumbprint {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.SmartCardMissing(System.Object)">
            <summary>
            The smart card containing the private key for the certificate with thumbprint {0} is not available.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ClientCertificateNoPermission(System.Object)">
            <summary>
            The certificate with thumbprint {0} could not be used for client authentication. The current user may not have permission to use the certificate.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ClientCertificateErrorReadingStore(System.Object)">
            <summary>
            An exception occurred while loading client authentication certificates from the certificate store: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ClientCertificatesEnabledDisabled(System.Object)">
             <summary>
             The string will be combined with either Yes or No (also in this resx)
            
             Client authentication certificates enabled: {0}
             </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ClientCertificatesUsingAny">
            <summary>
            Automatically selecting a client authentication certificate when connecting.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ClientCertificatesUsingSpecific">
            <summary>
            Using only client authentication certificates with one of the following thumbprints:
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ClientCertificatesAffectedByMachineSettings">
            <summary>
            The client certificates configuration was affected by machine-wide settings.To inspect and modify machine-wide settings, use the /machine switch.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.NullArtifactUrlInUrlList">
            <summary>
            A null artifact url was found in the url list. Do not pass in a null artifact url.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.MissingOption(System.Object)">
            <summary>
            Option /{0} is required for this operation but is missing.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ProcessIdentifierFormat(System.Object,System.Object,System.Object)">
            <summary>
            Process name: {0}; Process Id: {1}; Computer: {2} 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsConnectDialogTitleConnectToServer">
            <summary>
            Connect to Team Project Collection
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsConnectDialogSelectServerToViewCollections">
            <summary>
            Select a Team Foundation Server to view Team Project Collections
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsConnectDialogSelectCollectionToViewProjects">
            <summary>
            Select a Team Project Collection to view Team Projects
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsConnectDialogWorking">
            <summary>
            Working...
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsConnectDialogLegacyServer(System.Object)">
            <summary>
            ({0})
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsConnectDialogRefresh">
            <summary>
            Retry
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsConnectDialogActionLinkSeparator">
            <summary>
            -
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsConnectDialogSupplyCredentials">
            <summary>
            Use different credentials
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.DomainNameAlreadyExists(System.Object)">
            <summary>
            Team Foundation Server &apos;{0}&apos; already exists.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.DomainNameAlreadyExistsTitle">
            <summary>
            Team Foundation Server Exists
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.RemoveServer(System.Object)">
            <summary>
            Do you want to remove Team Foundation Server &apos;{0}&apos;?
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.RemoveServerTitle">
            <summary>
            Remove Team Foundation Server
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ServerNameEmpty">
            <summary>
            Server name cannot be empty.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.InvalidServerName">
             <summary>
             must use http://
            
             TF30335: The server name cannot contain the characters &apos;/&apos; or &apos;:&apos;, or start with &apos;http://&apos; or &apos;https://&apos;. If the server name is an IPv6 address, it can contain the character &apos;:&apos; only if the full name is enclosed by square brackets.
             </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.InvalidPortNumber">
            <summary>
            Port number is empty or is not valid. Please enter a valid number.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ConnectToTfs_NoPermission(System.Object,System.Object)">
            <summary>
            TF31003: Either you have not entered the necessary credentials or your user account does not have permission to connect to the Team Foundation Server at {0}. Ask your server administrator to add the appropriate permissions to your account.    The following error was encountered: {1}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ConnectToTfs_AccessCheck(System.Object,System.Object)">
            <summary>
            TF249002: Your user account does not have permission to connect to the Team Foundation Server at {0}. Ask your server administrator to add the appropriate permissions to your account.    The server returned the following error: {1}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ConnectToTfs_UnableToConnect(System.Object)">
            <summary>
            TF31005: Cannot connect to Team Foundation Server at {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ConnectToTfs_UnExpected(System.Object)">
            <summary>
            TF31004: Unexpected error encountered while connecting to Team Foundation Server at {0}. Wait a few minutes and try again. If the problem persists, contact the server administrator
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ConnectToTfs_AddServer_UnableToConnect(System.Object,System.Object)">
            <summary>
            TF31002: Unable to connect to this Team Foundation Server: {0}.Team Foundation Server Url: {1}.  Possible reasons for failure include:- The name, port number, or protocol for the Team Foundation Server is incorrect.- The Team Foundation Server is offline.- The password has expired or is incorrect.For further information, contact the Team Foundation Server administrator.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ConnectToTfs_AddServer_UnableToConnect_WithTechnicalInfo(System.Object,System.Object,System.Object)">
            <summary>
            TF31002: Unable to connect to this Team Foundation Server: {0}.Team Foundation Server Url: {1}.  Possible reasons for failure include:- The name, port number, or protocol for the Team Foundation Server is incorrect.- The Team Foundation Server is offline.- The password has expired or is incorrect.Technical information (for administrator):{2}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ConnectToTfs_Unknown(System.Object,System.Object)">
            <summary>
            TF31001: Cannot connect to Team Foundation Server at {0}. The server returned the following error: {1}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ConnectToTfs_TrustFailure(System.Object)">
            <summary>
            TF30017: Cannot connect to Team Foundation Server at {0}. The security certificate is either not installed, not properly configured, or expired.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ConnectDialogImages">
            <summary>
            .\resources\ConnectDialogImages.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TFHost_ErrorWritingTEConfigFile">
            <summary>
            TF249053: Team Explorer cannot write to the project list configuration file.Free up space on the local hard disk. If the problem persists, contact the administratorfor your computer to confirm that your user account has appropriate permissions to write to the file.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.RegisteredServersCannotFindCollection(System.Object)">
            <summary>
            TF249000: The url {0} cannot be resolved to a team project collection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.AddDomainDialogAddingCollection">
            <summary>
            TF249001: You have specified the URL for a project collection, but the application instance that contains the project collection will be added instead.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.AddDomainDialog_InvalidServer">
            <summary>
            Invalid server name/URL
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.AddDomainDialog_InvalidPort">
            <summary>
            Invalid port number
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ErrorCaption">
            <summary>
            Error
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.InformationCaption">
            <summary>
            Information
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.WarningCaption">
            <summary>
            Warning
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.UnregisteredCollectionInvalidMethodError">
            <summary>
            Unregistered collections cannot be deleted or saved.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.InvalidConnectionString(System.Object)">
            <summary>
            TF249047: The connection string is not valid: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.MissingConnectionString(System.Object)">
            <summary>
            TF249048: The connection string is missing for the following category: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.CollectionServicingJobDidNotSucceed">
            <summary>
            The collection servicing job did not succeed.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.OperationNotSuportedPreFramework">
            <summary>
            This operation is not supported against Team Foundation Servers released before Visual Studio Team Foundation Server 2010.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ServicingOperationConfigDoesNotDefineOperationNameError">
            <summary>
            The servicing operation configuration file does not define operation name.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.WaitForCollectionServicingTimeout">
            <summary>
            TF249053: The timeout limit for servicing the collection has been exceeded. The servicing job will continue to run, but no further information about this job will be available.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.RegisteredInstancedDuplicateInstances">
            <summary>
            TF249054: One or more registry values are duplicates. Duplicate instances in the registry will be removed.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.DialogAuthenticate_Waiting(System.Object)">
            <summary>
            Waiting for {0}...
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.DialogAuthenticate_Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsmqInvalidChannelType(System.Object)">
            <summary>
            The specified channel type {0} is not supported.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsmqTransportNoProjectCollection">
            <summary>
            The message queue transport could not be initialized. This is typically caused by not using the provided TfsmqServiceHost class or failure to apply the TfsmqPollBehavior to the service.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsmqInvalidOperationOneWayOnly(System.Object,System.Object)">
            <summary>
            The operation {0} for contract {1} is not valid for message queue transport. Valid operation contracts should contain one way operations only. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsmqReceiveTimeout(System.Object)">
            <summary>
            The receive operation timed out after {0}. The time allotted to this operation may be a portion of a larger timeout.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsmqInvalidServerConfiguration(System.Object,System.Object)">
            <summary>
            The message queue connection manager must be initialized with an instance of type {0} but was provided {1}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsmqAcceptChannelTimeout(System.Object)">
            <summary>
            The accept channel operation timed out after {0}. The time allotted to this operation may be a portion of a larger timeout.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsmqNotSupportedOnProjectCollection(System.Object)">
            <summary>
            The message queue transport is not supported on project collection {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsmqInvalidUri(System.Object)">
            <summary>
            The URI {0} is not a valid in this context. You must connect to the root URI.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.MultipleIdentitiesFoundMessage(System.Object,System.Object)">
            <summary>
            Multiple identities found matching &apos;{0}&apos;. Please specify one of the following identities:{1}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ArgumentNotSupportedClass(System.Object)">
            <summary>
            TF222050: The object that you provided is not a supported class. The name of the class that you provided is: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_CouldNotConnect(System.Object)">
            <summary>
            Could not connect to &apos;{0}&apos;
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_DeletingFrom(System.Object)">
            <summary>
            Deleting from {0} ...
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_DeletingFromRosetta">
            <summary>
            Deleting Report Server files ...
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_DetachingFromWss">
            <summary>
            Detaching SharePoint site ...
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_DeletingFromWss">
            <summary>
            Deleting SharePoint site ...
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_Done">
            <summary>
            Done.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_EleadNotFound">
            <summary>
            Warning. Did not find the expected Team Foundation Server Core Service, vstfs.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_Failure">
            <summary>
            The team project could not be deleted.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_ProjectNotFound(System.Object)">
            <summary>
            The project &apos;{0}&apos; was not found on the Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_RosettaNotFound">
            <summary>
            Warning: Did not find Reporting Services.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_WssNotFound">
            <summary>
            Warning. Did not find SharePoint site service.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_DomainError">
            <summary>
            Error determining domain.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_TryUsingForce">
            <summary>
            To force deletion to continue even after failures, run the command again with the [/force] switch.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_MissingName">
            <summary>
            The name of the project must be specified.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_MissingDomain(System.Object)">
            <summary>
            The name of the server must be specified because more than one domain is registered: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_FailureInstructions">
            <summary>
            The team project could not be deleted. Either the delete operation failed, or project creation failed but the partially-created project could not be deleted. Review the previous entries in this log for details. The team project has been taken offline and remains in a non-operational state. It is not accessible to Team Explorer. To complete the deletion, address the errors noted in this log, and then attempt deleting the project again.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ToolNames_VersionControl">
            <summary>
            Version Control
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ToolNames_WorkItemTracking">
            <summary>
            Work Item Tracking
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ToolNames_TeamFoundation">
            <summary>
            Team Foundation Core
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ToolIdMalformed(System.Object)">
            <summary>
            ToolId {0} malformed.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.NoServiceInterfaceByName(System.Object,System.Object)">
            <summary>
            No ServiceInterface named &quot;{0}&quot; found registered to tool &quot;{1}&quot;.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.NullServiceUrl(System.Object,System.Object)">
            <summary>
            Null or empty service URL returned for ServiceInterface &quot;{0}&quot; registered to tool &quot;{1}&quot;.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.MoreThanOneServiceInstance(System.Object)">
            <summary>
            More than one ServiceInstance were registered to the tool: &quot;{0}&quot;. Call the overload of this method that specifies a ServiceInterface name instead.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.NullOrEmptyServiceInterface(System.Object,System.Object)">
            <summary>
            The returned ServiceInterface for tool &quot;{0}&quot; named &quot;{1}&quot; was null or empty.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.NoRegistrationEntries(System.Object)">
            <summary>
            No RegistrationEntries were returned for the tool: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.NoServiceInterfaces(System.Object)">
            <summary>
            No ServiceInterfaces were returned for the tool: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.NodeDoesNotExistMessage(System.Object,System.Object)">
             <summary>
             Registration Utilities
            
             No node with tag &quot;{0}&quot; exists under the given node: {1}.
             </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.RegistrationInInconsistentStateMessage">
             <summary>
             Registration Utilities
            
             Registration DB is in inconsistent state.
             </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TypeCannotSerializeMessage(System.Object)">
             <summary>
             Registration Utilities
            
             Type {0} cannot be used in the serializer.
             </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ManageTfsListApplicationInstanceNotSupported">
            <summary>
            TF222050: You cannot connect to Team Foundation Server 2010 by using this tool because it uses an obsolete class (ManageTfsList) that does not support application instances.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.GenericTeamFoundationCaption">
            <summary>
            Team Foundation Server
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.MicrosoftVisualStudioCaption">
            <summary>
            Microsoft Visual Studio
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.EnterValidPath">
            <summary>
            Please enter a valid path, or choose a node to reclassify the artifacts.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.HttpRequestTimeout(System.Object)">
            <summary>
            The http request operation timed out after {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.LocalMetadataTableMutexTimeout">
            <summary>
            TF400030: The local data store is currently in use by another operation. Please wait and then try your operation again. If this error persists, restart the application.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ACSAuthenticationError(System.Object)">
            <summary>
            Failed to authenticate and retrieve a security token from Access Control Services: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ConfigurationErrorsEncountered(System.Object)">
            <summary>
            There are errors present in the configuration file for this executable. Full exception details:{0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.FileNotFound(System.Object)">
             <summary>
             {0} is a file path
            
             The file {0} does not exist or is not accessible.
             </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.UnsafeFileOpenPrompt">
            <summary>
            The file you are attempting to open is an executable file. This poses a security risk. You should only execute programs from trusted locations. Do you want to continue?
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.HttpClientOpenTimeout(System.Object)">
            <summary>
            The open operation timed out after {0}. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.HttpClientAlreadyOpened">
            <summary>
            The client object has already been opened.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.SimpleWebCredentialsMissing">
            <summary>
            Found a simple web token but failed to get the simple web credentials.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.FederatedCredentialWithNoIssuedTokenProvider">
            <summary>
            Converting federated credential failed because token provider not found.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TokenProviderReturnInvalidCurrentToken">
            <summary>
            Token provider return invalid current token.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsConnectDialogSwitchUser">
            <summary>
            Switch User
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TfsConnectDialogUserLabelFormat(System.Object,System.Object)">
            <summary>
            {0} ({1})
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TruncatedStringFormat(System.Object)">
            <summary>
            {0}...
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.CannotAuthenticateAsAnotherUser(System.Object,System.Object)">
            <summary>
            We were unable to establish the connection because it is configured for user {0} but you attempted to connect using user {1}. To connect as a different user perform a Switch user operation. To connect with the configured identity just attempt the last operation again.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ConnectionUserChangedWarning(System.Object)">
            <summary>
            We have detected that the user associated with the connection to {0} has been changed by another process. This mismatch can cause inaccurate information to be displayed or even errors. We recommend that you save your work and close the application.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.SwitchUserNotSupportedOnPremise">
            <summary>
            You may only switch your user with a Team Foundation Service account.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.SwitchUserRequiresFederatedAuthentication">
            <summary>
            The connection is not correctly authenticated or the authentication type is not supported. You may only switch your user when your connection is established with federated authentication.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.DeleteVolatileCacheDirectoryError(System.Object,System.Object)">
            <summary>
            The directory {0} could not be deleted. Delete the directory and try the operation again.    The following error was encountered: {1}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ServerNotSupported(System.Object)">
            <summary>
            You cannot connect to {0} because it is running a version of Team Foundation Server that is not supported by your version of Visual Studio. Upgrade your server to Team Foundation Server 2010 (or a newer version), or use Visual Studio 2010 or Visual Studio 2012.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.JobDefinitionPropertiesCannotSet">
            <summary>
            TF401286: This Property of JobDefinition is readonly.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.InvalidProxyUrl(System.Object)">
            <summary>
            TF15044: Unable to connect to this Team Foundation Proxy Server: {0}. Possible reasons for failure include: The Team Foundation Proxy Server name, port number or protocol is incorrect; The Team Foundation Proxy Server is offline; Password is expired or incorrect. For further information, contact the Team Foundation Proxy administrator.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_OperationCancelledAtTime(System.Object)">
            <summary>
            Operation cancelled {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_OperationFailedAtTime(System.Object)">
            <summary>
            Operation failed {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_OperationInProgressAtTime(System.Object)">
            <summary>
            Operation in progress {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_OperationQueuedAtTime(System.Object)">
            <summary>
            Operation queued {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_OperationSucceededAtTime(System.Object)">
            <summary>
            Operation succeeded {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_DeletingFromTfs">
            <summary>
            Deleting from Team Foundation Server ...
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_OperationHasId(System.Object)">
            <summary>
            Operation ID: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_ProjectServerNotFound">
            <summary>
            Warning: Did not find Project Server service.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ToolNames_Build">
            <summary>
            Build
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ToolNames_ProjectServer">
            <summary>
            Project Server
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ToolNames_TeamProjects">
            <summary>
            Team Projects
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.ToolNames_WSS">
            <summary>
            SharePoint
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_InitializationException(System.Object)">
            <summary>
            Warning: Non-fatal exception during initialization: &apos;{0}&apos;
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Internal.ClientResources.TeamProjectDeleter_ProjectNotFoundOnService">
            <summary>
            Not found.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.NotificationManager.MessageInfo.deliverInModalDialogState">
            <summary>
            Enables the notification manager to deliver notification if the app is in modal state. This flag is essential
            to enable UI windows that are shown from tf.exe to recieve messages if needed. (e.g. resolve window needs to listen
            to notifications issued by the vs instance running the default merge tool to react to conflict resolution)
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.NotificationManager.GetNotificationParametersCallback">
            <summary>
            Callback to allow the notification provider to tailor the parameters based on the version
            of the window they are talking to.
            </summary>
            <param name="notification">Notification</param>
            <param name="windowFlags">Window flags (See NotificationWindowVersion)</param>
            <param name="userData">User data that will be passed to the callback</param>
            <param name="wParam">Original wParam value provided with the notification.  Overwrite this
            if desired.</param>
            <param name="lParam">Original lParam value provided with the notification.  Overwrite this
            if desired.</param>
            <returns>True if the notification should be sent to this window.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.TeamFoundation.Client.NotificationManager.NotificationWindowVersion" -->
        <member name="M:Microsoft.TeamFoundation.Client.NotificationManager.EnqueueNotification(Microsoft.TeamFoundation.Client.Internal.Notification)">
            <summary>
            Queue a notification for delivery on the next timer event.
            </summary>
            <param name="notification">Notification</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NotificationManager.EnqueueNotification(Microsoft.TeamFoundation.Client.Internal.Notification,System.Object)">
            <summary>
            Queue a notification for delivery on the next timer event.
            </summary>
            <param name="notification">Notification</param>
            <param name="param1">Object to be hashed for wParam</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NotificationManager.EnqueueNotification(Microsoft.TeamFoundation.Client.Internal.Notification,System.Object,System.Object)">
            <summary>
            Queue a notification for delivery on the next timer event.
            </summary>
            <param name="notification">Notification</param>
            <param name="param1">Object to be hashed for wParam</param>
            <param name="param2">Object to be hashed for lParam</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NotificationManager.EnqueueNotification(Microsoft.TeamFoundation.Client.Internal.Notification,System.Object,System.Object,Microsoft.TeamFoundation.Client.NotificationManager.GetNotificationParametersCallback,System.Object)">
            <summary>
            Queue a notification for delivery on the next timer event.
            </summary>
            <param name="notification">Notification</param>
            <param name="param1">Object to be hashed for wParam</param>
            <param name="param2">Object to be hashed for lParam</param>
            <param name="callback">Callback for updating parameters based on the target window.  This is useful for back compat.</param>
            <param name="userData">User data that will be passed back to the callback</param>    
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NotificationManager.EnqueueNotification(Microsoft.TeamFoundation.Client.Internal.Notification,System.IntPtr,System.IntPtr)">
            <summary>
            Queue a notification for delivery on the next timer event.
            </summary>
            <param name="notification">Notification</param>
            <param name="wParam">wParam</param>
            <param name="lParam">lParam</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NotificationManager.EnqueueNotification(Microsoft.TeamFoundation.Client.Internal.Notification,System.IntPtr,System.IntPtr,Microsoft.TeamFoundation.Client.NotificationManager.GetNotificationParametersCallback,System.Object)">
            <summary>
            Queue a notification for delivery on the next timer event.
            </summary>
            <param name="notification">Notification</param>
            <param name="wParam">wParam</param>
            <param name="lParam">lParam</param>
            <param name="callback">Callback for updating parameters based on the target window.  This is useful for back compat.</param>
            <param name="userData">User data that will be passed back to the callback</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NotificationManager.BroadcastNotification(Microsoft.TeamFoundation.Client.Internal.Notification)">
            <summary>
            Queue a notification for immediate delivery.
            </summary>
            <param name="notification">Notification</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NotificationManager.BroadcastNotification(Microsoft.TeamFoundation.Client.Internal.Notification,System.Object)">
            <summary>
            Queue a notification for immediate delivery.
            </summary>
            <param name="notification">Notification</param>
            <param name="param1">Object to be hashed for wParam</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NotificationManager.BroadcastNotification(Microsoft.TeamFoundation.Client.Internal.Notification,System.Object,System.Object)">
            <summary>
            Queue a notification for immediate delivery.
            </summary>
            <param name="notification">Notification</param>
            <param name="param1">Object to be hashed for wParam</param>
            <param name="param2">Object to be hashed for lParam</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NotificationManager.BroadcastNotification(Microsoft.TeamFoundation.Client.Internal.Notification,System.Object,System.Object,Microsoft.TeamFoundation.Client.NotificationManager.GetNotificationParametersCallback,System.Object)">
            <summary>
            Queue a notification for immediate delivery.
            </summary>
            <param name="notification">Notification</param>
            <param name="param1">Object to be hashed for wParam</param>
            <param name="param2">Object to be hashed for lParam</param>
            <param name="callback">Callback for updating parameters based on the target window.  This is useful for back compat.</param>
            <param name="userData">User data that will be passed back to the callback</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NotificationManager.BroadcastNotification(Microsoft.TeamFoundation.Client.Internal.Notification,System.IntPtr,System.IntPtr)">
            <summary>
            Queue a notification for immediate delivery.
            </summary>
            <param name="notification">Notification</param>
            <param name="wParam">wParam</param>
            <param name="lParam">lParam</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NotificationManager.BroadcastNotification(Microsoft.TeamFoundation.Client.Internal.Notification,System.IntPtr,System.IntPtr,Microsoft.TeamFoundation.Client.NotificationManager.GetNotificationParametersCallback,System.Object)">
            <summary>
            Queue a notification for immediate delivery.
            </summary>
            <param name="notification">Notification</param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="callback">Callback for updating parameters based on the target window.  This is useful for back compat.</param>
            <param name="userData">User data that will be passed back to the callback</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NotificationManager.Suspend">
            <summary>
            Suspend delivering of the notifications. Each Suspend() call should be match by later Resume() call.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.NotificationManager.Resume">
            <summary>
            Resumes delivering of the notifications.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.NotificationManager.IsSuspended">
            <summary>
            True if notifications are not being delivered, but queued instead.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Office.OfficeInstall">
            <summary>
            This class allows clients to check if Office is installed and is the correct version without
            loading the Office Integration 'common' assembly (1.1 MB) into the VS address space.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Office.OfficeInstall.MinRequiredOfficeVersion">
            <summary>
            Minimum office version required to launch docs.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Office.OfficeInstall.CanCreateExcelReport(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection)">
            <summary>
            Checks the compatibility of the currently installed Excel version and Team Foundation Server
            Minimum required version is Excel 12 and Team Founadtion Server 2010
            </summary>     
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Office.OfficeInstall.IsExcelInstalled">
            <summary>
            Checks whether Excel 12 or above and the OI addin have been installed.
            </summary>
            <returns>true if Excel 12 or above and the OI addin have been installed, else false</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Office.OfficeInstall.IsProjectInstalled">
            <summary>
            Checks whether Project 12 or above and the OI addin have been installed.
            </summary>
            <returns>true if Project 12 or above and the OI addin have been installed, else false</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Office.OfficeInstall.IsOutlookInstalled">
            <summary>
            Checks whether Outlook 12 or above and the OI addin have been installed installed.
            </summary>
            <returns>true if Outlook 12 or above and the OI addin have been installed, else false</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Office.OfficeInstall.IsPowerPointInstalled">
            <summary>
            Checks whether PowerPoint 12 or above and the OI addin have been installed.
            </summary>
            <returns>true if PowerPoint 12 or above and the OI addin have been installed, else false</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Office.OfficeInstall.IsOfficeAppInstalled(System.String,System.String,System.String)">
            <summary>
            Helper method that checks whether given version of Office Application is installed
            using version specific progId of the office App.
            </summary>
            <param name="officeAppKeyPath">The root registry path to check for a given Office application current version.</param>
            <param name="applicationPrefix">The prefix to remove from the current version string to detect the target application version.</param>
            <param name="minRequiredVersion">The minimum version expected in the system.</param>
            <returns><c>true</c> if the minimum version (or higher) of the target Office application is installed;
            otherwise, <c>false</c>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Client.Office.OfficeInstall.CompareVersions(System.String,System.String)" -->
        <member name="M:Microsoft.TeamFoundation.Client.Office.OfficeInstall.IsOfficeIntegrationAddinInstalled(System.String)">
            <summary>
            Util Dev 14, we would always lay down the extensions while installing VS, hence checking if office was installed used to suffice.
            However, with Dev 15, we now have "Low impact install", using which users can pick and choose what to install.
            If the user chooses to install "Visual Studio Core Editor", then no addins would be installed.
            Hence, post Dev15, we need to check if the addin was installed as well, alongwith checking for office installation.
            This method checks the registry for appropriate path to verify if the addin is installed
            Sample key paths would be:
            Dev 14:
                HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DevDiv\tfs\Servicing\14.0\officeIntegration
                HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DevDiv\tfs\Servicing\14.0\storyBoarding
            Dev 15:
                HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DevDiv\tfs\Servicing\15.0\officeIntegration
                HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DevDiv\tfs\Servicing\15.0\storyBoarding
            </summary>
            <param name="productName">Name of the product, officeIntegration or storyboarding</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.FrameworkSettingsProvider.GetTeamProjectSettings(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogBulkData,System.Func{Microsoft.TeamFoundation.Framework.Client.CatalogNode,System.Boolean})">
            <summary>
            Get the TeamProjectSettings objects based on a criteria delegate. The criteria is
            then used to filter only the team projects we care about. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.FrameworkSettingsProvider.CreateTeamProjectSettings(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject)">
            <summary>
            Creates a TeamProjectSetttings object using the TeamProject catalog object.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.ITpcSettingsAdapter.GetSettings(System.Collections.Generic.IEnumerable{System.Uri},Microsoft.TeamFoundation.Client.ProjectSettings.ProjectCollectionSettings@,System.Collections.Generic.ICollection{Microsoft.TeamFoundation.Client.ProjectSettings.TeamProjectSettings}@)">
            <summary>
            Gets the Project Collection and Team Project settings for the specified
            project uris.
            </summary>
            <param name="projectUris">The Team Project Uris</param>
            <param name="projectCollectionSettings">The ProjectCollectionSettings object</param>
            <param name="teamProjectSettings">A collection of TeamProjectSettings objects</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.ITpcSettingsAdapter.GetTeamProjectSettings(System.String)">
            <summary>
            This method is responsible for getting the Team Project specfic
            settings using the Project Name.
            </summary>
            <param name="projectName"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.ITpcSettingsAdapter.GetTeamProjectSettings(System.Uri)">
            <summary>
            This method is responsible for getting the Team Project specific
            settings using the Project Uri.
            </summary>
            <param name="projectUri">The team project uri</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.ITpcSettingsAdapter.GetTeamProjectSettings(System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            This method is responsible for getting a collection of Team Project
            settings using the Team Project Uris.
            </summary>
            <param name="projectUris">The Team Project Uris</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.PreFrameworkSettingsProvider.GetProjectCollectionSettings">
            <summary>
            Constructs the ProjectCollectionSettings data object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.PreFrameworkSettingsProvider.GetServiceLocation(System.String,System.String)">
            <summary>
            Retrieves the Uri fromt he Registration Service for the tool id and service type provided.
            </summary>
            <param name="toolId"></param>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.PreFrameworkSettingsProvider.GetDatabaseFromRegistration(System.String)">
            <summary>
            Retrieves a Database object from IRegistration for the specified registration type.
            </summary>
            <param name="databaseType"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.PreFrameworkSettingsProvider.InternalGetTeamProjectSettings(System.Func{Microsoft.TeamFoundation.Server.ProjectInfo,System.Boolean})">
            <summary>
            Constructs the TeamProjectSettings data object for the criteria provided.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ProjectSettings.ProjectCollectionSettings">
            <summary>
            The class represents the settings specific for a Project Collection
            used by various client components.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.ProjectCollectionSettings.SiteCreationLocation">
            <summary>
            The default location for team project portals. 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.ProjectCollectionSettings.AdminUrlServiceLocation">
            <summary>
            The administration Uri for SharePoint.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.ProjectCollectionSettings.ReportFolder">
            <summary>
            The Reporting Service report folder full path.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.ProjectCollectionSettings.ReportServerServiceLocation">
            <summary>
             The Reporting Services Report Server service location.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.ProjectCollectionSettings.ReportsManagerServiceLocation">
            <summary>
            The Reporting Services Report Manger service location.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.ProjectCollectionSettings.CubeDatabaseName">
            <summary>
            The database name for the analysis cube.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.ProjectCollectionSettings.CubeServerName">
            <summary>
            The server name (includes instance if present) for the machine hosting the analysis cube.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.ProjectCollectionSettings.CubeConnectionString">
            <summary>
            The sql connection string for the analysis cube.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.ProjectCollectionSettings.ReportWarehouseDatabaseName">
            <summary>
            The database name for the reporting warehouse.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.ProjectCollectionSettings.ReportWarehoueServerName">
            <summary>
            The server name (includes instance if present) for the machine hosting the reporting warehouse.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.ProjectCollectionSettings.ReportWarehouseConnectionString">
            <summary>
            The sql connection string for the reporting warehouse.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ProjectSettings.ReportingSettings">
            <summary>
            Helper class to retrieve settings specific to reporting from the catalog.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.ReportingSettings.IsReportingConfigured(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection)">
            <summary>
            Returns 'true' if reporting is configured for the specified TPC, 'false' otherwise.
            </summary>
            <param name="tpc"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.ReportingSettings.IsReportingConfigured(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.Uri)">
            <summary>
            Returns 'true' if reporting is configured for the specified project, false otherwise
            </summary>
            <param name="tfs"></param>
            <param name="projectUri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.ReportingSettings.IsReportingCubeConfigured(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String@,System.String@,System.String@)">
            <summary>
            For Excel Reporting: Checks whether reporting Cube is configured with the given TFS server 
            Two cases which can affect reporting cube configuration
                1. A full server license but reporting cube not configured
                2. A TFSe server license where reporting cube is not available
            </summary>
            <returns>true if reporting cube is configured</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Client.ProjectSettings.ReportingSettings.GetReportServiceUri(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection)" -->
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.ReportingSettings.GetBaseProjectCollectionPath(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection)">
            <summary>
            Returns the item path for the project collection, such as 'tfsreports/collection0'.
            </summary>
            <param name="tfs"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.ReportingSettings.GetBaseProjectPath(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String)">
            <summary>
            Returns the item path for the project, such as 'tfsreports/collection0/project1'.
            </summary>
            <param name="tpc"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.ReportingSettings.GetReportSiteUri(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String)">
            <summary>
            Retrieves the base report manager site url for the specified project.
            </summary>
            <param name="tfs"></param>
            <param name="projectUri"></param>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.ReportingSettings.GetReportManagerUri(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection)">
            <summary>
            Retrieves the Report manager uri.
            </summary>
            <param name="tfs"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ProjectSettings.TeamProjectSettings">
            <summary>
            The class represents the settings specific for a TeamProject
            used by various client components.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.TeamProjectSettings.Id">
            <summary>
            The Team Project instance id.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.TeamProjectSettings.Name">
            <summary>
            The Team Project Name.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.TeamProjectSettings.ProjectUri">
            <summary>
            The Team Project Uri.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.TeamProjectSettings.State">
            <summary>
            The Team Project State.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.TeamProjectSettings.Portal">
            <summary>
            The fully qualified Uri for the Portal.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.TeamProjectSettings.PortalIsSharePoint">
            <summary>
            This indicates if the portal is pointing to a SharePoint site.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.TeamProjectSettings.IsOwnerOfSharePointPortal">
            <summary>
            This indicates if the team project is the owner of the SharePoint portal.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.TeamProjectSettings.Guidance">
            <summary>
            The fully qualified Uri for the Process Guidance.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.TeamProjectSettings.GuidanceFileName">
            <summary>
            The name of the process guidance file (null for default file 'processguidance.html').
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.TeamProjectSettings.GuidanceResourceType">
            <summary>
            The Process Guidance type.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.TeamProjectSettings.ReportFolder">
            <summary>
            The full path for the Report Folder for the Team Project from the root.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.TeamProjectSettings.CatalogNodeFullPath">
            <summary>
            To be used Internal only, used to quickly refresh team project
            settings from the catalog in one round trip.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.TeamProjectSettings.WellKnownGuidancePageUrl">
            <summary>
            Gets the well known guidance page URL, based on the guidance site type.
            </summary>
            <remarks>
            See <c>SharePointUtilities.GetWellKnownProcessGuidancePageUrl</c> for more info.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.TpcSettingsStore.#ctor">
            <summary>
            Constructs an empty <code>TpcSettingsStore</code> object. This is used by TeamFoundationServer.GetService.  
            ITeamFoundationObject.Initialize will be called with the server passed in.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.TpcSettingsStore.InitializeInternal">
            <summary>
            Initialization code that will create the appropriate metadata provider based on server capabilities.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.TpcSettingsStore.SupportsFramework">
            <summary>
            Property used to determine if the Server we are talking to supports the required services.
            This allows us to know if we are talking to a 2005, 2008, or 2010+ server.
            </summary>
            <returns>true if the server is  2010 or later, false otherwise</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.TpcSettingsStore.ProjectCollectionSettings">
            <summary>
            Gets the Project Collection settings.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.TpcSettingsStore.GetTeamProjectSettings(System.Uri)">
            <summary>
            Gets the Team Project settings for the Team Project Uri.
            First we look in the cache and if not found then ask the adapter to go get it and
            add it to the cache.
            </summary>
            <param name="projectUri">The Team Project Uri</param>
            <returns><code>TeamProjectInfo</code> object containing settings about the Project.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.TpcSettingsStore.GetTeamProjectSettings(System.Uri,System.Boolean)">
            <summary>
            Gets the Team Project settings for the Team Project Uri.
            First we look in the cache and if not found then ask the adapter to go get it and
            add it to the cache.
            Ability to force the refresh if TeamProjectSettings we marked as stale.
            </summary>
            <param name="projectUri">The Team Project Uri</param>
            <param name="forceRefresh">force a refresh</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.TpcSettingsStore.GetTeamProjectSettings(System.String)">
            <summary>
            Gets the Team Project settings for the Project Name.
            First we look in the cache and if not found, ask the adapter to go get it and
            add it to the cache.
            </summary>
            <param name="projectName">The Team Project Name</param>
            <returns><code>TeamProjectInfo</code> object containing settings about the Project.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.TpcSettingsStore.GetTeamProjectSettings(System.Collections.Generic.ICollection{System.Uri})">
            <summary>
            Gets Team Project settings for the Project Uris.
            If the settings are already cached then the cached values are returned, and only
            unknown projects will be queried from the server in a single round-trip.
            </summary>
            <param name="projectUris">The list of Project Uris</param>
            <returns>Collection of <code>TeamProjectInfo</code> objects containing settings about the projects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.TpcSettingsStore.GetTeamProjectSettings(System.Collections.Generic.ICollection{System.Uri},System.Boolean)">
            <summary>
            Gets Team Project settings for the Project Uris.
            If the settings are already cached then the cached values are returned, and only
            unknown projects will be queried from the server in a single round-trip.
            If refresh is ture, then all settings will be queried from the server.
            </summary>
            <param name="projectUris">The list of Project Uris</param>
            <param name="refresh">bool to inidicate if a refresh should be forced when getting the project settings</param>
            <returns>Collection of <code>TeamProjectInfo</code> objects containing settings about the projects</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ProjectSettings.TpcSettingsStore.TeamProjectsInCache">
            <summary>
            Returns the set of team project Uri's that are currently contained in the cache and we have data for.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.TpcSettingsStore.RemoveTeamProjectSettings(System.String)">
            <summary>
            Removes the cached settings for the specified team project, if it exists.
            </summary>
            <param name="projectName"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.TpcSettingsStore.InitializeSettingsCache(System.Collections.Generic.ICollection{System.Uri})">
            <summary>
            Initializes the settings store cache, making a round-trip to the server
            to get the nessceary information for the Collection and Team Projects.
            </summary>
            <param name="projectUris">Collection of Team Project uris to initialize the cache with.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ProjectSettings.TpcSettingsStore.AddMissingUrisToCache(System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            Ensures that all of the specified uri's exist in the m_projectSettingsCacheByUri collection.
            If they do not exist, they are added with a 'null' TeamProjectSettings reference.  This
            ensures that we do not continuously query for non-existent team projects.
            </summary>
            <param name="projectUris"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2" -->
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Create a read-only dictionary.
            </summary>
            <param name="dictionary">The IDictionary&gt;TKey, TValue&lt; that you want to make read-only.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Returns true if the dictionary contains the key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.Keys">
            <summary>
            Returns the collection of keys in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Returns true if value was able to set based on the key being in the dictionary.
            </summary>
            <param name="key"></param>
            <param name="value">Is set to key's value in the dictionary if the key is in the dictionary.</param>
            <returns>Returns false if key is not in the dictionary, true otherwise.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.Values">
            <summary>
            Returns the collection of values in the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            returns the value related to the passed in key.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.Count">
            <summary>
            Returns the number of items in the dictionary.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.GetEnumerator" -->
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)">
            <summary>
            Throws NotImpementedException.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)">
            <summary>
            Throws NotImplementedException.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Item(`0)">
            <summary>
            Returns the value related to the key in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Throws NotImplementedException.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Clear">
            <summary>
            Throws NotImplementedException.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Returns true if the KeyValuePair is in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the KeyValuePairs of the dictionary into an array.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Count">
            <summary>
            Returns the number of items in the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly">
            <summary>
            Returns true;
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Throws NotImplementedException.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Throws NotImplementedException.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#IDictionary#Clear">
            <summary>
            Throws NotImplementedException.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Returns true if the dictionary contains the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns the IDictionaryEnumerator.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            Returns true that the size of the dictionary will not change.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#IDictionary#IsReadOnly">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Returns the collection of keys.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Throws NotImplementedException.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Returns the collection of values.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Returns the value associated with the key in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the dictionary into an array.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#ICollection#Count">
            <summary>
            Return the number of items in the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Returns true if the dictionary is syncronized.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ReadOnlyDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Returns the root syncronization object for the dictionary if there is one.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.RegisteredConfigurationServer.Name">
            <summary>
            Friendly name for the configuration server
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.RegisteredConfigurationServer.Uri">
            <summary>
            Fully qualified uri
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.RegisteredConfigurationServer.InstanceId">
            <summary>
            Instance Id of the server
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.RegisteredConfigurationServer.IsHosted">
            <summary>
            Indicate whether this server is hosted.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.RegisteredProjectCollection.Name">
            <summary>
            Name of the collection
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.RegisteredProjectCollection.DisplayName">
            <summary>
            Friendly name of the collection
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.RegisteredProjectCollection.Uri">
            <summary>
            Fully Qualified Uri
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.RegisteredProjectCollection.InstanceId">
            <summary>
            Instance Id of the collection
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.RegisteredProjectCollection.Offline">
            <summary>
            When Offline a Version Control bound project will not go online and load the TF server automatically.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.RegisteredProjectCollection.AutoReconnect">
            <summary>
            flag to determine if Team Explorer will auto reconnect to this collection upon start up if it is the most recently connected to collection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.RegisteredTfsConnections.RegisterConfigurationServer(Microsoft.TeamFoundation.Client.TfsConfigurationServer)">
            <summary>
            Registers a TfsConfigurationServer. The configuration server instance should already be connected.
            </summary>
            <param name="configurationServer">the configuration server to register</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.RegisteredTfsConnections.RegisterConfigurationServer(System.Uri,System.Guid,System.Nullable{System.Boolean})">
            <summary>
            Registers a TfsConfigurationServer with its specified Uri and instance Id.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.RegisteredTfsConnections.UnregisterConfigurationServer(System.String)">
            <summary>
            Removes a ConfigurationServer from the list of registerd servers, Does nothing if the name is not registered
            </summary>
            <param name="name">the name of the registered server (usually the host name of the app tier.)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.RegisteredTfsConnections.GetConfigurationServers">
            <summary>
            Get all registered configuration servers (does not include legacy collection)
            </summary>
            <returns>array of registered servers</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.RegisteredTfsConnections.GetConfigurationServer(System.String)">
            <summary>
            Gets a registered configuration server by name
            </summary>
            <param name="name">name of the server</param>
            <returns>the registered configuration server, null if no server is found with the specified name</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.RegisteredTfsConnections.GetConfigurationServer(System.Uri)">
            <summary>
            Gets a registered configuration server by Uri
            </summary>
            <param name="uri">uri of the server</param>
            <returns>the registered configuration server, null if no server is found with the specified uri</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.RegisteredTfsConnections.UpdateConfigurationServers(System.Collections.Generic.List{System.Tuple{System.Uri,System.Guid}})">
            <summary>
            Merge the registered configuration servers with the given list of hosted accounts.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.RegisteredTfsConnections.RegisterProjectCollection(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection)">
            <summary>
            Registers a project collection, if the project collection is part of a configuration server, the server will be registered too.
            The project collection and configuration server instances should already be connected.
            </summary>
            <param name="projectCollection">the project collection</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.RegisteredTfsConnections.UnregisterProjectCollection(System.String)">
            <summary>
            Unregisters the project collection (does not unregister the server even if this is the only registed collection for that configuration server)
            Does nothing if no collection is registered with the specified name
            </summary>
            <param name="name">name of the project collection</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.RegisteredTfsConnections.GetProjectCollections">
            <summary>
            gets all registered project collections (including legacy project collection)
            </summary>
            <returns>an array of registered project collection</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.RegisteredTfsConnections.GetLegacyProjectCollections">
            <summary>
            get all registered legacy project collection (Team Foundation Server 2008 or earlier)
            </summary>
            <returns>array of registered legacy collection </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.RegisteredTfsConnections.GetProjectCollection(System.String)">
            <summary>
            retirves a project collection by name
            </summary>
            <param name="name">the name of the project collection (usually in the form of "ServerHostName\CollectionName" 
            or just "ServerHostName" for legacy collections</param>
            <returns>the registered project collection with the specified name, null if no match is found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.RegisteredTfsConnections.GetProjectCollection(System.Uri)">
            <summary>
            retirves a project collection by Uri
            </summary>
            <param name="uri">the Uri of the project collection</param>
            <returns>the registered project collection with the specified Uri, null if no match is found.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ResultCollection`2">
            <summary>
            A result set that consists of a collection of items
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ResultCollection`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ResultCollection`2.#ctor(Microsoft.TeamFoundation.Client.TfsRequestContext)">
            <summary>
            Construct with the request context
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ResultCollection`2.#ctor(Microsoft.TeamFoundation.Client.TfsRequestContext,System.String)">
            <summary>
            Construct with the request context and the name of
            the XML element for the result set in the stream.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ResultCollection`2.#ctor(Microsoft.TeamFoundation.Client.TfsRequestContext,System.String,Microsoft.TeamFoundation.Client.ITfsResult)">
            <summary>
            Construct with the request context, the name of the XML element 
            for the result set in the stream, and the previous result set.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ResultCollection`2.GetEnumerator">
            <summary>
            This collection allows access to the objects through both a generic
            and non-generic enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ResultCollection`2.MoveNext">
            <summary>
            MoveNext is used to move the current object reference to the next 
            object in the collection. This is the standard method implemented for
            IEnumerator.
            </summary>
            <returns>True is returned if the enumerator was moved.
                     False is returned if the enumerator is at the end.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ResultCollection`2.Reset">
            <summary>
            Reset is not allowed on these collections. This collection may only be
            accessed through a single Enumerator and it can not be Reset, it is
            forward only. This is a requirement given we are streaming data and can
            not cache the entire result.
            
            If this is called a InvalidOperationException exception will be thrown.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.TeamFoundation.Client.ResultCollection`2.Current" -->
        <member name="M:Microsoft.TeamFoundation.Client.ResultCollection`2.ReadAll">
            <summary>
            Implement ITfsResult.ReadAll().  This method ensures that the Previous
            result set has been completely read so that the stream is at the correct
            location before attempting to read its own data.  It then reads in all of
            the items for this result set.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ResultCollection`2.Previous">
            <summary>
            Implement ITfsResult.Previous and add set accessor.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ResultCollection`2.IsComplete">
            <summary>
            Implement ITfsResult.IsComplete and add set accessor.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ResultCollection`2.Context">
            <summary>
            The request context in which this result set occurs.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ResultCollection`2.XmlElement">
            <summary>
            The XML element name for the result set in the stream.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ResultCollection`2.Microsoft#TeamFoundation#Client#ITfsXmlSerializable#WriteXml(System.Xml.XmlWriter,System.String)">
            <summary>
            NOOP implementation of ITfsXmlSerializable.WriteXml. ResultSetCollections 
            derive from ITfsXmlSerializable only so that a ResultSetCollection can
            contain another ResultSetCollection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ResultCollection`2.Microsoft#TeamFoundation#Client#ITfsXmlSerializable#ReadXml(System.Xml.XmlReader,System.String)">
            <summary>
            NOOP implementation of ITfsXmlSerializable.ReadXml. ResultSetCollections
            derive from ITfsXmlSerializable only so that a ResultSetCollection can
            contain another ResultSetCollection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ResultCollection`2.MoveToNextXmlElement">
            <summary>
            Attempts to move to the next XML element in 
            the stream that is part of this result set.
            </summary>
            <returns>True is returned if the move was successful and there 
                         is another element to be read.
                     False if there are no more elements in this result set.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ResultCollection`2.CreateNext">
            <summary>
            Instantiate the next item in the collection and deserialize it.
            </summary>
            <returns>The next result in the result set</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ResultCollection`2.Queue">
            <summary>
            Lazily initializes the queue
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ResultCollection`2.HasQueuedItems">
            <summary>
            True if there are items in the queue
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.TeamFoundation.Client.ResultCollection`2.ResultSetEnumerator.System#Collections#IEnumerator#Current" -->
        <member name="T:Microsoft.TeamFoundation.Client.SelectToolStripLabel">
            <summary>
            This class exists merely as a means for us to get input focus properly set to a 
            toolstrip.  There is no particularly good use for it otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.SelectToolStripLabel.DefaultSize">
            <summary>
            We aren't meant to be seen.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.SelectToolStripLabel.DefaultMargin">
            <summary>
            We aren't meant to be seen.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.SelectToolStripLabel.DefaultPadding">
            <summary>
            We aren't meant to be seen.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SelectToolStripLabel.GetPreferredSize(System.Drawing.Size)">
            <summary>
            We aren't meant to be seen.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SelectToolStripLabel.SelectToolStrip">
            <summary>
            This actually gets the keyboard input routed correctly for us.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ServiceProviderAggregator.#ctor(System.Object[])">
             <summary>
             Instantiate a new IServiceProvider aggregator.  The constructor takes a variable number
             of service providers and will call them in the order they are passed in.  It is safe to 
             pass a null value.
            
             Example:
            
                 ServiceProviderAggregator spa = 
                         new ServiceProviderAggregator(TeamFoundationServer, UIHost.Instance);
            
             </summary>
             <param name="list">variable number of service providers</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ServiceProviderAggregator.GetService(System.Type)">
            <summary>
            Get a service from the list of provided interfaces.
            of service providers and will call them in the order they are passed in.  It is safe to 
            pass a null value.
            </summary>
            <param name="list">variable number of service providers</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ProxyStatisticsInfo">
            <summary>
            Statistics Information
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.SuggestedValueCacheService">
            <summary>
            base class for a service to retrive suggested values from rest API and cache.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.SuggestedValueCacheService.ScopeSuggestedValue.Values">
            <summary>
            List of retrived values, can be null
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.SuggestedValueCacheService.ScopeSuggestedValue.TimeStamp">
            <summary>
            Timestamp of last values retrival
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.SuggestedValueCacheService.ScopeSuggestedValue.Task">
            <summary>
            Task responsible for retriveing the values
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SuggestedValueCacheService.GetCachedValues(System.Guid)">
            <summary>
            Returns a the list of suggested values for a given scope.
            </summary>
            <param name="scope">Scope Id (usually team project guid)</param>
            <returns>list of the cached suggested values, Can be empty if not previously retrieved successfully</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SuggestedValueCacheService.IsPopulated(System.Guid)">
            <summary>
            Checks if suggested values list for a given scope has be retrieved.
            </summary>
            <param name="scope">Scope Id (usually team project guid)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SuggestedValueCacheService.IsExpired(System.Guid)">
            <summary>
            Checks if suggested values list for a given scope is expired or not populated.
            </summary>
            <param name="scope">Scope Id (usually team project guid)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SuggestedValueCacheService.RefreshAsync(System.Guid)">
            <summary>
            Refreshes the cache of the scope
            </summary>
            <param name="scope">Scope Id (usually team project guid)</param>
            <returns>A Refresh task</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SuggestedValueCacheService.SetExpirationInternal(System.Int32)">
            <summary>
            For testing only
            </summary>        
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SuggestedValueCacheService.SetProxyInternal(Microsoft.VisualStudio.Services.WebApi.VssHttpClientBase)">
            <summary>
            For testing only
            </summary>
            <param name="proxy"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TagsCacheService">
            <summary>
            Service to retrive and cache TagDefinitions.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TagsCacheService.GetCachedTags(System.Guid)">
            <summary>
            Returns a the list of tag names for a given scope.
            </summary>
            <param name="scope">Scope Id (usually team project guid)</param>
            <returns>list of the cached tags, Can be empty if not previously retrieved successfully</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TagsCacheService.GetValueAsync(System.Guid,Microsoft.TeamFoundation.Client.SuggestedValueCacheService.ScopeSuggestedValue)">
            <summary>
            Refreshes the cache of the scope
            </summary>
            <param name="scope">Scope Id (usually team project guid)</param>
            <returns>A Refresh task</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TeamExplorerProjects">
            <summary>
            Manages information about projects and repos currently known to Team Explorer.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.#ctor">
            <summary>
            Default constructor for TeamExplorerProjects and derivations instances.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.#ctor(System.String)">
            <summary>
            Initialize this class by storing off the filename of the configuration file.  
            </summary>
            <param name="fileName">The filename of the configuration file to use.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamExplorerProjects.Instance">
            <summary>
            Single instance available in production.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.GetDefaultSelectionProvider(Microsoft.TeamFoundation.Client.TeamProjectPickerMode)">
            <summary>
            Gets the default selection provider.
            </summary>
            <param name="mode">The mode.</param>
            <returns>The instance of the selection provider to use.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamExplorerProjects.DefaultCollectionUrl">
            <summary>
            Gets the Url for the default collection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamExplorerProjects.DefaultCollectionId">
            <summary>
            Gets the Id for default collection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamExplorerProjects.AutoLoad">
            <summary>
            Gets or sets a boolean that determines whether or not the DefaultServer is automatically loaded
            into Team Explorer when it is shown.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.Save">
            <summary>
            Save the team explorer settings back into the config file.This throws exceptions
            if there is an error saving the config info.        
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.TryGetCollectionId(System.String,System.Guid@)">
            <summary>
            Tries the get the collection identifier based on a Url.
            </summary>
            <param name="collectionUrl">The collection URL.</param>
            <param name="collectionId">The corresponding collection identifier.</param>
            <returns>True if the collection Id for the Url was found. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.GetCollectionIds">
            <summary>
            Get the list of cached collection IDs.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.GetCollectionProperties(System.Guid)">
            <summary>
            Get the collection's cached properties.
            </summary>
            <param name="collectionId">The collection identifier.</param>
            <returns>The properties available for the collection.</returns>
            <remarks>This may be empty if the collection hasn't been cached.</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.GetProjectsForCollection(System.Guid)">
            <summary>
            Get the list of persisted project Uris associated with the specified collection.
            </summary>
            <param name="collectionId">The collection identifier.</param>
            <returns>The projects associated with the collection.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.SetProjectsForCollection(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            Update the list of persisted project Uris associated with the specified server. 
            </summary>
            <param name="tpc">The TeamProjectCollection for which to set the projects.</param>
            <param name="projectUris">The project Uris to associate with the collection.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.SetProjectsForCollection(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Update the list of persisted project Uris associated with the specified server. 
            </summary>
            <param name="tpc">The TeamProjectCollection for which to set the projects.</param>
            <param name="projectUris">The project Uris to associate with the collection.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.AddProjectForCollection(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String)">
            <summary>
            Add a project to the list of projects for the specified server.  If the project is
            already in the list, it will not be added again.
            </summary>
            <param name="tpc">The TeamProjectCollection for which to set the projects.</param>
            <param name="projectUris">The project Uri to associate with the collection.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.RemoveProjectForCollection(System.Guid,System.String)">
            <summary>
            Remove the specified project from the associated servers' saved list.  If either the
            server or project aren't found in the list, we just do nothing and return.
            </summary>
            <param name="collectionId">The collection identifier.</param>
            <param name="projectUri">The project Uri to remove.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.SetProjectProperties(System.Guid,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Update a project's cached info.  Since projects have historically been cached with
            varying levels of info, this provides an opportunity to set any values that are missing
            from the cache.
            </summary>
            <param name="collectionId">The collection identifier.</param>
            <param name="projectUri">The project Uri.</param>
            <param name="properties">The properties to add for the project.</param>
            <returns>True if the collection and project was found and the properties set. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.GetProjectProperties(System.Guid,System.String)">
            <summary>
            Get the project's cached properties.  This may be empty if the project hasn't been cached.
            </summary>
            <param name="collectionId">The collection identifier.</param>
            <param name="projectUri">The project URI.</param>
            <returns>The project properties. Empty if project or collection are not found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.GetDefaultQueryGuid(System.Guid,System.String)">
            <summary>
            Returns the active query for a server project. This query is automatically selected when
            Excel/Project is loaded.
            </summary>
            <param name="collectionId">The Instance Id of the team project collection.</param>
            <param name="projectUri">The project URI of the query.</param>
            <returns>Returns query GUID if available, otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.SetDefaultQueryGuid(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String,System.Guid)">
            <summary>
            Sets the active query for a server project. This query will be automatically selected when
            Excel/Project is loaded
            </summary>
            <param name="tpc">The team foundation server instance.</param>
            <param name="projectUri">The project URI of the query.</param>
            <param name="queryGuid">The GUID of the query.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.GetActiveProjectForCollection(System.Guid)">
            <summary>
            Gets the active project for a server. This project is automatically selected when TeamExplorer is loaded.
            </summary>
            <param name="collectionId">The collection identifier.</param>
            <returns>The project Uri if available, null otherwise.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.GetActiveProjectForCollection(System.String)">
            <summary>
            Gets the active project for a server. This project is automatically selected when TeamExplorer is loaded.
            </summary>
            <param name="collectionId">The collection identifier.</param>
            <returns>The project Uri if available, null otherwise.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.GetActiveTeamForCollection(System.Guid)">
            <summary>
            Gets the active team Id for a collection.
            </summary>
            <param name="collectionId">The collection identifier.</param>
            <returns>The team Id if the collection is found, Guid.Empty otherwise.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.GetActiveTeamForCollection(System.String)">
            <summary>
            Gets the active team Id for a collection.
            </summary>
            <param name="collectionUrl">The collection Url.</param>
            <returns>The team Id if the collection is found, Guid.Empty otherwise.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.SetActiveProjectForCollection(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String)">
            <summary>
            Sets the active project for a collection.
            </summary>
            <param name="tpc">The collection data instance.</param>
            <param name="projectUri">The project Uri.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.SetActiveProjectForCollection(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String,System.Guid)">
            <summary>
            Sets the active project for a collection.
            </summary>
            <param name="tpc">The collection data instance.</param>
            <param name="projectUri">The project Uri.</param>
            <param name="teamId">The team Id.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.SetDefaultCollection(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection)">
            <summary>
            Sets the default collection.
            </summary>
            <param name="tpc">The collection.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.GetRepositoriesForProject(System.Guid,System.String,System.String)">
            <summary>
            Get the list of repositories of a given type for the project.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.GetRepositoriesForProject(System.Guid,System.String)">
            <summary>
            Get the list of repositories for the project.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.GetActiveRepositoriesForProject(System.Guid,System.String)">
            <summary>
            Get the list of active repositories for the project.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.GetActiveRepositoriesForProject(System.String,System.String)">
            <summary>
            Get the list of active repositories for the project.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.SetRepositoriesForProject(System.Guid,System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Client.TeamExplorerProjects.RepositorySettings})">
            <summary>
            Update the list of persisted repositories associated with the specified project.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.RemoveRepositoriesForProjectByType(System.Guid,System.String,System.String)">
            <summary>
            Removes repositories from a project based on the repository type
            </summary>
            <param name="collectionId">The collection identifier.</param>
            <param name="projectUri">The project URI.</param>
            <param name="repositoryType">Type of the repository to remove.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.AddRepositoryForProject(System.Guid,System.String,System.Guid,System.String,System.String)">
            <summary>
            Add a repository to the project.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.RemoveRepositoryForProject(System.Guid,System.String,System.Guid)">
            <summary>
            Remove a repository from the project.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.SetActiveRepositoriesForProject(System.Guid,System.String,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Update the list of active repositories associated with the specified project.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.GetRepositoryProperties(System.Guid,System.String,System.Guid)">
            <summary>
            Get the repository's cached properties.  This may be empty if the repository hasn't
            been cached.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.SetRepositoryProperties(System.Guid,System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Update a repository's cached properties.
            </summary>
            <returns>True if the repository's properties were set, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.FindProject(Microsoft.TeamFoundation.Client.TeamExplorerProjects.CollectionSettings,System.String)">
            <summary>
            Find a project.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.FindProjectIndex(Microsoft.TeamFoundation.Client.TeamExplorerProjects.CollectionSettings,System.String)">
            <summary>
            Find a project's index.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.FindRepository(Microsoft.TeamFoundation.Client.TeamExplorerProjects.ProjectSettings,System.Guid)">
            <summary>
            Find a repository.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.FindRepositoryIndex(Microsoft.TeamFoundation.Client.TeamExplorerProjects.ProjectSettings,System.Guid)">
            <summary>
            Find a repository's index.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamExplorerProjects.ReadConfig(System.Xml.XmlReader)">
            <summary>
            Read the XML config from the reader provided and into the internal data structures.
            </summary>
            <param name="reader">XML Reader with contents of configuration.</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TeamExplorerProjectsConstants">
            <summary>
            Constants used with TeamExplorerProjects.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamFoundationDateTimePicker.UseAlternateBackgroundColor">
            <summary>
            This property controls whether or the control will have the background painted with a 
            custom color.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamFoundationDateTimePicker.AlternateBackgroundColor">
            <summary>
            This property determines the custom background color for the control.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.DragDrop.DropSourceFormatPropertyKey">
            <summary>
            *Readonly* attached dependency property that tells the drop target what format is being dragged over it
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.DragDrop.DropTargetTemplateProperty">
            <summary>
            Allows the drop target to specify a template (whereas DragDropTemplate is specified by the drag source)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.DragDrop.ContinueDragEventHandlingProperty">
            <summary>
            Allows processing of external drag event handlers after the Preview events.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.IProjectCreation">
            <summary>
            IProjectCreation interface provides the methods that
            allow for creating team projects from a batch project creation
            specification file, rather than from the PCW
            
            ELead client provides a service which will provide an
            instance of this interface for use by the client.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IProjectCreation.BatchCreateTeamProject(System.String,System.String@)">
            <summary>
            Create team project based on the specification file rather than through the PCW
            </summary>
            <param name="teamProjectCreationSettingFile">team project creation specification file name</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IProjectCreationWizardLauncher.LaunchProjectCreationWizard(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String@,System.Uri@,System.String@)">
            <summary>
            Use this method to launch PCW
            </summary>
            <param name="tpc">Team Project Collection to create the project on</param>
            <param name="teamProjectName">the name of the newly created project</param>
            <param name="teamProjectUri">the uri of the newly created project</param>
            <param name="errorMessage">null if no errors were found, otherwise it is the errorMessage that you should show the user</param>
            <returns>True if a new project was created, false if the user canceled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ISourceControlSettingsLauncher.LaunchSourceControlSettings">
            <summary>
            Use this to launch the Source Control Settings dialog for the active Team Project.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ISourceControlSettingsLauncher.LaunchSourceControlCollectionSettings">
            <summary>
            Use this to launch the Source Control Settings dialog for the Team Project Collection.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ITeamFoundationContext">
            <summary>
            This interface holds information about the context of the Team Explorer
            window.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITeamFoundationContext.TeamProjectCollection">
            <summary>
            The TFS collection object
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITeamFoundationContext.HasCollection">
            <summary>
            True if the TFS collection is set
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITeamFoundationContext.TeamProjectName">
            <summary>
            The Team Project Name 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITeamFoundationContext.TeamProjectUri">
            <summary>
            The Team Project Uri
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITeamFoundationContext.HasTeamProject">
            <summary>
            True if the Team Project Name is set
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITeamFoundationContext.TeamName">
            <summary>
            The Team Project Name 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITeamFoundationContext.TeamId">
            <summary>
            The Team context
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITeamFoundationContext.HasTeam">
            <summary>
            True if there is a Team context set
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamFoundationContext.SourceControlType">
            <summary>
            Get the source control type.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamFoundationContext.RepositoryIds">
            <summary>
            Get the source control repository IDs.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamFoundationContext.HasRepositoryIds">
            <summary>
            Returns true if there are repository IDs.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TeamFoundationContextExtensions">
            <summary>
            Helper extensions for <code>ITeamFoundationContext</code> objects.
            Provides methods for getting strings in regards to the Domain and project Uri.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager5">
            <summary>
            Get this service to monitor changes to the current context associated with the 
            Team Explorer window. This implementation also allows full Setting of the context with all parameters.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager5.SetContext(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String,System.Guid,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,Microsoft.TeamFoundation.Client.ActiveContextChangeReason,System.Boolean)">
            <summary>
            Creates and sets the new ITeamFoundationContext for the Team Explorer window.
            </summary>
            <param name="teamProjectCollection">Team project collection object</param>
            <param name="project">The team project name or fully qualified Uri, can be null.</param>
            <param name="teamId">The id of the TeamFoundationTeam object to set as the current team, can be Guid.Empty.</param>
            <param name="repositoryIds">The id of the repository, can be null.</param>
            <param name="connectAsynchronously">set to false if you want to wait for the connection to finish</param>
            <param name="reason">specify the reason for the context change</param>
            <param name="promptOnError">set to false to avoid prompting the user about an error</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager5.SetContextAsync(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String,System.Guid,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,Microsoft.TeamFoundation.Client.ActiveContextChangeReason,System.Boolean)">
            <summary>
            Awaitable task which creates and sets the new ITeamFoundationContext for the Team Explorer window.
            </summary>
            <param name="teamProjectCollection">Team project collection object</param>
            <param name="project">The team project name or fully qualified Uri, can be null.</param>
            <param name="teamId">The id of the TeamFoundationTeam object to set as the current team, can be Guid.Empty.</param>
            <param name="repositoryIds">The id of the repository, can be null.</param>
            <param name="connectAsynchronously">set to false if you want to wait for the connection to finish</param>
            <param name="reason">specify the reason for the context change</param>
            <param name="promptOnError">set to false to avoid prompting the user about an error</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager4">
            <summary>
            Get this service to monitor changes to the current context associated with the 
            Team Explorer window. This implementation also allows full Setting of the context with all parameters.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager4.SetContext(System.String,System.String,System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Creates and sets the new ITeamFoundationContext for the Team Explorer window.
            </summary>
            <param name="teamProjectCollectionUri"></param>
            <param name="project">The team project name or fully qualified Uri, can be null.</param>
            <param name="teamId">The id of the TeamFoundationTeam object to set as the current team, can be Guid.Empty.</param>
            <param name="repositoryIds">The id of the repository, can be null.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager4.SetContext(System.String,System.String,System.Guid,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,Microsoft.TeamFoundation.Client.ActiveContextChangeReason,System.Boolean)">
            <summary>
            Creates and sets the new ITeamFoundationContext for the Team Explorer window.
            </summary>
            <param name="teamProjectCollectionUri"></param>
            <param name="project">The team project name or fully qualified Uri, can be null.</param>
            <param name="teamId">The id of the TeamFoundationTeam object to set as the current team, can be Guid.Empty.</param>
            <param name="repositoryIds">The id of the repository, can be null.</param>
            <param name="connectAsynchronously">set to false if you want to wait for the connection to finish</param>
            <param name="reason">specify the reason for the context change</param>
            <param name="promptOnError">set to false to avoid prompting the user about an error</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager3">
            <summary>
            Get this service to monitor changes to the current context associated with the 
            Team Explorer window. This implementation also allows full Setting of the context with all parameters.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager3.SetContext(System.String,System.String,System.String,System.Boolean,Microsoft.TeamFoundation.Client.ActiveContextChangeReason,System.Boolean)">
            <summary>
            Creates and sets the new ITeamFoundationContext for the Team Explorer window.
            </summary>
            <param name="teamProjectCollectionUri"></param>
            <param name="projectUri">The team project name or fully qualified Uri, can be null.</param>
            <param name="teamName">The name of the TeamFoundationTeam object to set as the current team, can be string.Empty.</param>
            <param name="connectAsynchronously">set to false if you want to wait for the connection to finish</param>
            <param name="reason">specify the reason for the context change</param>
            <param name="promptOnError">set to false to avoid prompting the user about an error</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager2">
            <summary>
            Get this service to monitor changes to the current context associated with the 
            Team Explorer window. This implementation also allows full Setting of the context with all parameters.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager2.SetContext(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String,System.Guid,System.Boolean,Microsoft.TeamFoundation.Client.ActiveContextChangeReason,System.Boolean)">
            <summary>
            Creates and sets the new ITeamFoundationContext for the Team Explorer window.
            </summary>
            <param name="teamProjectCollection">The team project collection, can be null.</param>
            <param name="project">The team project name or fully qualified Uri, can be null.</param>
            <param name="teamId">The id of the TeamFoundationTeam object to set as the current team, can be Guid.Empty.</param>
            <param name="connectAsynchronously">set to false if you want to wait for the connection to finish</param>
            <param name="reason">specify the reason for the context change</param>
            <param name="promptOnError">set to false to avoid prompting the user about an error</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager2.SetContext(System.String,System.String,System.Guid,System.Boolean,Microsoft.TeamFoundation.Client.ActiveContextChangeReason,System.Boolean)">
            <summary>
            Creates and sets the new ITeamFoundationContext for the Team Explorer window.
            </summary>
            <param name="teamProjectCollectionUri"></param>
            <param name="projectUri">The team project name or fully qualified Uri, can be null.</param>
            <param name="teamId">The id of the TeamFoundationTeam object to set as the current team, can be Guid.Empty.</param>
            <param name="connectAsynchronously">set to false if you want to wait for the connection to finish</param>
            <param name="reason">specify the reason for the context change</param>
            <param name="promptOnError">set to false to avoid prompting the user about an error</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager">
            <summary>
            Get this service to monitor changes to the current context associated with the 
            Team Explorer window.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager.CurrentContext">
            <summary>
            The current context for the Team Explorer window.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager.SetContext(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String)">
            <summary>
            Creates and sets the new ITeamFoundationContext for the Team Explorer window.
            </summary>
            <param name="teamProjectCollection">The team project collection, can be null.</param>
            <param name="projectUri">The team project fully qualified Uri, can be null.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager.SetContext(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String,System.Guid)">
            <summary>
            Creates and sets the new ITeamFoundationContext for the Team Explorer window.
            </summary>
            <param name="teamProjectCollection">The team project collection, can be null.</param>
            <param name="projectUri">The team project fully qualified Uri, can be null.</param>
            <param name="teamId">The id of the TeamFoundationTeam object to set as the current team, can be Guid.Empty.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager.ContextChanged">
            <summary>
            An event that fires whenever the context has changed.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.Client.ITeamFoundationContextManager.ContextChanging">
            <summary>
            An event that fires whenever the server context is changing, provides listeners
            the ability to cancel the change or add IVsHierarchy items that need to be prompted
            for save prior to switching the active server.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ActiveContextChange">
            <summary>
            This enumeration is used to denote a type of context change.
            Each value can be combined as needed as this is a flags enum.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ActiveContextChangeReason">
            <summary>
            This enumeration is used to denote the reason for a context change.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ContextChangedEventArgs">
            <summary>
            EventArgs for the ContextChanged event on the ITeamFoundationContextManager interface.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ContextChangedEventArgs.NewContext">
            <summary>
            The new context that has already been set on the monitor service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ContextChangedEventArgs.OldContext">
            <summary>
            The previous context that was being used.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ContextChangedEventArgs.TeamProjectCollectionChanged">
            <summary>
            True if the collection changed, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ContextChangedEventArgs.TeamProjectChanged">
            <summary>
            True if the team project changed, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ContextChangedEventArgs.TeamChanged">
            <summary>
            True if the team changed, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ContextChangedEventArgs.RepositoryChanged">
            <summary>
            True if source control changed, false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ContextChangingEventArgs">
            <summary>
            EventArgs for the ContextChanging event on the ITeamFoundationContextManager interface.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ContextChangingEventArgs.Cancel">
            <summary>
            Flag to indicate if the current context change should be canceled.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ContextChangingEventArgs.NewContext">
            <summary>
            The new context.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ContextChangingEventArgs.TeamProjectCollectionChanging">
            <summary>
            True if the collection is changing, false otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ContextChangingEventArgs.AddHierarchyForPromptAndSave(System.Object,System.UInt32,System.Boolean)">
            <summary>
            When inside Visual Studio, IVsHierarchy items can be prompted for saving
            before proceeding with switching the context.
            </summary>
            <param name="hierarchy">An IVsHierarchy object is expected</param>
            <param name="parentItemId">The parent item</param>
            <param name="autoClose">Bool to indicate if the frame should be closed</param>        
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ITeamFoundationWorkspaceContextMonitor">
            <summary>
            Get this service to monitor workspace changes.
            Also provides workspace changed event proxying.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.Client.ITeamFoundationWorkspaceContextMonitor.ContextChanged">
            <summary>
            Raised when the workspace is changed
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ITeamFoundationWorkspaceContextMonitor.NotifyWorkspaceChanged(System.String,System.String)">
            <summary>
            Raise the ContextChanged event
            </summary>
            <param name="oldWorkspace">old workspace</param>
            <param name="newWorkspace">new workspace</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TeamFoundationWorkspaceContextChangedEventArgs">
            <summary>
            EventArgs for ITeamFoundationWorkspaceContextMonitor.ContextChanged
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ITeamFoundationSourceControlContext">
            <summary>
            This interface holds information about the source control context of the
            Team Explorer window.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITeamFoundationSourceControlContext.SourceControlType">
            <summary>
            The active source control type for the team project.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITeamFoundationSourceControlContext.RepositoryIds">
            <summary>
            The source control repository IDs.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ITeamFoundationSourceControlContext.HasRepositoryIds">
            <summary>
            True if there are repository IDs set.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TeamFoundationSourceControlType">
            <summary>
            Team Foundation Source Control types.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.TeamFoundationSourceControlType.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.TeamFoundationSourceControlType.TFVC">
            <summary>
            Team Foundation Version Control
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.TeamFoundationSourceControlType.Git">
            <summary>
            Git
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.KnownCapFlagsScc">
            <summary>
            Possible values for the CapFlagsScc values used to identify a project's
            source control capabilities. Historically, 1=TFVC, 2=Git.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.KnownCapFlagsScc.Convert(System.String)">
            <summary>
            Converts the specified capFlagsScc value into the corresponding TeamFoundationSourceControlType.
            </summary>
            <param name="capFlagsScc">The capFlagsScc.</param>
            <returns>The TeamFoundationSourceControlType that represents the capFlagsScc value provided.</returns>
            <remarks>
            All values different to KnownCapFlagsScc.Git will convert to TFVC.
            </remarks>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TeamFoundationContextHelper">
            <summary>
            Support methods to handle context information.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamFoundationContextHelper.IsProjectActive(System.IServiceProvider,System.Guid,System.String)">
            <summary>
            Determines whether the project at the specified collection and Uri is the current active project.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="collectionId">The collection identifier.</param>
            <param name="projectUri">The project URI.</param>
            <returns>True if the project is active, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TeamFoundationWorkspaceContextMonitor">
            <summary>
            Implements a workspace context changed proxy
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.Client.TeamFoundationWorkspaceContextMonitor.Microsoft#TeamFoundation#Client#ITeamFoundationWorkspaceContextMonitor#ContextChanged">
            <summary>
            Raised when the workspace is changed
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamFoundationWorkspaceContextMonitor.Microsoft#TeamFoundation#Client#ITeamFoundationWorkspaceContextMonitor#NotifyWorkspaceChanged(System.String,System.String)">
            <summary>
            Raise the ContextChanged event
            </summary>
            <param name="oldWorkspace">old workspace</param>
            <param name="newWorkspace">new workspace</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TeamFoundationTeam">
            <summary>
            This is a wrapper class for a Team identity that makes it
            convenient for working with properties. It also provides helper
            methods to create, update, query and read Teams on server
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamFoundationTeam.#ctor(Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamFoundationTeam.Project">
            <summary>
            Team Project Uri.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamFoundationTeam.Name">
            <summary>
            Team's name
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamFoundationTeam.TryGetProperty(System.String,System.Object@)">
            <summary>
            Property accessor. Will return null if not found.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamFoundationTeam.GetProperty(System.String)">
            <summary>
            Property accessor. Will throw if not found.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamFoundationTeam.RemoveProperty(System.String)">
            <summary>
            Remove property, if it exists.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamFoundationTeam.GetProperties">
            <summary>
            Property bag. This could be useful, for example if consumer has
            to iterate through current properties and modify / remove
            some based on pattern matching property names.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamFoundationTeam.SetProperty(System.String,System.Object)">
            <summary>
            Sets a property, will overwrite if already set.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamFoundationTeam.GetMembers(Microsoft.TeamFoundation.Client.TfsConnection,Microsoft.TeamFoundation.Framework.Common.MembershipQuery)">
            <summary>
            Get team member identities.
            </summary>
            <param name="requestContext">The request context.</param>
            <param name="queryMembership"></param>
            <returns>Member identities</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamFoundationTeam.GetTeamPropertiesView``1(Microsoft.TeamFoundation.Client.TfsConnection)">
            <summary>
            Creates and caches a view object for the team that 
            simplifies access to complex properties that require further
            processing such as converting id of a TFS artifact to a meaningful
            text, i.e. from work item tracking area id to area path. If a view object
            is found in the cache for a given type, cached object will be returned.
            </summary>
            <typeparam name="T">view object type. A view object must have a 
            public constructor that requires no arguments.</typeparam>
            <param name="requestContext">The request context.</param>
            <returns>The view object instance initialized with the request context 
            and with this team instance.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TeamPropertiesView">
            <summary>
            Base abstract class for all team view objects. Team view
            objects follows facade pattern. In this regard team view
            objects provide easy way to access complex or domain specific
            properties that require further insight on how they are stored 
            in the team property bag and how they should be presented to the 
            outside world. The view objects can consume other view
            objects, such as a view object that manages Agile experience
            specific team properties can use another view object that manages
            work item tracking related properties, i.e. which work item type 
            in a project represents bug work items, for the team. 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamPropertiesView.Team">
            <summary>
            The team associated with the view instance.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamPropertiesView.ViewNamespace">
            <summary>
            Property namespace for the view properties. By default
            the full name of view type will be the prefix for property names.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamPropertiesView.Initialize(Microsoft.TeamFoundation.Client.TfsConnection,Microsoft.TeamFoundation.Client.TeamFoundationTeam)">
            <summary>
            Initializes the view object.
            </summary>
            <param name="requestContext">The request context.</param>
            <param name="team">The team instance</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamPropertiesView.SetViewProperty(System.String,System.Object)">
            <summary>
            Sets a property value with the view namespace.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">Value of the property.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamPropertiesView.RemoveViewProperty(System.String)">
            <summary>
            Remove view property, if it exists.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamPropertiesView.GetViewProperty(System.String)">
            <summary>
             Gets a property value with the view namespace.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamPropertiesView.TryGetViewProperty(System.String,System.Object@)">
            <summary>
             Try get a property value with the view namespace.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamService.CreateTeam(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a Team on server with optional properties
            </summary>
            <param name="projectId">Project Uri (scope id)</param>
            <param name="name">Team name</param>
            <param name="description">Team description</param>
            <param name="properties">properties, can be null or empty</param>
            <returns>TeamFoundationTeam</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamService.QueryTeams(System.String)">
            <summary>
            Query all Team groups in given project.
            </summary>
            <param name="projectId">Project Uri (scope id)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamService.QueryTeams(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Query all Team groups that given user is a member of.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamService.QueryTeams(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Collections.Generic.List{System.String})">
            <summary>
            Query all Team groups that given user is a member of.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamService.ReadTeam(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Collections.Generic.List{System.String})">
            <summary>
            Read Team group by descriptor
            </summary>
            <param name="propertyNameFilters">
            specifies extended properties to read, refer Prpoperty Service API. Set to null to read all properties.
            </param>
            <returns>Team object if group exists AND is a team, else null</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamService.ReadTeam(System.Guid,System.Collections.Generic.List{System.String})">
            <summary>
            Read Team group by id
            </summary>
            <param name="propertyNameFilters">
            specifies extended properties to read, refer Prpoperty Service API. Set to null to read all properties.
            </param>
            <returns>Team object if group exists AND is a team, else null</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamService.ReadTeam(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Read Team group by name in given project
            </summary>
            <param name="projectId">Project Uri (scope id)</param>
            <param name="propertyNameFilters">
            specifies extended properties to read, refer Prpoperty Service API. Set to null to read all properties.
            </param>
            <returns>Team object if group exists AND is a team, else null</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamService.GetDefaultTeamId(System.String)">
            <summary>
            Returns default team id for the project.
            </summary>
            <param name="projectUri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamService.GetDefaultTeam(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets default team for the project
            </summary>
            <param name="projectUri"></param>
            <param name="propertyNameFilters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamService.SetDefaultTeam(Microsoft.TeamFoundation.Client.TeamFoundationTeam)">
            <summary>
            Sets default team for the project
            </summary>
            <param name="team"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamService.SetDefaultTeamId(System.String,System.Guid)">
            <summary>
            Sets default team for the project
            </summary>
            <param name="projectUri"></param>
            <param name="teamId"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamService.UpdateTeam(Microsoft.TeamFoundation.Client.TeamFoundationTeam)">
            <summary>
            Persist Team updates.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFProxyServer.#ctor(System.String,System.Boolean,System.Int32,System.Boolean,System.DateTime,System.DateTime)">
            <summary>
            TeamFoundation Proxy Server settings
            </summary>
            <param name="url">proxy server url</param>
            <param name="isEnabled">true if the proxy has been enabled</param>
            <param name="retryIntervalMinutes">the number of minutes to wait before trying
              to use the proxy server after it has been marked unavailable</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFProxyServer.GetFileAsync(Microsoft.TeamFoundation.Client.TfsConnection,System.String)">
            <summary>
            Get a file from the proxy using the given ticket. If the proxy fails, is unavailable or not configured fall back to the server
            </summary>
            <param name="connection"></param>
            <param name="ticket"></param>
            <returns>The file stream</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFProxyServer.NotifyUnavailable">
            <summary>
            Record the proxy server as being unavailable until the retry interval has elapsed.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFProxyServer.ResetDisableTime">
            <summary>
            Reset the disable time so that the proxy will used if it is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TFProxyServer.Url">
            <summary>
            Url used for connecting to the proxy
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TFProxyServer.IsEnabled">
            <summary>
            A flag that indicates whether proxy is enabled (registry setting).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TFProxyServer.IsAvailable">
            <summary>
            This flag indicates whether the proxy is available based on it being enabled by
            the user (IsEnabled) and not marked unavailable due to a request failing within
            a time window.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TFProxyServer.LastException">
            <summary>
            The most recent error that was hit by the proxy
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TFProxyServer.RetryIntervalMinutes">
            <summary>
            This is the number of minutes to wait before trying to use the proxy server after
            it has become unavailable.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TFProxyServer.WasAutoConfigured">
            <summary>
            This flag indicates whether the proxy setting was automatically configured.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TFProxyServer.LastConfigureTime">
            <summary>
            This is the last time the proxy setting was configured.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TFProxyServer.LastCheckTime">
            <summary>
            This is the last time we checked for proxies to automatically configure
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TFProxyServer.NeedsAutoConfigure">
            <summary>
            This flag indicates whether the proxy server setting needs to be
            automatically configured again
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TFProxyServerFactory">
            <summary>
            Manages the creation of TFProxyServer instance, based on whether the proxy settings are
            configured
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFProxyServerFactory.GetProxyServer">
            <summary>
            Check whether TFSPROXY environment variable is set else retrieve the proxy settings from registry. 
            If an instance of TFProxyServer exists then update this with the latest proxy settings else create 
            an instance of TFProxyServer and set the proxy related properties
            </summary>
            <returns>TFProxyServer instance if proxy is configured, else returns null</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFProxyServerFactory.GetProxyServerWithAutoConfigure(Microsoft.TeamFoundation.Client.TfsConnection,System.String)">
            <summary>
            Check whether TFSPROXY environment variable is set else retrieve the proxy settings from registry.
            If no proxy is configure, then try to find the best matching proxy from those registered with the server. 
            If an instance of TFProxyServer exists then update this with the latest proxy settings else create 
            an instance of TFProxyServer and set the proxy related properties
            </summary>
            <param name="tfsConnection"></param>
            <param name="siteName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFProxyServerFactory.LoadProxySettings(System.String@,System.String@)">
            <summary>
            Load Proxy settings from registry
            </summary>
            <param name="proxyEnabled">Indicates whether Proxy is enabled (bool.TrueString) or 
            not (bool.FalseString)</param>
            <param name="proxyUrl">Proxy url</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFProxyServerFactory.LoadProxySettings(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Load Proxy settings from registry
            </summary>
            <param name="proxyEnabled">Indicates whether Proxy is enabled (bool.TrueString) or 
            not (bool.FalseString)</param>
            <param name="proxyUrl">Proxy url</param>
            <param name="proxyAutoConfigured">Indicated whether Proxy was automatically configured (bool.TrueString)
            or not (bool.FalseString)</param>
            <param name="proxyLastConfigureTime">The last time the proxy setting was configured</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFProxyServerFactory.StoreProxySettings(System.String,System.String,System.String)">
            <summary>
            Store proxy settings in registry
            </summary>
            <param name="proxyEnabled">Indicates whether Proxy is enabled (bool.TrueString) or 
            not (bool.FalseString)</param>
            <param name="proxyUrl">Proxy Url</param>
            <param name="proxyAutoConfigured">Indicated whether Proxy was automatically configured (bool.TrueString)
            or not (bool.FalseString)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFProxyServerFactory.MarkProxyChecked">
            <summary>
            Updates the 'Last Checked' time for the proxy server to be now.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFProxyServerFactory.AppendVirtualDirectory(System.String)">
            <summary>
            Append vdir to proxyUrl
            </summary>
            <param name="proxyUrl"></param>
            <returns>ProxyURL which includes vdir</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TfsClientCacheUtility">
            <summary>
            Utilities to manage the cache directories under 
            %LOCALAPPDATA%\Microsoft\Team Foundation\[s_version]\Cache.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCacheUtility.GetCacheDirectory(System.Uri,System.Guid,System.Guid)">
            <summary>
            Get the path of the cache directory of the specified server. This method
            does not create the directory. 
            
            The instance-specific cache directory will look like this:
            
            %LOCALAPPDATA%\Microsoft\Team Foundation\[s_version]\Cache\[instanceId]_[scheme]
            
            The user-specific cache directory will look like this:
            
            %LOCALAPPDATA%\Microsoft\Team Foundation\[s_version]\Cache\[userId]\[instanceId]_[scheme]
            </summary>
            <param name="uri"></param>
            <param name="instanceId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCacheUtility.GetVolatileCacheDirectory(System.Uri,System.Guid)">
            <summary>
            Get the path of the volatile cache directory of the specified server. This method
            does not create the directory. The volatile cache directory will look like this:
            
            %LOCALAPPDATA%\Microsoft\Team Foundation\[s_version]\Cache\Volatile\[instanceId]_[scheme]
            </summary>
            <param name="uri"></param>
            <param name="instanceId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCacheUtility.DeleteVolatileCacheDirectory(System.Uri,System.Guid)">
            <summary>
            Delete the volatile cache directory of the specified server. The volatile
            cache directory will look like this:
            
            %LOCALAPPDATA%\Microsoft\Team Foundation\[s_version]\Cache\Volatile\[instanceId]_[scheme]
            </summary>
            <param name="uri"></param>
            <param name="instanceId"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentialsCache.SetCredentials(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentials)">
            <summary>
            Sets the default credentials for the specified server url.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsClientCredentialsCache.RemoveCredentials(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentials)">
            <summary>
            Removes the default credentials for the specified server url.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TfsConfigurationServer">
            <summary>
            Provides access to the Team Foundation Server deployment or configuration instance which manages the
            set of <c>TfsTeamProjectCollection</c> objects.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServer.#ctor(System.Uri)">
            <summary>
            Initializes a new <c>TfsConfigurationServer</c> instance using credentials loaded from the
            credential cache. If no stored credentials are found for the provided URI then the default credentials
            will be used.
            </summary>
            <param name="uri">The URI of the configuration server</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="uri"/> is null</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServer.#ctor(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentials)">
            <summary>
            Initializes a new <c>TfsConfigurationServer</c> instance using the specified credentials.
            </summary>
            <param name="uri">The URI of the configuration server</param>
            <param name="credentials">The credentials which should be used for authentication</param>
            <exception cref="T:System.ArgumentNullException">
            when <paramref name="uri"/> or <paramref name="credentials"/> is null
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServer.#ctor(System.Uri,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Initializes a new <c>TfsConfigurationServer</c> instance using credentials loaded from the
            credential cache. If no stored credentials are found for the provided URI then the default credentials
            will be used. The specified <paramref name="identityToImpersonate"/> will be impersonated on all requests 
            to the server.
            </summary>
            <param name="uri">The URI of the project collection</param>
            <param name="identityToImpersonate">The identity which should be impersonated for all server requests</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="uri"/> is null</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServer.#ctor(System.Uri,System.Net.ICredentials)">
            <summary>
            Initializes a new <c>TfsConfigurationServer</c> instance using the specified windows credentials for
            authentication.
            </summary>
            <param name="uri">The URI of the configuration server</param>
            <param name="credentials">The windows credentials which should be used for authentication</param>
            <exception cref="T:System.ArgumentNullException">
            when <paramref name="uri"/> or <paramref name="credentials"/> is null
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServer.#ctor(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentials,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Initializes a new <c>TfsConfigurationServer</c> instance using the specified credentials. The specified
            identity will be impersonated for all operations.
            </summary>
            <param name="uri">The URI of the configuration server</param>
            <param name="credentials">The credentials which should be used for authentication</param>
            <param name="identityToImpersonate">The windows credentials which should be used for authentication</param>
            <exception cref="T:System.ArgumentNullException">
            when <paramref name="uri"/> or <paramref name="credentials"/> is null
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServer.#ctor(Microsoft.TeamFoundation.Client.RegisteredConfigurationServer)">
            <summary>
            Creates a TfsConfigurationServer object
            </summary>
            <param name="application">Registered configuration server</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServer.#ctor(Microsoft.TeamFoundation.Client.RegisteredConfigurationServer,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Creates a TfsConfigurationServer object
            </summary>
            <param name="application">Registered configuration server</param>
            <param name="identityToImpersonate">The IdentityDescriptor for the identity to impersonate.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServer.#ctor(System.Uri,Microsoft.TeamFoundation.Client.TfsClientCredentials)">
            <summary>
            Initializes a new <c>TfsConfigurationServer</c> instance using the specified credentials.
            </summary>
            <param name="uri">The URI of the configuration server</param>
            <param name="credentials">The credentials which should be used for authentication</param>
            <exception cref="T:System.ArgumentNullException">
            when <paramref name="uri"/> or <paramref name="credentials"/> is null
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServer.#ctor(System.Uri,Microsoft.TeamFoundation.Client.TfsClientCredentials,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Initializes a new <c>TfsConfigurationServer</c> instance using the specified credentials. The specified
            identity will be impersonated for all operations.
            </summary>
            <param name="uri">The URI of the configuration server</param>
            <param name="credentials">The credentials which should be used for authentication</param>
            <param name="identityToImpersonate">The windows credentials which should be used for authentication</param>
            <exception cref="T:System.ArgumentNullException">
            when <paramref name="uri"/> or <paramref name="credentials"/> is null
            </exception>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConfigurationServer.CatalogNode">
            <summary>
            The Catalog Node for this server
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConfigurationServer.UseFactory">
            <summary>
            Use the factory to get project collection instances.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConfigurationServer.InstanceIdHashCode">
            <summary>
            Hash code of the instance Id. Retriving the instance Id costs a server call
            so this property is null if the connection has not been established.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServer.GetTeamProjectCollection(System.Guid)">
            <summary>
            Returns the collection for the guid supplied.  Note the desired collection
            must exist under the ApplicationInstance represented by this object.  Null
            will be returned if no collection with this guid is found.
            
            Note, this function will not use the factory to create the TeamFoundationProjectCollection
            classes.  It will pass the newly created TeamFoundationProjectCollection object its 
            current credentials.
            </summary>
            <param name="collectionId">The guid for the desired collection.</param>
            <returns>The TeamFoundationProjectCollection for the collection requested or null
            if it does not exist.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServer.GetTeamProjectCollections">
            <summary>
            Returns the list of existing <c>TfsTeamProjectCollection</c> instances managed by this server instance.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServer.GetFullyQualifiedUriForName(System.String)">
            <summary>
            This function assumes the name passed in will either be
            the friendly name of the server or the url to the root
            of the collection.  Url's fully qualified to the location
            service page should not be passed in here.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ITfsConfigurationServerObject">
            <summary>
            This interface is used by "child" objects of TfsConnection.  The purpose is to avoid having
            TeamFoundationServer.GetService polluted with knowledge of misc. services that are dependent on it.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TfsConfigurationServerFactory">
            <summary>
            This factory is designed for things like VSIP packages to be able to all use the same
            instance of a TfsConfigurationServer object.  It caches TFS objects without regard to
            credentials; cached objects are indexed only by server URI.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConfigurationServerFactory.Servers">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServerFactory.GetConfigurationServer(System.Uri)">
            <summary>
            If a TfsConfigurationServer object with the specified name exists in the cache, it is
            returned.  If not, one is created with a credential provider, if any, appropriate for the
            environment.  The created TfsConfigurationServer object is placed in the cache and
            associated with the Uri resolved for the name.
            </summary>
            <param name="uri">The relative or fully qualified uri for the server.</param>
            <returns>The server object.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServerFactory.CrossProcessNotificationCallback(Microsoft.TeamFoundation.Client.Internal.Notification,System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="notification"></param>
            <param name="param1"></param>
            <param name="param2"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TfsConfigurationServerManager">
            <summary>
            The central class to manage state between:
            1) Token Storage
            2) Cache Directories
            3) Registered Tfs Connections
            4) TfsConfigurationServerFactory
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServerManager.Update(Microsoft.TeamFoundation.Client.TfsConfigurationServer)">
            <summary>
            Update the registration, token storage and cache directories of a configuration
            server. The given server needs to be authenticated.
            </summary>
            <remarks>
            This method will throw a <c>TeamFoundationInvalidAuthenticationException</c> if the server being
            updated exists and is authenticated with a different user.
            </remarks>
            <param name="configurationServer">The server to be updated.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServerManager.Remove(Microsoft.TeamFoundation.Client.TfsConfigurationServer)">
            <summary>
            Remove the registration, token storage and cache directories of a configuration
            server.
            </summary>
            <param name="configurationServer">The server to be removed.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServerManager.SwitchUser(System.Uri)">
            <summary>
            Switch the authenticating user of a configuration server. The registration, token
            storage and cache directories of the server will be updated accordingly.
            </summary>
            <remarks>
            Switching user is only supported against Team Foundation Service and federated authentication.
            </remarks>
            <param name="uri">Endpoint of the server.</param>
            <returns>The server that is authenticated with a different user.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServerManager.SwitchUser(Microsoft.TeamFoundation.Client.TfsConfigurationServer)">
            <summary>
            Switch the authenticating user of a configuration server. The registration, token
            storage and cache directories of the server will be updated accordingly. The given
            server needs to be authenticated.
            </summary>
            <remarks>
            Switching user is only supported against Team Foundation Service and federated authentication.
            </remarks>
            <param name="configurationServer">The server that is authenticated with a different user.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServerManager.OnConnectionUserChanged(System.Guid)">
            <summary>
            Raise the event when a connection changes its authenticated user.
            </summary>
            <param name="instanceId">Instance Id of the connection that has user changed. 
            No value if the connection cannot be determined.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConfigurationServerManager.GetServerForSwitchUser(System.Uri,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Get a new server instance to perform user switching.
            </summary>
            <param name="uri"></param>
            <param name="identityToImpersonate"></param>
            <returns></returns>
        </member>
        <member name="E:Microsoft.TeamFoundation.Client.TfsConfigurationServerManager.ConnectionUserChanged">
            <summary>
            This event is fired when a <c>TfsConfigurationServer</c> switches its authenticated user. It is fired in
            the process where the switch happened, and in other processes when they get notified about the
            change.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.ChannelFactory">
            <summary>
            Gets the channel factory used for this project collection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.ClientCredentials">
            <summary>
            Gets the credentials for this project collection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.InstanceId">
            <summary>
            The Guid that uniquely identifies the TfsConnection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.CachedInstanceId">
            <summary>
            The Guid that uniquely identifies the TfsConnection. This property will attempt to return
            a cached value, if possible.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.Uri">
            <summary>
            The base url for this connection
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.TimeZone">
            <summary>
            This is used to convert dates and times to UTC. It defaults to the current time zone of the local machine. This value
            should be used by any consumer of the OM who wants to know the TimeZone of the client. This value
            matters for cases such as Team Web Access where their "client" may be running on a server
            in a different TimeZone than the users of TSWA.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.ServerCapabilities">
            <summary>
            The capabilities of the TFS server
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.IsHostedServer">
            <summary>
            Returns true if the server is an Azure Hosted TFS server
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.CatalogNode">
            <summary>
            The Catalog Resource for this TfsConnection
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.Name">
            <summary>
            Friendly name of the Team Foundation Connection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.ApplicationName">
            <summary>
            This property is used to record in the server's activity log which application made
            a request.  It provides a way for the administrator to understand which applications
            are making particular requests as well as the load generated by a particular application.
            Setting this property is optional.
            </summary>
            <remarks>This property will be set by default, so it generally only needs to be set for
            applications such as web applications that are hosted in another process, such as w3wp.exe.
            Also, the application name should not use any characters that cannot be used in HTTP request headers.
            </remarks>
            <example>Example of the default setting: "Team Foundation (devenv.exe, 9.0.20418.0)"</example>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.OperationName">
            <summary>
            This property is used to identify the overall operation in the server's activity log.  For example,
            the process of checking into version control results in several web method calls.  By setting this
            property, all of the web methods used in checking in will be tagged as being part of a checkin 
            operation.  Setting this property is optional.
            </summary>
            <remarks>This property uses thread-local storage, which means that it must be set by each thread
            in order to be recorded. Also, the operation name should not contain commas and should not use
            any characters that cannot be used in HTTP request headers.</remarks>
        </member>
        <member name="E:Microsoft.TeamFoundation.Client.TfsConnection.WebServiceCallBegin">
            <summary>
            This event is fired when the TFS client object model begins execution of a web request in this
            appdomain.
            
            The receiving event handler will be provided with the instance of TfsConnection on which the
            web service call originated (if available).
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.Client.TfsConnection.WebServiceCallEnd">
            <summary>
            This event is fired when the TFS client object model completes execution of a web request in this
            appdomain.
            
            The receiving event handler will be provided with the instance of TfsConnection on which the
            web service call originated (if available).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.TotalRequestCount">
            <summary>
            The total number of times the WebServiceCallBegin event has fired in this appdomain.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.LoadFromCache(System.Uri,System.Net.ICredentials)">
            <summary>
            Load the credentials from the cache and override the windows credentials values if non-null
            values are specified for either parameter.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.OnBeginWebRequest">
            <summary>
            Infrastructure.
            </summary>
            <returns>A unique request identifier for tracking a request in an application domain</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.OnWebServiceCallBegin(Microsoft.TeamFoundation.Client.TfsConnection,System.Int64,System.String)">
            <summary>
            Infrastructure. 
            Fires the static WebServiceCallBegin event on TfsConnection, given the data provided.
            </summary>
            <param name="originatingTfsConnection">If available, the TfsConnection object from which the request originated</param>
            <param name="methodName">The name of the webmethod being invoked</param>
            <returns>Request ID for correlation of Begin/End events</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.OnWebServiceCallBegin(Microsoft.TeamFoundation.Client.TfsConnection,System.Int64,System.String,System.String,System.Net.HttpWebRequest)">
            <summary>
            Infrastructure. 
            Fires the static WebServiceCallBegin event on TfsConnection, given the data provided.
            </summary>
            <param name="originatingTfsConnection">If available, the TfsConnection object from which the request originated</param>
            <param name="methodName">The name of the webmethod being invoked</param>
            <param name="componentName">The name of the compoennt invoking the method</param>
            <param name="requestLength">The length of the http request</param>
            <returns>Request ID for correlation of Begin/End events</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.OnWebServiceCallEnd(Microsoft.TeamFoundation.Client.TfsConnection,System.Int64,System.String)">
            <summary>
            Infrastructure.
            Fires the static WebServiceCallEnd event on TfsConnection, given the data provided.
            </summary>
            <param name="originatingTfsConnection">If available, the TfsConnection object from which the request originated</param>
            <param name="requestId">Request ID for correlation of Begin/End events</param>
            <param name="methodName">The name of the webmethod which was invoked</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.OnWebServiceCallEnd(Microsoft.TeamFoundation.Client.TfsConnection,System.Int64,System.String,System.String,System.Net.HttpWebResponse)">
            <summary>
            Infrastructure.
            Fires the static WebServiceCallEnd event on TfsConnection, given the data provided.
            </summary>
            <param name="originatingTfsConnection">If available, the TfsConnection object from which the request originated</param>
            <param name="requestId">Request ID for correlation of Begin/End events</param>
            <param name="methodName">The name of the webmethod which was invoked</param>
            <param name="componentName">The name of the component invoking the web method</param>
            <param name="responseLength">The content-length of the response</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.IdentityToImpersonate">
            <summary>
            Returns the identity being impersonated.  If no identity is
            being impersonated this value returns null.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.Credentials">
            <summary>
            The credentials for this team foundation server instance.  This object must be
            either a NetworkCredential or CredentialCache object (required by the
            HttpWebRequest.Credentials property -- see MSDN).  The ICredentials interface is
            the interface implemented by both classes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.CredentialsProvider">
            <summary>
            Used by the factory to update the credentials provider when necessary.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.Culture">
            <summary>
            The culture that will be used.  It defaults to CultureInfo.CurrentCulture.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.UICulture">
            <summary>
            The culture that will be used.  It defaults to CultureInfo.CurrentUICulture.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.SessionId">
            <summary>
            A unique identifier that identifies this instance of the client to the server and is recorded
            in the server's activity log.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.ClientCacheDirectory">
            <summary>
            Directory containing the client cache files which resides below the settings directory.
            
            This will look something like this:
            %LOCALAPPDATA%\Microsoft\Team Foundation\[s_version]\Cache
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.ClientVolatileCacheDirectory">
            <summary>
            Directory containing the client cache files that will be removed when their corresponding
            server connection is removed or replaced.
            
            This will look something like this:
            %LOCALAPPDATA%\Microsoft\Team Foundation\[s_version]\Cache\Volatile
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.ClientConfigurationDirectory">
            <summary>
            Directory containing the client configuration files which resides below the settings directory.
            
            This will look something like this:
            %LOCALAPPDATA%\Microsoft\Team Foundation\[s_version]\Configuration
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.SafeGetFolderPath(System.Environment.SpecialFolder)">
            <summary>
            Gets folder path and returns null in case the special folder in question doesn't exist (useful when the user has never logged on, which makes
            GetFolderPath throw)
            </summary>
            <param name="specialFolder">Folder to retrieve</param>
            <returns>Path if available, null othewise</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.ClientSettingsDirectory">
            <summary>
            Directory containing the client settings files.
            
            This will look something like this:
            %LOCALAPPDATA%\Microsoft\Team Foundation\[s_version]
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.ClientCacheDirectoryForInstance">
            <summary>
            The path that should be used to cache instance-specific data from this server. 
            This will differ based on the scheme that was used to connect to the server.
            
            This will look something like this:
            %LOCALAPPDATA%\Microsoft\Team Foundation\[s_version]\Cache\[instanceId]_[scheme]
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.ClientVolatileCacheDirectoryForInstance">
            <summary>
            The path that should be used to cache instance-specific data from this server that
            will be removed when the server is removed or connected with a different user.
            
            This will look something like this:
            %LOCALAPPDATA%\Microsoft\Team Foundation\[s_version]\Cache\Volatile\[instanceId]_[scheme]
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.ClientCacheDirectoryForUser">
            <summary>
            The path that should be used to cache user-specific data from this server. Accessing this
            property will make a server call to retrieve the user information if the server has not been 
            connected.
            
            This will look something like this:
            %LOCALAPPDATA%\Microsoft\Team Foundation\[s_version]\Cache\[userId]\[instanceId]_[scheme]
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.ClientCacheTimeToLive">
            <summary>
            Defines the expiration interval for the location service client disk cache.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.GetAuthenticatedIdentity(Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity@)">
            <summary>
            Returns the identity that authenticated with the server. When using TFS Impersonation
            this will be the identity doing the impersonation, not the user the call is being
            made on behalf of.  Because of this, the AuthorizedIdentity is usually the correct
            identity to use from this API.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.AuthorizedIdentity">
            <summary>
            The identity who the calls to the server are being made for.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.HasAuthenticated">
            <summary>
            Returns true if this object has successfully authenticated.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.ToString">
            <summary>
            Provides the friendly name for the TfsConnection.
            </summary>
            <returns>Friendly name</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.EnsureAuthenticated">
            <summary>
            This method will authenticate the connection if not previously authenticated.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.Authenticate">
            <summary>
            Authenticates the connection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.Connect(Microsoft.TeamFoundation.Framework.Common.ConnectOptions)">
            <summary>
            Performs all of the steps that are necessary for setting up a connection
            with a TeamFoundationServer.  Specify what information should be 
            returned in the connectOptions parameter.
            </summary>
            <param name="connectOptions">Specifies what information that should be 
            returned from the server.</param>
            <param name="serviceTypeFilters">The service types to get information for.
            If service information is not requested in the connectOptions value, this
            parameter must be null.  To request
            all service definitions, pass "*" as the first and only entry in the array.
            To only request service information about the possible client zones, pass
            in null or an empty array.
            </param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.Disconnect">
            <summary>
            Disconnect the connection
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.GetService``1">
            <summary>
            Gets the requested service.
            </summary>
            <typeparam name="T">The type of service to retrieve</typeparam>
            <returns>An instance of the service if it could be found, or a null reference (Nothing in Visual Basic) if it could not be found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.GetService(System.Type)">
            <summary>
            Gets the requested service.
            </summary>
            <param name="serviceType">The type of service to retrieve. </param>
            <returns>An instance of the service if it could be found, or a null reference (Nothing in Visual Basic) if it could not be found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.FlushServices">
            <summary>
            Disposes and removes all service references
            
            This is a workaround to help clear up a memory leak. Ideally we should just be disposing the whole TfsConnection object. 
            In the next version we can look at making that happen.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.ValidateAndPrepareGetClient``1(Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings)">
            <summary>
            Validates the client type is of VssHttpClientBase, and initializes
            the VssConnection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:Microsoft.TeamFoundation.Client.TfsConnection.CredentialsChanged">
            <summary>
            This event is raised when the TeamFoundationServer object's credentials change.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.GetLocationServiceRelativePath">
            <summary>
            Derived classes need to implement this to tell the base class what its location
            service relative path is.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.GetFullyQualifiedUriForName(System.String,System.String,System.Func{System.String,System.Uri})">
            <summary>
            This function assumes the name passed in will either be
            the friendly name of the server or the url to the root
            of the collection.  Url's fully qualified to the location
            service page should not be passed in here.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.InitializeTeamFoundationObject(System.String,System.Object)">
            <summary>
            Initializes the created object if it implements ITfsConnectionObject.
            </summary>
            <param name="fullName"></param>
            <param name="instance"></param>
            <returns></returns>
            <remarks>
            The proper way to derive from this method is to try to initialize the object by
            checking to see if it implements the corresponding interface.  If it doesn't,
            this method should be called in an attempt to initialize it.  If this function
            returns null that means we were not able to initialize it either.  It is then
            up to the derived class to decide what it should do.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.RefreshProxySettings">
            <summary>
            Loads the latest TeamFoundation proxy server settings
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.ProxyServer">
            <summary>
            Represents the TeamFoundation proxy server that can be used for downloads
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.ConnectivityFailureOnLastWebServiceCall">
            <summary>
            Indicates whether the last web service call issued by this TfsConnection
            object failed due to a connectivity failure.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.Client.TfsConnection.ConnectivityFailureStatusChanged">
            <summary>
            This event is raised when the value of the ConnectivityFailureOnLastWebServiceCall
            flag changes.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.OnConnectivityFailureStatusChanged(System.Boolean)">
            <summary>
            Fires the ConnectivityFailureStatusChanged event.
            </summary>
            <param name="newConnectivityFailureStatus">The new value of the
            ConnectivityFailureOnLastWebServiceCall flag on this TfsConnection object</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.Equals(System.Object)">
            <summary>
            Returns true of the specified object is equal to this TfsConnection.
            Equality is defined by comparing the fully qualified url of the two 
            TfsConnections
            </summary>
            <param name="obj">object to compare this object to</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.GetHashCode">
            <summary>
            Gets the hash code for this instance 
            </summary>
            <returns>the hash code</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.Disposed">
            <summary>
            Used by the factory to determine whether an instance has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.Dispose">
            <summary>
            Notifies interested objects of disposal and disposes this object.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.CatalogResourceId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnection.ServerDataProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.ClearInMemoryCache">
            <summary>
            This method is for testing purposes.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.ReactToPossibleServerUpdate(System.Int32)">
            <summary>
            Called by internal methods when they know the server may have been updated.
            </summary>
            <param name="locationServiceLastChangeId"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.EnsureProviderConnected">
            <summary>
            This function is an answer to the following problem: In order to choose which
            ServerDataProvider to use, we have to make a call using one of them to see
            if it fails.  A server call is very valuable and it is important not to
            waste one trying to determine what type of server we are talking to. After 
            this function makes a connection, it is essentially no-op.
            </summary>
            <param name="optionsNeeded">The options that designate the information the
            caller needs from the server.</param>
            <param name="serviceTypeFilters">If optionsNeeded include service information
            and we need to connect to the server, this parameter tells us what service
            information we should query.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsConnection.ThrowAuthorizationException(System.Exception)">
            <summary>
            Throws the proper authorization exception, either: TeamFoundationServerUnauthorizedException or AccessCheckException
            </summary>
            <param name="e">original exception</param>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.TfsConnection.m_serverDataProvider">
            <summary>
            Provides information about the host we are connected to.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.TfsConnection.s_unauthorizedAccessExceptionErrorCode">
            <summary>
            This string is how we identify that an UnauthorizedAccessCheckException was thrown.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ConnectivityFailureStatusChangedEventHandler">
            <summary>
            The signature for event handlers for the ConnectivityFailureStatusChanged event
            on TfsConnection.
            </summary>
            <param name="sender">The TfsConnection object whose ConnectivityFailureOnLastWebServiceCall flag has changed</param>
            <param name="e">Information indicating how the flag changed</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TfsConnectionWebServiceCallEventHandler">
            <summary>
            The signature for event handlers for the WebServiceCallBegin and WebServiceCallEnd
            static events on TfsConnection.
            </summary>
            <param name="sender">Always null (static event)</param>
            <param name="e">Relevant information about the web service call</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ConnectivityFailureStatusChangedEventArgs">
            <summary>
            The EventArgs object provided to event handlers for the ConnectivityFailureStatusChanged
            event on TfsConnection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ConnectivityFailureStatusChangedEventArgs.NewConnectivityFailureStatus">
            <summary>
            The new value of the ConnectivityFailureOnLastWebServiceCall flag on the TfsConnection object.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TfsConnectionWebServiceCallEventArgs">
            <summary>
            The EventArgs object provided to event handlers for the WebServiceCallBegin
            and WebServiceCallEnd static events on TfsConnection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnectionWebServiceCallEventArgs.TfsConnection">
            <summary>
            The TfsConnection from which the web request originated. If unavailable,
            the value will be null.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnectionWebServiceCallEventArgs.RequestId">
            <summary>
            The unique request ID for this web request, which may be used to correlate
            the Begin and End events. In rare cases, the value may be zero.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnectionWebServiceCallEventArgs.MethodName">
            <summary>
            The name of the webmethod being invoked on the target web service, if
            available. If unavailable, the empty string is returned.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnectionWebServiceCallEventArgs.ComponentName">
            <summary>
            The name of the component invoking the web method, if available. 
            If unavailable, the empty string is returned.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsConnectionWebServiceCallEventArgs.Length">
            <summary>
            The length of the request (for request events) 
            or the response (for response events).
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ConnectionUserChangedEventArgs">
            <summary>
            Event arguments for the <c>ConnectionUserChangedEvent</c>.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.ConnectionUserChangedEventArgs.InstanceId">
            <summary>
            Instance Id of the connection that has user changed. No value
            if the connection cannot be determined, such as when raised
            in a different process upon receiving the cross process notification.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ITfsConnectionObject">
            <summary>
            This interface is used by "child" objects of TfsConnection.  The purpose is to avoid having
            TfsConnection.GetService polluted with knowledge of misc. services that are dependent on it.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TfsRequestContext">
            <summary>
            The context for a TFS web request.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsRequestContext.BodyReader">
            <summary>
            The reader for the XML document sent by the server as the result of the web method.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsRequestContext.ClientContext">
            <summary>
            The client conext that initiated the request
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsRequestContext.Proxy">
            <summary>
            The WSDL proxy making the web method invocation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsRequestContext.MethodName">
            <summary>
            The name of the web method being invoked.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsRequestContext.AddResultSet(Microsoft.TeamFoundation.Client.ITfsResult)">
            <summary>
            Adds the specified result set to the list of results sets for this context.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsRequestContext.RemoveResultSet(Microsoft.TeamFoundation.Client.ITfsResult)">
            <summary>
            Removes the specified result set from the list of results sets for this context.
            When all result sets have been removed, the context is disposed.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TfsTeamProjectCollection">
            <summary>
            Provides access to a Team Project Collection in a Team Foundation Server deployment.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.#ctor(System.Uri)">
            <summary>
            Initializes a new <c>TfsTeamProjectCollection</c> instance using credentials loaded from the windows
            credential cache. If no stored credentials are found for the provided URI then the default credentials
            will be used.
            </summary>
            <param name="uri">The URI of the project collection</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="uri"/> is null</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.#ctor(Microsoft.TeamFoundation.Client.RegisteredProjectCollection)">
            <summary>
            Creates a TfsTeamProjectCollection object.
            </summary>
            <param name="projectCollection">Registered Team Project Collection</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.#ctor(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentials)">
            <summary>
            Initializes a new <c>TfsTeamProjectCollection</c> instance using the specified credentials.
            </summary>
            <param name="uri">The URI of the project collection</param>
            <param name="credentials">The credentials which should be used for authentication</param>
            <exception cref="T:System.ArgumentNullException">
            when <paramref name="uri"/> or <paramref name="credentials"/> is null
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.#ctor(System.Uri,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Initializes a new <c>TfsTeamProjectCollection</c> instance using default credentials. The specified
            identity will be impersonated for all operations.
            </summary>
            <param name="uri">The URI of the project collection</param>
            <param name="identityToImpersonate">The windows credentials which should be used for authentication</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="uri"/> is null</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.#ctor(Microsoft.TeamFoundation.Client.RegisteredProjectCollection,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Creates a TfsTeamProjectCollection object.
            </summary>
            <param name="projectCollection">Registered Team Project Collection</param>
            <param name="identityToImpersonate">The IdentityDescriptor for the identity to impersonate.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.#ctor(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentials,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Initializes a new <c>TfsTeamProjectCollection</c> instance using the specified credentials. The specified
            identity will be impersonated for all operations.
            </summary>
            <param name="uri">The URI of the project collection</param>
            <param name="credentials">The credentials which should be used for authentication</param>
            <param name="identityToImpersonate">The windows credentials which should be used for authentication</param>
            <exception cref="T:System.ArgumentNullException">
            when <paramref name="uri"/> or <paramref name="credentials"/> is null
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.#ctor(System.Uri,System.Net.ICredentials)">
            <summary>
            Initializes a new <c>TfsTeamProjectCollection</c> instance using the specified credentials.
            </summary>
            <param name="uri">The URI of the project collection</param>
            <param name="credentials">The windows credentials which should be used for authentication</param>
            <exception cref="T:System.ArgumentNullException">
            when <paramref name="uri"/> or <paramref name="credentials"/> is null
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.#ctor(System.Uri,Microsoft.TeamFoundation.Client.TfsClientCredentials)">
            <summary>
            Initializes a new <c>TfsTeamProjectCollection</c> instance using the specified credentials.
            </summary>
            <param name="uri">The URI of the project collection</param>
            <param name="credentials">The credentials which should be used for authentication</param>
            <exception cref="T:System.ArgumentNullException">
            when <paramref name="uri"/> or <paramref name="credentials"/> is null
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.#ctor(System.Uri,Microsoft.TeamFoundation.Client.TfsClientCredentials,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Initializes a new <c>TfsTeamProjectCollection</c> instance using the specified credentials. The specified
            identity will be impersonated for all operations.
            </summary>
            <param name="uri">The URI of the project collection</param>
            <param name="credentials">The credentials which should be used for authentication</param>
            <param name="identityToImpersonate">The windows credentials which should be used for authentication</param>
            <exception cref="T:System.ArgumentNullException">
            when <paramref name="uri"/> or <paramref name="credentials"/> is null
            </exception>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.Name">
             <summary>
             Returns the user-friendly name (Host.Port (not Host:Port) or the full URL) of TF server.
            
             The previous use of a simple friendly name should not be used:
             With ETM a user can have multiple instances on the same server and the hostname is not 
             unique any longer.  Using Host.Port as the unique identifier allows us to uniquely identify
             TF servers that are hosted on the same physical machine.  If the URL contains any 
             segments (ie. http://tkbgitvstfat01:8080/Collection1) then the full URL is used. 
             </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.DisplayName">
            <summary>
            If there is only one collection registered with the server this will be just the server name
            otherwise it will be the same as name. e.g. 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.CatalogNode">
            <summary>
            The Catalog Node for this server
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.ConfigurationServer">
            <summary>
            The TFS Instance server for this collection.  Note, this property will not use 
            the factory and will pass it the current credentials from this object.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.UseFactory">
            <summary>
            Use the factory to get the configuration server instance.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.GetFullyQualifiedUriForName(System.String)">
            <summary>
            This function assumes the name passed in will either be
            the friendly name of the server. These should be in the form
            server/collection name. Based on this the fully qualified uri
            for the TfsTeamProjectCollection will be returned.
            </summary>
            <param name="name">The friendly name for the TfsTeamProjectCollection.</param>
            <returns>The uri that should be used to connect to the TfsTeamProjectCollection.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ITfsTeamProjectCollectionObject">
            <summary>
            This interface is used by "child" objects of TfsTeamProjectCollection.  The purpose is to avoid having
            TfsTeamProjectCollection.GetService polluted with knowledge of misc. services that are dependent on it.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.ICredentialsProvider">
            <summary>
            This interface is used by authentication failure handling in the team foundation objects.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ICredentialsProvider.GetCredentials(System.Uri,System.Net.ICredentials)">
            <summary>
            The team foundation objects call this method to get the credentials if the TFS object's
            current credentials failed to authenticate with the server.
            Note that the HttpWebRequest.Credentials property requires that the object be either a
            NetworkCredential or CredentialCache.
            </summary>
            <param name="uri">The Uri of the server.</param>
            <param name="failedCredentials">The crendentials that failed to authenticate (may be
              null, default credentials which return empty string for user name, a CredentialCache
              object, or a NetworkCredential object).  Functions like CredUIPromptForCredentials()
              can use the failed credentials to populate the user name box in the dialog.</param>
            <returns>The credential to use when authenticating with the server.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ICredentialsProvider.NotifyCredentialsAuthenticated(System.Uri)">
            <summary>
            Called by the team foundation objects if the credentials supplied by GetCredential()
            were successfully authenticated by the server.  If the credentials object supplied by
            GetCredentials was a CredentialCache object, you don't know which authenticated.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IUICredentialsProvider.GetCredentials(System.Uri,System.Net.ICredentials,System.String,System.String,System.IntPtr)">
            <summary>
            The team foundation objects call this method to get the credentials if the TFS object's
            current credentials failed to authenticate with the server.
            Note that the HttpWebRequest.Credentials property requires that the object be either a
            NetworkCredential or CredentialCache.
            </summary>
            <param name="uri">The Uri of the server.</param>
            <param name="failedCredentials">The crendentials that failed to authenticate (may be
              null, default credentials which return empty string for user name, a CredentialCache
              object, or a NetworkCredential object).  Functions like CredUIPromptForCredentials()
              can use the failed credentials to populate the user name box in the dialog.</param>
            <param name="caption">Alternate dialog caption</param>
            <param name="messageText">Alternate dialog message text</param>         
            <param name="parentWindowHandle">The parent window handle, if set the dialog will show up modal and cetered to the parent window, modeless if not set</param>         
            <returns>The credential to use when authenticating with the server.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.CredentialsChangedEventArgs">
            <summary>
            This event is raised when the TeamFoundationServer object's credentials change.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.CredentialsChangedEventArgs.Credentials">
            <summary>
            This property returns the new credentials.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TfsTeamProjectCollectionFactory">
            <summary>
            This factory is designed for things like VSIP packages to be able to all use the same
            instance of a TfsTeamProjectCollection object.  It caches TFS objects without regard to
            credentials; cached objects are indexed only by server URI.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TfsTeamProjectCollectionFactory.Collections">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamProjectCollectionFactory.GetTeamProjectCollection(System.Uri)">
            <summary>
            If a TfsTeamProjectCollection object with the specified name exists in the cache, it is
            returned.  If not, one is created with a credential provider, if any, appropriate for the
            environment.  The created TfsTeamProjectCollection object is placed in the cache and
            associated with the Uri resolved for the name.
            </summary>
            <param name="uri">The relative or fully qualified uri for the server.</param>
            <returns>The server object.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TfsTeamProjectCollectionFactory.GetTeamProjectCollection(System.String,System.Boolean,System.Boolean)">
            <summary>
            Retrieves the TfsTeamProjectCollection object used for a given server.
            </summary>
            <param name="serverName">Name of the server to connect to.</param>
            <param name="ensureAuthenticated">Authenticate against the server.</param>
            <param name="ensureServerIsLocallyRegistered">Create a registration entry for this server.</param>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.TFUtil.UnsafeFileExtensions">
            <summary>
            List of file extensions considered "unsafe". This is not meant to be a conclusive list, but added any other extensions
            here that could pose a risk to the end user if an untrusted file is being opened.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFUtil.BeginRunApp(System.String,System.String)">
            <summary>
            Start an external process running and return back the Process handle.
            This method may throw the System.ComponentModel.Win32Exception.
            </summary>
            <param name="appExe">command to run</param>
            <param name="arguments">arguments for the command</param>
            <returns>Process instance of the running external process</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFUtil.SafeLaunchApp(System.String)">
            <summary>
            Starts an application with no parameters.  Handles all exceptions and displays an error
            if there is a problem.
            This is typically used to start a url (open the browser).
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFUtil.SafeOpenFile(System.String)">
            <summary>
            Launches a local file using its default associated open action, prompting the end user if
            the file is an executable.
            </summary>
            <param name="filename">A filename.</param>
            <returns><c>true</c> if the file was not an executable or the user was prompted and chose
            to continue; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFUtil.CheckAndLaunchUri(System.String)">
            <summary>
            Checks that the specified uri string is valid and attempts to launch it.
            </summary>
            <param name="uriString"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFUtil.CheckForNull(System.Object,System.String)">
            <summary>
            Throw an exception if the object is null.
            </summary>
            <param name="var">the object to check</param>
            <param name="varName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFUtil.CheckStringForNullOrEmpty(System.String,System.String)">
            <summary>
            Throw an exception if a string is null or empty.
            </summary>
            <param name="stringVar">string to check</param>
            <param name="stringVarName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFUtil.GetDirectoryName(System.String)">
            <summary>
            Get the directory name for a fully qualified file spec. (See Parse above)
            </summary>
            <param name="path">The fully qualified, canonicalized path to parse.</param>
            <returns>The parent folder.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFUtil.AddXmlAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Adds an attribute to the node if the value is non-null.
            </summary>
            <param name="node">the XML node</param>
            <param name="attrName">the name of the attribute</param>
            <param name="value">the value of the attribute</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFUtil.PrepareForFormat(System.String)">
            <summary>
            Escape the necessary characters in a string so that they will not be processed by
            String.Format.  This returns the escaped string.
            </summary>
            <param name="s">The string to process</param>
            <returns>The string with the appropriate formatting characters escaped.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFUtil.GetTempFileName(System.String,System.String,System.String)">
            <summary>
            Create a temp file name in the specified dir, using the specified template and the
            specified base file name (used as substitution parameter 0 when formatting the string).
            Substitution parameter 1 will be a number designed to make the filename unique in the
            event of collisions.  When this routine is probing, if a temp file with the specified
            name already exists and is more than an hour old, it will be deleted.
            </summary>
            <param name="dir">The directory to create the temp file in.</param>
            <param name="template">The template for the filename with 2 substitution strings -
            one for the base name and one for an optional unique number.</param>
            <param name="baseName">The file name the temp file will be based on.</param>
            <returns>The name of the temp file.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFUtil.CalculateMD5(System.String)">
            <summary>
            Computes the MD5 hash for the specified file, unless FIPS enforcement is enabled.
            </summary>
            <param name="fileName">file to hash</param>
            <returns>the MD5 hash if the provider can be created or a zero-length array if that fails
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFUtil.CalculateMD5(System.IO.Stream)">
            <summary>
            Computes the MD5 hash for the specified file, unless FIPS enforcement is enabled.
            </summary>
            <param name="stream">the stream to hash</param>
            <returns>the MD5 hash if the provider can be created or a zero-length array if that fails
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TFUtil.LocaleSensitiveToUpper(System.String)">
            <summary>
            A modified implementation of ToUpper to account for Turkish and Azeri cultures.
            If the current culture is Turkish or Azeri, the string is converted using ToUpperInvariant,
            othewise the current CultureInfo is used.
            </summary>
            <param name="original">The string to uppercase</param>
            <returns>An uppercase string</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TFUtil.AccessControlEntryComparer">
            <summary>
            Class used for comparing AccessControlEntry
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ThreadSafeServiceContainer.FlushServices">
            <summary>
            disposes and removes all services in the container.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ThreadSafeServiceContainer.Dispose">
            <summary>
            Disposes this service container
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ThreadSafeServiceContainer.AddService(System.Type,System.Object)">
            <summary>
            Adds the specified service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">An instance of the service type to add. 
            This object must implement or inherit from the type indicated by the serviceType parameter.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ThreadSafeServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
            <summary>
            Adds the specified service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback object that is used to create the service. This allows a service
            to be declared as available, but delays the creation of the object until
            the service is requested.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ThreadSafeServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Adds the specified service to the service container, and optionally promotes
            the service to any parent service containers.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit
            from the type indicated by the serviceType parameter.</param>
            <param name="promote">true to promote this request to any parent service containers; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ThreadSafeServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
            <summary>
            Adds the specified service to the service container, and optionally promotes
            the service to parent service containers.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback object that is used to create the service. This allows a service
            to be declared as available, but delays the creation of the object until
            the service is requested.</param>
            <param name="promote">true to promote this request to any parent service containers; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ThreadSafeServiceContainer.RemoveService(System.Type)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ThreadSafeServiceContainer.RemoveService(System.Type,System.Boolean)">
            <summary>
            Removes the specified service type from the service container, and optionally
            promotes the service to parent service containers.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
            <param name="promote">true to promote this request to any parent service containers; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.ThreadSafeServiceContainer.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type serviceType.-or- null if there is no service object of type serviceType.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.TswaClientHyperlinkService">
            <summary>
            A utility class for generating Team System Web Access hyperlinks.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TswaClientHyperlinkService.#ctor">
            <summary>
            A private constructor. 
            This class must me instatiated by calling TeamFoundationServer.GetService() method.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TswaClientHyperlinkService.CompatibleMode">
            <summary>
            Returns true when working with older servers.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TswaClientHyperlinkService.Microsoft#TeamFoundation#Client#ITfsConnectionObject#Initialize(Microsoft.TeamFoundation.Client.TfsConnection)">
            <summary>
            
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TswaClientHyperlinkService.GetUrl(System.String,System.String)">
            <summary>
            Get the template for the location of the specified Tswa service. 
            </summary>
            <param name="serviceType">A Tswa service type.</param>
            <param name="accessMappingMoniker">The moniker for the desired access mapping.</param>
            <returns>The template for the location of the specified Tswa serviceType.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.UIConfig">
            <summary>
            Encapsulate a save/restore mechanism for generic information. For example,
            this is used in saving and restoring the location and dimension
            of a dialog box.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.#ctor(System.String)">
            <summary>
            Create a save/restore manager.
            </summary>
            <param name="configFile">path to the configuration file.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.AddKeyValue(System.String,System.String)">
            <summary>
            Add a key and value pair to the hash. If the key already exists in the
            hash, it is replaced. The key is converted to uppercase.
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.Add(System.String,System.String)">
            <summary>
            Add a key and its string value.
            </summary>
            <param name="key">key, case insensitive. Examples: x, MyDialog.x, MyTable.ColumnA.width</param>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.Add(System.String,System.Int32)">
            <summary>
            Add a key and its int value.
            </summary>
            <param name="key">key, case insensitive. Examples: x, MyDialog.x, MyTable.ColumnA.width</param>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.Add(System.String,System.Drawing.Point)">
            <summary>
            Add a key and a point value. Two keys will be generated: key.x and key.y
            This is convenient for saving a dialog's location.
            </summary>
            <param name="key">key, case insensitive. Examples: MyDialog</param>
            <param name="xy">X and Y</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.Add(System.String,System.Drawing.Size)">
            <summary>
            Add a key and size value. Two keys will be generated: key.width, key.height
            This is convenient for saving a dialog's dimension.
            </summary>
            <param name="key">key, case insensitive. Examples: MyDialog</param>
            <param name="wh">width and height</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.Add(System.String,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Add a key and location and size values. Four keys will be generated: key.x, key.y, key.width,
            key.height. This is convenient for saving a dialog's location and dimension.
            </summary>
            <param name="key">key, case insensitive. Examples: MyDialog</param>
            <param name="xy">X and Y</param>
            <param name="wh">width and height</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.Retrieve(System.String,System.String@)">
            <summary>
            Get the string value associated with the specified key.
            </summary>
            <param name="key">key, case insensitive. Examples: x, MyDialog.x, MyTable.ColumnA.width</param>
            <param name="value">returning string value</param>
            <returns>true indicates matching key found, false for key matched nothing</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.Retrieve(System.String,System.Int32@)">
            <summary>
            Get the int value associated with the specified key.
            </summary>
            <param name="key">key, case insensitive. Examples: x, MyDialog.x, MyTable.ColumnA.width</param>
            <param name="value">returning int value</param>
            <returns>true indicates matching key found, false for key matched nothing</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.Retrieve(System.String,System.Drawing.Point@)">
            <summary>
            Get the X and Y value associated with the specified key.
            </summary>
            <param name="key">key, case insensitive. Examples: MyDialog</param>
            <param name="xy">X and Y</param>
            <returns>true indicates matching key found, false for key matched nothing</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.Retrieve(System.String,System.Drawing.Size@)">
            <summary>
            Get the width and height value associated with the specified key.
            </summary>
            <param name="key">key, case insensitive. Examples: MyDialog</param>
            <param name="wh">width and height</param>
            <returns>true indicates matching key found, false for key matched nothing</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.Retrieve(System.String,System.Drawing.Point@,System.Drawing.Size@)">
            <summary>
            Get the X and Y and width and height value associated with the specified key.
            </summary>
            <param name="key">key, case insensitive. Examples: MyDialog</param>
            <param name="xy">X and Y</param>
            <param name="wh">width and height</param>
            <returns>true indicates matching key found, false for key matched nothing</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.Retrieve(System.Windows.Forms.Form,System.Drawing.Point@,System.Drawing.Size@)">
             <summary>
             Get the X and Y and width and height value associated with the specified form.  It 
             respects a forms sizing ability.  
            
             NOTE: If a form is NOT sizable - wh will be set to Size.Empty.
            
             </summary>
             <param name="key">key, case insensitive. Examples: MyDialog</param>
             <param name="xy">X and Y</param>
             <param name="wh">width and height</param>
             <returns>true indicates matching key found, false for key matched nothing</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.IsFormSizable(System.Windows.Forms.Form)">
             <summary>
             Check to see if a form supports resizing.
            
             </summary>
             <param name="form">form to check</param>
             <returns>true indicates the form is resizable, false if it is not</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.LoadStore">
            <summary>
            Load the restore information from the config file.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.SaveStore">
            <summary>
            Save the current restore information to the config file.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.ConvertHashToXml(System.Xml.XmlDocument)">
            <summary>
            Convert the key/value hash into an XML document.
            </summary>
            <param name="doc">XML document</param>
            <returns>XML document</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.ConvertXmlToHash(System.Xml.XmlDocument)">
            <summary>
            Convert the XML document into the key/value hash.
            </summary>
            <param name="doc">XML document</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.ContentChanged">
            <summary>
            Check to see if the key/value pairs in the store has changed or
            pairs have been added/removed.
            </summary>
            <returns>true for changed, false for unchanged</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.SaveForm(System.Windows.Forms.Form)">
            <summary>
            Convenient method for saving a form's attributes and saving the configuration file as
            needed.
            </summary>
            <param name="form">form</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.SaveWindow(System.Windows.Window)">
            <summary>
            WPF Window version of SaveForm.
            Convenient method for saving a window's attributes and saving the configuration file as
            needed.
            </summary>
            <param name="window">window</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.RestoreWindow(System.Windows.Window)">
            <summary>
            WPF Window version of RestoreForm.
            Convenient method to restore a form's XYWH, if available.
            If the location and dimension are not available, the form
            is centered on its parent (or the screen if no parent) and keeps
            its built-in dimension.
            </summary>
            <param name="window">window</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.RestoreForm(System.Windows.Forms.Form,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.FormStartPosition)">
            <summary>
            Convenient method for restoring a form to a previous XYWH, if available.
            If the location and dimension are not available, the form is displayed
            at the specified default start position, default XY, and default dimension.
            </summary>
            <param name="form">form</param>
            <param name="key">save/restore key used to identify which form</param>
            <param name="defaultX">default X</param>
            <param name="defaultY">default Y</param>
            <param name="defaultWidth">default width</param>
            <param name="defaultHeight">default height</param>
            <param name="defaultStartPosition">default start position</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.RestoreForm(System.Windows.Forms.Form)">
            <summary>
            Convenient method to restore a form's XYWH, if available.
            If the location and dimension are not available, the form
            is centered on its parent (or the screen if no parent) and keeps
            its built-in dimension.
            </summary>
            <param name="form">form</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.RestoreOrCenterForm(System.Windows.Forms.Form,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Restore the form to the specified XYWH. If the specified XYWH is
            completely outside of the visible desktop, center the form to its parent.</summary>
            <param name="form">form</param>
            <param name="xy">XY</param>
            <param name="wh">width and height</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.NeedRelocation(System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Check to see if the specified rect needs to be relocated to be visible
            inside the primary monitor.
            </summary>
            <param name="xy">XY</param>
            <param name="wh">width and height</param>
            <returns>true for rect inside the monitor</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIConfig.WpfNeedRelocation(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Check to see if the specified rect needs to be relocated to be visible
            inside the primary monitor.
            </summary>
            <param name="left">X position</param>
            <param name="top">Y position</param>
            <param name="width">width</param>
            <param name="height">height</param>
            <returns>true for rect inside the monitor</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.DisplayHelp(System.String)">
            <summary>
            Display help in the apropriate mode for the environment.
            </summary>
            <param name="helpTopic">topic to display</param>
            <returns>true if help request was handled</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.ShowModalDialog(System.Windows.Forms.Form)">
            <summary>
            Display a modal dialog.
            </summary>
            <param name="form">dialog to show</param>
            <param name="parent">window to parent to for modality</param>
            <returns>Standard DialogResult return codes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.WriteIndented(Microsoft.TeamFoundation.Client.LogCategory,System.String,System.String)">
            <summary>
            Utility method to print a string where each line is indented (indentation inserted after
            \r\n).
            </summary>
            <param name="indent">indent to include on each line</param>
            <param name="inputString">input string</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.WriteLine(Microsoft.TeamFoundation.Client.LogCategory,System.String,System.Object[])">
            <summary>
            Log/Write a normal output message.
            </summary>
            <param name="category">Indicates the source of the message.</param>
            <param name="messageFormat">The message format specifier to log.</param>
            <param name="args">Arguments for the message format.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.WriteLine(Microsoft.TeamFoundation.Client.LogCategory,System.String)">
            <summary>
            Log/Write a normal output message.
            </summary>
            <param name="category">Indicates the source of the message.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.WriteLine(Microsoft.TeamFoundation.Client.LogCategory)">
            <summary>
            Log/Write a normal output message.
            </summary>
            <param name="category">Indicates the source of the message.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.WriteLine(Microsoft.TeamFoundation.Client.LogFlags,Microsoft.TeamFoundation.Client.LogCategory,System.String,System.Object[])">
            <summary>
            Log/Write an output message and appends a new line.
            </summary>
            <param name="flags">Indicates the importance/severity of the message as well if it should be
                 persisted</param>
            <param name="category">Indicates the source of the message.</param>
            <param name="messageFormat">The message format specifier to log.</param>
            <param name="args">Arguments for the message format.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.WriteLine(Microsoft.TeamFoundation.Client.LogFlags,Microsoft.TeamFoundation.Client.LogCategory,System.String)">
            <summary>
            Log/Write an output message and appends a new line.
            </summary>
            <param name="flags">Indicates the importance/severity of the message as well if it should be
                 persisted</param>
            <param name="category">Indicates the source of the message.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.WriteLine(Microsoft.TeamFoundation.Client.LogFlags,Microsoft.TeamFoundation.Client.LogCategory)">
            <summary>
            Log/Write an output message and appends a new line.
            </summary>
            <param name="flags">Indicates the importance/severity of the message as well if it should be
                 persisted</param>
            <param name="category">Indicates the source of the message.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.Write(Microsoft.TeamFoundation.Client.LogCategory,System.String)">
            <summary>
            Log/Write an output message.
            </summary>
            <param name="category">Indicates the source of the message.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.Write(Microsoft.TeamFoundation.Client.LogCategory,System.String,System.Object[])">
            <summary>
            Log/Write an output message.
            </summary>
            <param name="category">Indicates the source of the message.</param>
            <param name="messageFormat">The message format specifier to log.</param>
            <param name="args">Arguments for the message format.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.Write(Microsoft.TeamFoundation.Client.LogFlags,Microsoft.TeamFoundation.Client.LogCategory,System.String,System.Object[])">
            <summary>
            Log/Write an output message.
            </summary>
            <param name="flags">Indicates the importance/severity of the message as well if it should be
                 persisted</param>
            <param name="category">Indicates the source of the message.</param>
            <param name="messageFormat">The message format specifier to log.</param>
            <param name="args">Arguments for the message format.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.Write(Microsoft.TeamFoundation.Client.LogFlags,Microsoft.TeamFoundation.Client.LogCategory,System.String)">
            <summary>
            Log/Write an output message.
            </summary>
            <param name="flags">Indicates the importance/severity of the message as well if it should be
                 persisted</param>
            <param name="category">Indicates the source of the message.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.EllipsisAtFront(System.String,System.Int32)">
            <summary>
            Utility method to chop a string and provide an ellipsis at the front if needed.
            In the chopping-needed (original string width is over the specified width) case,
            the result will be an ellipsis ("...") followed by the last (width-3) characters of
            the original input string.
            </summary>
            <param name="fullString">full, non-chopped input string</param>
            <param name="fieldWidth">maximum allowed width of the string</param>
            <returns>original string if shorter than max width, otherwise chopped with ellipsis prepended</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.EllipsisAtBack(System.String,System.Int32)">
            <summary>
            Utility method to chop a string and provide an ellipsis at the back if needed.
            In the chopping-needed (original string width is over the specified width) case,
            the result will be the truncated start of the string followed by an ellipsis ("...") 
            </summary>
            <param name="fullString">full, non-chopped input string</param>
            <param name="fieldWidth">maximum allowed width of the string</param>
            <returns>original string if shorter than max width, otherwise chopped with ellipsis appended</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.ShowAndTraceException(System.Exception)">
            <summary>
            Shows and traces and exception.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.ShowException(System.Exception)">
            <summary>
            Show an exception message.
            </summary>
            <param name="parent">window to parent to for modality</param>
            <param name="e">exception object</param>
            <param name="helpTopic">help topic to display</param>
            <param name="caption">message window title</param>
            <returns>Standard DialogResult return codes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.ShowError(System.String,System.String,System.String)">
            <summary>
            Show a message.
            </summary>
            <param name="parent">window to parent to for modality</param>
            <param name="text">message text</param>
            <param name="helpTopic">help topic to display</param>
            <param name="caption">message window title</param>
            <param name="buttons">standard MessageBoxButtons values</param>
            <param name="icon">standard MessageBoxIcon values</param>
            <param name="defaultButton">stanard MessageBoxDefaultButton values</param>
            <returns>Standard DialogResult return codes</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.UIHost.OutputEncoding">
            <summary>
            Provides the display object's character encoding
            </summary>
            <returns>display's character encoding</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.ExtractTFSDisplayName(System.String)">
            <summary>
            In the ETM World we can no longer return the host name like before.
            This makes all collections on the box show the same display name
            
            Now if you attach to the host with no path we use the host.port
            Note: I do not want to use host:port and have people make 
            assumptions this can be used in a URL.
                      
            If there is a path element the URL minus the scheme is returned as the
            display name.
            </summary>
            <param name="url">Url to retrieve the display name from</param>
            <returns>Display name from the URL</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.UpdateCommandStatus">
            <summary>
            Update the status of commands in the UI.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.UIHost.UIConfig">
            <summary>
            Get the stock UIConfig object
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.UIHost.UserRegistryRoot">
            <summary>
            Gets a registry key that can be used to store user data. Whenever possible, using this property is 
            recommended over using Registry.CurrentUser and CurrentVsVersionInformation.RegistryKeyPath. Using the
            latter limits the portability of our code and is not recommended.
            </summary>
            <remarks>
            <para>The UserRegistryRoot property returns a registry key that can be used to store user data. 
            Typically this key points to HKEY_CURRENT_USER\Software\Microsoft\VisualStudio\&lt;version&gt;, but an 
            alternate root can be specified when the Visual Studio shell is initialized.</para>
            <para>The RegistryKey returned by UserRegistryRoot is the registry root for the current user.</para> 
            <para>It is opened as read/write. Always call Close on this key when you are finished using it.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.UIHost.ApplicationRegistryRoot">
            <summary>
            Gets the root registry key of the current Visual Studio registry hive. Whenever possible, using this property is 
            recommended over using Registry.LocalMachine and CurrentVsVersionInformation.RegistryKeyPath. Using the
            latter limits the portability of our code and is not recommended.
            </summary>
            <remarks>
            <para>This property returns the registry root for the application. Typically this is 
            HKLM\Software\Microsoft\VisualStudio\&lt;version&gt; but this can change based on any 
            alternate root that the shell was initialized with.</para>
            <para>The key that is returned is a read-only key and cannot be modified.</para>
            <para>You should close and dispose this key when you are finished using it.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.TryGetUserRegistryRoot">
            <summary>
            Attempts to get the registry key where user settings are read from and written to.
            </summary>
            <returns>The opened registry key, or <c>null</c> if it doesn't exist, or the user doesn't
            have access to the key.</returns>
            <remarks>
            This method is useful if e.g. a client process is running as a service with credentials that do not have
            a profile or registry (e.g. the version control proxy).
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.TryGetApplicationRegistryRoot">
            <summary>
            Attempts to get the registry key of the current Visual Studio registry hive.
            </summary>
            <returns>The opened registry key, or <c>null</c> if it doesn't exist, or the user doesn't
            have access to the key.</returns>
            <remarks>
            This method is useful if e.g. a client process is running as a service with credentials that do not have
            a profile or registry (e.g. the version control proxy).
            </remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.UIHost.Colors">
            <summary>
            Get the list of colors that should be used within Team Foundation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.UIHost.WinformsStyler">
            <summary>
            Get the Winforms styler that should be used within Team Foundation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.UIHost.ConnectedUserContext">
            <summary>
            The context of the connected user associated with the application. The consumer
            of the Team Foundation Client is responsible for setting the correct context.
            If no context is provided, Team Foundation Client will run under the default one.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.OnEnterExitModalState(System.Boolean)">
             <summary>
             This function is called when we are changing UI modal state to let listeners know.
            
             Note that for V1 this have very limited usage.  Currently it's just used in our VSIP 
             implementation and is only used for tracking the modal state of the main UI thread.  
             As such, no effort is being made to support multiple threads.
             </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.UIHost.FileTypeFilter">
            <summary>
            The FileTypeFilter is a string defined like the standard windows wildcard
            matching string All Files (*.*)|*.*...
            
            This should be overriden by a derived class to provide a filter that makes
            sense for a default file filter list.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.UIHost.Instance">
            <summary>
            Get/set the environment specific TeamFoundationRuntimeHost implementation.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.UIHost.SetInstanceInternal(Microsoft.TeamFoundation.Client.TeamFoundationRuntimeHost)">
            <summary>
            Get/set the environment specific TeamFoundationRuntimeHost implementation. This is for testability 
            to allow us to access this variable without firing OnFontChanges, or OnColorChanged events.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IRuntimeHost.ShowMessageBox(System.Windows.Forms.IWin32Window,System.String,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Display a message box.  If no parent is specified then the host will provide a parent.
            </summary>
            <param name="parent">The window to parent the message to.</param>
            <param name="text">The text to display in the error message.</param>
            <param name="helpTopic">The topic to display for help.</param>
            <param name="caption">The error dialog title.</param>
            <param name="buttons">The buttons desired on the dialog.</param>
            <param name="icon">The icon to display.</param>
            <param name="defaultButton">The default button.</param>
            <returns>The result indicated which button the user pressed.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IRuntimeHost.EnableModeless(System.Boolean)">
            <summary>
            Transition to/from modeless (non-modal) operation.  
            Note: that these calls must be balanced.  For every call with enable passed as 'false' there
            must be a corresponding call that passes 'true'.  Use the AutoModal class in a using clause
            for the simplest implementation.
            </summary>
            <param name="enable">false to enter a modal state, true to resume modeless operation.</param>
            <returns>true if the host is able to complete the operation.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IRuntimeHost.DefaultParentWindow">
            <summary>
            Get the environment's default window for parenting.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IRuntimeHost.EnvironmentFlags">
            <summary>
            Flags describing the runtime environment.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.IRuntimeHost.Write(Microsoft.TeamFoundation.Client.LogFlags,Microsoft.TeamFoundation.Client.LogCategory,System.String)">
            <summary>
            Log/Write an output message.
            </summary>
            <param name="flags">Indicates the importance/severity of the message as well if it should be
                 persisted</param>
            <param name="category">Indicates the source of the message.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.IRuntimeHost.OutputEncoding">
            <summary>
            Provides the display object's character encoding
            </summary>
            <returns>display's character encoding</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamFoundationRuntimeHost.OutputEncoding">
            <summary>
            Provides the display object's character encoding
            </summary>
            <returns>display's character encoding</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamFoundationRuntimeHost.DisplayHelp(System.String)">
            <summary>
            Display help for the specified topic.
            </summary>
            <param name="helpTopic">The help topic to display help for.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamFoundationRuntimeHost.ShowModalDialog(System.Windows.Forms.Form,System.Windows.Forms.IWin32Window,System.Boolean)">
            <summary>
            Display a modal dialog for the host.
            </summary>
            <param name="form">The form to display.</param>
            <param name="parent">The parent window for window stack ordering.  When null, the default
                environment window parent is used</param>
            <param name="showHelpButton">Determines what form.HelpButton will be set to.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamFoundationRuntimeHost.HostColors">
            <summary>
            Get the UIHostColors object for this instance.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamFoundationRuntimeHost.WinformsStyler">
            <summary>
            Get the WinformsStyler object for this instance.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.TeamFoundationRuntimeHost.Font">
            <summary>
            Get the environment's default dialog/control font.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamFoundationRuntimeHost.GetWaitCursor">
            <summary>
            Get a new instance of a WaitCursor object that will automatically set/reset the 
            environment's wait cursor.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.TeamFoundationRuntimeHost.UpdateCommandStatus">
            <summary>
            Update the status of commands in the UI.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.BeforeShowDialogEventArgs">
            <summary>
            Allow subscriber access to the dialog before we show it
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.VSColorTable">
            <summary>
            Color table used by the WinForm toolstrip. The original source
            came from Jessica Fosler in the WinForms group. This is the same
            code used by Visual Studio.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.VSColorTable.ColorTable">
            <summary>
            Get the overriding colors for the Luna color scheme.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.VSColorTable.ColorScheme">
            <summary>
            Get the current desktop color scheme.
            </summary>
            <returns>scheme name</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.VSColorTable.UseBaseColorTable">
            <summary>
            Determine whether or not to use the default colors from the XP
            scheme or use the override specified in this ProfessionalColorTable.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.VSColorTable.FromKnownColor(Microsoft.TeamFoundation.Client.VSColorTable.KnownColors)">
            <summary>
            Get the specified known color from the custom color table.
            </summary>
            <param name="color">which color</param>
            <returns>color</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.VSColorTable.InitTanLunaColors(System.Collections.Generic.Dictionary{Microsoft.TeamFoundation.Client.VSColorTable.KnownColors,System.Drawing.Color}@)">
            <summary>
            Colors to override those used in the XP Luna theme.
            </summary>
            <param name="rgbTable"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.VSColorTable.DisplayInformation">
            <summary>
            Handler class used to sign up for desktop scheme changes.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.VSColorTable.KnownColors">
            <summary>
            List of known colors. 
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Win32WindowWrapper">
            <summary>
            Summary description for Win32WindowWrapper.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsHost.ShowMessageBox(System.Windows.Forms.IWin32Window,System.String,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Display a message box.
            </summary>
            <param name="parent">The window to parent the message to.</param>
            <param name="text">The text to display in the error message.</param>
            <param name="helpTopic">The topic to display for help.</param>
            <param name="caption">The error dialog title.</param>
            <param name="buttons">The buttons desired on the dialog.</param>
            <param name="icon">The icon to display.</param>
            <param name="defaultButton">The default button.</param>
            <returns>The result indicated which button the user pressed.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsHost.Write(Microsoft.TeamFoundation.Client.LogFlags,Microsoft.TeamFoundation.Client.LogCategory,System.String)">
            <summary>
            Log an output message.
            </summary>
            <param name="flags">Indicates the importance/severity of the message as well if it should be
                 persisted</param>
            <param name="category">Indicates the source of the message.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.WindowsHost.DefaultParentWindow">
            <summary>
            No default parent window
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.WindowsHost.EnvironmentFlags">
            <summary>
            Flags describing the runtime environment.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.WindowsHost.AppIcon">
            <summary>
            return the default application icon
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsHost.DisplayHelp(System.String)">
            <summary>
            Launch the help viewer for the given help topic. 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.WindowsHost.HostColors">
            <summary>
            Get the UIHostColors object for this instance.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.WindowsHost.WinformsStyler">
            <summary>
            Get the WinformsStyler object for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsHost.ShowModalDialog(System.Windows.Forms.Form,System.Windows.Forms.IWin32Window,System.Boolean)">
            <summary>
            Display a modal dialog a windows application.
            </summary>
            <param name="form">The form to display.</param>
            <param name="parent">The parent window for window stack ordering.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.WindowsHost.Font">
            <summary>
            Use the default windows font.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsHost.OnModalDialogFormActivate(System.Object,System.EventArgs)">
            <summary>
            On form activate for a modal dialog.  We check to see if we are the foreground window and 
            flash the taskbar if we aren't.
            </summary>
            <param name="sender">Form to activate</param>
            <param name="e">Standard event args</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsHost.ShowModalDialogImpl(System.Windows.Forms.Form,System.Windows.Forms.IWin32Window,System.Boolean)">
            <summary>
            Display a modal dialog for the console.
            </summary>
            <param name="form">The form to display.</param>
            <param name="parent">The parent window for window stack ordering.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsHost.DisplayHelpImpl(System.String)">
            <summary>
            Launch the help viewer for the given help topic. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsHost.IsRightToLeft(System.Windows.Forms.IWin32Window)">
            <summary>
            Return true if the passed in window is set to display text RightToLeft.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsHost.ShowMessageBoxImpl(System.Windows.Forms.IWin32Window,System.String,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Display a message box.
            </summary>
            <param name="parent">The window to parent the message to.</param>
            <param name="text">The text to display in the error message.</param>
            <param name="helpTopic">The topic to display for help.</param>
            <param name="caption">The error dialog title.</param>
            <param name="buttons">The buttons desired on the dialog.</param>
            <param name="icon">The icon to display.</param>
            <param name="defaultButton">The default button.</param>
            <returns>The result indicated which button the user pressed.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsHost.GetCaptionFromMessageBoxIcon(System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Tries to deduce a message box caption from its icon.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsHost.WriteImpl(Microsoft.TeamFoundation.Client.LogFlags,Microsoft.TeamFoundation.Client.LogCategory,System.String)">
            <summary>
            Log an output message.
            </summary>
            <param name="flags">Indicates the importance/severity of the message as well if it should be
                 persisted</param>
            <param name="category">Indicates the source of the message.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.WindowsHost.FontImpl">
            <summary>
            Use the default windows font.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsHost.EnterGuiMode">
            <summary>
            Begin displaying errors in Gui mode.  Keep a ref count and stay in Gui mode as long as
            the ref count is positive.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsHost.ExitGuiMode">
            <summary>
            Stop displaying errors in Gui mode.  Keep a ref count and stay in Gui mode as long as
            the ref count is positive.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsHost.Initialize">
            <summary>
            Ensure that we have an instance of the windows host.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsUserPicker.SelectWindowsUsers(Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService,System.IntPtr)">
            <summary>
            Launches the dialog to select Windows users, groups, or computers.  Then converts them to a list of TeamFoundationIdentity objects to be used with the identity service.
            </summary>
            <param name="identityService"></param>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsUserPicker.SelectWindowsUsers(Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService,System.IntPtr,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Launches the dialog to select Windows users, groups, or computers.  Then converts them to a list of TeamFoundationIdentity objects to be used with the identity service.
            </summary>
            <param name="identityService"></param>
            <param name="hWnd"></param>
            <param name="isMultiSelected"></param>
            <param name="allowGroups"></param>
            <param name="includeComputers"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsUserPicker.SelectWindowsUsers(Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService,System.IntPtr,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String}@)">
            <summary>
            Launches the dialog to select Windows users, groups, or computers.  Then converts them to a list of TeamFoundationIdentity objects to be used with the identity service.
            </summary>
            <param name="identityService"></param>
            <param name="hWnd"></param>
            <param name="isMultiSelected"></param>
            <param name="allowGroups"></param>
            <param name="includeComputers"></param>
            <param name="unresolvedIdentities"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.DsScope">
            <summary>
            enum for the scope type
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.DsScopeInitInfo">
            <summary>
            enum for the scope flag
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.DsFilter">
            <summary>
            enum for the uplevel filter
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.DsDownlevelFilter">
            <summary>
            enum for the downlevel filter
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.DSOP_UPLEVEL_FILTER_FLAGS">
            <summary>
             Structure for uplevel filter flags
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.DSOP_FILTER_FLAGS">
            <summary>
            Structure for the filter flags
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.DSOP_SCOPE_INIT_INFO">
            <summary>
            Structure for the scope information
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.DsInitInfo">
            <summary>
            enum for selections in the dialog
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.DSOP_INIT_INFO">
            <summary>
            Structure for the directory object picker method
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.DS_SELECTION">
            <summary>
            Structure for each entry in the return list
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.DS_SELECTION_LIST">
            <summary>
            Structure for the return list
            
            NOTE: the array is handled separately
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.DS_SELECTION_ATTRIBUTES">
            <summary>
            Container for attributes of each selection
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.IDsObjectPicker">
            <summary>
            Interface for the directory object picker.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.DsObjectPicker">
            <summary>
            Object for the directory object picker
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.CLIPFORMAT">
            <summary>
            enum for clipboard format types
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.DVASPECT">
            <summary>
            enum for ?
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.TYMED">
            <summary>
            enum for ?
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.FORMATETC">
            <summary>
            Structure for the format for clipboard information
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.STGMEDIUM">
            <summary>
            Structure for STGMEDIUM
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.IDataObject">
            <summary>
            Interface for return from browse for domains
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.IDsBrowseDomainTree">
            <summary>
            Interface for browse for domains
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.BrowseType">
            <summary>
            enum for types of information in the brwose for folder dialog
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.ObjectPickerWrapper">
            <summary>
            Wrapper class for all common browse dialogs
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsUserPicker.ObjectPickerWrapper.DisplayObjectPicker(System.IntPtr,System.String,System.Boolean,System.UInt32,System.UInt32,System.UInt32,System.String[],System.Int32@,Microsoft.TeamFoundation.Client.WindowsUserPicker.DS_SELECTION[]@,System.Int32@,Microsoft.TeamFoundation.Client.WindowsUserPicker.DS_SELECTION_ATTRIBUTES[]@)">
            <summary>
            Method to display the directory object picker dialog
            </summary>
            <param name="hWnd"></param>
            <param name="machineName"></param>
            <param name="IsMultiSelected"></param>
            <param name="uplevelFilterFlags"></param>
            <param name="downlevelFilterFlags"></param>
            <param name="flType"></param>
            <param name="count"></param>
            <param name="dataArray"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WindowsUserPicker.ObjectPickerWrapper.GetSelectedAccounts(System.IntPtr,System.String,System.Boolean,System.Boolean,System.Boolean,System.String[],System.Int32@,Microsoft.TeamFoundation.Client.WindowsUserPicker.DS_SELECTION[]@,System.Int32@,Microsoft.TeamFoundation.Client.WindowsUserPicker.DS_SELECTION_ATTRIBUTES[]@)">
            <summary>
            Method to get user account from a local machine or the global
            authority
            </summary>
            <param name="hWnd"></param>
            <param name="machineName"></param>
            <param name="IsMultiSelected"></param>
            <param name="AllowGroups"></param>
            <param name="IncludeComputers"></param>
            <param name="attributeNames"></param>
            <param name="count"></param>
            <param name="dataArray"></param>
            <param name="dsAttributesCount"></param>
            <param name="dsAttributes"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WindowsUserPicker.ObjectPickerWrapper.MarshalStrings">
            <summary>
            Helper class for marshalling array of strings.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.AccessControlService">
            <summary>
            The Access Control Service
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlService.ProvisionServiceIdentity">
            <summary>
            Provision the default service identity
            </summary>
            <returns>The provisioned service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlService.ProvisionServiceIdentity(System.String)">
            <summary>
            Provision a service identity with the given name
            </summary>
            <param name="serviceIdentityName">The service identity name</param>
            <returns>The provisioned service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlService.ProvisionServiceIdentity(System.String,System.String)">
            <summary>
            Provisions a service identity with the given name and password
            </summary>
            <param name="serviceIdentityName">The service identity name</param>
            <param name="password">The service identity password</param>
            <returns>The provisioned service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlService.ProvisionServiceIdentity(System.String,System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor[])">
            <summary>
            Provisions a service identity with the given name and password.
            Adds the service identity to the given groups.
            </summary>
            <param name="serviceIdentityName">The service identity name</param>
            <param name="password">The service identity password</param>
            <param name="addToGroups">The groups to add the provisioned service identity to</param>
            <returns>The provisioned service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlService.ProvisionServiceIdentity(Microsoft.TeamFoundation.Framework.Client.ServiceIdentityInfo)">
            <summary>
            Provisions a service identity with the given info
            </summary>
            <param name="identityInfo">The service identity info</param>
            <returns>The service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlService.ProvisionServiceIdentity(Microsoft.TeamFoundation.Framework.Client.ServiceIdentityInfo,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor[])">
            <summary>
            Provisions a service identity with the given info.
            Adds the service identity to the given groups.
            </summary>
            <param name="identityInfo">The service identity info</param>
            <param name="addToGroups">The groups to add the provisioned service identity to</param>
            <returns>The provisioned service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlService.QueryServiceIdentity(System.Guid)">
            <summary>
            Queries the service identity with the given Id
            </summary>
            <param name="serviceIdentityId">The team foundation id of the service identity</param>
            <returns>The service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlService.QueryServiceIdentity(System.Guid,System.Boolean)">
            <summary>
            Queries the service identity with the given Id.
            Optionally includes membership details.
            </summary>
            <param name="serviceIdentityId">The team foundation id of the service identity</param>
            <param name="includeMemberships">Whether or not to include membership details</param>
            <returns>The service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlService.QueryServiceIdentities(System.Guid[],System.Boolean)">
            <summary>
            Queries the service identities with the given Ids.
            Optionally includes membership details.
            </summary>
            <param name="serviceIdentityId">The team foundation ids of the service identities</param>
            <param name="includeMemberships">Whether or not to include membership details</param>
            <returns>The service identities</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlService.QueryServiceIdentity(System.String)">
            <summary>
            Queries the service identity with the given name.
            </summary>
            <param name="serviceIdentityName">The service identity name.</param>
            <returns>The service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlService.QueryServiceIdentity(System.String,System.Boolean)">
            <summary>
            Queries the service identity with the given name.
            Optionally includes membership details.
            </summary>
            <param name="serviceIdentityName">The service identity name</param>
            <param name="includeMemberships">Whether or not to include membership details</param>
            <returns>The service identities</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlService.QueryServiceIdentities(System.String[],System.Boolean)">
            <summary>
            Queries the service identities with the given names.
            Optionally includes membership details.
            </summary>
            <param name="serviceIdentityNames">The service identity names</param>
            <param name="includeMemberships">Whether or not to include membership details</param>
            <returns>The service identities</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlService.DeleteServiceIdentity(Microsoft.TeamFoundation.Framework.Client.ServiceIdentity)">
            <summary>
            Deletes the given service identity
            </summary>
            <param name="serviceIdentity">The service identity to delete</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlService.DeleteServiceIdentity(System.Guid)">
            <summary>
            Deletes the service identity with the given Id.
            </summary>
            <param name="serviceIdentityId">The team foundation id of the service identity to delete</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.IAccessControlService">
            <summary>
            The Access Control Service
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAccessControlService.ProvisionServiceIdentity">
            <summary>
            Provision the default service identity
            </summary>
            <returns>The provisioned service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAccessControlService.ProvisionServiceIdentity(System.String)">
            <summary>
            Provision a service identity with the given name
            </summary>
            <param name="serviceIdentityName">The service identity name</param>
            <returns>The provisioned service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAccessControlService.ProvisionServiceIdentity(System.String,System.String)">
            <summary>
            Provisions a service identity with the given name and password
            </summary>
            <param name="serviceIdentityName">The service identity name</param>
            <param name="password">The service identity password</param>
            <returns>The provisioned service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAccessControlService.ProvisionServiceIdentity(System.String,System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor[])">
            <summary>
            Provisions a service identity with the given name and password.
            Adds the service identity to the given groups.
            </summary>
            <param name="serviceIdentityName">The service identity name</param>
            <param name="password">The service identity password</param>
            <param name="addToGroups">The groups to add the provisioned service identity to</param>
            <returns>The provisioned service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAccessControlService.ProvisionServiceIdentity(Microsoft.TeamFoundation.Framework.Client.ServiceIdentityInfo)">
            <summary>
            Provisions a service identity with the given info
            </summary>
            <param name="identityInfo">The service identity info</param>
            <returns>The service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAccessControlService.ProvisionServiceIdentity(Microsoft.TeamFoundation.Framework.Client.ServiceIdentityInfo,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor[])">
            <summary>
            Provisions a service identity with the given info.
            Adds the service identity to the given groups.
            </summary>
            <param name="identityInfo">The service identity info</param>
            <param name="addToGroups">The groups to add the provisioned service identity to</param>
            <returns>The provisioned service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAccessControlService.QueryServiceIdentity(System.Guid)">
            <summary>
            Queries the service identity with the given Id
            </summary>
            <param name="serviceIdentityId">The team foundation id of the service identity</param>
            <returns>The service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAccessControlService.QueryServiceIdentity(System.Guid,System.Boolean)">
            <summary>
            Queries the service identity with the given Id.
            Optionally includes membership details.
            </summary>
            <param name="serviceIdentityId">The team foundation id of the service identity</param>
            <param name="includeMemberships">Whether or not to include membership details</param>
            <returns>The service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAccessControlService.QueryServiceIdentities(System.Guid[],System.Boolean)">
            <summary>
            Queries the service identities with the given Ids.
            Optionally includes membership details.
            </summary>
            <param name="serviceIdentityId">The team foundation ids of the service identities</param>
            <param name="includeMemberships">Whether or not to include membership details</param>
            <returns>The service identities</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAccessControlService.QueryServiceIdentity(System.String)">
            <summary>
            Queries the service identity with the given name.
            </summary>
            <param name="serviceIdentityName">The service identity name.</param>
            <returns>The service identity</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAccessControlService.QueryServiceIdentity(System.String,System.Boolean)">
            <summary>
            Queries the service identity with the given name.
            Optionally includes membership details.
            </summary>
            <param name="serviceIdentityName">The service identity name</param>
            <param name="includeMemberships">Whether or not to include membership details</param>
            <returns>The service identities</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAccessControlService.QueryServiceIdentities(System.String[],System.Boolean)">
            <summary>
            Queries the service identities with the given names.
            Optionally includes membership details.
            </summary>
            <param name="serviceIdentityNames">The service identity names</param>
            <param name="includeMemberships">Whether or not to include membership details</param>
            <returns>The service identities</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAccessControlService.DeleteServiceIdentity(Microsoft.TeamFoundation.Framework.Client.ServiceIdentity)">
            <summary>
            Deletes the given service identity
            </summary>
            <param name="serviceIdentity">The service identity to delete</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAccessControlService.DeleteServiceIdentity(System.Guid)">
            <summary>
            Deletes the service identity with the given Id.
            </summary>
            <param name="serviceIdentityId">The team foundation id of the service identity to delete</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ServiceIdentityInfo">
            <summary>
            Represents information about a service identity
            </summary>
            <summary>
            The service identity information
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ServiceIdentityInfo.#ctor(System.String)">
            <summary>
            Create a service identity info with the given name
            </summary>
            <param name="name">The name of the service idenitty</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ServiceIdentityInfo.#ctor(System.String,System.String)">
            <summary>
            Create a service identity info with the given name and password
            </summary>
            <param name="name">The name of the service identity</param>
            <param name="password">The password of the service identity</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServiceIdentityInfo.Name">
            <summary>
            The name of the service identity
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServiceIdentityInfo.Password">
            <summary>
            The password for the service identity
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogChangeContext.#ctor(Microsoft.TeamFoundation.Framework.Client.CatalogService,Microsoft.TeamFoundation.Framework.Client.CatalogWebService)">
            <summary>
            Constructs a change context to work against the provided
            catalog proxy.
            </summary>
            <param name="catalogService">The catatlog service for this change
            context.</param>
            <param name="catalogProxy">The proxy that should be use
            to save changes.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogChangeContext.AttachResource(Microsoft.TeamFoundation.Framework.Client.CatalogResource)">
            <summary>
            Adds this resource to the change context.  It will be sent
            to the server when Save() is called. Note that service
            definitions that exist as service references will be created
            if they are new and updated if they are not.
            </summary>
            <param name="resource">The resource to update.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogChangeContext.AttachNode(Microsoft.TeamFoundation.Framework.Client.CatalogNode)">
            <summary>
            Adds this node to the change context.  It will be sent to
            the server when Save() is called.  This will also
            add the resource that this node points to to the current
            change context.
            </summary>
            <param name="node">The node to create or update.</param>
            <param name="merge">If true, all properties and ServiceDefinitions
            of the existing resource will remain or be updated if new 
            properties overwrite them.  If merge is false, all properties 
            and service definitions associated with the existing resource
            will be deleted and it will be assumed that the provided 
            resource contains all of the desired properties and 
            ServiceDefinitions.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogChangeContext.AttachDelete(Microsoft.TeamFoundation.Framework.Client.CatalogNode,System.Boolean)">
            <summary>
            Adds this node deletion to the change context.  It will be sent
            to the server when Save() is called.
            </summary>
            <param name="node">The node to delete.</param>
            <param name="recurse">If this is true then the children of the
            nodes being deleted will also be deleted.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogChangeContext.AttachMove(Microsoft.TeamFoundation.Framework.Client.CatalogNode,Microsoft.TeamFoundation.Framework.Client.CatalogNode)">
            <summary>
            Adds this move to the change context.  It will be sent to the
            server when Save() is called.  Note that if nodeToMove or newParent
            also have updated properties then those will be committed as well.
            Any node that is explicitly moved will have IsDefault set to 0.
            </summary>
            <param name="nodeToMove">The node to move.</param>
            <param name="newParent">The new parent for the node to move.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogChangeContext.Save">
            <summary>
            Commits all of the changes to the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogChangeContext.Preview">
            <summary>
            Previews the changes that would be saved.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogChangeContext.SaveInternal(System.Boolean)">
            <summary>
            Performs either the save or the preview.
            </summary>
            <param name="preview"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.CatalogChangeContext.m_resources">
            <summary>
            The resource changes/deletes to send to the server when Save is called.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.CatalogChangeContext.m_nodes">
            <summary>
            The node changes/deletes to send to the server when Save is called.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.CatalogChangeContext.m_moves">
            <summary>
            The move operations to perform
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.CatalogChangeContext.m_catalogService">
            <summary>
            The catalog service this context is associated with.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.CatalogChangeContext.m_catalogProxy">
            <summary>
            Reference to the web service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogChangeResult.DeletedNodes">
            <summary>
            The nodes that were deleted by the operation or would
            have been if this was a preview.  Note that
            resources returned here do not have their properties
            or service definitions attached.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogChangeResult.DeletedResources">
            <summary>
            The resources that were deleted by the operation or
            would have been if this was a preview.  Note that
            resources returned here do not have their properties
            or service definitions attached.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogNode.ParentNode">
            <summary>
            The parent node of this node if parent nodes were included in the
            query options that this catalog node was built from.  Otherwise,
            this value is null.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogNode.ParentPath">
            <summary>
            The path to this node's parent.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogNode.FullPath">
            <summary>
            The fully qualified path that represents this node's place in the 
            hierarchy.  This value uniquely identifies a catalog node.  The
            path itself is generated through the creation of the node and is
            not necessarily human readable.  Note that this value is not 
            valid until the node has been saved in the catalog service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogNode.Resource">
            <summary>
            The referenced catalog resource.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogNode.IsDefault">
            <summary>
            True if this node represents the default resource for its type at 
            this level.  Only one resource of a given type can be marked default 
            for a given parent.  If a node is being saved as default it will 
            remove the default property from the current defualt of this type.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogNode.CreateChild(System.Guid,System.String)">
            <summary>
            Factory method for creating a node with a new resource.
            This does not persist the node or the resource.
            </summary>
            <param name="resourceTypeIdentifier">The resource type that 
            describes the resource being created.</param>
            <param name="resourceDisplayName">The display name for the resource
            being created.</param>
            <returns>The constructed node with the attached resource.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogNode.CreateChild(Microsoft.TeamFoundation.Framework.Client.CatalogResource)">
            <summary>
            Factory method for creating a node and attaching a new resource.
            </summary>
            <param name="existingResource">The resource to associate with the node.</param>
            <returns>The constructed node with the attached resource.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogNode.QueryChildren(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Returns the children for this node.  This function will call the web
            service.
            </summary>
            <param name="resourceTypeFilters">The list of types that this query 
            should include.  If this is null or empty, all types will be 
            included.</param>
            <param name="recurse">True if this should recurse for all of this
            nodes children.</param>
            <returns>The children of this node that meet the filter and recurse
            requirements.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogNode.QueryChildren(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean,Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Returns the children for this node.  This function will call the web
            service.
            </summary>
            <param name="resourceTypeFilters">The list of types that this query 
            should include.  If this is null or empty, all types will be 
            included.</param>
            <param name="propertyFilters">The set of property filters to apply
            to the nodes found.  Matches will be based on both the key and
            the value of the property matching.  If the value of a certain
            filter is null or empty then it will be assumed that all nodes with
            the supplied property should be returned.  A match consists of
            a node/resource that matches all of the propertyFilters</param>
            <param name="recurse">True if this should recurse for all of this
            nodes children.</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns>The children of this node that meet the filter and recurse
            requirements.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogNode.QueryParents(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Returns the parents of this node.  This function will call the web
            service.
            </summary>
            <param name="resourceTypeFilters">The list of types that this query 
            should include.  If this is null or empty, all types will be 
            included.</param>
            <param name="recurseToRoot">If true, this query will retrieve all
            parent nodes until the root.  If it is false, it will only retrieve
            the direct parent of this node.</param>
            <returns>The parent nodes of this node.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogNode.QueryDependents(Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Returns all of the nodes that depend on this nodes existence.
            </summary>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns>All of the nodes that depend on this nodes existence.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogNode.Dependencies">
            <summary>
            The set of nodes that this node is dependent on.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogNode.CatalogTree">
            <summary>
            The Catalog tree that this node lives in.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogNode.ExpandDependencies">
            <summary>
            Calls to the server to populate the dependencies property
            on this object.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogNode.CatalogService">
            <summary>
            Reference to the catalog service that this node is associated with.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogNode.ChangeType">
            <summary>
            Expresses the change that has occured on this item
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogNode.UpdateSelf(Microsoft.TeamFoundation.Framework.Client.CatalogNode)">
            <summary>
            Updates this node with the properties of the node passed in.
            </summary>
            <param name="updatedNode">The node with the updated properties.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogNode.InitializeFromWebService(Microsoft.TeamFoundation.Framework.Client.CatalogService)">
            <summary>
            Initializes the object from the data from the web service.
            </summary>
            <param name="catalogService">The catalog service reference.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogNode.PrepareForWebServiceSerialization(Microsoft.TeamFoundation.Framework.Client.CatalogNode)">
            <summary>
            Prepares the node to be serialized over the web service.
            </summary>
            <param name="node">The node to prepare for serialization</param>
            <returns>The node that is ready to be serailized.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogDependencyGroup.GetAllDependencies">
            <summary>
            Returns all of the nodes that are dependencies.  This is not a distinct set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogDependencyGroup.SetSingletonDependency(System.String,Microsoft.TeamFoundation.Framework.Client.CatalogNode)">
            <summary>
            Sets the singleton dependency for the given node with the key.
            This will add the dependency if it is not present and overwrite
            it if it is.
            </summary>
            <param name="key">The key for this dependency.</param>
            <param name="node">The node the dependency is set on.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogDependencyGroup.RemoveSingletonDependency(System.String)">
            <summary>
            Removes the node dependency with the given key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogDependencyGroup.GetSingletonDependency(System.String)">
            <summary>
            Returns the CatalogNode that is a dependency of this node
            that is associated with the given key.  If the key does
            not associate with a given dependency then null will be 
            returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogDependencyGroup.Singletons">
            <summary>
            The set of singleton dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogDependencyGroup.AddSetDependency(System.String,Microsoft.TeamFoundation.Framework.Client.CatalogNode)">
            <summary>
            Adds the CatalogNode to the dependency set that has the
            provided key.
            </summary>
            <param name="key"></param>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogDependencyGroup.RemoveSetDependency(System.String)">
            <summary>
            Removes the entire dependency set that is associated with the
            given key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogDependencyGroup.RemoveSetDependency(System.String,Microsoft.TeamFoundation.Framework.Client.CatalogNode)">
            <summary>
            Removes the provided node from the dependency set
            that is associated with the given key.
            </summary>
            <param name="key"></param>
            <param name="nodeFullPath"></param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogDependencyGroup.Sets">
            <summary>
            The set of the dependency sets.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogDependencyGroup.GetDependencySet(System.String)">
            <summary>
            Returns the dependency set that is associated with the given
            key.  If no dependency set exists for the given key then an
            empty enumeration will be returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogDependencyGroup.ClearSingletonDependencies">
            <summary>
            Clears the singleton dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogDependencyGroup.ClearDependencySets">
            <summary>
            Clears the dependency sets.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.CatalogDependencyGroup.m_singletons">
            <summary>
            Holds the singleton dependencies. A singleton dependency
            is a dependency that can have one node per key.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.CatalogDependencyGroup.m_sets">
            <summary>
            Holds the dependency sets. A dependency set is a dependency
            that can have one or more nodes per key.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogResource.#ctor(System.String,Microsoft.TeamFoundation.Framework.Client.CatalogResourceType)">
            <summary>
            Creates a catalog resource from the values supplied
            </summary>
            <param name="displayName"></param>
            <param name="resourceType"></param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogResource.Identifier">
            <summary>
            This uniquely identifies a resource within the system.  Note
            that this value will not be valid until the resource has been
            saved in the catalog service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogResource.DisplayName">
            <summary>
            This is a user defined display name for the resource 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogResource.Description">
            <summary>
            User defined description for the resource.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogResource.ResourceType">
            <summary>
            The reference to the type of this resource.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogResource.Properties">
            <summary>
            Returns the set of properties that exist on this resource.  
            </summary>
            <remarks>We are looking at using the properties feature crew
            work to support these properties if the timing works out.</remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogResource.ServiceReferences">
            <summary>
            Returns the set of service definitions associated with this 
            resource. If a service definition has been deleted that is 
            referenced by a catalog resource then the key will have
            an entry that has a value of null.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogResource.NodeReferences">
            <summary>
            The collection of catalog node paths that reference this resource.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogResource.TempCorrelationId">
            <summary>
            Allows us to correlate resources that are being created over the
            web service call.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogResource.ChangeType">
            <summary>
            Expresses the change that has occured on this item
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogResource.UpdateSelf(Microsoft.TeamFoundation.Framework.Client.CatalogResource)">
            <summary>
            Update all of this resource's properties with the properties
            of the resource passed in.
            </summary>
            <param name="updatedResource">The resource with the updated
            properties.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogResource.InitializeFromWebService(System.Collections.Generic.Dictionary{System.Guid,Microsoft.TeamFoundation.Framework.Client.CatalogResourceType},System.Collections.Generic.Dictionary{System.String,Microsoft.TeamFoundation.Framework.Client.CatalogNode},Microsoft.TeamFoundation.Framework.Client.ILocationService)">
            <summary>
            Initializes the resource from the data retrieved from the web service.
            </summary>
            <param name="resourceTypes">The resource types available from the web service.</param>
            <param name="nodes">The nodes returned from the web service.</param>
            <param name="locationService">The location service this node will find its
            service definition references on.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogResource.PrepareForWebServiceSerialization(Microsoft.TeamFoundation.Framework.Client.CatalogResource)">
            <summary>
            Prepares the class for web service serialization by making sure that
            all data that will get serialized matches the data that is set on this
            object.
            </summary>
            <param name="resource">The resource to prepare.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogResourceType.Identifier">
            <summary>
            String moniker that uniquely defines this resource type.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogResourceType.DisplayName">
            <summary>
            Display name that is used for this type.  
            </summary>
            <remarks>To be used if we ever provide a way in the UI to select 
            what filters should be applied to the tree.</remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogResourceType.Description">
            <summary>
            Description for the resource type.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.#ctor(Microsoft.TeamFoundation.Client.TfsConfigurationServer)">
            <summary>
            Creates a catalog service instance for the supplied server.
            </summary>
            <param name="server">The server the catalog service is on.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.QueryResourceTypes(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns the resource types for all of the specified identifiers.
            If null or an empty list is passed in, all resource types will be
            returned.
            </summary>
            <param name="resourceTypeIdentifiers">Identifiers for the resource
            types that should be returned.  If this has a value of null or
            empty, all resource types will be returned.</param>
            <returns>Resource types for the requested identifiers.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.QueryResources(System.Collections.Generic.IEnumerable{System.Guid},Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Returns the resource that is associated with the identifier.
            </summary>
            <param name="resourceIdentifiers">The identifiers for the resources
            that are being search for.</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns>The resources with the specified identifiers.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.QueryResourcesByType(System.Collections.Generic.IEnumerable{System.Guid},Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Retuns all of the catalog resources of the prvodied type.  If 
            Guid.Empty is passed in, all resources are returned.
            </summary>
            <param name="resourceTypeIdentifier">The identifier for the type of 
            resource to filter on.</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.QueryResources(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Retuns all of the catalog resources of the prvodied type.  If 
            Guid.Empty is passed in, all resources are returned.
            </summary>
            <param name="resourceTypeIdentifier">The identifier for the type of 
            resource to filter on.</param>
            <param name="propertyFilters">The set of property filters to apply
            to the resource found.  Matches will be based on both the key and
            the value of the property matching.  If the value of a certain
            filter is null or empty then it will be assumed that all resource with
            the supplied property should be returned.  A match consists of
            a resource that matches all of the propertyFilters</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.QueryUpTree(System.String,System.Collections.Generic.IEnumerable{System.Guid},Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Queries "up" the tree from the provided path looking for the 
            provided types in its parent nodes' children. If the path is 
            "TFSInstance1/PG1/TPC1/TP1" this query will be translated 
            into a series of QueryNodes calls that have the following pathSpecs:
            
            "TFSInstance1/*"
            "TFSInstance1/PG1/*"
            "TFSInstance1/PG1/TPC1/*"
            
            An example of when this could be used is when a ReportingSite
            is being added to a node and it must find the ReportServer that
            is a child of one of its parent nodes.
            </summary>
            <param name="path">The path of the item from where the "up" query
            should originate.  Wildcards cannot be used in this path.</param>
            <param name="resourceTypeFilters">The list of types that this query 
            should include.  If this is null or empty, all types will be 
            included.</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns>The catalog nodes that match the specified query.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.QueryParents(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Returns the nodes for the resource provided as well as the parents.
            The direct nodes and the parent nodes will not be returned if they
            are filtered out.  For the following tree: 
            
                                    PG1
                                   /   \
                                PG2    PG3
                               /   \      \
                             TPC1  TPC2   TPC3
                            /    \
                          TP1    TP2 
                
            Query for TP1's identifier with no filters and recursing to the 
            root would yeild TP1, TPC1, PG2 and PG1.
            </summary>
            <param name="resourceIdentifier">The identifier for the resource
            who's parents are being queried.  The resource and its nodes will
            only be returned if they are not filtered out</param>
            <param name="pathFilters">Nodes will only be returned if
            they live under one of the paths provided here.  If this value is
            null or empty it will be assumed that parents from all places
            within the tree are valid.</param>
            <param name="resourceTypeFilters">The list of types that this query 
            should include.  If this is null or empty, all types will be 
            included.</param>
            <param name="recurseToRoot">If this is true then parent nodes will
            be enumerated all the way to the root.  If this is false then only
            the first level of parents will be returned.</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns>The nodes for the resource provided as well as the parents
            of those nodes that apply to the provided filters.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.QueryNodes(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Guid},Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Returns the catalog nodes that exist below the parentPath and have 
            a type that is listed in resourceTypeFilters.
            </summary>
            <param name="pathSpecs">The paths of the element or elements
            that are being searched for.  This path can contain the wildcards
            "*", "**" and "..." where "*" means one-level and "**" and "..." 
            means any number of levels.</param>
            <param name="resourceTypeFilters">The list of types that this query 
            should include.  If this is null or empty, all types will be 
            included.</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns>The catalog nodes that exist below the parentPath and have
            a type that is listed in resourceTypeFilters.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.QueryNodes(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Returns the catalog nodes that exist below the parentPath and have 
            a type that is listed in resourceTypeFilters.
            </summary>
            <param name="pathSpecs">The paths of the element or elements
            that are being searched for.  This path can contain the wildcards
            "*", "**" and "..." where "*" means one-level and "**" and "..." 
            means any number of levels.</param>
            <param name="resourceTypeFilters">The list of types that this query 
            should include.  If this is null or empty, all types will be 
            included.</param>
            <param name="propertyFilters">The set of property filters to apply
            to the nodes found.  Matches will be based on both the key and
            the value of the property matching.  If the value of a certain
            filter is null or empty then it will be assumed that all nodes with
            the supplied property should be returned.  A match consists of
            a node/resource that matches all of the propertyFilters</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns>The catalog nodes that exist below the parentPath and have
            a type that is listed in resourceTypeFilters.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.QueryDependents(System.String,Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Returns all of the nodes that depend on the nodes existence.
            </summary>
            <param name="path">The path whose dependents are being queried.</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns>All of the nodes that depend on the nodes existence.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogService.RootNodes">
            <summary>
            Returns the root nodes in the tree.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.QueryRootNode(Microsoft.TeamFoundation.Framework.Common.CatalogTree)">
            <summary>
            Returns the specified root node.  Well-known root paths can be
            found in Microsoft.TeamFoundation.Framework.Common.Catalog.CatalogTree.
            </summary>
            <param name="tree">The tree of the desired root.
            </param>
            <returns>The CatalogNode for the tree.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.SaveResource(Microsoft.TeamFoundation.Framework.Client.CatalogResource)">
            <summary>
            Saves the updated resource in the catalog.  Note that service
            definitions that exist as service references will be created
            if they are new and updated if they are not.
            </summary>
            <param name="resource">The resource to update.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.SaveNode(Microsoft.TeamFoundation.Framework.Client.CatalogNode)">
            <summary>
            Saves the updated node and its resource in the catalog.
            </summary>
            <param name="node">The node that has been created or updated.
            </param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.SaveDelete(Microsoft.TeamFoundation.Framework.Client.CatalogNode,System.Boolean)">
            <summary>
            Deletes this node from the catalog.  If this node is the only
            node that points to the resource it points to then this resource
            will also be deleted.
            </summary>
            <param name="node">The node to delete.</param>
            <param name="recurse">True if the children nodes of this
            node should be deleted.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.SaveMove(Microsoft.TeamFoundation.Framework.Client.CatalogNode,Microsoft.TeamFoundation.Framework.Client.CatalogNode)">
            <summary>
            Adds this move to the change context.  It will be sent to the
            server when Save() is called.  Note that if nodeToMove or newParent
            also have updated properties then those will be committed as well.
            Any node that is explicitly moved will have IsDefault set to 0.
            </summary>
            <param name="nodeToMove">The node to move under the 
            newParent.</param>
            <param name="newParent">The newParent to place nodeToMove 
            under.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.CreateChangeContext">
            <summary>
            Creates a change context in which many changes can be batched 
            together.
            </summary>
            <returns>A change context in which many changes can be batched
            together.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogService.LocationService">
            <summary>
            Returns the location service that this catalog uses for its 
            service definition references
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.CatalogService.BuildCatalogObjects(System.Int32,Microsoft.TeamFoundation.Framework.Client.CatalogResource[],Microsoft.TeamFoundation.Framework.Client.CatalogNode[],Microsoft.TeamFoundation.Framework.Client.CatalogResourceType[],Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions,System.Collections.Generic.List{Microsoft.TeamFoundation.Framework.Client.CatalogResource}@,System.Collections.Generic.List{Microsoft.TeamFoundation.Framework.Client.CatalogNode}@)">
            <summary>
            Builds resources from the CatalogData object.
            </summary>
            <param name="resources">The resources to use when building these resources.</param>
            <param name="nodes">The nodes to use when building these resources.</param>
            <param name="types">The types to use when building thses resources.</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <param name="matchingResources">The resources that matched the query.</param>
            <param name="matchingNodes">The nodes that matched the query.</param>
            <returns>The constructed and initialized resources that could be
            built from the CatalogData object.</returns>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.CatalogService.m_resourceTypes">
            <summary>
            Cache for the resource types.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.CatalogService.m_server">
            <summary>
            The server the catalog is running on.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.CatalogService.m_catalogProxy">
            <summary>
            Catalog proxy for talking to the web service.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ICatalogService.QueryResourceTypes(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns the resource types for all of the specified identifiers.
            If null or an empty list is passed in, all resource types will be
            returned.
            </summary>
            <param name="resourceTypeIdentifiers">Identifiers for the resource
            types that should be returned.  If this has a value of null or
            empty, all resource types will be returned.</param>
            <returns>Resource types for the requested identifiers.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ICatalogService.QueryResources(System.Collections.Generic.IEnumerable{System.Guid},Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Returns the resource that is associated with the identifier.
            </summary>
            <param name="resourceIdentifiers">The identifiers for the resources
            that are being search for.</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns>The resources with the specified identifiers.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ICatalogService.QueryResourcesByType(System.Collections.Generic.IEnumerable{System.Guid},Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Retuns all of the catalog resources of the prvodied type.  If 
            Guid.Empty is passed in, all resources are returned.
            </summary>
            <param name="resourceTypeIdentifier">The identifier for the type of 
            resource to filter on.</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ICatalogService.QueryResources(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Retuns all of the catalog resources of the prvodied type.  If 
            Guid.Empty is passed in, all resources are returned.
            </summary>
            <param name="resourceTypeIdentifier">The identifier for the type of 
            resource to filter on.</param>
            <param name="propertyFilters">The set of property filters to apply
            to the resource found.  Matches will be based on both the key and
            the value of the property matching.  If the value of a certain
            filter is null or empty then it will be assumed that all resource with
            the supplied property should be returned.  A match consists of
            a resource that matches all of the propertyFilters</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ICatalogService.QueryUpTree(System.String,System.Collections.Generic.IEnumerable{System.Guid},Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Queries "up" the tree from the provided path looking for the 
            provided types in its parent nodes' children. If the path is 
            "TFSInstance1/PG1/TPC1/TP1" this query will be translated 
            into a series of QueryNodes calls that have the following pathSpecs:
            
            "TFSInstance1/*"
            "TFSInstance1/PG1/*"
            "TFSInstance1/PG1/TPC1/*"
            
            An example of when this could be used is when a ReportingSite
            is being added to a node and it must find the ReportServer that
            is a child of one of its parent nodes.
            </summary>
            <param name="path">The path of the item from where the "up" query
            should originate.  Wildcards cannot be used in this path.</param>
            <param name="resourceTypeFilters">The list of types that this query 
            should include.  If this is null or empty, all types will be 
            included.</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns>The catalog nodes that match the specified query.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ICatalogService.QueryParents(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Returns the nodes for the resource provided as well as the parents.
            The direct nodes and the parent nodes will not be returned if they
            are filtered out.  For the following tree: 
            
                                    PG1
                                   /   \
                                PG2    PG3
                               /   \      \
                             TPC1  TPC2   TPC3
                            /    \
                          TP1    TP2 
                
            Query for TP1's identifier with no filters and recursing to the 
            root would yeild TP1, TPC1, PG2 and PG1.
            </summary>
            <param name="resourceIdentifier">The identifier for the resource
            who's parents are being queried.  The resource and its nodes will
            only be returned if they are not filtered out</param>
            <param name="pathFilters">Nodes will only be returned if
            they live under one of the paths provided here.  If this value is
            null or empty it will be assumed that parents from all places
            within the tree are valid.</param>
            <param name="resourceTypeFilters">The list of types that this query 
            should include.  If this is null or empty, all types will be 
            included.</param>
            <param name="recurseToRoot">If this is true then parent nodes will
            be enumerated all the way to the root.  If this is false then only
            the first level of parents will be returned.</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns>The nodes for the resource provided as well as the parents
            of those nodes that apply to the provided filters.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ICatalogService.QueryNodes(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Guid},Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Returns the catalog nodes that exist below the parentPath and have 
            a type that is listed in resourceTypeFilters.
            </summary>
            <param name="pathSpecs">The paths of the element or elements
            that are being searched for.  This path can contain the wildcards
            "*", "**" and "..." where "*" means one-level and "**" and "..." 
            means any number of levels.</param>
            <param name="resourceTypeFilters">The list of types that this query 
            should include.  If this is null or empty, all types will be 
            included.</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns>The catalog nodes that exist below the parentPath and have
            a type that is listed in resourceTypeFilters.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ICatalogService.QueryNodes(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions)">
            <summary>
            Returns the catalog nodes that exist below the parentPath and have 
            a type that is listed in resourceTypeFilters.
            </summary>
            <param name="pathSpecs">The paths of the element or elements
            that are being searched for.  This path can contain the wildcards
            "*", "**" and "..." where "*" means one-level and "**" and "..." 
            means any number of levels.</param>
            <param name="resourceTypeFilters">The list of types that this query 
            should include.  If this is null or empty, all types will be 
            included.</param>
            <param name="propertyFilters">The set of property filters to apply
            to the nodes found.  Matches will be based on both the key and
            the value of the property matching.  If the value of a certain
            filter is null or empty then it will be assumed that all nodes with
            the supplied property should be returned.  A match consists of
            a node/resource that matches all of the propertyFilters</param>
            <param name="queryOptions">If ExpandDependencies is specified, the Dependencies property
            on nodes will contain the nodes they are dependent on.  If IncludeParents is specified,
            the ParentNode property on the CatalogNode will contain the parent node.  Leaving
            a given option will result in the returned catalog nodes to have null for that
            value. Extra data should only be retrieved if it is needed since computing and
            sending information can be expensive.</param>
            <returns>The catalog nodes that exist below the parentPath and have
            a type that is listed in resourceTypeFilters.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ICatalogService.RootNodes">
            <summary>
            Returns the root nodes in the tree.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ICatalogService.QueryRootNode(Microsoft.TeamFoundation.Framework.Common.CatalogTree)">
            <summary>
            Returns the specified root node.  Well-known root paths can be
            found in Microsoft.TeamFoundation.Framework.Common.Catalog.CatalogTree.
            </summary>
            <param name="tree">The tree of the desired root.
            </param>
            <returns>The CatalogNode for the tree.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ICatalogService.SaveResource(Microsoft.TeamFoundation.Framework.Client.CatalogResource)">
            <summary>
            Saves the updated resource in the catalog.  Note that service
            definitions that exist as service references will be created
            if they are new and updated if they are not.
            </summary>
            <param name="resource">The resource to update.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ICatalogService.SaveNode(Microsoft.TeamFoundation.Framework.Client.CatalogNode)">
            <summary>
            Saves the updated node and its resource in the catalog.
            </summary>
            <param name="node">The node that has been created or updated.
            </param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ICatalogService.SaveDelete(Microsoft.TeamFoundation.Framework.Client.CatalogNode,System.Boolean)">
            <summary>
            Deletes this node from the catalog.  If this node is the only
            node that points to the resource it points to then this resource
            will also be deleted.  If this node exists in the infrastructure
            tree then the resource that is associated with this node will
            also be deleted and it will be inherently recursive.
            </summary>
            <param name="node">The node to delete.</param>
            <param name="recurse">True if the children nodes of this
            node should be deleted.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ICatalogService.SaveMove(Microsoft.TeamFoundation.Framework.Client.CatalogNode,Microsoft.TeamFoundation.Framework.Client.CatalogNode)">
            <summary>
            Adds this move to the change context.  It will be sent to the
            server when Save() is called.  Note that if nodeToMove or newParent
            also have updated properties then those will be committed as well.
            Any node that is explicitly moved will have IsDefault set to 0.
            </summary>
            <param name="nodeToMove">The node to move under the 
            newParent.</param>
            <param name="newParent">The newParent to place nodeToMove 
            under.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ICatalogService.CreateChangeContext">
            <summary>
            Creates a change context in which many changes can be batched 
            together.
            </summary>
            <returns>A change context in which many changes can be batched
            together.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ICatalogService.LocationService">
            <summary>
            Returns the location service that this catalog uses for its 
            service definition references
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogBulkData">
            <summary>
            Class used to store queried CatalogNodes and the resource types initially queried.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogBulkData.ExpandRelationships(System.Collections.Generic.ICollection{Microsoft.TeamFoundation.Framework.Client.CatalogNode})">
            <summary>
            Walks all available CatalogNode relationships to maximize the potential for
            preloading CatalogObjects using this bulk store.
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject">
            <summary>
            Base class for all strongly-typed catalog objects.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.NullObject">
            <summary>
            Null Object used for determining when a field has already been queried and its result has been null.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.CatalogNode">
            <summary>
            Gets the wrapped catalog node. The catalog node is only meant to be set by internal
            APIs and not directly.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.Context">
            <summary>
            Gets the context associated with this catalog object. The context is only meant to be set by
            internal APIs and not directly.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.DisplayName">
            <summary>
            Gets/Sets the DisplayName for the wrapped CatalogNode.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.DisplayPath">
            <summary>
            Returns a human-readable path to the object by traversing ancestors to concatenate DisplayName.
            Used for identifying references in a compact form.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.Description">
            <summary>
            Gets/Sets the Description for the wrapped CatalogNode.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.CatalogNodeFullPath">
            <summary>
            Gets the FullPath for the encapsulated CatalogNode object.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.CatalogResourceIdentifier">
            <summary>
            Gets the Identifier for the encapsulated CatalogResource object.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.IsDefault">
            <summary>
            Gets the IsDefault for the encapsulated CatalogNode object.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.Parent">
            <summary>
            Gets the parent CatalogObject.
            If the parent has already been queried and is Strongly Typed it will be
            returned, otherwise we will use the raw CatalogNode's parent node is 
            available and return a generic CatalogObject.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.Children">
            <summary>
            Gets the collection of children catalog objects that belong to the CatalogNode.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.SingletonDependencies">
            <summary>
            Get the collection of singleton dependencies indexed by name.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.SetDependencies">
            <summary>
            Gets the collection of dependency sets indexed by name.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.Dependents">
            <summary>
            Gets the collection of catalog objects that are dependent on this object.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.Delete">
            <summary>
            Marks this object for delete using the TransactionContext.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.MarkAsDirty">
            <summary>
            Marks this object for save using the TransactionContext.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.Preload">
            <summary>
            Preloads all of the children and descendants in this catalog node hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.Refresh">
            <summary>
            Refreshes this node and all of its relationships, preloading the node if it had originally been preloaded.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.Refresh(System.Boolean)">
            <summary>
            Refreshes this node and all of its relationships.
            </summary>
            <param name="preload"><c>true</c> to preload .</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.OnRefresh">
            <summary>
            Placeholder to reset state when a node is refreshed.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.Reset">
            <summary>
            Override this method to reset any member variables that were previously populated.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.Preload(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogBulkData)">
            <summary>
            Override this method to preload all of the children and descendents from a bag of catalog nodes
            that were loaded in bulk.
            </summary>
            <param name="bulkData">The bulk data.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.Initialize">
            <summary>
            Override this method to initialize the known properties on the CatalogNode.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.Is``1">
            <summary>
            Determines whether if the wrapped catalog node corresponds to a given catalog object type.
            Analog to the "is" operator in C#.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.As``1">
            <summary>
            Attempts to "cast" a catalog object (typically a raw CatalogEntityObject and not a subclass)
            to a concrete catalog object type. If the catalog node cannot be represented as the target catalog object type, returns
            null. Analog to the "as" operator in C#.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.CreateChild``1(System.String)">
            <summary>
            Creates a child of a given type.
            If the displayName is null or Empty then we will query the catalog for the DisplayName based
            on the Catalog Resource Type identifier.
            </summary>
            <param name="displayName">The display name.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.CreateChild``1">
            <summary>
            Creates a child of a given type.
            The display name for the catalog node will be queried from the catalog based
            on the Catalog Resource Type identifier.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.DeleteChild(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject)">
            <summary>
            Deletes the object passed in and removes it from the children list if it 
            is there.
            </summary>
            <param name="child">The object to delete.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.DeleteChildren``1">
            <summary>
            Deletes all of the children of the specified type and removes them from
            the child collection.
            </summary>
            <typeparam name="T">The type of children to delete.</typeparam>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.NotifyPropertyChanged(System.String)">
            <summary>
            Fires the PropertyChanged event for the given property.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.BuildDisplayPath(System.Text.StringBuilder)">
            <summary>
            Builds the display path that becomes DisplayPath.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.SetProperty``1(System.String,``0)">
            <summary>
            Sets (or removes) a given catalog resource property value;
            </summary>
            <typeparam name="T">The property type</typeparam>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.GetProperty``1(System.String)">
            <summary>
            Gets a given catalog resource property value.
            </summary>
            <typeparam name="T">The property type</typeparam>
            <param name="propertyName">Name of the property.</param>
            <returns>The associated property value.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.SetServiceRefence(System.String,Microsoft.TeamFoundation.Framework.Client.ServiceDefinition)">
            <summary>
            Sets (or clears) a catalog resource service reference.
            </summary>
            <param name="key">The service reference key.</param>
            <param name="service">The service.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.GetServiceReference(System.String)">
            <summary>
            Gets a given service reference.
            </summary>
            <param name="key">The service reference key.</param>
            <returns>The associated service reference, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.LocationAsUrl(Microsoft.TeamFoundation.Framework.Client.ServiceDefinition)">
            <summary>
            Converts a service definition location to a URL based on the current access mapping from the <c>CatalogObjectContext</c>.
            </summary>
            <param name="service">The service.</param>
            <returns>The service location as a URL, or <c>null</c> if it couldn't be extracted.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.GetChildCollection``1(System.Collections.Generic.ICollection{``0}@)">
            <summary>
            Gets a collection of catalog node children of a given type.
            </summary>
            <typeparam name="T">A strongly-typed catalog object.</typeparam>
            <param name="result">A reference to a variable where the result is lazily accessed/stored.</param>
            <returns>A collection of strongly-type catalog child objects.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.GetChild``1(System.Object@)">
            <summary>
            Gets a catalog node child of a given type.
            </summary>
            <typeparam name="T">A strongly-typed catalog object.</typeparam>
            <param name="result">A reference to a variable where the result is lazily accessed/stored.</param>
            <returns>A strongly-type catalog child or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.PreloadChildren``1(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogBulkData)">
            <summary>
            Preloads the catalog child nodes of a given type.
            </summary>
            <typeparam name="T">A strongly-typed catalog object.</typeparam>
            <param name="bulkData">The bulk data used for preloading.</param>
            <returns>A collection of strongly-type catalog child objects, or <c>null</c> if the resource type matching
            the requested collection was not part of the bulk loaded catalog data.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.PreloadChild``1(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogBulkData,System.Object@)">
            <summary>
            Preloads a catalog child node of a given type.
            </summary>
            <typeparam name="T">A strongly-typed catalog object.</typeparam>
            <param name="bulkData">The bulk data used for preloading.</param>
            <param name="result">A reference to a variable where the result is stored.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.GetParent``1">
            <summary>
            Gets a catalog node parent of a given type.
            </summary>
            <typeparam name="T">A strongly-typed catalog object.</typeparam>
            <param name="result">A reference to a variable where the result is lazily accessed/stored.</param>
            <returns>A strongly-type catalog parent or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.GetDependencyCollection``1(System.String)">
            <summary>
            Gets a collection of catalog node depdencies.
            </summary>
            <typeparam name="T">A strongly-typed catalog object.</typeparam>
            <param name="dependencyName">Name of the dependency.</param>
            <returns>A collection of strongly-type catalog objects for that named dependency.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.GetDependency``1(System.String)">
            <summary>
            Gets a catalog node singleton dependency.
            </summary>
            <typeparam name="T">A strongly-typed catalog object.</typeparam>
            <param name="dependencyName">Name of the dependency.</param>
            <param name="result">A reference to a variable where the result is lazily accessed/stored.</param>
            <returns>A strongly-type catalog dependency or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.SetDependency``1(System.String,``0)">
            <summary>
            Sets (or clears) a given catalog node singleton dependency.
            </summary>
            <typeparam name="T">A strongly-typed catalog object.</typeparam>
            <param name="dependencyName">Name of the dependency.</param>
            <param name="value">The value of the dependency to set.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.EnsureDependenciesExpanded">
            <summary>
            Ensures that catalog node dependencies have been expanded.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject.GetDependentsCollection``1(System.Collections.Generic.ICollection{``0}@)">
            <summary>
            Gets a collection of catalog node dependents of a given type.
            </summary>
            <typeparam name="T">A strongly-typed catalog object.</typeparam>
            <param name="result">A reference to a variable where the result is lazily accessed/stored.</param>
            <returns>A collection of strongly-type catalog dependent objects.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.#ctor(Microsoft.TeamFoundation.Framework.Client.ICatalogService)">
            <summary>
            Constructor
            </summary>
            <param name="catalogService">The catalog service</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.QueryOptions">
            <summary>
            QueryOptions used to when querying for Catalog Nodes.
            The default value is ExpandDependencies.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.CatalogService">
            <summary>
            The Catalog Service
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.LocationService">
            <summary>
            The Location Service
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.TransactionContext">
            <summary>
            The Catalog Change Context, used to store the transaction context.  Lazily created,
            and only one exists until SaveChanges is called.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.OrganizationalRoot">
            <summary>
            The Organizational Root Catalog Object which encapsulates the Organizational Root Catalog Node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.InfrastructureRoot">
            <summary>
            The Infrastructure Root Catalog Object which encapsulates the Infrastructure Root Catalog Node.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.GetDisplayName(System.Type)">
            <summary>
            Helper method used to get the display name for a <code>CatalogObject</code> using the
            ResourceTypeIdentifier from the catalog object.
            </summary>
            <param name="catalogObject"></param>
            <returns>The display name from the CatalogResoureType, otherwise the Name of the type passed in</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.GetDescription(System.Type)">
            <summary>
            Helper method used to get the description for a <code>CatalogObject</code> using the
            ResourceTypeIdentifier from the catalog object.
            </summary>
            <param name="catalogObject"></param>
            <returns>The description from the CatalogResoureType, otherwise the String.Empty</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.AddObject(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject)">
            <summary>
            Adds a CatalogObject's catalog node to the transaction context, marking it to be added.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.ModifyObject(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject)">
            <summary>
            Adds a CatalogObject's catalog node to the transaction context, marking it to be updated.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.DeleteObject(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject)">
            <summary>
            Adds a CatalogObject's catalog node to the transaction context, marking it delete.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.RefreshOnTransactionContextFailureOrReset(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObject)">
            <summary>
            Marks the object as affected by the transaction context.  If the transaction context
            fails or is reset then Refresh() will be called on this object.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.SaveChanges">
            <summary>
            Calls save on the transaction context to save the changes the catalog.  The transaction context
            is then disposed of.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.ResetTransactionContext">
            <summary>
            Clears the pended changes for this transaction context.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.CreateCatalogObject``1(Microsoft.TeamFoundation.Framework.Client.CatalogNode)">
            <summary>
            Helper method used to create a Catalog Object of a specific type <code>T</code> wrapping the catalog node.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="catalogNode"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.GetRootNode``1(Microsoft.TeamFoundation.Framework.Common.CatalogTree,``0@)">
            <summary>
            Helper method used to get the Organizational or Infrastructure Root catalog objects.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tree"></param>
            <param name="result"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.TryGetCatalogResourceType(System.Type,Microsoft.TeamFoundation.Framework.Client.CatalogResourceType@)">
            <summary>
            Helper method used to get the CatalogResourceType for a given Catalog Object Type.
            </summary>
            <param name="catalogObjectType">The type of the Catalog Object</param>
            <param name="catalogResourceType">The catalog resource type that will be set if found</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.CreateCatalogObject``1(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogBulkData,System.String)">
            <summary>
            Helper method used to create a CatalogObject of type T, using the catalog bulk data
            store.  The unique catalog node path allows us to identify which catalog node we want to wrap.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bulkData">The bulk data containing all the catalog nodes, and queried resource types</param>
            <param name="nodePath">The catalog node path for node to be wrapped in a catalog object</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.RefreshAffectedObjects">
            <summary>
            Calls Refresh on all of the objects affected by the transaction context.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogObjectContext.CreateCatalogObject``1(Microsoft.TeamFoundation.Client.TfsConfigurationServer,Microsoft.TeamFoundation.Framework.Client.CatalogNode)">
            <summary>
            Convenience method used to generate a new CatalogObject of type T using a new CatalogObjectContext.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tfsServer">The team foundation configuration server</param>
            <param name="catalogNode">The catalog node to be wrapped</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.OrganizationalRoot">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type OrganizationalRoot.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.OrganizationalRoot.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.OrganizationalRoot.KnownChildTypes">
            <summary>
            A list of known catalog node child types that will be used to preload a given object. (used by the framework)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.OrganizationalRoot.Reset">
            <summary>
            Overridden to reset previously initialized member variables, e.g. as part of a Refresh() call.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.OrganizationalRoot.Preload(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogBulkData)">
            <summary>
            Overridden to pre-populate related entities based on a set of bulk loaded catalog nodes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.OrganizationalRoot.ReportingConfiguration">
            <summary>
            Gets the child catalog node of resource type "ReportingConfiguration".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.OrganizationalRoot.ApplicationInstances">
            <summary>
            Gets a collection of child catalog nodes of resource type "ApplicationInstance".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.OrganizationalRoot.SharePointWebApplications">
            <summary>
            Gets a collection of child catalog nodes of resource type "SharePointWebApplication".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.OrganizationalRoot.ApplicationInstance">
            <summary>
            Get the ApplicationInstance.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.OrganizationalRoot.FindProjectCollectionById(System.Guid)">
            <summary>
            Find a <code>ProjectCollection</code> based on the Project Collection Instance Id Guid.
            </summary>
            <param name="instanceId">The Project Collection instance id</param>
            <returns>The <code>ProjectCollection</code> or null if it is not found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.OrganizationalRoot.FindProjectById(System.Guid)">
            <summary>
            Find a <code>TeamProject</code> based on the Team Project Guid
            </summary>
            <param name="projectId">The Team Project Guid</param>
            <returns>The <code>TeamProject</code> or null if it is not found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.OrganizationalRoot.FindProjectByUri(System.Uri)">
            <summary>
            Find a <code>TeamProject</code> based on the Team Project Project Uri
            </summary>
            <param name="projectUri">The Team Project Uri</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.OrganizationalRoot.FindProjectPortals(System.Guid)">
            <summary>
            Gets a collection of <code>ProjectPortal</code> which have the specified web Guid.
            </summary>
            <param name="ownedWebIdentifier"></param>
            <returns>A collection of <code>ProjectPortal</code> catalog objects</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.InfrastructureRoot">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type InfrastructureRoot.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.InfrastructureRoot.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.InfrastructureRoot.KnownChildTypes">
            <summary>
            A list of known catalog node child types that will be used to preload a given object. (used by the framework)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.InfrastructureRoot.Reset">
            <summary>
            Overridden to reset previously initialized member variables, e.g. as part of a Refresh() call.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.InfrastructureRoot.Preload(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogBulkData)">
            <summary>
            Overridden to pre-populate related entities based on a set of bulk loaded catalog nodes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.InfrastructureRoot.Machines">
            <summary>
            Gets a collection of child catalog nodes of resource type "Machine".
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ApplicationInstance">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type ApplicationInstance.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ApplicationInstance.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ApplicationInstance.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ApplicationInstance.KnownChildTypes">
            <summary>
            A list of known catalog node child types that will be used to preload a given object. (used by the framework)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ApplicationInstance.Reset">
            <summary>
            Overridden to reset previously initialized member variables, e.g. as part of a Refresh() call.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ApplicationInstance.Preload(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogBulkData)">
            <summary>
            Overridden to pre-populate related entities based on a set of bulk loaded catalog nodes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ApplicationInstance.WebAccessInstance">
            <summary>
            Gets the child catalog node of resource type "TeamSystemWebAccess".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ApplicationInstance.LocationService">
            <summary>
            Gets or sets the service reference named "Location".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ApplicationInstance.LocationServiceLocation">
            <summary>
            Returns the location URL for the service reference named "Location".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ApplicationInstance.ProjectCollections">
            <summary>
            Gets a collection of child catalog nodes of resource type "ProjectCollection".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ApplicationInstance.WebApplications">
            <summary>
            Gets catalog node dependency set named "WebApplications".
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type ProjectCollection.
            </summary>    
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection.KnownChildTypes">
            <summary>
            A list of known catalog node child types that will be used to preload a given object. (used by the framework)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection.Reset">
            <summary>
            Overridden to reset previously initialized member variables, e.g. as part of a Refresh() call.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection.Preload(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogBulkData)">
            <summary>
            Overridden to pre-populate related entities based on a set of bulk loaded catalog nodes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection.InstanceId">
            <summary>
            Gets or sets the catalog resource property named "InstanceId".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection.LocationForNewWssSites">
            <summary>
            Gets the child catalog node of resource type "SharePointSiteCreationLocation".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection.ReportFolder">
            <summary>
            Gets the child catalog node of resource type "ReportingFolder".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection.ApplicationInstance">
            <summary>
            Gets the parent catalog node of resource type "ApplicationInstance".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection.LocationService">
            <summary>
            Gets or sets the service reference named "Location".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection.LocationServiceLocation">
            <summary>
            Returns the location URL for the service reference named "Location".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection.Projects">
            <summary>
            Gets a collection of child catalog nodes of resource type "TeamProject".
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection.FindProjectById(System.Guid)">
            <summary>
            Find a <code>TeamProject</code> based on the Team Project Guid.
            </summary>
            <param name="projectId">The Team Project Guid</param>
            <returns>The <code>TeamProject</code> or null if it is not found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection.FindProjectByName(System.String)">
            <summary>
            Find a <code>TeamProject</code> based on the Team Project Name.
            </summary>
            <param name="projectName">The Team Project Name</param>
            <returns>The <code>TeamProject</code> or null if it is not found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection.FindProjectByUri(System.Uri)">
            <summary>
            Find a <code>TeamProject</code> based on the Team Project Uri.
            </summary>
            <param name="projectUri">The Team Project Uri</param>
            <returns>The <code>TeamProject</code> or null if it is not found</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectCollection.TfsServer">
            <summary>
            Gets the TfsTeamProjectCollection object for this project collection.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type TeamProject.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.KnownChildTypes">
            <summary>
            A list of known catalog node child types that will be used to preload a given object. (used by the framework)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.Reset">
            <summary>
            Overridden to reset previously initialized member variables, e.g. as part of a Refresh() call.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.Preload(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogBulkData)">
            <summary>
            Overridden to pre-populate related entities based on a set of bulk loaded catalog nodes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.ProjectName">
            <summary>
            Gets or sets the catalog resource property named "ProjectName".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.ProjectUri">
            <summary>
            Gets or sets the catalog resource property named "ProjectUri".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.ProjectId">
            <summary>
            Gets or sets the catalog resource property named "ProjectId".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.ProjectState">
            <summary>
            Gets or sets the catalog resource property named "ProjectState".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.Guidance">
            <summary>
            Gets the child catalog node of resource type "ProcessGuidanceSite".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.ReportFolder">
            <summary>
            Gets the child catalog node of resource type "ReportingFolder".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.Portal">
            <summary>
            Gets the child catalog node of resource type "ProjectPortal".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.PortalIsSharePoint">
            <summary>
            Indicates if the portal is a SharePoint site (and thus it should be used for the Team Explorer "Documents" node).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.IsOwnerOfSharePointPortal">
            <summary>
            Indicates if the portal is a SharePoint site, and if the site is owned by the project.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.Collection">
            <summary>
            Returns the collection the TeamProject  belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.AddProjectPortal">
            <summary>
            Creates a <code>ProjectPortal</code> catalog object for the team project.
            </summary>
            <returns>The <code>ProjectPortal</code> catalog object created</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.AddProcessGuidanceSite">
            <summary>
            Creates a <code>ProcessGuidanceSite</code> catalog object for the team project.
            </summary>
            <returns>The <code>ProcessGuidanceSite</code> catalog object created</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamProject.AddReportingFolder(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingFolder,System.String)">
            <summary>
            Creates a <code>ReportingFolder</code> catalog object for the team project.
            </summary>
            <param name="referencedParent">The parent reporting folder, typically the project collection's reporting folder</param>
            <param name="itemPath">The relative path where the RDL reports are stored</param>
            <returns>The <code>ReportingFolder</code> catalog object created</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ResourceFolder">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type ResourceFolder.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ResourceFolder.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.GenericLink">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type GenericLink.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.GenericLink.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.Machine">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type Machine.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.Machine.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.Machine.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.Machine.KnownChildTypes">
            <summary>
            A list of known catalog node child types that will be used to preload a given object. (used by the framework)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.Machine.Reset">
            <summary>
            Overridden to reset previously initialized member variables, e.g. as part of a Refresh() call.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.Machine.Preload(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogBulkData)">
            <summary>
            Overridden to pre-populate related entities based on a set of bulk loaded catalog nodes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.Machine.MachineName">
            <summary>
            Gets or sets the catalog resource property named "MachineName".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.Machine.SqlAnalysisInstances">
            <summary>
            Gets a collection of child catalog nodes of resource type "SqlAnalysisInstance".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.Machine.SqlReportingInstances">
            <summary>
            Gets a collection of child catalog nodes of resource type "SqlReportingInstance".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.Machine.WebApplications">
            <summary>
            Gets a collection of child catalog nodes of resource type "TeamWebApplication".
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.Machine.Register(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.InfrastructureRoot,System.String)">
            <summary>
            Returns existing <c>Machine</c> or creates a new one for the corresponding Machine Name.
            </summary>
            <param name="root"></param>
            <param name="machineName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamWebApplication">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type TeamWebApplication.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamWebApplication.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ServerInstance">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type ServerInstance.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ServerInstance.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ServerInstance.Reset">
            <summary>
            Overridden to reset previously initialized member variables, e.g. as part of a Refresh() call.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ServerInstance.InstanceName">
            <summary>
            Gets or sets the catalog resource property named "InstanceName".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ServerInstance.IsClustered">
            <summary>
            Gets or sets the catalog resource property named "IsClustered".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ServerInstance.Machine">
            <summary>
            Gets the parent catalog node of resource type "Machine".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ServerInstance.ServerName">
            <summary>
            Returns the server full name, including the instance name if this is a named instance, just the machine name otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ServerInstance.Register``1(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.Machine,System.String,System.String,System.Collections.Generic.ICollection{``0})">
            <summary>
            Creates or returns existing <code>T</code> instance for the specified machine.
            </summary>
            <typeparam name="T">Type of the ServerInstance to register</typeparam>
            <param name="machine">The Machine catalog object</param>
            <param name="displayName">The display name for the catalog node</param>
            <param name="instanceName">The instance name for the server instance</param>
            <param name="children">The existing list of server instances the Machine has registered of type T</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisInstance">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type SqlAnalysisInstance.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisInstance.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisInstance.KnownChildTypes">
            <summary>
            A list of known catalog node child types that will be used to preload a given object. (used by the framework)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisInstance.Reset">
            <summary>
            Overridden to reset previously initialized member variables, e.g. as part of a Refresh() call.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisInstance.Preload(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogBulkData)">
            <summary>
            Overridden to pre-populate related entities based on a set of bulk loaded catalog nodes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisInstance.SqlAnalysisDatabases">
            <summary>
            Gets a collection of child catalog nodes of resource type "SqlAnalysisDatabase".
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisInstance.Register(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.Machine,System.String)">
            <summary>
            Returns existing <code>SqlAnalysisInstance</code> or creates a new one for the corresponding display name.
            </summary>
            <param name="machine"></param>
            <param name="instanceName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlReportingInstance">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type SqlReportingInstance.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlReportingInstance.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlReportingInstance.KnownChildTypes">
            <summary>
            A list of known catalog node child types that will be used to preload a given object. (used by the framework)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlReportingInstance.Reset">
            <summary>
            Overridden to reset previously initialized member variables, e.g. as part of a Refresh() call.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlReportingInstance.Preload(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.CatalogBulkData)">
            <summary>
            Overridden to pre-populate related entities based on a set of bulk loaded catalog nodes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlReportingInstance.WarehouseDatabases">
            <summary>
            Gets a collection of child catalog nodes of resource type "WarehouseDatabase".
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlReportingInstance.Register(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.Machine,System.String)">
            <summary>
            Returns existing <code>SqlReportingInstance</code> or creates a new one for the corresponding display name.
            </summary>
            <param name="machine"></param>
            <param name="instanceName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ServerDatabase">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type ServerDatabase.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ServerDatabase.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ServerDatabase.InitialCatalog">
            <summary>
            Gets or sets the catalog resource property named "InitialCatalog".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ServerDatabase.IsOnline">
            <summary>
            Gets or sets the catalog resource property named "IsOnline".
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointWebApplication">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type SharePointWebApplication.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointWebApplication.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointWebApplication.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointWebApplication.DefaultRelativePath">
            <summary>
            Gets or sets the catalog resource property named "DefaultRelativePath".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointWebApplication.SiteCreationUrl">
            <summary>
            Gets or sets the catalog resource property named "SiteCreationUrl".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointWebApplication.RootUrlService">
            <summary>
            Gets or sets the service reference named "RootUrl".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointWebApplication.RootUrlServiceLocation">
            <summary>
            Returns the location URL for the service reference named "RootUrl".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointWebApplication.AdminUrlService">
            <summary>
            Gets or sets the service reference named "AdminUrl".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointWebApplication.AdminUrlServiceLocation">
            <summary>
            Returns the location URL for the service reference named "AdminUrl".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointWebApplication.FullyQualifiedUrl">
            <summary>
            The fully qualified url for the current access mapping.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointWebApplication.FullyQualifiedUncPath">
            <summary>
            The fully qualified unc path for the current access mapping.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TfsRelativeWebSite">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type TfsRelativeWebSite.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TfsRelativeWebSite.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TfsRelativeWebSite.RelativePath">
            <summary>
            Gets or sets the catalog resource property named "RelativePath".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TfsRelativeWebSite.ReferencedResource">
            <summary>
            Gets or sets the singleton catalog node dependency named "ReferencedResource".
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TfsRelativeWebSite.GetFullyQualifiedUri">
            <summary>
            Constructs the fully qualified path.
            The ReferencedResource is expected to be a <code>SharePointWebApplication</code> since
            we never configure relative sites pointing to other relative sites. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointSiteCreationLocation">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type SharePointSiteCreationLocation.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointSiteCreationLocation.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointSiteCreationLocation.OnRefresh">
            <summary>
            Overridden to reset lazily calculated members.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointSiteCreationLocation.FullyQualifiedUrl">
            <summary>
            The fully qualified url for the current access mapping.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointSiteCreationLocation.AdminUrl">
            <summary>
            Gets the Administration Url.  If the Project Portal points to a WSS site, then the ReferencedResource
            must be  a SharePointWebApplication which has a Administration Url.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SharePointSiteCreationLocation.FullyQualifiedUncPath">
            <summary>
            The fully qualified unc path for the current access mapping.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectPortal">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type ProjectPortal.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectPortal.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectPortal.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectPortal.FullyQualifiedUrl">
            <summary>
            Gets or sets the catalog resource property named "FullyQualifiedUrl".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectPortal.OwnedWebIdentifier">
            <summary>
            Gets or sets the catalog resource property named "OwnedWebIdentifier".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectPortal.ResourceSubType">
            <summary>
            Gets or sets the catalog resource property named "ResourceSubType".
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectPortal.Initialize">
            <summary>
            Initializing a newly created ProjectPortal object with default CatalogNode properties.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectPortal.TeamProject">
            <summary>
            Get the TeamProject that owns this Portal.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectPortal.AdminUrl">
            <summary>
            Gets the Administration Url.  If the Project Portal points to a WSS site, then the ReferencedResource
            must be  a SharePointWebApplication which has a Administration Url.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectPortal.FullUrl">
            <summary>
            Gets the full url for the Project Portal whether it is a WebSite or a SharePoint Site.
            This property should be used when you are not sure whether the Process Guidance is a WebSite or a
            SharePoint document library.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectPortal.FullyQualifiedUncPath">
            <summary>
            The fully qualified unc path for the current access mapping.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectPortal.ToOwnershipString">
            <summary>
            Formats a string representing Team Project Collection and Team Project ownership.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectPortal.IsOwnerOfWssSite">
            <summary>
            Indicates if this site is owned by the project.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectPortal.HasAdminUrl">
            <summary>
            Indicates if the AdminUrl exists or not. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProjectPortal.ResetValues">
            <summary>
            Resets the values for the project portal to their defaults.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProcessGuidanceSite">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type ProcessGuidanceSite.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProcessGuidanceSite.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProcessGuidanceSite.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProcessGuidanceSite.AsciiName">
            <summary>
            Gets or sets the catalog resource property named "AsciiName".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProcessGuidanceSite.FullyQualifiedUrl">
            <summary>
            Gets or sets the catalog resource property named "FullyQualifiedUrl".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProcessGuidanceSite.ResourceSubType">
            <summary>
            Gets or sets the catalog resource property named "ResourceSubType".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProcessGuidanceSite.GuidanceFileName">
            <summary>
            Gets or sets the catalog resource property named "GuidanceFileName".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProcessGuidanceSite.FullUrl">
            <summary>
            Gets the full url for the Process Guidance Site whether it is a WebSite or a SharePoint Document Library.
            This property should be used when you are not sure whether the Process Guidance is a WebSite or a
            SharePoint document library.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProcessGuidanceSite.WellKnownGuidancePageUrl">
            <summary>
            Gets the well known guidance page URL, based on the guidance site type and the guidance file name.
            </summary>
            <remarks>
            See <c>SharePointUtilities.GetWellKnownProcessGuidancePageUrl</c> for more info.
            </remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProcessGuidanceSite.HasAdminUrl">
            <summary>
            Indicates if the AdminUrl exists or not. 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProcessGuidanceSite.AdminUrl">
            <summary>
            The url for the SharePoint Central Administration site.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ProcessGuidanceSite.ResetValues">
            <summary>
            Resets the values for the process guidance site to their defaults.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.WarehouseDatabase">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type WarehouseDatabase.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.WarehouseDatabase.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.WarehouseDatabase.Reset">
            <summary>
            Overridden to reset previously initialized member variables, e.g. as part of a Refresh() call.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.WarehouseDatabase.DatabaseInstance">
            <summary>
            Gets the parent catalog node of resource type "SqlReportingInstance".
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.WarehouseDatabase.GetConnectionString">
            <summary>
            Builds the connection string based on the info in the catalog (machine, instance, db name).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.WarehouseDatabase.Register(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlReportingInstance,System.String)">
            <summary>
            Creates or returns existing <code>WarehouseDatabase</code> associated with Sql Reporting instance.
            </summary>
            <param name="machine"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisDatabase">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type SqlAnalysisDatabase.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisDatabase.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisDatabase.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisDatabase.Reset">
            <summary>
            Overridden to reset previously initialized member variables, e.g. as part of a Refresh() call.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisDatabase.DatabaseInstance">
            <summary>
            Gets the parent catalog node of resource type "SqlAnalysisInstance".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisDatabase.ReportingWarehouse">
            <summary>
            Gets or sets the singleton catalog node dependency named "ReportingWarehouse".
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisDatabase.GetConnectionString">
            <summary>
            Builds the connection string based on the info in the catalog (machine, instance, db name).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisDatabase.Register(Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.SqlAnalysisInstance,System.String)">
            <summary>
            Creates or returns existing <code>SqlAnalysisDatabase</code> associated with Sql Analysis instance.
            </summary>
            <param name="instance"></param>
            <param name="databaseName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingConfiguration">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type ReportingConfiguration.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingConfiguration.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingConfiguration.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingConfiguration.ReportingWarehouse">
            <summary>
            Gets or sets the singleton catalog node dependency named "ReportingWarehouse".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingConfiguration.ReportingCube">
            <summary>
            Gets or sets the singleton catalog node dependency named "ReportingCube".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingConfiguration.ReportServer">
            <summary>
            Gets or sets the singleton catalog node dependency named "ReportServer".
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingServer">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type ReportingServer.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingServer.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingServer.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingServer.DefaultItemPath">
            <summary>
            Gets or sets the catalog resource property named "DefaultItemPath".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingServer.ReportsManagerService">
            <summary>
            Gets or sets the service reference named "ReportsManager".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingServer.ReportsManagerServiceLocation">
            <summary>
            Returns the location URL for the service reference named "ReportsManager".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingServer.ReportServerService">
            <summary>
            Gets or sets the service reference named "ReportServer".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingServer.ReportServerServiceLocation">
            <summary>
            Returns the location URL for the service reference named "ReportServer".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingServer.Machine">
            <summary>
            Gets or sets the singleton catalog node dependency named "Machine".
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingFolder">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type ReportingFolder.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingFolder.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingFolder.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingFolder.ItemPath">
            <summary>
            Gets or sets the catalog resource property named "ItemPath".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingFolder.ReferencedResource">
            <summary>
            Gets or sets the singleton catalog node dependency named "ReferencedResource".
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingFolder.OnRefresh">
            <summary>
            Overridden to reset lazily calculated members.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingFolder.FullPath">
            <summary>
            Returns the full path to this reporting folder.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.ReportingFolder.GetReportServer">
            <summary>
            Returns the report server.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type TeamSystemWebAccess.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.HomeService">
            <summary>
            Gets or sets the service reference named "Home".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.HomeServiceLocation">
            <summary>
            Returns the location URL for the service reference named "Home".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.WorkItemEditorService">
            <summary>
            Gets or sets the service reference named "WorkItemEditor".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.WorkItemEditorServiceLocation">
            <summary>
            Returns the location URL for the service reference named "WorkItemEditor".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ChangesetDetailService">
            <summary>
            Gets or sets the service reference named "ChangesetDetail".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ChangesetDetailServiceLocation">
            <summary>
            Returns the location URL for the service reference named "ChangesetDetail".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.DifferenceService">
            <summary>
            Gets or sets the service reference named "Difference".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.DifferenceServiceLocation">
            <summary>
            Returns the location URL for the service reference named "Difference".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewItemService">
            <summary>
            Gets or sets the service reference named "ViewItem".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewItemServiceLocation">
            <summary>
            Returns the location URL for the service reference named "ViewItem".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ShelvesetDetailService">
            <summary>
            Gets or sets the service reference named "ShelvesetDetail".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ShelvesetDetailServiceLocation">
            <summary>
            Returns the location URL for the service reference named "ShelvesetDetail".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.QueryResultsService">
            <summary>
            Gets or sets the service reference named "QueryResults".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.QueryResultsServiceLocation">
            <summary>
            Returns the location URL for the service reference named "QueryResults".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.AnnotateService">
            <summary>
            Gets or sets the service reference named "Annotate".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.AnnotateServiceLocation">
            <summary>
            Returns the location URL for the service reference named "Annotate".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.SourceExplorerService">
            <summary>
            Gets or sets the service reference named "SourceExplorer".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.SourceExplorerServiceLocation">
            <summary>
            Returns the location URL for the service reference named "SourceExplorer".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.OpenWorkItemService">
            <summary>
            Gets or sets the service reference named "OpenWorkItem".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.OpenWorkItemServiceLocation">
            <summary>
            Returns the location URL for the service reference named "OpenWorkItem".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.CreateWorkItemService">
            <summary>
            Gets or sets the service reference named "CreateWorkItem".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.CreateWorkItemServiceLocation">
            <summary>
            Returns the location URL for the service reference named "CreateWorkItem".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewServerQueryResultsService">
            <summary>
            Gets or sets the service reference named "ViewServerQueryResults".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewServerQueryResultsServiceLocation">
            <summary>
            Returns the location URL for the service reference named "ViewServerQueryResults".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewWiqlQueryResultsService">
            <summary>
            Gets or sets the service reference named "ViewWiqlQueryResults".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewWiqlQueryResultsServiceLocation">
            <summary>
            Returns the location URL for the service reference named "ViewWiqlQueryResults".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ExploreSourceControlPathService">
            <summary>
            Gets or sets the service reference named "ExploreSourceControlPath".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ExploreSourceControlPathServiceLocation">
            <summary>
            Returns the location URL for the service reference named "ExploreSourceControlPath".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.FindShelvesetService">
            <summary>
            Gets or sets the service reference named "FindShelveset".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.FindShelvesetServiceLocation">
            <summary>
            Returns the location URL for the service reference named "FindShelveset".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewShelvesetDetailsService">
            <summary>
            Gets or sets the service reference named "ViewShelvesetDetails".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewShelvesetDetailsServiceLocation">
            <summary>
            Returns the location URL for the service reference named "ViewShelvesetDetails".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.FindChangesetService">
            <summary>
            Gets or sets the service reference named "FindChangeset".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.FindChangesetServiceLocation">
            <summary>
            Returns the location URL for the service reference named "FindChangeset".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewChangesetDetailsService">
            <summary>
            Gets or sets the service reference named "ViewChangesetDetails".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewChangesetDetailsServiceLocation">
            <summary>
            Returns the location URL for the service reference named "ViewChangesetDetails".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewSourceControlItemService">
            <summary>
            Gets or sets the service reference named "ViewSourceControlItem".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewSourceControlItemServiceLocation">
            <summary>
            Returns the location URL for the service reference named "ViewSourceControlItem".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.DownloadSourceControlItemService">
            <summary>
            Gets or sets the service reference named "DownloadSourceControlItem".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.DownloadSourceControlItemServiceLocation">
            <summary>
            Returns the location URL for the service reference named "DownloadSourceControlItem".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.DiffSourceControlItemsService">
            <summary>
            Gets or sets the service reference named "DiffSourceControlItems".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.DiffSourceControlItemsServiceLocation">
            <summary>
            Returns the location URL for the service reference named "DiffSourceControlItems".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.AnnotateSourceControlItemService">
            <summary>
            Gets or sets the service reference named "AnnotateSourceControlItem".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.AnnotateSourceControlItemServiceLocation">
            <summary>
            Returns the location URL for the service reference named "AnnotateSourceControlItem".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewSourceControlItemHistoryService">
            <summary>
            Gets or sets the service reference named "ViewSourceControlItemHistory".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewSourceControlItemHistoryServiceLocation">
            <summary>
            Returns the location URL for the service reference named "ViewSourceControlItemHistory".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewBuildDetailsService">
            <summary>
            Gets or sets the service reference named "ViewBuildDetails".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewBuildDetailsServiceLocation">
            <summary>
            Returns the location URL for the service reference named "ViewBuildDetails".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewSourceControlShelvedItemService">
            <summary>
            Gets or sets the service reference named "ViewSourceControlShelvedItem".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.ViewSourceControlShelvedItemServiceLocation">
            <summary>
            Returns the location URL for the service reference named "ViewSourceControlShelvedItem".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.DiffSourceControlShelvedItemService">
            <summary>
            Gets or sets the service reference named "DiffSourceControlShelvedItem".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TeamSystemWebAccess.DiffSourceControlShelvedItemServiceLocation">
            <summary>
            Returns the location URL for the service reference named "DiffSourceControlShelvedItem".
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TestController">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type TestController.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TestController.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TestController.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TestController.ControllerName">
            <summary>
            Gets or sets the catalog resource property named "ControllerName".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TestController.GroupId">
            <summary>
            Gets or sets the catalog resource property named "GroupId".
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TestEnvironment">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type TestEnvironment.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TestEnvironment.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TestEnvironment.Fields">
            <summary>
            Encapsulates the well-known property, dependency, and service reference names for this catalog node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TestEnvironment.EnvironmentName">
            <summary>
            Gets or sets the catalog resource property named "EnvironmentName".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TestEnvironment.ControllerName">
            <summary>
            Gets or sets the catalog resource property named "ControllerName".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.TestEnvironment.ProjectName">
            <summary>
            Gets or sets the catalog resource property named "ProjectName".
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.DataCollector">
            <summary>
            A strongly-typed catalog node class that represents a node with a resource of type DataCollector.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.Catalog.Objects.DataCollector.ResourceTypeIdentifier">
            <summary>
            The resource type id associated with this typed wrapper.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionService.GetCollection(System.Guid)">
            <summary>
            Retrieve a collection using its unique Id. Only created and registered
            collections will be returned.
            </summary>
            <param name="id">the collection id</param>
            <returns>The Team Project Collection.</returns>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.CollectionDoesNotExistException">Thrown if the collection is not found</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionService.GetCollection(System.Guid,Microsoft.TeamFoundation.Framework.Client.ServiceHostFilterFlags)">
            <summary>
            Retrieve a collection using its unique Id.
            </summary>
            <param name="id">the collection id</param>
            <param name="filterFlags">flags to indicate which set of collections to return.</param>
            <returns>The Team Project Collection.</returns>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.CollectionDoesNotExistException">Thrown if the collection is not found</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionService.GetCollections">
            <summary>
            Retrieves all registered collections. Only created and registered
            collections will be returned.
            </summary>
            <returns>a list of registered collections.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionService.GetCollections(Microsoft.TeamFoundation.Framework.Client.ServiceHostFilterFlags)">
            <summary>
            Retrieves all registered collections.
            </summary>
            <param name="filterFlags">flags to indicate which set of collections to return.</param>
            <returns>a list of registered collections.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionService.GetCollections(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets collections with the specified collection ids. Only created and registered
            collections will be returned.
            </summary>
            <param name="collectionIds">the identifiers of the collections to retrieve.</param>
            <returns>The associated Team Project Collections. A null element is used for any collection not found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionService.GetCollections(System.Collections.Generic.IEnumerable{System.Guid},Microsoft.TeamFoundation.Framework.Client.ServiceHostFilterFlags)">
            <summary>
            Gets collections with the specified collection ids.
            </summary>
            <param name="collectionIds">the identifiers of the collections to retrieve.</param>
            <param name="filterFlags">flags to indicate which set of collections to return.</param>
            <returns>The associated Team Project Collections. A null element is used for any collection not found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionService.GetDefaultCollection">
            <summary>
            Access the default collection.
            </summary>
            <returns>Null if there is no default collection.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ServicingJobResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServicingJobResult.None">
            <summary>
            There is not currently a Result value available.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServicingJobResult.Failed">
            <summary>
            Failed is returned if the servicing operation threw an exception
            while being executed.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServicingJobResult.PartiallySucceeded">
            <summary>
            PartiallySucceeded is returned if the servicing steps indicate that
            all steps completed but there were potential issues with some of
            them.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServicingJobResult.Succeeded">
            <summary>
            Succeeded is returned when the entire servicing operation succeeds.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServicingJobResult.Skipped">
            <summary>
            Skipped means that the job did not actually execute any steps in
            the process. This can be considered a success. This may happen if
            all steps are skipped or optimized away before running.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ServicingJobStatus">
            <summary>
            The ServicingJobStatus defines what state the servicing operation
            is currently in.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServicingJobStatus.Unknown">
            <summary>
            The job status hasn't been determined
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServicingJobStatus.Queued">
            <summary>
            The has been queued for completion. Once the job is picked up and
            started it will transition to the Running state. If for some reason
            the job is never picked up it will transition to the Failed state.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServicingJobStatus.Running">
            <summary>
            The servicing job is currently running. If the service running the
            job terminates unexpectedly the service job may be in this state 
            until this condition is detected and the state will be switched to
            Failed.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServicingJobStatus.Complete">
            <summary>
            The job completed, though it may not have completed successfully.
            The job details will describe the result of the job.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServicingJobStatus.Failed">
            <summary>
            Failed jobs are servicing jobs that either never got started and
            failed within the job service initiation of the job, or failed
            to complete because of process termination, connection issues, or
            some other fatal issue. These jobs MAY get rescheduled and picked
            back and transition back to the running state.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ServiceHostFilterFlags">
            <summary>
            ServiceHostFilterFlags are used to define the set of information 
            required when calling QueryServiceHostProperties.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServiceHostFilterFlags.None">
            <summary>
            No extra data will be returned only the basic service properties.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServiceHostFilterFlags.IncludeChildren">
            <summary>
            Children of this host will be returned if this host contains 
            children. This only applies to the ApplicationServiceHost and will
            be ignored for collections.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServiceHostFilterFlags.IncludeQueuedServicingDetails">
            <summary>
            This will include the details about the hosts that have servicing
            operations active. If any servicing detail flags are specfied the
            call will return un-registered hosts.
            
            Depending on which set of servicing detail flags are set you the
            call will return servicing operations of a given state.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ServicingStepDetailFilterOptions">
            <summary>
            ServicingStepDetailFilterOptions are used when calling 
            GetServicingDetails. It controls how the queue time is interpreted.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServicingStepDetailFilterOptions.SpecificQueueTime">
            <summary>
            Return step details for the specific queue time.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServicingStepDetailFilterOptions.AllStepDetails">
            <summary>
            Return step details for all runs of the specified job.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServicingStepDetailFilterOptions.FirstStepDetails">
            <summary>
            Return the step details for the first execution of the specified job.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServicingStepDetailFilterOptions.LastStepDetails">
            <summary>
            Return the step details for the last execution of the specified job.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.AddServicingOperation(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a new servicing operation to the configuration database. All servicing step groups listed
            in the stepGroups collection must be added to the configuration database before calling this method.
            </summary>
            <param name="servicingOperation">A servicing operation to be added, such as Install</param>
            <param name="stepGroups"></param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.ServicingOperationAlreadyExistsException">
            An operation with the same name already exists the configuration database.
            </exception>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.ServicingStepGroupNotFoundException">
            At least one servicing step group from stepGroups collection is not defined in the configuration database. 
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.AddServicingOperation(System.IO.Stream)">
            <summary>
            Adds a new servicing operation to the configuration database. All servicing step groups specified
            in the Xml file must be added to the configuration database before calling this method.
            </summary>
            <param name="xmlStream">A stream for an Xml file that defines servicing operation.</param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.ServicingOperationAlreadyExistsException">
            An operation with the same name already exists the configuration database.
            </exception>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.ServicingStepGroupNotFoundException">
            At least one servicing step group is not defined in the configuration database. 
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.UpdateServicingOperation(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates servicing operation. All servicing step groups listed
            in the stepGroups collection must be added to the configuration database before calling this method.
            </summary>
            <param name="servicingOperation">A servicing operation being updated</param>
            <param name="stepGroups">A collection of servicing step groups</param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.ServicingStepGroupNotFoundException">
            At least one servicing step group from stepGroups collection is not defined in the configuration database. 
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.UpdateServicingOperation(System.IO.Stream)">
            <summary>
            Updates servicing operation. All servicing step groups specified
            in the Xml file must be added to the configuration database before calling this method.
            </summary>
            <param name="xmlStream">A stream for an Xml file that defines servicing operation.</param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.ServicingStepGroupNotFoundException">
            At least one servicing step group is not defined in the configuration database. 
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.DeleteServicingOperation(System.String)">
            <summary>
            Deletes a servicing operation. 
            </summary>
            <remarks>This method does not delete servicing step groups that belong to the specified servicing operation.</remarks>
            <param name="servicingOperation">A servicing operation being deleted</param>
            <returns>true if the servicing is successfully found and deleted; otherwise, false. 
            This method returns false if servicing operation is not found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.GetServicingOperation(System.String)">
            <summary>
            Gets a specified servicing operation.
            </summary>
            <param name="servicingOperation">A servicing operation being queried, such as Install or Upgrade.</param>
            <returns>A servicing operation or null if specified servicing operation does not exist.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.GetServicingDetails(System.Guid,System.DateTime,Microsoft.TeamFoundation.Framework.Client.ServicingStepDetailFilterOptions,System.Int64,System.Boolean@)">
            <summary>
            Retrieves log entries for a servicing job.
            </summary>
            <param name="jobId">The id of the job to retrieve details for.</param>
            <param name="queueTime">QueueTime of the job invocation you want details for.</param>
            <param name="filterOptions">Controls how the queueTime is interpreted.</param>
            <param name="minDetailId">Specifies the minimum servicing step detail Id. 
            The method returns servicing step details with detailId greater or equal to minDetailId.</param>
            <param name="complete">When this method returns, contains true if the specified job has completed.</param>
            <returns>The log entries</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.UpdateServicingStepGroups(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.ServicingStepGroup})">
            <summary>
            Updates servicing step groups and servicing steps listed in the stepGroups collection.
            </summary>
            <param name="stepGroups">The step groups to add or update.</param>
            <remarks>
            Step groups are identified by their name property. A new step group replaces
            any pre-existing step group with the same name.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.UpdateServicingStepGroups(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Updates servicing step groups and servicing steps listed in the stepGroups collection.
            </summary>
            <param name="xmlStreams">Streams of xml documents containing serialized 
            servicing step groups.</param>
            <remarks>
            Step groups are identified by their name property. A new step group replaces
            any pre-existing step group with the same name.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.UpdateServicingStepGroups(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates servicing step groups and servicing steps defined in the xml documents.
            </summary>
            <param name="xmlFiles">Filesystem paths to xml documents containing serialized 
            servicing step groups</param>
            <remarks>
            Step groups are identified by their name property. A new step group replaces
            any pre-existing step group with the same name.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.GetServicingResources">
            <summary>
            Returns a list of ServicingResources by their unique name.
            </summary>
            <returns>list of ServicingResource names</returns>
            <remarks>
            There is no public way to access the content of a ServicingResource. You can 
            only upload and remove servicingResources, not view them. The Framework
            StepPerformer has several stepTypes that will access these resources.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.UpdateServicingResource(System.String,System.IO.Stream)">
            <summary>
            Add or replace a servicing resource for use by Framework stepTypes.
            </summary>
            <param name="name">A unique name for the servicing resource.</param>
            <param name="contentStream">A stream containing the content to add.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.UpdateServicingResource(System.String,System.String)">
            <summary>
            Add or replace a servicing resource for use by Framework stepTypes.
            </summary>
            <param name="name">A unique name for the servicing resource.</param>
            <param name="filePath">A file containing the servicing resource content.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.DeleteServicingResources(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete a servicing resource.
            </summary>
            <param name="resourceNames">The names of the resources to delete.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.DisableServicing(System.String)">
            <summary>
            Disables creation and servicing of team project collections, and waits for 
            in-progress servicing to complete. If servicing is already disabled, simply 
            returns false.
            </summary>
            <param name="reason">A short description of why servicing is being disabled. 
            Used for exceptions on servicing attempts.</param>
            <returns>True if servicing was previously enabled. False if servicing was 
            already disabled.</returns>
            <remarks>
            A processIdentifier String is generated and sent with this request. (See 
            overload.)
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.DisableServicing(System.String,System.String)">
            <summary>
            Disables creation and servicing of team project collections, and waits for 
            in-progress servicing to complete. If servicing is already disabled, simply 
            returns false.
            </summary>
            <param name="reason">A short description of why servicing is being disabled. 
            Used for exceptions on servicing attempts.</param>
            <param name="processIdentifier">A String uniquely identifying the calling 
            process to aid investigation by an administrator. 
            For example: "Machine: MYBOX; ProcessName: Upgrade.exe; PID: 1234; User: jdoe"
            </param>
            <returns>True if servicing was previously enabled. False if servicing was 
            already disabled.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.EnableServicing">
            <summary>
            Enables creation and servicing of team project collections.
            </summary>
            <returns>True if servicing was already enabled. False if servicing was 
            previously disabled.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.WaitForCollectionServicingToComplete(Microsoft.TeamFoundation.Framework.Client.ServicingJobDetail)">
            <summary>
            This method will block until a collection servicing operation has completed. It will then
            return the resulting collection. Note, you must have the Edit server-level information 
            permission to monitor collection servicing.
            </summary>
            <param name="jobDetail">The detail of the queued job.</param>
            <returns>The Team Project Collection that was being serviced.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.WaitForCollectionServicingToComplete(Microsoft.TeamFoundation.Framework.Client.ServicingJobDetail,System.TimeSpan)">
            <summary>
            This method will block until a collection servicing operation has completed. It will then
            return the resulting collection. Note, you must have the Edit server-level information 
            permission to monitor collection servicing.
            </summary>
            <param name="jobDetail">The detail of the queued job.</param>
            <param name="timeout">The time span that a TimeoutException should occur after.</param>
            <returns>The Team Project Collection that was being serviced.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.QueueCreateCollection(System.String,System.String,System.Boolean,System.String,Microsoft.TeamFoundation.Framework.Common.TeamFoundationServiceHostStatus,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Queues creation of a new team project collection on the server.
            </summary>
            <param name="name">The name of the collection</param>
            <param name="description">A description of the collection.</param>
            <param name="isDefault">If true, the collection is made the default for older clients not explicitly specifying a collection.</param>
            <param name="virtualDirectory">The public url virtual path associated with the collection</param>
            <param name="state">the initial state of the collection.</param>
            <param name="servicingTokens">Replacement strings for tokens in collection creation servicing steps.</param>
            <returns>Returns the servicing job result which contains the job and host Id</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.QueueCreateCollection(System.String,System.String,System.Boolean,System.String,Microsoft.TeamFoundation.Framework.Common.TeamFoundationServiceHostStatus,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Queues creation of a new team project collection on the server.
            </summary>
            <param name="name">The name of the collection</param>
            <param name="description">A description of the collection.</param>
            <param name="isDefault">If true, the collection is made the default for older clients not explicitly specifying a collection.</param>
            <param name="virtualDirectory">The public url virtual path associated with the collection</param>
            <param name="state">the initial state of the collection.</param>
            <param name="servicingTokens">Replacement strings for tokens in collection creation servicing steps.</param>
            <param name="dataTierConnectionString">A connection String to the SQL instance to create new collection database(s) on. Optional.</param>
            <param name="defaultConnectionString">A connection String to an existing empty database to be populated by CreateCollection. Database categories not associated with another connection String will default to this connection String. Optional.</param>
            <param name="databaseCategoryConnectionStrings">A dictionary mapping database categories to connection strings for existing empty databases to be populated by CreateCollection. Values here override the default connection String, if supplied. Optional.</param>
            <returns>Returns the servicing job result which contains the job and host Id</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.QueueAttachCollection(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Queues attachment of collection that has the given connection String.  This 
            overload will use the existing collection properties to create the collection.
            </summary>
            <param name="databaseConnectionString">The connection String of the collection to attach.</param>
            <param name="servicingTokens">Replacement strings for tokens in collection creation servicing steps.</param>
            <param name="cloneCollection">True if this collection should be a clone of the collection that was detached. If true, the collection instance id will get regenerated.</param>
            <returns>Returns the servicing job result which contains the job and host Id</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.QueueAttachCollection(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.String,System.String,System.String)">
            <summary>
            Queues attachment of collection that has the given connection String.  This 
            overload will use the existing collection properties to create the collection.
            </summary>
            <param name="databaseConnectionString">The connection String of the collection to attach.</param>
            <param name="servicingTokens">Replacement strings for tokens in collection creation servicing steps.</param>
            <param name="cloneCollection">True if this collection should be a clone of the collection that was detached. If true, the collection instance id will get regenerated.</param>
            <param name="name">The new name for this collection or null to use the existing name.</param>
            <param name="description">The new description for this collection or null to use the existing description.</param>
            <param name="virtualDirectory">The public url virtual path associated with the collection or null to use the existing virtual directory.</param>
            <returns>Returns the servicing job result which contains the job and host Id</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.QueueDetachCollection(System.Guid,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String@)">
            <summary>
            Queues the snapshot operation for the collection.
            </summary>
            <param name="collectionId">The id of the collection to snapshot.</param>
            <param name="servicingTokens">Replacement strings for tokens in collection creation servicing steps.</param>
            <param name="collectionStoppedMessage">The message to show for requests that hit this collection since it will be taken offline if it isn't already.</param>
            <param name="prepareOnly">If true, the collection data will be prepared for attach and left attached to the current TFS Instance.</param>
            <param name="detachedConnectionString">The connection string to the database of the detached collection.</param>
            <returns>Returns the servicing job result which contains the job and host Id</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.QueueDetachCollection(Microsoft.TeamFoundation.Framework.Client.TeamProjectCollection,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String@)">
            <summary>
            Queues the detach operation for the collection.
            </summary>
            <param name="teamProjectCollection">The team project collection to detach.</param>
            <param name="collectionStoppedMessage">The message to show for requests that hit this collection since it will be taken offline if it isn't already.</param>
            <param name="prepareOnly">If true, the collection data will be prepared for attach and left attached to the current TFS Instance.</param>
            <param name="detachedConnectionString">The connection string to the database of the detached collection.</param>
            <returns>Returns the servicing job result which contains the job and host Id</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.DeleteProject(System.Guid,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Deletes a project and waits for initial deletion operation to complete.
            </summary>
            <param name="collectionId">The team project collection containing the project.</param>
            <param name="projectUrl">The project to be deleted.</param>
            <param name="servicingTokens">Replacement strings for tokens in project deletion servicing steps.</param>
            <returns>Returns the servicing job result which contains the job and host Id</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionServicing.QueueDeleteProject(System.Guid,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Queues a project to be deleted.
            </summary>
            <param name="collectionId">The team project collection containing the project.</param>
            <param name="projectUri">The project to be deleted.</param>
            <param name="servicingTokens">Replacement strings for tokens in project deletion servicing steps.</param>
            <returns>Returns the servicing job result which contains the job and host Id</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ServicingOperation">
            <summary>
            Represents a block of one or more servicing step groups that are to be run back to 
            back.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ServicingStep.SerializeStepData(System.Object)">
            <summary>
            
            </summary>
            <param name="stepData"></param>
            <param name="omitXmlDeclaration">If true the Xml header is omitted.</param>
            <returns></returns>
            <remarks>
            If the Xml header is not omitted, it will specify the encoding as UTF-16.
            </remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServicingStep.Name">
            <summary>
            The unique name of the servicing step.
            </summary>
            <remarks>
            A servicing step name must be unique within a list of 
            servicing steps for a servicing operation. The same servicing step 
            name can appear in multiple lists ("VersionControl Schema" could 
            appear in the lists for both Upgrade and Downgrade). Its recommended
            the steps with the same name all have the same Component and StepType
            and related implementations. For example "VersionControl Schema" in 
            the Downgrade script should likely undo the work performed in the 
            "VersionControl Schema" upgrade step.
            </remarks>
            <example>
            Create WorkItem Database
            </example>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServicingStep.StepPerformer">
            <summary>
            Identifies the IStepPerformer class that can perform this servicing step.
            </summary>
            <example>
            "Framework"
            </example>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServicingStep.StepType">
            <summary>
            The action to perform. The StepPerformer must know how to perform this 
            action.
            </summary>
            <example>
            "CreateDatabase"
            </example>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServicingStepGroup.Name">
            <summary>
            The unique name of the servicing step group.
            </summary>
            <remarks>
            A servicing step group name must be unique within a list of 
            servicing step groups for a servicing operation. The same servicing step 
            group name can appear in multiple lists ("TfsSourceControl" could 
            appear in the lists for both Upgrade and Downgrade).
            </remarks>
            <example>
            TfsSourceControl
            </example>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServicingStepGroup.Steps">
            <summary>
            The servicing steps that make up the step group, in order.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ConnectedService">
            <summary>
            This class has all the "public" information but also the secret data as well.
            It *does not* serialize the secret values, those are fetched from the client on demand.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectedService.Endpoint">
            <summary>
            A URI specific to this service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectedService.CredentialsXml">
            <summary>
            Credentials in an xml format for connecting to this service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectedService.OAuthToken">
            <summary>
            The OAuth token of the user who created the connected servcie.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectedService.ServiceMetadata">
            <summary>
            The service metadata which includes the name (ID), friendly name, description, kind, TeamProject and ProjectId
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ConnectedServiceCreationData">
            <summary>
            This class contains all the information needed to create a connected servcie.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ConnectedServiceCreationData.#ctor(System.String,System.String,Microsoft.TeamFoundation.Framework.Client.ConnectedServiceKind,System.String,System.String,System.Uri,System.Uri,System.String)">
            <summary>
            Constructor for ConnectedServiceCreationData
            </summary>
            <param name="name">Name of the service such as subscription id or other GUID.</param>
            <param name="teamProject">Name of the project associated with this service</param>
            <param name="kind">The kind of service.</param>
            <param name="friendlyName">A friendly name to represent the service in place of 'name' which will often be a GUID.</param>
            <param name="description">Extra description on the service.</param>
            <param name="serviceUri">Optional uri to connect directly to the service such as https://windows.azure.com</param>
            <param name="endpoint">A URI specific to this service.</param>
            <param name="credentialsXml">Credentials in an xml format for connecting to this service.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectedServiceCreationData.CredentialsXml">
            <summary>
            Credentials in an xml format for connecting to this service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectedServiceCreationData.Endpoint">
            <summary>
            The URI specific to this service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectedServiceCreationData.ServiceMetadata">
            <summary>
            The service metadata which includes the name (ID), friendly name, description, kind, TeamProject and ProjectId
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ConnectedServicesService.CreateConnectedService(System.String,System.String,Microsoft.TeamFoundation.Framework.Client.ConnectedServiceKind,System.String,System.String,System.Uri,System.Uri,System.String)">
            <summary>
            Creates a new Connected Service associated to the team project.
            </summary>
            <param name="name">Name of the service such as subscription id or other GUID.</param>
            <param name="teamProject">Name of the project associated with this service</param>
            <param name="kind">The kind of service.</param>
            <param name="friendlyName">An optional friendly name to represent the service in place of 'name' which will often be a GUID.</param>
            <param name="description">An optional description for the service</param>
            <param name="endpoint">Required, the Url of the endpoint for the servcie</param>
            <param name="credentialsXml">Required, crentials that allow access to the service, in a publishsettings XML format</param>
            <returns>The ConnectedServiceMetadata for the new service</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ConnectedServicesService.QueryConnectedServices(System.String)">
            <summary>
            List of connected services associated with the project
            </summary>
            <returns>List of ConnectedServiceMetadata - no secret information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ConnectedServicesService.GetConnectedService(System.String,System.String)">
            <summary>
            Get all of the data for a particular connected service if associated with
            the passed in team project.
            </summary>
            <param name="name">Service name such as azure subscription id</param>
            <param name="teamProject">Project name associated to this service</param>
            <returns>Connected service including the connection credentials</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ConnectedServicesService.DoesConnectedServiceExist(System.String,System.String)">
            <summary>
            Checks if a connected service exists anywhere in the collection, if user has full permissions in specified project
            </summary>
            <param name="name"></param>
            <param name="teamProject"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ConnectedServicesService.DeleteConnectedService(System.String,System.String)">
            <summary>
            Deletes a connected service
            </summary>
            <param name="name">Service name such as azure subscription id</param>
            <param name="projectName">Project name associated to this service</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IEventService.SubscribeEvent(System.String,System.String,Microsoft.TeamFoundation.Framework.Client.DeliveryPreference)">
            <summary>
            Subscribes the caller to an event using the specified options.
            </summary>
            <param name="eventType"></param>
            <param name="filterExpression"></param>
            <param name="preferences"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IEventService.SubscribeEvent(System.String,System.String,Microsoft.TeamFoundation.Framework.Client.DeliveryPreference,System.String)">
            <summary>
            Subscribes the caller to an event using the specified options and classification.
            </summary>
            <param name="eventType"></param>
            <param name="filterExpression"></param>
            <param name="preferences"></param>
            <param name="classification"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IEventService.SubscribeEvent(System.String,System.String,System.String,Microsoft.TeamFoundation.Framework.Client.DeliveryPreference)">
            <summary>
            Subscribes the user designated by <paramref name="userId"/> to an event using the specified options.
            </summary>
            <param name="eventType"></param>
            <param name="filterExpression"></param>
            <param name="preferences"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IEventService.SubscribeEvent(System.String,System.String,System.String,Microsoft.TeamFoundation.Framework.Client.DeliveryPreference,System.String,System.String)">
            <summary>
            Subscribes the user designated by <paramref name="userId"/> to an event using the specified options and classification.
            </summary>
            <param name="eventType"></param>
            <param name="filterExpression"></param>
            <param name="preferences"></param>
            <param name="classification"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IEventService.UnsubscribeEvent(System.Int32,System.String)">
            <summary>
            Removes the event subscription for the caller.
            </summary>
            <param name="subscriptionId"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IEventService.GetAllEventSubscriptions">
            <summary>
            Retrieves event subscriptions for all users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IEventService.GetAllEventSubscriptions(System.String,System.String)">
            <summary>
            Retrieves event subscriptions with the given classification for all users.
            </summary>
            <param name="classification"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IEventService.GetEventSubscriptions(System.String)">
            <summary>
            Retrieves event subscriptions for the specified user.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IEventService.GetEventSubscriptions(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Retrieves event subscriptions for the specified user.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IEventService.GetEventSubscriptions(System.String,System.String,System.String)">
            <summary>
            Retrieves event subscriptions with the given classification for the specified user.
            </summary>
            <param name="user"></param>
            <param name="classification"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IEventService.GetEventSubscriptions(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.String,System.String)">
            <summary>
            Retrieves event subscriptions with the given classification for the specified user.
            </summary>
            <param name="user"></param>
            <param name="classification"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IEventService.FireEvent(System.Object)">
            <summary>
            Schedules an event to be fired by the server to all matching subscribers.
            </summary>
            <param name="theEvent"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IEventService.FireEvents(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Schedules events to be fired by the server to all matching subscribers.
            </summary>
            <param name="theEvents"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationEventService.SerializeEvent(System.Object)">
            <summary>
            Helper method to serialize an object to an Xml string representation.
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.DeliveryPreference.Schedule">
            <summary>
            Gets or sets the delivery schedule
            </summary>
            <remarks>
            NOTE: Only DeliverySchedule.Immediate is current supported. Other values are reserved for possible future use.
            </remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ActionDeniedBySubscriberException.StatusCode">
            <summary>
            Gets the error code provided by the subscriber.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ActionDeniedBySubscriberException.SubscriberName">
            <summary>
            Gets the name of the subscriber that denied the action.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ActionDeniedBySubscriberException.SubscriberType">
            <summary>
            Gets the type name of the subscriber that denied the action.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.TeamFoundationServerNotSupportedException">
            <summary>
            This exception is thrown when connecting to a server whose version is no longer supported.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationServerNotSupportedException.#ctor(System.String)">
            <summary>
            Initializes an exception with the specified server name or URL.
            </summary>
            <param name="nameOrUrl">The server name or URL</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationServerNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an exception from serialized data
            </summary>
            <param name="info">object holding the serialized data</param>
            <param name="context">context info about the source or destination</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ServicingJobDetail">
            <summary>
            Each servicing operation for host is recorded and the details of the
            operation are described by the ServicingJobDetail
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollection.Id">
            <summary>
            The Id for the collection is generated when the collection is created
            on the server. This idenitfier will never change unlike any of the 
            other properties.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollection.Name">
            <summary>
            The name is a friendly name for the collection and can be changed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollection.Description">
            <summary>
            A description of the Team Project Collection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollection.IsDefault">
             <summary>
             Default may be set to true on one team project collection. This will
             allow the V1 client to access the site this collection is on and be
             redirected to this project collection.
            
             If a collection is updated and made the default collection the current
             collection marked as default is changed to False.
             </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollection.Registered">
            <summary>
            Once a collection is successfully created/attach/upgraded it is
            considered regsitered. This means the collection is a known entity
            within this instance.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollection.VirtualDirectory">
            <summary>
            The virtual directory is the relative path from the application to the
            location of the collection within the applications URL namespace.
            
            Example: 
                Application = http://www.microsoft.com/TeamFoundation
                VirtualDirectry = ~/ProjectCollection/TeamSystem
            
            The fully qualified URL of this project collection is:
                http://www.microsoft.com/TeamFoundation/ProjectCollection/TeamSystem
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollection.State">
            <summary>
            This is the current state of the project collection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollection.Refresh">
            <summary>
            Refresh property values to their current value on the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollection.Save">
            <summary>
            Save the current property values.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollection.Delete">
            <summary>
            Delete the collection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionService.AddServicingOperation(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a new servicing operation to the configuration database. All servicing step groups listed
            in the stepGroups collection must be added to the configuration database before calling this method.
            </summary>
            <param name="servicingOperation">A servicing operation to be added, such as Install</param>
            <param name="stepGroups"></param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.ServicingOperationAlreadyExistsException">
            An operation with the same name already exists the configuration database.
            </exception>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.ServicingStepGroupNotFoundException">
            At least one servicing step group from stepGroups collection is not defined in the configuration database. 
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionService.AddServicingOperation(System.IO.Stream)">
            <summary>
            Adds a new servicing operation to the configuration database. All servicing step groups specified
            in the Xml file must be added to the configuration database before calling this method.
            </summary>
            <param name="xmlStream">A stream for an Xml document that defines servicing operation.</param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.ServicingOperationAlreadyExistsException">
            An operation with the same name already exists the configuration database.
            </exception>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.ServicingStepGroupNotFoundException">
            At least one servicing step group is not defined in the configuration database. 
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionService.UpdateServicingOperation(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates servicing operation. All servicing step groups listed
            in the stepGroups collection must be added to the configuration database before calling this method.
            If stepGroups is null or empty, the specified servicing operation is be deleted.
            </summary>
            <param name="servicingOperation">A servicing operation being updated</param>
            <param name="stepGroups">A collection of servicing step groups</param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.ServicingStepGroupNotFoundException">
            At least one servicing step group from stepGroups collection is not defined in the configuration database. 
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionService.UpdateServicingOperation(System.IO.Stream)">
            <summary>
            Updates servicing operation. All servicing step groups specified
            in the Xml file must be added to the configuration database before calling this method.
            </summary>
            <param name="xmlStream">A stream for an Xml document that defines servicing operation.</param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.ServicingStepGroupNotFoundException">
            At least one servicing step group is not defined in the configuration database. 
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionService.DeleteServicingOperation(System.String)">
            <summary>
            Deletes specified servicing operation. 
            </summary>
            <remarks>
            This method does not delete servicing step groups that belong to the specified servicing operation.
            </remarks>
            <param name="servicingOperation">A servicing operation being deleted</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionService.GetServicingOperation(System.String)">
            <summary>
            Gets a specified servicing operation.
            </summary>
            <param name="servicingOperation">Servicing operation being queried, such as Install or Upgrade.</param>
            <returns>A servicing operation or null if specified servicing operation does not exist.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionService.GetServicingDetails(System.Guid,System.DateTime,Microsoft.TeamFoundation.Framework.Client.ServicingStepDetailFilterOptions,System.Int64,System.Boolean@)">
            <summary>
            Retrieves log entries for a servicing job.
            </summary>
            <param name="jobId">The id of the job to retrieve details for.</param>
            <param name="queueTime">QueueTime of the job invocation you want details for.</param>
            <param name="filterOptions">Controls how the queueTime is interpreted.</param>
            <param name="minDetailId">Specifies the minimum servicing step detail Id. 
            The method returns servicing step details with detailId greater or equal to minDetailId.</param>
            <returns>The log entries</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionService.WaitForCollectionServicingToComplete(Microsoft.TeamFoundation.Framework.Client.ServicingJobDetail)">
            <summary>
            This method will block until a collection servicing operation has completed.  Note, you must
            have the Edit server-level information 
            </summary>
            <param name="jobDetail"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionWebService">
            <summary>
            Create the friendly methods for the collection web-service.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionProperties">
            <summary>
            The TeamProjectCollectionProperties contains the configuration
            information to configure a team project collection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionProperties.Authority">
            <summary>
            The authority is the accepted host name by which to access the team project collection
            when constructing a URL which is meant to target the collection. If the authority is null,
            then any URL which targets the TFS instance can be used to resolve the team project collection
            (via exclusive use of the VirtualDirectory property). Otherwise both the Authority and the VirtualDirectory
            are used to resolve the team project collection
            
            Example:
            Authority = contoso.tfs.net
            VirtualDirectory = ~/ProjectCollection
            
            A URL such as the following will target this project collection:
            http://contoso.tfs.net/ProjectCollection/Services/v3.0/LocationService.asmx
            
            Any other host name in the URL will *not* be able to resolve this project collection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionProperties.DefaultConnectionString">
            <summary>
            The connection string to use for any database category not found in 
            DatabaseCategoryConnectionStrings.
            </summary>
            <remarks>
            Can be null for collection creation. If both 
            DatabaseCategoryConnectionStrings and DefaultConnectionString are null, 
            a new collection database will be created and both 
            DatabaseCategoryConnectionStrings and DefaultConnectionString will be set. 
            
            During collection creation/servicing, if DefaultConnectionString is null 
            but DatabaseCategoryConnectionStrings is not then references to unknown 
            database categories will result in failure.
            
            If DefaultConnectionString is not null, it must refer to a database that 
            already exists.
            </remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionProperties.Description">
            <summary>
            A description of the collection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionProperties.Id">
            <summary>
            The Id for the collection is generated when the collection is created
            on the server. This idenitfier will never change unlike any of the 
            other properties.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionProperties.IsDefault">
            <summary>
            Default may be set to true on one team project collection. This will
            allow the V1 client to access the site this collection is on and be
            redirected to this project collection.
            
            If a collection is updated and made the default collection the current
            collection marked as default is changed to False.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionProperties.Name">
            <summary>
            The name is a friendly name for the collection and can be changed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionProperties.Registered">
            <summary>
            This defines whether or not the collection is currently registered
            with the application or is it being created or been deleted.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamProjectCollectionProperties.VirtualDirectory">
            <summary>
            The virtual directory is the relative path from the application to the
            location of the collection within the applications URL namespace.
            
            Example: 
            Application = http://www.microsoft.com/TeamFoundation
            VirtualDirectry = ~/ProjectCollection/TeamSystem
            
            The fully qualified URL of this project collection is:
            http://www.microsoft.com/TeamFoundation/ProjectCollection/TeamSystem
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAdministrationService.CancelRequest(System.Guid,System.Int64,System.String)">
            <summary>
            Cancels the specified request if it is currently active.
            </summary>
            <param name="hostId">The host on which the request is active</param>
            <param name="requestId">The ID of the request to cancel</param>
            <param name="reason">An optional message explaining why the request is being cancelled</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAdministrationService.QueryActiveRequests(Microsoft.TeamFoundation.Client.TfsConnection,System.Boolean)">
            <summary>
            Queries for active requests on the specified server. If the host does not exist then a null value is
            returned.
            </summary>
            <param name="teamFoundationServer">The host which should be queried</param>
            <param name="includeDetails">Whether or not to include request details (e.g. parameters)</param>
            <returns>Host properties with active requests included</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAdministrationService.QueryActiveRequests(System.Guid,System.Boolean)">
            <summary>
            Queries for active requests on the specified host. If the host does not exist then a null value is
            returned.
            </summary>
            <param name="hostId">The host ID which should be queried</param>
            <param name="includeDetails">Whether or not to include request details (e.g. parameters)</param>
            <returns>Host properties with active requests included</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IAdministrationService.QueryActiveRequests(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
            <summary>
            Queries for active requests on all specified hosts. If a null or empty value is specified for the 
            first parameter than requests for all hosts visible to the caller is returned. The return value is
            sorted in the same order as the input hosts IDs, where a null value indicates the host could not
            be retrieved.
            </summary>
            <param name="hostIds">The host IDs which should be queried</param>
            <param name="includeDetails">Whether or not to include request details (e.g. parameters)</param>
            <returns>A collection of host properties with active requests included</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationAdministrationService.CancelRequest(System.Guid,System.Int64,System.String)">
            <summary>
            Cancels the specified request if it is currently active.
            </summary>
            <param name="hostId">The host on which the request is active</param>
            <param name="requestId">The ID of the request to cancel</param>
            <param name="reason">An optional message explaining why the request is being cancelled</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationAdministrationService.QueryActiveRequests(Microsoft.TeamFoundation.Client.TfsConnection,System.Boolean)">
            <summary>
            Queries for active requests on the specified server. If the host does not exist then a null value is
            returned.
            </summary>
            <param name="hostId">The host ID which should be queried</param>
            <param name="includeDetails">Whether or not to include request details (e.g. parameters)</param>
            <returns>Host properties with active requests included</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationAdministrationService.QueryActiveRequests(System.Guid,System.Boolean)">
            <summary>
            Queries for active requests on the specified host. If the host does not exist then a null value is
            returned.
            </summary>
            <param name="hostId">The host ID which should be queried</param>
            <param name="includeDetails">Whether or not to include request details (e.g. parameters)</param>
            <returns>Host properties with active requests included</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationAdministrationService.QueryActiveRequests(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
            <summary>
            Queries for active requests on all specified hosts. If a null or empty value is specified for the 
            first parameter than requests for all hosts visible to the caller is returned. The return value is
            sorted in the same order as the input hosts IDs, where a null value indicates the host could not
            be retrieved.
            </summary>
            <param name="hostIds">The host IDs which should be queried</param>
            <param name="includeDetails">Whether or not to include request details (e.g. parameters)</param>
            <returns>A collection of host properties with active requests included</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.MultipleIdentitiesFoundException.MatchingIdentityDisplayNames">
            <summary>
            Only populated when this exception is returned from the server. This array is parallel with the
            MatchingIdentityUniqueNames array.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.MultipleIdentitiesFoundException.MatchingIdentityUniqueNames">
            <summary>
            Only populated when this exception is returned from the server. This array is parallel with the
            MatchingIdentityDisplayNames array.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FilteredIdentityService.SearchForUsers(System.String)">
            <summary>
            Search for user identities containing the passed in search term
            </summary>
            <param name="searchTerm"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FilteredIdentityService.MakeDisplayNamesUnique(System.Collections.Generic.List{Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity})">
            <summary>
            This method will make the display names in the list unique
            </summary>
            <param name="identities"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FilteredIdentityService.ProcessIdentities(Microsoft.TeamFoundation.Framework.Client.FilteredIdentitiesList)">
            <summary>
            Process the list of identites to mae display names unique.  If 2 identities have the same
            display name, this method will append the account name to the display name.
            </summary>
            <param name="identityList"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor">
            <summary>
            An Identity descriptor is a wrapper for the identity type (Windows, Passport)
            along with a unique identifier such as the SID or PUID.
            </summary>
            <summary>
            An Identity descriptor is a wrapper for the identity type (Windows SID, Passport)
            along with a unique identifier such as the SID or PUID.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor.Data">
            <summary>
            Any additional data specific to identity type.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor.Identifier">
            <summary>
            The unique identifier for this identity, not exceeding 256 chars, 
            which will be persisted.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor.IdentityType">
            <summary>
            Type of descriptor (for example, Windows, Passport, etc.).
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.IdentityDescriptorComparer">
            <summary>
            Class used for comparing IdentityDescriptors
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityHelper.CreateDescriptorFromSid(System.String)">
            <summary>
            Create TFS or Windows descriptor for SID based identities. If the type is
            already known, using the type specific Create method will be faster. TFS
            sids start with S-1-9-1551374245. Anything else is treated as Windows.
            Known forms of Windows SIDs are S-1-5-xxxx, well known sids of the form 
            S-1-0, S-1-0-xx, S-1-2, S-1-3, S-1-3-xx, S-1-4, S-1-5, S-1-5-xxx
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityHelper.CreateDescriptorFromSid(System.Security.Principal.SecurityIdentifier)">
            <summary>
            Create TFS or Windows descriptor for SID based identities. If the type is
            already known, using the type specific Create method will be faster. TFS
            sids start with S-1-9-1551374245. Anything else is treated as Windows.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityHelper.CreateDescriptorFromSid(Microsoft.TeamFoundation.Framework.Common.SecurityIdentifierInfo)">
            <summary>
            Create TFS or Windows descriptor for SID based identities. If the type is
            already known, using the type specific Create method will be faster. TFS
            sids start with S-1-9-1551374245. Anything else is treated as Windows.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityHelper.CreateWindowsDescriptor(System.String)">
            <summary>
            Create descriptor with identity type of Windows.
            Note - this does not validate that the SID really is a Windows SID.
            But if that is not the case, failure will occur later when this
            descriptor is used in IMS APIs.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityHelper.CreateWindowsDescriptor(System.Security.Principal.SecurityIdentifier)">
            <summary>
            Create descriptor with identity type of Windows.
            Note - this does not validate that the SID really is a Windows SID.
            But if that is not the case, failure will occur later when this
            descriptor is used in IMS APIs.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityHelper.CreateWindowsDescriptor(Microsoft.TeamFoundation.Framework.Common.SecurityIdentifierInfo)">
            <summary>
            Create descriptor with identity type of Windows.
            Note - this does not validate that the SID really is a Windows SID.
            But if that is not the case, failure will occur later when this
            descriptor is used in IMS APIs.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityHelper.CreateTeamFoundationDescriptor(System.String)">
            <summary>
            Create descriptor with identity type of TeamFoundation.
            Note - this does not validate that the SID really is a TeamFoundation SID.
            But if that is not the case, failure will occur later when this
            descriptor is used in IMS APIs.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityHelper.CreateTeamFoundationDescriptor(System.Security.Principal.SecurityIdentifier)">
            <summary>
            Create descriptor with identity type of TeamFoundation.
            Note - this does not validate that the SID really is a TeamFoundation SID.
            But if that is not the case, failure will occur later when this
            descriptor is used in IMS APIs.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityHelper.CreateTeamFoundationDescriptor(Microsoft.TeamFoundation.Framework.Common.SecurityIdentifierInfo)">
            <summary>
            Create descriptor with identity type of TeamFoundation.
            Note - this does not validate that the SID really is a TeamFoundation SID.
            But if that is not the case, failure will occur later when this
            descriptor is used in IMS APIs.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityHelper.GetGroupSpecialType(Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity)">
            <summary>
            Helper to get "special" type designation of TFS groups.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityHelper.GetDomainUserName(Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity,System.String@)">
            <summary>
            Get identity name for display. In addition the name which can be
            uniquely resolved is also returned.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityHelper.GetDomainUserName(Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity)">
            <summary>
            Get identity name for display.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityHelper.CreateSecurityToken(Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity)">
            <summary>
            Security token for an identity that we own (TFS group).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService.ReadIdentities(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor[],Microsoft.TeamFoundation.Framework.Common.MembershipQuery,Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions)">
            <summary>
             Read identities for given descriptors. First try IMS store. If not found, optionally try   
             source like AD. It is FASTEST when no membership information is requested.
            </summary>
            <param name="descriptors">descriptors</param>
            <param name="queryMembership">none, direct or expanded membership information</param>
            <param name="readOptions">readOptions</param>
            <returns>Array of identities, corresponding 1 to 1 with input array.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService.ReadIdentity(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,Microsoft.TeamFoundation.Framework.Common.MembershipQuery,Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions)">
            <summary>
             Overload for above method that takes a single descriptor.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService.ReadIdentities(System.Guid[],Microsoft.TeamFoundation.Framework.Common.MembershipQuery)">
            <summary>
             Read identities for given Guids (TF Id). 
             Note - performs FASTEST when no membership information is requested.
            </summary>
            <param name="teamFoundationIds">ids</param>
            <param name="queryMembership">none, direct or expanded membership information</param>
            <returns>Array of identities, corresponding 1 to 1 with input array.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService.ReadIdentities(Microsoft.TeamFoundation.Framework.Common.IdentitySearchFactor,System.String[],Microsoft.TeamFoundation.Framework.Common.MembershipQuery,Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions)">
            <summary>
             Read identities, first from IMS store, then (optionally)
             source like AD (the actual source will be indicated by a property 
             of the identity).
            </summary>
            <param name="searchFactor">how identities are specified</param>
            <param name="factorValues">factorValues (by account name, etc.)</param>
            <param name="queryMembership">none, direct or expanded membership information</param>
            <param name="readStoredIdentitiesOnly">read from IMS store only, not from external sources such as AD.</param>
            <param name="includeDeletedIdentities">include deleted identities.</param>
            <returns>Array of identities. </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService.ReadIdentity(Microsoft.TeamFoundation.Framework.Common.IdentitySearchFactor,System.String,Microsoft.TeamFoundation.Framework.Common.MembershipQuery,Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions)">
            <summary>
             Overload for above method that takes a single search factor and returns 
             match following this order. 
             1. When there is no match, null.
             2. When there is a single match, that identity regardless of whether the identity is active.
             3. When there is a single active identity match, that identity.
            </summary>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.MultipleIdentitiesFoundException">thrown when there are multiple matches, unless exactly one identity is active.</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService.CreateApplicationGroup(System.String,System.String,System.String)">
            <summary>
            Creates a TFS application group
            </summary>
            <param name="projectUri">If null or empty, the group will be created at the server scope;
            or the group will be created at the project scope per this parameter</param>
            <param name="groupName">name</param>
            <param name="groupDescription">description. can be null</param>
            <returns>IdentityDescriptor for the created group whose id is the group's Sid</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService.ListApplicationGroups(System.String,Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions)">
            <summary>
            Lists all TFS application groups within the specified scope
            </summary>
            <param name="projectUri">If null or empty, application groups at the server scope will be listed;
            or application groups at the project scope, per this parameter, will be listed</param>
            <returns>Application groups as an array of identities</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService.GetScopeName(System.String)">
            <summary>
            Gets the scope name for the provided scope id.
            </summary>
            <param name="scopeId">The id for the scope who's name is needed.</param>
            <returns>The scope name.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService.UpdateApplicationGroup(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,Microsoft.TeamFoundation.Framework.Common.GroupProperty,System.String)">
            <summary>
            Updates a property of a TFS application group
            </summary>
            <param name="groupSid">the unique identifier (SID) for the group</param>
            <param name="groupProperty">which property to update</param>
            <param name="newValue">the new value for the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService.DeleteApplicationGroup(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Deletes a TFS application group
            </summary>
            <param name="groupSid">the unique identifier (SID) for the group</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService.AddMemberToApplicationGroup(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
             Add member to TFS Group.
            </summary>
            <param name="groupSid">TFS group Sid</param>
            <param name="descriptor">member</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService.RemoveMemberFromApplicationGroup(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
             Remove member from TFS Group.
            </summary>
            <param name="groupSid">TFS group Sid</param>
            <param name="descriptor">member</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService.IsMember(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
             Expanded membership query.
            </summary>
            <param name="groupDescriptor">group</param>
            <param name="descriptor">member</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService.RefreshIdentity(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
             Sync an identity now. This identity must already be in the IMS store. If  
             identity is a group, its DIRECT members' properties will also be synced (asynchronously). 
            </summary>
            <param name="descriptor">identity specification. Null implies caller</param>
            <returns> True if identity is in IMS (in which case will be synced now), else false.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService.IsOwner(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
             Check if the given descriptor is of TeamFoundation type, and belongs
             to this IMS host. This does not confirm that such a group actually exists,
             just that the Sid pattern belongs to this host.
            </summary>
            <param name="descriptor"></param>
            <returns> True if this host owns Sid, else false.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService.IsOwnedWellKnownGroup(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Check if the given descriptor is of TeamFoundation type, belongs
            to this IMS host and is a well-known group.  This does not confirm
            that such a group actually exists, just that the Sid pattern meets these
            requirements.
            </summary>
            <param name="descriptor"></param>
            <returns>True if owned and is well-known group.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService2.AddRecentUser(Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity)">
            <summary>
            Adds the specified identity to MRU list of users for the current user.
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService2.AddRecentUser(System.Guid)">
            <summary>
            Adds the specified identity to MRU list of users for the current user.
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService2.ReadFilteredIdentities(System.String,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            ReadFilteredIdentities is used to retrieve a set of identities based
            on an expression. The expression is a syntax that resembles a SQL
            WHERE clause. For full details on the expressions capabilities see
            documentation on the QueryExpression class.
            </summary>
            <param name="scope"></param>
            <param name="expression"></param>
            <param name="suggestedPageSize"></param>
            <param name="lastSearchResult"></param>
            <param name="lookForward"></param>
            <param name="queryMembership"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IdentityManagementService2.AddUser(System.Object)">
            <summary>
            Worer method of for adding a user to the MRU
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.ReadIdentities(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor[],Microsoft.TeamFoundation.Framework.Common.MembershipQuery,Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions)">
            <summary>
             Read identities for given descriptors. First try IMS store. If not found, optionally try   
             source like AD. 
             Note - performance will be fastest when no membership information is requested.
            </summary>
            <param name="descriptors">descriptors (descriptor is identity type + identifier)</param>
            <param name="queryMembership">none, direct or expanded membership information</param>
            <param name="readOptions">read options, such as reading from source</param>
            <returns>Array of identities, corresponding 1 to 1 with input descriptor array.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.ReadIdentity(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,Microsoft.TeamFoundation.Framework.Common.MembershipQuery,Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions)">
            <summary>
             Overload that takes a single descriptor.
             Read identity for given descriptor. First try IMS store. If not found, optionally try   
             source like AD. 
             Note - performance will be fastest when no membership information is requested.
            </summary>
            <param name="descriptor">identity type + identifier</param>
            <param name="queryMembership">none, direct or expanded membership information</param>
            <param name="readOptions">read options, such as reading from source</param>
            <returns>identity if found, else null</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.ReadIdentities(System.Guid[],Microsoft.TeamFoundation.Framework.Common.MembershipQuery)">
            <summary>
             Read identities by Team Foundation Id. 
             Note - performance will be fastest when no membership information is requested.
            </summary>
            <param name="teamFoundationIds">identity ids</param>
            <param name="queryMembership">none, direct or expanded membership information</param>
            <returns>Array of identities, corresponding 1 to 1 with input array</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.ReadIdentities(Microsoft.TeamFoundation.Framework.Common.IdentitySearchFactor,System.String[],Microsoft.TeamFoundation.Framework.Common.MembershipQuery,Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions)">
            <summary>
             Read identities based on search factor. First read from IMS store, 
             then (optionally) read from source like AD.
            </summary>
            <param name="searchFactor">how search is specified (by account name, etc.)</param>
            <param name="searchFactorValues">actual search strings (account names, etc.)</param>
            <param name="queryMembership">none, direct or expanded membership information</param>
            <param name="readOptions">readOptions, such as reading from source</param>
            <returns>Arrays of identities. Inner array corresponds 1 to 1 with search factor values</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.ReadIdentity(Microsoft.TeamFoundation.Framework.Common.IdentitySearchFactor,System.String,Microsoft.TeamFoundation.Framework.Common.MembershipQuery,Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions)">
            <summary>
             Overload that takes a single search factor and returns match following this order. 
             1. With multiple matches, active identity if exists, else first match.
             2. When there is a single match, the match.
             3. When there is no match, null.
             
             Read identity based on search factor. First read from IMS store, 
             then (optionally) read from source like AD.
            </summary>
            <param name="searchFactor">how search is specified (by account name, etc.)</param>
            <param name="searchFactorValue">actual search string (account name, etc.)</param>
            <param name="queryMembership">none, direct or expanded membership information</param>
            <param name="readOptions">readOptions, such as reading from source</param>
            <returns>Array of matching identities</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.CreateApplicationGroup(System.String,System.String,System.String)">
            <summary>
            Creates a TFS application group
            </summary>
            <param name="scopeId">Scope Uri, specifying whether group scope is project level or global 
                                  to this host. Null or empty value signifies global scope</param>
            <param name="groupName">name</param>
            <param name="groupDescription">description. can be null</param>
            <returns>IdentityDescriptor of the created group</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.ListApplicationGroups(System.String,Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions)">
            <summary>
            Lists all TFS application groups within the specified scope
            </summary>
            <param name="scopeId">Scope Uri, specifying whether group scope is project level or global 
                                  to this host. Null or empty value signifies global scope</param>
            <param name="readOptions">read options</param>
            <returns>Application groups as an array of identities</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.UpdateApplicationGroup(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,Microsoft.TeamFoundation.Framework.Common.GroupProperty,System.String)">
            <summary>
            Updates a property of a TFS application group
            </summary>
            <param name="groupDescriptor">groupDescriptor</param>
            <param name="groupProperty">which property to update</param>
            <param name="newValue">the new value for the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.DeleteApplicationGroup(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Deletes a TFS application group
            </summary>
            <param name="groupDescriptor">groupDescriptor</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.AddMemberToApplicationGroup(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
             Add member to TFS Group.
            </summary>
            <param name="groupDescriptor">groupDescriptor</param>
            <param name="descriptor">member</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.RemoveMemberFromApplicationGroup(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
             Remove member from TFS Group.
            </summary>
            <param name="groupDescriptor">groupDescriptor</param>
            <param name="descriptor">member</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.IsMember(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
             Expanded membership query for direct or nested member.
            </summary>
            <param name="groupDescriptor">group</param>
            <param name="descriptor">member</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.RefreshIdentity(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
             Refresh identity properties from provider now. This identity must already be in the 
             IMS store. If identity is a group, its DIRECT members and their properties will also
             be refreshed (asynchronously). 
            </summary>
            <remarks>
            Identity properties, such as display name, are synced from the provider over a 
            24h cylce, by default. Use this API to sync now.
            </remarks>
            <param name="descriptor">identity specification. Null implies caller</param>
            <returns>True if identity is in IMS (in which case will be refreshed now), else false.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.GetScopeName(System.String)">
            <summary>
            Gets the scope name for the provided scope id.
            </summary>
            <param name="scopeId">scope id, which is the project or domain Uri</param>
            <returns>The scope name.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.IsOwner(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
             Check if the given descriptor is of TeamFoundation type, and belongs
             to this IMS host. This does not confirm that such a group actually exists,
             just that the Sid pattern belongs to this host.
            </summary>
            <param name="descriptor"></param>
            <returns>True if owner, else false.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.IsOwnedWellKnownGroup(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Check if the given descriptor is of TeamFoundation type, belongs
            to this IMS host and is a well-known group.  This does not confirm
            that such a group actually exists, just that the Sid pattern meets these
            requirements.
            </summary>
            <param name="descriptor"></param>
            <returns>True if owned and is well-known group.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService.IdentityDomainScope" -->
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService2.GetMostRecentlyUsedUsers">
            <summary>
             Get the set of identities which have been recently accessed by the current user
            </summary>    
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService2.GetMostRecentlyUsedUsersEx(System.Guid)">
            <summary>
             Get the set of identities which have been recently accessed by the current user and the current team members
            </summary>    
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService2.AddRecentUser(Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity)">
            <summary>
            Adds the specified identity to MRU list of users for the current user.
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService2.AddRecentUser(System.Guid)">
            <summary>
            Adds the specified identity to MRU list of users for the current user.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService2.ReadIdentity(System.String)">
            <summary>
            Read an identity using the General search factor.
            </summary>
            <param name="generalSearchValue">The search string.</param>
            <remarks>
            Equivalent to ReadIdentity(IdentitySearchFactor.General, generalSearchValue, MembershipQuery.None, ReadIdentityOptions.None).
            
            You can use this to find an identity by one of the following properties:
            * Display name
            * account name
            * UniqueName
            
            UniqueName may be easier to type than display name. It can also be used to find a single identity when two or more identities share the same display name (e.g. "John Smith")
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService2.ReadFilteredIdentities(System.String,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            ReadFilteredIdentities is used to retrieve a set of identities based
            on an expression. The expression is a syntax that resembles a SQL
            WHERE clause. For full details on the expressions capabilities see
            documentation on the QueryExpression class.
            </summary>
            <param name="scope"></param>
            <param name="expression"></param>
            <param name="suggestedPageSize"></param>
            <param name="lastSearchResult"></param>
            <param name="lookForward"></param>
            <param name="queryMembership"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService2.SetCustomDisplayName(System.String)">
            <summary>
            Sets the display name for the current user in a sticky manner, overriding any display name returned by an external identity provider (Active Directory, Live, etc).
            </summary>
            <param name="customDisplayName">The new display name</param>
            <remarks>
            TFS 2010 would automatically disambiguate users with the same display name by appending the domain and account name. TFS 2012 does not disambiguate display names. SetCustomDisplayName can be used instead to make a display name unique.
            </remarks>
            <example>
            "John Q. Smith, Sr."
            "John Smith (Contoso, Human Resources)"
            </example>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService2.ClearCustomDisplayName">
            <summary>
            Clears the custom display name for the current user, returning to using the display name from the external identity provider (Active Directory, Live, etc).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService2.UpdateExtendedProperties(Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity)">
            <summary>
            Save changes to extended properties.
            </summary>
            <param name="identity">Identity with extended property changes.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService2.ReadIdentities(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor[],Microsoft.TeamFoundation.Framework.Common.MembershipQuery,Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions,System.Collections.Generic.IEnumerable{System.String},Microsoft.TeamFoundation.Framework.Common.IdentityPropertyScope)">
            <summary>
             Read identities for given descriptors. First try IMS store. If not found, optionally try   
             source like AD. 
             Note - performance will be fastest when no membership information is requested.
            </summary>
            <param name="descriptors">descriptors (descriptor is identity type + identifier)</param>
            <param name="queryMembership">none, direct or expanded membership information</param>
            <param name="readOptions">read options, such as reading from source</param>
            <returns>Array of identities, corresponding 1 to 1 with input descriptor array.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService2.ReadIdentity(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,Microsoft.TeamFoundation.Framework.Common.MembershipQuery,Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions,System.Collections.Generic.IEnumerable{System.String},Microsoft.TeamFoundation.Framework.Common.IdentityPropertyScope)">
            <summary>
             Overload that takes a single descriptor.
             Read identity for given descriptor. First try IMS store. If not found, optionally try   
             source like AD. 
             Note - performance will be fastest when no membership information is requested.
            </summary>
            <param name="descriptor">identity type + identifier</param>
            <param name="queryMembership">none, direct or expanded membership information</param>
            <param name="readOptions">read options, such as reading from source</param>
            <returns>identity if found, else null</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService2.ReadIdentities(System.Guid[],Microsoft.TeamFoundation.Framework.Common.MembershipQuery,Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions,System.Collections.Generic.IEnumerable{System.String},Microsoft.TeamFoundation.Framework.Common.IdentityPropertyScope)">
            <summary>
             Read identities by Team Foundation Id. 
             Note - performance will be fastest when no membership information is requested.
            </summary>
            <param name="teamFoundationIds">identity ids</param>
            <param name="queryMembership">none, direct or expanded membership information</param>
            <returns>Array of identities, corresponding 1 to 1 with input array</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService2.ReadIdentities(Microsoft.TeamFoundation.Framework.Common.IdentitySearchFactor,System.String[],Microsoft.TeamFoundation.Framework.Common.MembershipQuery,Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions,System.Collections.Generic.IEnumerable{System.String},Microsoft.TeamFoundation.Framework.Common.IdentityPropertyScope)">
            <summary>
             Read identities based on search factor. First read from IMS store, 
             then (optionally) read from source like AD.
            </summary>
            <param name="searchFactor">how search is specified (by account name, etc.)</param>
            <param name="searchFactorValues">actual search strings (account names, etc.)</param>
            <param name="queryMembership">none, direct or expanded membership information</param>
            <param name="readOptions">readOptions, such as reading from source</param>
            <returns>Arrays of identities. Inner array corresponds 1 to 1 with search factor values</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService2.ReadIdentity(Microsoft.TeamFoundation.Framework.Common.IdentitySearchFactor,System.String,Microsoft.TeamFoundation.Framework.Common.MembershipQuery,Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions,System.Collections.Generic.IEnumerable{System.String},Microsoft.TeamFoundation.Framework.Common.IdentityPropertyScope)">
            <summary>
             Overload that takes a single search factor and returns match following this order. 
             1. With multiple matches, active identity if exists, else first match.
             2. When there is a single match, the match.
             3. When there is no match, null.
             
             Read identity based on search factor. First read from IMS store, 
             then (optionally) read from source like AD.
            </summary>
            <param name="searchFactor">how search is specified (by account name, etc.)</param>
            <param name="searchFactorValue">actual search string (account name, etc.)</param>
            <param name="queryMembership">none, direct or expanded membership information</param>
            <param name="readOptions">readOptions, such as reading from source</param>
            <returns>Array of matching identities</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService2.ListApplicationGroups(System.String,Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions,System.Collections.Generic.IEnumerable{System.String},Microsoft.TeamFoundation.Framework.Common.IdentityPropertyScope)">
            <summary>
            Lists all TFS application groups within the specified scope
            </summary>
            <param name="scopeId">Scope Uri, specifying whether group scope is project level or global 
                                  to this host. Null or empty value signifies global scope</param>
            <param name="readOptions">read options</param>
            <param name="propertyNameFilters">extended properties to retrieve with application groups</param>
            <param name="propertyScope">indicates where to read extended properties from</param>
            <returns>Application groups as an array of identities</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.SidDescriptor">
            <summary>
            Factory to create Sid based descriptors.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity">
            <summary>
            Client implementation of TeamFoundationIdentity. Augments proxy generated class
            </summary>
            <summary>
            Represents a user or group in Team Foundation Server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.TryGetProperty(System.String,System.Object@)">
            <summary>
            Property accessor. Will return null if not found.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.TryGetProperty(Microsoft.TeamFoundation.Framework.Common.IdentityPropertyScope,System.String,System.Object@)">
            <summary>
            Property accessor. Will return null if not found.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.GetProperty(System.String)">
            <summary>
            Property accessor. Will throw if not found.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.GetProperty(Microsoft.TeamFoundation.Framework.Common.IdentityPropertyScope,System.String)">
            <summary>
            Property accessor. Will throw if not found.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.GetProperties">
            <summary>
            Property bag. This could be useful, for example if consumer has
            to iterate through current properties and modify / remove
            some based on pattern matching property names.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.GetProperties(Microsoft.TeamFoundation.Framework.Common.IdentityPropertyScope)">
            <summary>
            Property bag. This could be useful, for example if consumer has
            to iterate through current properties and modify / remove
            some based on pattern matching property names.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.SetProperty(System.String,System.Object)">
            <summary>
            Sets a property, will overwrite if already set.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.SetProperty(Microsoft.TeamFoundation.Framework.Common.IdentityPropertyScope,System.String,System.Object)">
            <summary>
            Sets a property, will overwrite if already set.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
            <param name="propertyScope">Indicates if local or global property is set</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.SetGlobalProperty(System.String,System.Object)">
            <summary>
            Sets a property, will overwrite if already set.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.RemoveProperty(System.String)">
            <summary>
            Remove property, if it exists.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.RemoveProperty(Microsoft.TeamFoundation.Framework.Common.IdentityPropertyScope,System.String)">
            <summary>
            Remove property, if it exists.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.GetAttribute(System.String,System.String)">
            <summary>
            Attribute accessor. Will return the caller supplied default value if attribute
            is not present (will not throw).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.SetAttribute(System.String,System.String)">
            <summary>
            Set an attribute. Attributes are specific to the identity type. 
            For Windows identities, for example, attributes may consist of 
            domain, account, distinguished name, and email address.
            Note - Set will overwrite if the attribute is already set.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.IsContainer">
            <summary>
            Indicates that the identity is a group, possibly containing other identities as members.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.GetModifiedPropertiesLog(Microsoft.TeamFoundation.Framework.Common.IdentityPropertyScope)">
            <summary>
            Modified properties, to be processed on update.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.UniqueName" -->
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.Descriptor">
            <summary>
            The identity descriptor for this identity. The unique identifier for the identity's provider. 
            Clients send identification to the server when they authenticate with TFS. Used for many identity 
            management tasks such as AddMemberToApplicationGroup and ReadIdentity. TFS artifacts are either 
            associated with this identifier or the identity's TeamFoundationId.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.DisplayName">
            <summary>
            Full name of the identity for display purposes. The display name can come from the identity provider (Active Directory, ACS)
            or may have been set as a custom display name within TFS.
            </summary>
            <remarks>
            If the identity provider does not supply a full name, and no custom display name is set, another property like account name or 
            email address will be used as the display name.
            
            TFS 2010 servers may return a disambiguated identity, such as "John Smith (CONTOSO\jsmith)". TFS 2012 servers will not disambiguate
            identities with the same full name in this manner. However a user could set their custom display name to a similiar string.
            </remarks>
            <example>
            John Q. Smith
            </example>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.IsActive">
            <summary>
            Indicates that the identity is "current" with the provider 
            (i.e. either read from source or being synced). It does not
            mean that it is a member of TFS Valid Users group (the "IsMember"
            query should be used to answer that).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.MemberOf">
            <summary>
            IdentityDescriptors for groups containing this identity.
            </summary>
            <remarks>
            The identity must be read with MembershipQuery.Direct or MembershipQuery.Expanded for this collection to be populated.
            If MembershipQuery.None is used, the collection will be empty.
            </remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.Members">
            <summary>
            IdentityDescriptors for members of this identity.
            </summary>
            <remarks>
            The identity must be read with MembershipQuery.Direct or MembershipQuery.Expanded for this collection to be populated.
            If MembershipQuery.None is used or the identity is not a group, the collection will be empty.
            </remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.TeamFoundationId">
            <summary>
            Identifier assigned within TFS - unique within a host. TFS artifacts are either 
            associated with this identifier or the identity's Descriptor.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity.UniqueUserId">
            <summary>
            This represents the ID to distinguish deleted accounts from
            one another (joe:1 vs. joe:3).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamFoundationJobService.QueryJobs(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Retrieves job definitions.
            </summary>
            <param name="jobIds">The identifiers of the job definitions to retrieve. Empty/null value means all jobs.</param>
            <returns>A collection of the specified job definitions.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamFoundationJobService.QueryJobs">
            <summary>
            Retrieves job definitions.
            </summary>
            <returns>A collection of all job definitions.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamFoundationJobService.QueryJobHistory(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Queries for history entries of the specified jobs.
            </summary>
            <param name="jobIds">The job filter. Empty/null value means all jobs.</param>
            <returns>A collection of history entries for the specified jobs.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamFoundationJobService.QueryJobHistory(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobDefinition})">
            <summary>
            Queries for history entries of the specified jobs.
            </summary>
            <param name="jobs">The job filter. Empty/null value means all jobs.</param>
            <returns>A collection of history entries for the specified jobs.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamFoundationJobService.QueryLatestJobHistory(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Queries for latest history entries of the specified jobs.
            </summary>
            <param name="jobIds">The job filter. Empty/null value means all jobs.</param>
            <returns>A list of history entries found for the specified jobs in the same order as the job ids. Null elements are returned for jobs that don't exist or that have no history. If no job ids are specified, the results are sorted by EndTime.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamFoundationJobService.QueryLatestJobHistory(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobDefinition})">
            <summary>
            Queries for latest history entries of the specified jobs.
            </summary>
            <param name="jobs">The job filter. Empty/null value means all jobs.</param>
            <returns>A list of history entries found for the specified jobs in the same order as the job ids. Null elements are returned for jobs that don't exist or that have no history. If no job ids are specified, the results are sorted by EndTime.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamFoundationJobService.QueryLatestJobHistory(System.Guid)">
            <summary>
            Queries for latest history entry of the specified job.
            </summary>
            <param name="jobId">The job id.</param>
            <returns>The latest job history for the specified job, or null if there are no history entries.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ITeamFoundationJobService.QueryLatestJobHistory(Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobDefinition)">
            <summary>
            Queries for latest history entry of the specified job.
            </summary>
            <param name="job">The job definition.</param>
            <returns>The latest job history for the specified job, or null if there are no history entries.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobHistoryEntry.AgentId">
            <summary>
            The agent that is running the job.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobHistoryEntry.ExecutionStartTime">
            <summary>
            The date that execution began.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobHistoryEntry.JobId">
            <summary>
            The ID of the job.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobHistoryEntry.JobSource">
            <summary>
            The source of the job.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobHistoryEntry.QueueTime">
            <summary>
            The time that the job should start.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobSchedule.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the TeamFoundationJobSchedule class for a one-time execution of a job.
            </summary>
            <param name="scheduledTime">The DateTime at which the job should be queued.</param>
            <remarks>
            The job will not be queued if scheduledTime is in the past. Use TeamFoundationJobService.QueueJobNow to queue a job for immediate execution.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobSchedule.#ctor(System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the TeamFoundationJobSchedule class.
            </summary>
            <param name="scheduledTime">The first DateTime at which the job should be queued.</param>
            <param name="interval">The frequency of the job, in seconds. Use zero to schedule a non-recurring job.</param>
            <remarks>
            TimeZone is initialized to UTC; the schedule interval will not be adjusted for daylight savings.
            The job will not be queued if scheduledTime is in the past and interval is zero. Use TeamFoundationJobService.QueueJobNow to queue a job for immediate execution.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobSchedule.#ctor(System.DateTime,System.Int32,System.TimeZoneInfo)">
            <summary>
            Initializes a new instance of the TeamFoundationJobSchedule class.
            </summary>
            <param name="scheduledTime">The first DateTime at which the job should be queued.</param>
            <param name="interval">The frequency of the job, in seconds. Use zero to schedule a non-recurring job.</param>
            <param name="timeZone">The time zone used for daylight savings adjustments.</param>
            <remarks>
            If timeZone supports daylight savings, interval must be a multiple of 24 hours (86400 seconds).
            The job will not be queued if scheduledTime is in the past and interval is zero. Use TeamFoundationJobService.QueueJobNow to queue a job for immediate execution.
            </remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobSchedule.ScheduledTime">
            <summary>
            Gets or sets the base time from which the interval should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobSchedule.Interval">
            <summary>
            The frequency of the job, in seconds.
            </summary>
            <remarks>
            If TimeZone supports daylight savings, Interval must be a multiple of 24 hours (86400 seconds).
            </remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobSchedule.TimeZone">
            <summary>
            The time zone which should be used for daylight savings time adjustments of the interval.
            </summary>
            <remarks>
            If TimeZone supports daylight savings, interval must be a multiple of 24 hours (86400 seconds).
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobService.QueryJobHistory(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Queries for history entries on the specified jobs.
            </summary>
            <param name="jobIds">The job filter. Empty/null value means all jobs.</param>
            <returns>A collection of history entries for the specified jobs.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobService.QueryJobHistory(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobDefinition})">
            <summary>
            Queries for history entries on the specified jobs.
            </summary>
            <param name="jobIds">The job filter. Empty/null value means all jobs.</param>
            <returns>A collection of history entries for the specified jobs.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobService.QueryLatestJobHistory(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Queries for latest history entries of the specified jobs.
            </summary>
            <param name="jobIds">The job filter. Empty/null value means all jobs.</param>
            <returns>A list of history entries found for the specified jobs in the same order as the job ids. Null elements are returned for jobs that don't exist or that have no history. If no job ids are specified, the results are sorted by EndTime.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobService.QueryLatestJobHistory(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobDefinition})">
            <summary>
            Queries for latest history entries of the specified jobs.
            </summary>
            <param name="jobs">The job filter. Empty/null value means all jobs.</param>
            <returns>A list of history entries found for the specified jobs in the same order as the job ids. Null elements are returned for jobs that don't exist or that have no history. If no job ids are specified, the results are sorted by EndTime.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobService.QueryLatestJobHistory(System.Guid)">
            <summary>
            Queries for latest history entry of the specified job.
            </summary>
            <param name="jobId">The job id.</param>
            <returns>The latest job history for the specified job, or null if there are no history entries.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobService.QueryLatestJobHistory(Microsoft.TeamFoundation.Framework.Client.TeamFoundationJobDefinition)">
            <summary>
            Queries for latest history entry of the specified job.
            </summary>
            <param name="job">The job definition.</param>
            <returns>The latest job history for the specified job, or null if there are no history entries.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ConnectionData">
            <summary>
            Data transfer class that holds information needed to set up a 
            connection with a TeamFoundationServer.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectionData.AuthenticatedUser">
            <summary>
            The identity of the authenticated user who made this request.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectionData.AuthorizedUser">
            <summary>
            The identity of the authorized user who made this request.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectionData.CatalogResourceId">
            <summary>
            The resource id for this servers catalog entry
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectionData.InstanceId">
            <summary>
            The instance id for this server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectionData.LocationServiceData">
            <summary>
            Data that the location service holds.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectionData.WebApplicationRelativeDirectory">
            <summary>
            The virtual directory of the host we are talking to.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectionData.ServerVersion">
            <summary>
            The version of the server.  Use for telemetry only, do not make behavioral decisions based on this.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ILocationService">
            <summary>
            The service responsible for providing a connection to a Team 
            Foundation Server as well as the locations of other services that
            are available on it.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ILocationService.ClientAccessMapping">
            <summary>
            The AccessMapping for the current connection to the server. Note, it is 
            possible that the current ClientAccessMapping is not a member of the 
            ConfiguredAccessMappings if the access point this client used to connect to 
            the server has not been configured on it. This will never be null.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ILocationService.DefaultAccessMapping">
            <summary>
            The default AccessMapping for this location service. This will never be null.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ILocationService.ConfiguredAccessMappings">
            <summary>
            All of the AccessMappings that this location service knows about. Because a 
            given location service can inherit AccessMappings from its parent these 
            AccessMappings may exist on this location service or its parent.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationService.SaveServiceDefinition(Microsoft.TeamFoundation.Framework.Client.ServiceDefinition)">
            <summary>
            Saves the provided ServiceDefinition within the location service. This 
            operation will assign the Identifier property on the ServiceDefinition object 
            if one is not already assigned. Any AccessMappings referenced in the 
            LocationMappings property must already be configured with the location 
            service.
            </summary>
            <param name="serviceDefinition">
                The ServiceDefinition to save. This object will be updated with a new 
                Identifier if one is not already assigned.
            </param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.InvalidServiceDefinitionException">
                The ServiceDefinition being saved is not valid.
            </exception>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.AccessMappingNotRegisteredException">
                The ServiceDefinition references an AccessMapping that has not been 
                registered.
            </exception>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.DuplicateLocationMappingException">
               Thrown if a given AccessMapping has two or more LocationMappings on a ServiceDefinition.
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationService.SaveServiceDefinitions(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.ServiceDefinition})">
            <summary>
            Saves the provided ServiceDefinitions within the location service. This 
            operation will assign the Identifier property on the ServiceDefinition 
            objects if one is not already assigned. Any AccessMappings referenced in 
            the LocationMappings property must already be configured with the location 
            service.
            </summary>
            <param name="serviceDefinitions">
                The ServiceDefinitions to save. These objects will be updated with a new 
                Identifier if one is not already assigned.
            </param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.InvalidServiceDefinitionException">
                The ServiceDefinition being saved is not valid.
            </exception>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.AccessMappingNotRegisteredException">
                The ServiceDefinition references an AccessMapping that has not been 
                registered.
            </exception>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.DuplicateLocationMappingException">
               Thrown if a given AccessMapping has two or more LocationMappings on a ServiceDefinition.
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationService.RemoveServiceDefinition(System.String,System.Guid)">
            <summary>
            Removes the ServiceDefinition with the specified service type and
            service identifier from the location serivce.
            </summary>
            <param name="serviceType">
                The service type of the ServiceDefinition to remove.
            </param>
            <param name="serviceIdentifier">
                The service identifier of the ServiceDefinition to remove.
            </param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.IllegalDeleteSelfReferenceServiceDefinitionException">
               Thrown if the caller tries to delete the self-refernce (location service) ServiceDefinition.
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationService.RemoveServiceDefinition(Microsoft.TeamFoundation.Framework.Client.ServiceDefinition)">
            <summary>
            Removes the specified ServiceDefinition from the location service.
            </summary>
            <param name="serviceDefinition">
                The ServiceDefinition to remove. This must be a ServiceDefinition that is 
                already registered in the location service. 
                Equality is decided by matching the service type and the identifier.
            </param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.IllegalDeleteSelfReferenceServiceDefinitionException">
               Thrown if the caller tries to delete the self-refernce (location service) ServiceDefinition.
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationService.RemoveServiceDefinitions(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.ServiceDefinition})">
            <summary>
                Removes the specified ServiceDefinitions from the location service.
            </summary>
            <param name="serviceDefinitions">
                The ServiceDefinitions to remove. These must be ServiceDefinitions that are 
                already registered in the location service. 
                Equality is decided by matching the service type and  the identifier.
            </param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.IllegalDeleteSelfReferenceServiceDefinitionException">
               Thrown if the caller tries to delete the self-refernce (location service) ServiceDefinition.
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationService.FindServiceDefinition(System.String,System.Guid)">
            <summary>
            Finds the ServiceDefinition with the specified service type and service 
            identifier. If no matching ServiceDefinition exists, null is returned.
            </summary>
            <param name="serviceType">
                The service type of the ServiceDefinition to find.
            </param>
            <param name="serviceIdentifier">
                The service identifier of the ServiceDefinition 
                to find.
            </param>
            <returns>
                The ServiceDefinition with the specified service type and service identifier.
                If no matching ServiceDefinition exists, null is returned.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationService.FindServiceDefinitions(System.String)">
            <summary>
            Finds the ServiceDefinitions for all of the services with the 
            specified service type. If no ServiceDefinitions of this type 
            exist, an empty enumeration will be returned.
            </summary>
            <param name="serviceType">
                The case-insensitive string that identifies what type of service is being 
                requested. If this value is null, ServiceDefinitions for all services 
                registered with this location service will be returned.
            </param>
            <returns>
                ServiceDefinitions for all of the services with the specified service type.
                If no ServiceDefinitions of this type exist, an empty enumeration will be 
                returned.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationService.FindServiceDefinitionsByToolType(System.String)">
            <summary>
            Finds the ServiceDefinitions for all of the services with the specified tool
            type. If no services exist for this tool type, an empty enumeration will be 
            returned.
            </summary>
            <param name="toolType">
                The case-insensitive string that will match the tool type of a set of 
                ServiceDefinitions. If null or empty is passed in for this value then all of
                the ServiceDefinitions will be returned.
            </param>
            <returns>
                ServiceDefinitions for all of the services with the specified tool type. 
                If no services exist for this tool type, an empty enumeration will be 
                returned.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationService.LocationForCurrentConnection(System.String,System.Guid)">
            <summary>
            Returns the location for the ServiceDefintion associated with the ServiceType
            and ServiceIdentifier that should be used based on the current connection. 
            If a ServiceDefinition with the ServiceType and ServiceIdentifier does not
            exist then null will be returned. If a ServiceDefinition with the ServiceType
            and ServiceIdentifier is found then a location will be returned if the 
            ServiceDefinition is well formed (otherwise an exception will be thrown).
            
            When determining what location to return for the ServiceDefinition and 
            current connection the following rules will be applied:
            
            1. Try to find a location for the ClientAccessMapping.
            2. Try to find a location for the DefaultAccessMapping.
            3. Use the first location in the LocationMappings list.
            </summary>
            <param name="serviceType">
                The service type of the ServiceDefinition to find the location for.
            </param>
            <param name="serviceIdentifier">
                The service identifier of the ServiceDefinition to find the location for.
            </param>
            <returns>
                The location for the ServiceDefinition with the provided service type and 
                identifier that should be used based on the current connection.
            </returns>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.InvalidServiceDefinitionException">
               The associated ServiceDefinition is not valid and no location can be found.
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationService.LocationForCurrentConnection(Microsoft.TeamFoundation.Framework.Client.ServiceDefinition)">
            <summary>
            Returns the location for the ServiceDefintion that should be used based on
            the current connection. This method will never return null or empty. If it
            succeeds it will return a targetable location for the provided 
            ServiceDefinition.
            
            When determining what location to return for the ServiceDefinition and 
            current connection the following rules will be applied:
            
            1. Try to find a location for the ClientAccessMapping.
            2. Try to find a location for the DefaultAccessMapping.
            3. Use the first location in the LocationMappings list.
            </summary>
            <param name="serviceDefinition">
                The ServiceDefinition to find the location for.
            </param>
            <returns>
                The location for the given ServiceDefinition that should be 
                used based on the current connection.
            </returns>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.InvalidServiceDefinitionException">
               The ServiceDefinition passed in is not valid and no location can be found.
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationService.LocationForAccessMapping(System.String,System.Guid,Microsoft.TeamFoundation.Framework.Client.AccessMapping)">
            <summary>
            Returns the location for the ServiceDefinition that has the specified
            service type and service identifier for the provided 
            AccessMapping. If this ServiceDefinition is FullyQualified and no 
            LocationMapping exists for this AccessMapping then null will be returned.
            </summary>
            <param name="serviceType">
                The service type of the ServiceDefinition to find the location for.
            </param>
            <param name="serviceIdentifier">
                The service identifier of the ServiceDefinition to find the location for.
            </param>
            <param name="accessMapping">The AccessMapping to find the location for.</param>
            <returns>
                The location for the ServiceDefinition for the provided 
                AccessMapping. If this ServiceDefinition is FullyQualified and no 
                LocationMapping exists for this AccessMapping then null will be returned.
            </returns>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.InvalidServiceDefinitionException">
               The associated ServiceDefinition is not valid and no location can be found.
            </exception>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.ServiceDefinitionDoesNotExistException">
               A ServiceDefinition with the provided service type and identifier does not exist.
            </exception>     
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.InvalidAccessPointException">
               The AccessMapping passed in does not have a valid access point.
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationService.LocationForAccessMapping(Microsoft.TeamFoundation.Framework.Client.ServiceDefinition,Microsoft.TeamFoundation.Framework.Client.AccessMapping)">
            <summary>
            Returns the location for the ServiceDefinition for the provided 
            AccessMapping. If this ServiceDefinition is FullyQualified and no 
            LocationMapping exists for this AccessMapping then null will be returned.
            </summary>
            <param name="serviceDefinition">
                The ServiceDefinition to find the location for.
            </param>
            <param name="accessMapping">The AccessMapping to find the location for.</param>
            <returns>
                The location for the ServiceDefinition for the provided 
                AccessMapping. If this ServiceDefinition is FullyQualified and no 
                LocationMapping exists for this AccessMapping then null will be returned.
            </returns>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.InvalidServiceDefinitionException">
               The ServiceDefinition passed in is not valid.
            </exception>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.InvalidAccessPointException">
               The AccessMapping passed in does not have a valid access point.
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationService.ConfigureAccessMapping(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Configures the AccessMapping with the provided moniker to have the provided 
            display name and access point. This function also allows for this 
            AccessMapping to be made the default AccessMapping.
            </summary>
            <param name="moniker">
                A string that uniquely identifies this AccessMapping. This value cannot be 
                null or empty.
            </param>
            <param name="displayName">
                Display name for this AccessMapping. This value cannot be null or empty. 
            </param>
            <param name="accessPoint">
                This is the base url for the server that will map to  this AccessMapping. 
                This value cannot be null or empty. 
                
                The access point should consist of the scheme, authority, port and web 
                application virtual path of the targetable server address. For example, an 
                access point will most commonly look like this:
                
                http://server:8080/tfs/
            </param>
            <param name="makeDefault">
                If true, this AccessMapping will be made the default AccessMapping. If false,
                the default AccessMapping will not change.
            </param>
            <returns>The AccessMapping object that was just configured.</returns>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.InvalidAccessPointException">
               Thrown if the access point for this AccessMapping is invalid or if it conflicts 
               with an already registered access point.
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationService.SetDefaultAccessMapping(Microsoft.TeamFoundation.Framework.Client.AccessMapping)">
            <summary>
            Sets the default AccessMapping to the AccessMapping passed in.
            </summary>
            <param name="accessMapping">
                The AccessMapping that should become the default AccessMapping. This 
                AccessMapping must already be configured with this location service.
            </param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.AccessMappingNotRegisteredException">
               The AccessMapping being set to the default has not been registered.
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationService.GetAccessMapping(System.String)">
            <summary>
            Gets the AccessMapping with the specified moniker. Returns null
            if an AccessMapping with the supplied moniker does not exist.
            </summary>
            <param name="moniker">
                The moniker for the desired AccessMapping. This value cannot be null or 
                empty.
            </param>
            <returns>
                The AccessMapping with the supplied moniker or null if one does not exist.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationService.RemoveAccessMapping(System.String)">
            <summary>
            Removes an AccessMapping and all of the locations that are mapped
            to it within ServiceDefinitions.
            </summary>
            <param name="moniker">The moniker for the AccessMapping to remove.</param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.RemoveAccessMappingException">
               Thrown if the caller tries to remove the default AccessMapping and this location service
               cannot inherit its default AccessMapping from a parent.
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ILocationServiceInternal.LocationForCurrentConnection(System.String,System.Guid,System.Boolean)">
            <summary>
            Returns the location for the ServiceDefintion associated with the ServiceType
            and ServiceIdentifier that should be used based on the current connection. 
            If a ServiceDefinition with the ServiceType and ServiceIdentifier does not
            exist then null will be returned. If a ServiceDefinition with the ServiceType
            and ServiceIdentifier is found then a location will be returned if the 
            ServiceDefinition is well formed (otherwise an exception will be thrown).
            
            When determining what location to return for the ServiceDefinition and 
            current connection the following rules will be applied:
            
            1. Try to find a location for the ClientAccessMapping.
            2. Try to find a location for the DefaultAccessMapping.
            3. Use the first location in the LocationMappings list.
            </summary>
            <param name="serviceType">
                The service type of the ServiceDefinition to find the location for.
            </param>
            <param name="serviceIdentifier">
                The service identifier of the ServiceDefinition to find the location for.
            </param>
            <param name="ignoreCacheExpiration">
                Whether to ignore the location service cache expiration. If the local cache has expired
                and ignoreCacheExpiration = true, the expired cache data will still be returned and a server call will
                not be made.
            </param>
            <returns>
                The location for the ServiceDefinition with the provided service type and 
                identifier that should be used based on the current connection.
            </returns>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.InvalidServiceDefinitionException">
               The associated ServiceDefinition is not valid and no location can be found.
            </exception>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager">
            <summary>
            This class is responsible for managing both the in-memory and disk cache
            for the location service.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.#ctor(System.Guid,System.Uri)">
            <summary>
            Creates a new cache manager for the serverGuid passed in.
            </summary>
            <param name="serverGuid"></param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.LocalCacheAvailable">
            <summary>
            True if there is a cache on disk available for this server
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.CacheDataExpired">
            <summary>
            Whether or not the cached data has expired (and should be refreshed)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.RemoveServices(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.ServiceDefinition},System.Int32)">
            <summary>
            Removes services from both the in-memory cache and the disk cache.
            </summary>
            <param name="serviceDefinitions">The service definitions to remove.</param>
            <param name="lastChangeId">The lastChangeId the server returned when
            it performed this operation.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.GetAccessMapping(System.String)">
            <summary>
            Returns the access mapping for the provided moniker.
            </summary>
            <param name="moniker">The moniker of the access mapping to 
            return.</param>
            <returns>The access mapping for the provided moniker or null
            if an access mapping for the monike doesn't exist..</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.TryFindService(System.String,System.Guid,System.Boolean,Microsoft.TeamFoundation.Framework.Client.ServiceDefinition@)">
            <summary>
            Returns the service definition for the service with the 
            provided service type and identifier.  Null will be returned
            if there is no entry in the cache for this service.
            </summary>
            <param name="serviceType">The service type we are looking for.</param>
            <param name="serviceIdentifier">The identifier for the specific
            service instance we are looking for.</param>
            <returns>The service definition for the service with the 
            provided service type and identifier.  Null will be returned
            if there is no entry in the cache for this service.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.FindServices(System.String)">
            <summary>
            Finds all services with the provided service type.
            </summary>
            <param name="serviceType">The service type we are looking for.</param>
            <returns>All of the service definitions with the serviceType that
            are in the cache or null if none are in the cache.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.FindServicesByToolId(System.String)">
            <summary>
            Finds the service definitions for all of the available services for the
            specified tool id.  If no services exist for this tool id, null will
            be returned.
            </summary>
            <param name="toolId">The case-insensitive tool id whose services we
            are looking for.  If this is null or empty, all services will be 
            returned.</param>
            <returns>Service definitions for all of the existing services that are
            of the supplied tool id.  If no services of this type exist, null 
            will be returned</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.LoadServicesData(Microsoft.TeamFoundation.Framework.Client.LocationServiceData,System.Boolean)">
            <summary>
            Loads the service data into the in-memory cache and writes the values to disk.
            </summary>
            <param name="locationServiceData">The data to write to the cache.</param>
            <returns>Copies of the service definitions created by this load</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.AccessMappings">
            <summary>
            Returns the AccessMappings that this location service cache knows about.
            Note that each time this property is accessed, the list is copied and
            returned.  
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.RemoveAccessMapping(System.String)">
            <summary>
            Removes the access mapping with the provided access mapping moniker
            and all of the location mapping entries that have this access
            zone.
            </summary>
            <param name="moniker">The moniker of the access mapping to remove.
            </param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.AddCachedMiss(System.String,System.Guid,System.Int32)">
            <summary>
            Adds a cached miss to the location service data, if the last change ID presented
            matches the current value.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.GetLastChangeId">
            <summary>
            Returns the id of the last change that this cache is aware of.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.GetCacheExpirationDate">
            <summary>
            Returns the time of the cache expiration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.EnsureDiskCacheLoaded">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.m_fileSystemWatcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.WriteCacheToDisk">
            <summary>
            Writes the cache to disk.  Callers of this function should have a writer
            lock.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.ClientCacheTimeToLive">
            <summary>
            This setting controls the amount of time before the cache expires
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.m_services">
            <summary>
            This is the set of services available from this service location
            service.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.m_cachedMisses">
            <summary>
            This is the set of services that have been queried since our last update
            from the server that we know don't exist.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.m_accessMappings">
            <summary>
            Keeps track of all access mappings that have been given to us by the server.
            The key is their identifier.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.m_lastChangeId">
            <summary>
            Keeps track of the lastChangeId for the last change that was put in this cache.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.m_cacheExpirationDate">
            <summary>
            KThe time after which the local cache data is invalid. This is used to prematurely expire the client cache
            even if we don't know (yet) whether or not the server changed. By expiring the client cache we
            can ensure that clients will be forced to check for server updates periodically rather than relying on the
            client cache indefinitely in the degenerate case where no client tools ever explicitly call Connect() (such as tf.exe)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.m_accessLock">
            <summary>
            This is used to protect the services in-memory store.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.s_cacheMutex">
            <summary>
            Only let one process write to a cache at a time.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.m_cacheLocallyFresh">
            <summary>
            This object is used to keep track of whether or not our cache is fresh
            with respect to what we have on disk.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.m_cacheAvailable">
            <summary>
            This is true if we do not have access to the cache file
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.m_fileSystemWatcher">
            <summary>
            This is used to watch for others changing our cache so we can respond to 
            those changes
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.m_clientAccessMapping">
            <summary>
            The two calculated access mappings that this manager caches.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.s_cacheFileName">
            <summary>
            persistent cache file name values
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.LocationCacheManager.s_docStartElement">
            <summary>
            xml document related constants
            </summary>           
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationServerMapCache.ReadServerLocation(System.Guid)">
            <summary>
            Finds the location for the specified guid.  If it is not found, null
            is returned.
            </summary>
            <param name="serverGuid">The server instance id associated with the
            desired location service url.</param>
            <returns>The location of the location service for this server or null
            if the guid is not found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationServerMapCache.ReadServerGuid(System.String)">
            <summary>
            
            </summary>
            <param name="location"></param>
            <returns>The guid for this location or Guid.Empty if the location
            does not have an entry.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationServerMapCache.EnsureServerMappingExists(System.String,System.Guid)">
            <summary>
            If this call is not a change, nothing will be done.
            </summary>
            <param name="location"></param>
            <param name="serverGuid"></param>
            <returns>True if this is the first time the mapping was written.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationServerMapCache.TryWriteMappingToDisk(System.String,System.Guid,System.Boolean)">
            <summary>
            Writes the mapping to disk if the cache is available.
            </summary>
            <param name="location"></param>
            <param name="serverGuid"></param>
            <param name="isNew"></param>
            <returns>True if the write succeeded</returns>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.LocationServerMapCache.s_cacheFreshLocally">
            <summary>
            This is used to keep track of whether or not our in-memory cache is fresh with regards
            to our persistent cache on disk.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.LocationServerMapCache.s_cacheUnavailable">
            <summary>
            This is true if we do not have access to the cache file
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.AccessMapping">
            <summary>
            Holds an access point to a Team Foundation Server and meta data about it.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessMapping.DisplayName">
            <summary>
            The display name for this AccessMapping.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessMapping.Moniker">
            <summary>
            The unique moniker for this AccessMapping.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessMapping.AccessPoint">
            <summary>
            The access point for this AccessMapping. It should contain the scheme, 
            authority, port and web application relative direcroty. This will be in a 
            form similar to this:
                
            http://server:8080/tfs
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessMapping.VirtualDirectory">
            <summary>
            Part of the access mapping which applies context after the access point
            of the server.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.LocationMapping">
            <summary>
            Associates an AccessMapping with a location.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationMapping.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="accessMapping"></param>
            <param name="location"></param>
            <remarks>
                This constructor is intenral because it should only be used by the 
                GetSerializableMappings function.
            </remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.LocationMapping.AccessMapping">
            <summary>
            The AccessMapping that this LocationMapping is for.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.LocationMapping.AccessMappingMoniker">
            <summary>
            The access mapping moniker of this location mapping.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.LocationMapping.Location">
            <summary>
            The location that is registered for this LocationMapping.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationXmlOperator.#ctor(System.Boolean)">
            <summary>
            This is to be used for reading in an xml file that contains service definitions that
            have to be loaded during install
            </summary>
            <param name="isClientCache">True if the parser is parsing xml from a client cache</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationXmlOperator.ReadServices(System.Xml.XmlDocument,System.Collections.Generic.Dictionary{System.String,Microsoft.TeamFoundation.Framework.Client.AccessMapping})">
            <summary>
            Reads the service definitions from the provided document. 
            For a specification of what the xml should look like, see the 
            corresponding Write method.
            </summary>
            <param name="document">The document to read from.</param>
            <returns>A list of service definitions.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationXmlOperator.ReadAccessMappings(System.Xml.XmlDocument)">
            <summary>
            Reads the access mappings from the provided document. 
            For a specification of what the xml should look like, see the 
            corresponding Write method.
            </summary>
            <param name="document">The document to read from.</param>
            <returns>A list of access mappings.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationXmlOperator.ReadLastChangeId(System.Xml.XmlDocument)">
            <summary>
            Reads the last change id from the provided document. 
            For a specification of what the xml should look like, see the 
            corresponding Write method.
            </summary>
            <param name="document">The document to read from.</param>
            <returns>The last change id.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationXmlOperator.WriteLastChangeId(System.Xml.XmlNode,System.Int32)">
            <summary>
            Writes the lastChangeId to the provided document in the form
            <LastChangeId>value</LastChangeId>
            </summary>
            <param name="documentNode">The document to write to.</param>
            <param name="lastChangeId">The value to write.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationXmlOperator.WriteAccessMappings(System.Xml.XmlNode,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.AccessMapping})">
            <summary>
            Writes the access mapping information to the provided document in the form:
            <AccessMappings>
                <AccessMapping>
                    <Moniker>value</Moniker>
                    <Enabled>value</Enabled>
                    <DisplayName>value</DisplayName>
                    <VirtualDirectory>value</VirtualDirectory>
                </AccessMapping>
            </AccessMappings>        
            </summary>
            <param name="documentNode">The document to write to.</param>
            <param name="accessMappings">The values to write.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationXmlOperator.WriteServices(System.Xml.XmlNode,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.ServiceDefinition})">
            <summary>
            Writes service definition information to the provided document in the form:
            <Services>
                <ServiceDefinition>
                    <ServiceType>value</ServiceType>
                    <Identifier>value</Identifier>
                    <DisplayName>value</DisplayName>
                    <DefaultAccessMapping>value</DefaultAccessMapping>
                    <RelativePath relativeTo="value">value</RelativePath>
                    <LocationMappings>
                        <LocationMapping>
                            <AccessMapping>value</AccessMapping>
                            <Location>value</Location>
                        </LocationMapping>
                        .
                        .
                        .
                    </LocationMappings>
                </ServiceDefinition>
                .
                .
                .
            </Services>
            </summary>
            <param name="documentNode">The document to write to.</param>
            <param name="serviceDefintions">The values to write</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationXmlOperator.GetLocationServiceUrl(System.String)">
            <summary>
            Gets the location service url for the access mapping moniker provided.
            This function should be used to retrieve location service urls for access
            zones that were loaded by this LocationXmlController instance.
            </summary>
            <param name="moniker">The access mapping moniker.</param>
            <returns>The location service url for this access mapping moniker.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationXmlOperator.CheckXmlNodeNull(System.Xml.XmlNode,System.String,System.Xml.XmlNode)">
            <summary>
            Throws and exception if the node provided is null.
            </summary>
            <param name="node">The node to check.</param>
            <param name="nodeName">The name of the node to check.</param>
            <param name="parent">The parent node of the node we are checking.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationXmlOperator.CheckXmlNodeNullOrEmpty(System.Xml.XmlNode,System.String,System.Xml.XmlNode)">
            <summary>
            Throws an exception if the xml node is null or empty.
            </summary>
            <param name="node">The node we are checking.</param>
            <param name="nodeName">The name of the node we are checking.</param>
            <param name="parent">The parent node of the node we are checking.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.LocationXmlOperator.CheckXmlAttributeNullOrEmpty(System.Xml.XmlAttribute,System.String,System.Xml.XmlNode)">
            <summary>
            Throws exception if the attribute provided is null or empty
            </summary>
            <param name="attribute">The attribute we are checking.</param>
            <param name="attributeName">The name of the attribute we are checking.</param>
            <param name="element">The node that contains this attribute.</param>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.LocationXmlOperator.m_accessMappingLocationServiceUrls">
            <summary>
            Maps access mapping monikers to location service urls
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IServerDataProvider.FindServerLocation(System.Guid)">
            <summary>
            The function finds the location of the server that has the
            guid passed.  Note that the server in question must be a "child"
            server of the server this object is providing data for.
            </summary>
            <param name="serverGuid">The guid for the server we are looking up.
            </param>
            <returns>The location for the server with the provided guid or
            null if this server does not have a child with the provided guid.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IServerDataProvider.Connect(Microsoft.TeamFoundation.Framework.Common.ConnectOptions)">
            <summary>
            Performs all of the steps that are necessary for setting up a connection
            with a TeamFoundationServer.  Specify what information should be 
            returned in the connectOptions parameter.
            
            Each time this call is made the username for the current user 
            will be returned as well as the client zone that this client is making 
            requests from.
            </summary>
            <param name="connectOptions">Specifies what information that should be 
            returned from the server.</param>
            <param name="serviceTypeFilters">The service types to get information for.
            If service information is not requested in the connectOptions value, this
            parameter must be null.  To request
            all service definitions, pass "*" as the first and only entry in the array.
            To only request service information about the possible client zones, pass
            in an empty array.
            </param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IServerDataProvider.Disconnect">
            <summary>
            Reset the connection state back to disconnect
            The client must reconnect
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IServerDataProvider.ReactToPossibleServerUpdate(System.Int32)">
            <summary>
            Clears any caches that it has if the server has been updated.
            </summary>
            <param name="serverLastChangeId"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider">
            <summary>
            This class provides data about the server via the LocationService.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.LocalCacheAvailable">
            <summary>
            True if there is a local cache available for this data provider.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.InstanceId">
            <summary>
            The unique identifier for this server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.CachedInstanceId">
            <summary>
            The unique identifier for this server. This property will attempt to return
            a cached value, if possible.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.CatalogResourceId">
            <summary>
            The id for this server's catalog resource entry
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.ServerCapabilities">
            <summary>
            Returns the capabilities of the server
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.ServerVersion">
            <summary>
            The version of the server.  For telemetry purposes only - do not modify behaviors based on this value.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.ClientCacheDirectoryForInstance">
            <summary>
            The path that should be used to cache instance-specific data from this server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.ClientVolatileCacheDirectoryForInstance">
            <summary>
            The path that should be used to cache instance-specific data from this server that
            will be removed when the server is removed or connected with a different user.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.ClientCacheDirectoryForUser">
            <summary>
            The path that should be used to cache user-specific data from this server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.AuthorizedIdentity">
            <summary>
            Gets the authorized user.  This function will authenticate with the server if it has
            not done so already.  Like any other regular method, it throws TfsUnauthorizedException 
            if the server is contacted and authentication fails.
            </summary>
            <returns>The authenticated user.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.AuthenticatedIdentity">
            <summary>
            Gets the authenticated user.  This function will authenticate with the server if it has
            not done so already.  Like any other regular method, it throws TfsUnauthorizedException 
            if the server is contacted and authentication fails.
            </summary>
            <returns>The authenticated user.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.HasAuthenticated">
            <summary>
            Returns true if this object has successfully authenticated.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.EnsureAuthenticated">
            <summary>
            This method will authenticate the connection if not previously authenticated.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.Authenticate">
            <summary>
            This method actually authenticates with the server, using the specified provider to get
            credentials if necessary.  This method is special in that it will use the ICredentialsProvider
            specified in the constructor to prompt for credentials if authentication fails.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.FindServerLocation(System.Guid)">
            <summary>
            The function finds the location of the server that has the
            guid passed.  Note that the server in question must be a "child"
            server of the server this object is providing data for.
            </summary>
            <param name="serverGuid">The guid for the server we are looking up.
            </param>
            <returns>The location for the server with the provided guid or
            null if this server does not have a child with the provided guid.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.ReactToPossibleServerUpdate(System.Int32)">
            <summary>
            Clears its internal cache if it determines that it is out of date.
            </summary>
            <param name="serverLastChangeId"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.CheckForServerUpdates">
            <summary>
            Consults the server to see if any services from the filter array have 
            changed.  It updates the cache with the new values.
            </summary>
            <param name="filterArray"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.EnsureConnected(Microsoft.TeamFoundation.Framework.Common.ConnectOptions)">
            <summary>
            This function ensures that the connection data that is needed by the caller
            has been retrieved from the server.  This function does not use the 
            credentials provider if authentication fails.
            </summary>
            <param name="optionsNeeded">The options that designate the information the
            caller needs from the server.</param>
            <param name="serviceTypeFilters">If optionsNeeded include service information
            and we need to connect to the server, this parameter tells us what service
            information we should query.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.NeedToConnect(Microsoft.TeamFoundation.Framework.Common.ConnectOptions)">
            <summary>
            Returns true if we need to connect to the server.
            </summary>
            <param name="optionsNeeded"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.Connect(Microsoft.TeamFoundation.Framework.Common.ConnectOptions)">
            <summary>
            Performs all of the steps that are necessary for setting up a connection
            with a TeamFoundationServer.  This method will use the ICredentialsProvider
            specified in the constructor to prompt for credentials if authentication fails.
            </summary>
            <param name="connectOptions">Specifies what information that should be 
            returned from the server.</param>
            <param name="serviceTypeFilters">The service types to get information for.
            If service information is not requested in the connectOptions value, this
            parameter must be null.  To request
            all service definitions, pass "*" as the first and only entry in the array.
            To only request service information about the possible client zones, pass
            in null or an empty array.
            </param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.Disconnect">
            <summary>
            Reset the connected state of the provider
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.m_parent">
            <summary>
            Passed in on construction. The Uris for the server we are connecting to.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.m_authenticatedIdentity">
            <summary>
            These are the values we are responsible for determining
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.m_locationServicePortal">
            <summary>
            These handle talking to the web service and dealing with connection data
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.FrameworkServerDataProvider.m_locationDataCacheManager">
            <summary>
            This object manages the location data cache
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition">
            <summary>
            Defines a service and all of the locations that exist for it.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.#ctor(System.String,System.Guid,System.String,System.String,Microsoft.TeamFoundation.Framework.Common.RelativeToSetting,System.String,System.String)">
            <summary>
            Creates a ServiceDefinition based on the information supplied.
            </summary>
            <param name="serviceType">The service type for this ServiceDefinition.</param>
            <param name="identifier">The identifier for this ServiceDefinition.</param>
            <param name="displayName">The display name for this ServiceDefinition.</param>
            <param name="relativePath">The relative path for this ServiceDefinition.</param>
            <param name="relativeToSetting">
                The relativeToSetting for this ServiceDefinition.
            </param>
            <param name="description">The description for this ServiceDefinition.</param>
            <param name="toolType">The tool type for this ServiceDefinition</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.#ctor(System.String,System.Guid,System.String,System.String,Microsoft.TeamFoundation.Framework.Common.RelativeToSetting,System.String,System.String,System.Collections.Generic.List{Microsoft.TeamFoundation.Framework.Client.LocationMapping})">
            <summary>
            Creates a ServiceDefinition based on the information supplied.
            </summary>
            <param name="serviceType">The service type for this ServiceDefinition.</param>
            <param name="identifier">The identifier for this ServiceDefinition.</param>
            <param name="displayName">The display name for this ServiceDefinition.</param>
            <param name="relativePath">The relative path for this ServiceDefinition.</param>
            <param name="relativeToSetting">
                The relativeToSetting for this ServiceDefinition.
            </param>
            <param name="description">The description for this ServiceDefinition.</param>
            <param name="toolType">The tool type for this ServiceDefinition</param>
            <param name="locationMappings">
                The location mappings for this ServiceDefinition.
            </param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.ServiceType">
            <summary>
            This is the type of the service that is being defined. Note that multiple 
            ServiceDefinitions can have the same ServiceType. Together a ServiceType and
            an Identifier uniquely identify a ServiceDefinition.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.Identifier">
            <summary>
            The identifier for this instance of this service type. Together a 
            ServiceType and an Identifier uniquely identify a ServiceDefinition.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.DisplayName">
            <summary>
            The display name for this ServiceDefinition.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.RelativeToSetting">
            <summary>
            Inidicates whether the ServiceDefinition is relative to some aspect of the
            Team Foundation Server deployment or FullyQualified meaning that it is an
            external service. If this RelativeToSetting does not have a value of 
            FullyQualified then the RelativePath must not be null or empty. 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.RelativePath">
            <summary>
            The relative path for this ServiceDefinition.  If the RelativeToSetting is 
            FullyQualified, this value must be null, otherwise it must contain the 
            portion of the path that is relative to whatever the relative setting is for
            the ServiceDefinition. 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.Description">
            <summary>
            Text that documents or describes what this service is and how it is used.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.ToolType">
            <summary>
            The Team Foundation Server Tool Type that this service is a member of.  
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.LocationMappings">
            <summary>
            The LocationMappings that define the location to AccessMapping relationships
            for FullyQualified ServiceDefinitions. For any ServiceDefinition that is 
            relative, this will always be empty.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.Mappings">
            <summary>
            This property is meant to be used by the location serivce internals only.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.AddLocationMapping(Microsoft.TeamFoundation.Framework.Client.AccessMapping,System.String)">
            <summary>
            Adds a LocationMapping for the provided AccessMapping and location to the 
            ServiceDefinition.  Note that if a LocationMapping already exists for the 
            provided AccessMapping, it will be overwritten. Also, this method should 
            only be called on ServiceDefinitions that are FullyQualified.
            </summary>
            <param name="accessMapping">
                The AccessMapping this LocationMapping corresponds to. This AccessMapping
                must already be registered in the location service.
            </param>
            <param name="location">
                The location that is associated with the provided AccessMapping. This value
                must not be null.
            </param>
            <exception cref="T:System.InvalidOperationException">
               Throw if this ServiceDefinition does not have a RelativeToSetting of 
               FullyQualified.
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.RemoveLocationMapping(Microsoft.TeamFoundation.Framework.Client.AccessMapping)">
            <summary>
            Removes the LocationMapping for the AccessMapping provided.  Note that 
            AccessMappings are determined to be equal based on their moniker.
            </summary>
            <param name="accessMapping">
                The AccessMapping for the LocationMapping to be removed.
            </param>
            <returns>True if something was removed.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.GetLocationMapping(Microsoft.TeamFoundation.Framework.Client.AccessMapping)">
            <summary>
            Returns the LocationMapping for the AccessMapping provided or null
            if this ServiceDefinition does not have a LocationMapping for the provided
            AccessMapping. This function will always return null if it is called
            on a non-relative ServiceDefinition.
            </summary>
            <param name="accessMapping">
                The AccessMapping to find the LocationMapping for.
            </param>
            <returns>
                The LocationMapping for the AccessMapping provided or null if this 
                ServiceDefinition does not have a LocationMapping for the provided
                AccessMapping. This function will always return null if it is called
                on a non-relative ServiceDefinition.
            </returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.EqualityComparer">
            <summary>
            A comparer for comparing ServiceDefinitions.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.DefinitionEqualityComparer">
            <summary>
            A class for comparing ServiceDefinitions.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ServiceDefinition.s_equalityComparer">
            <summary>
            A comparer for comparing ServiceDefinitions.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TfsDequeueContext.Message">
            <summary>
            Gets the message associated with this context.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TfsDequeueContext.MessageId">
            <summary>
            Gets the unique sequence identifier for this message.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsDequeueContext.Acknowledge">
            <summary>
            Marks the message as successfully processed and queues an acknowledgement to be sent to the server.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue">
            <summary>
            Provides access to a message queue hosted on a Team Foundation Server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.AdditionalHeaders">
            <summary>
            Gets the collection of additional headers which should be applied to all outgoing messages.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.Id">
            <summary>
            Gets the unique identifier for this queue.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.MaxAcknowledgementDelay">
            <summary>
            Gets the maximum amount of time to delay acknowledgement of messages on the server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.MaxPendingCount">
            <summary>
            Gets the maximum number of messages which can be dequeued simultaneously.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.Connected">
            <summary>
            Raised when the message queue establishes a successful connection to the server.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.Disconnected">
            <summary>
            Raised when the message queue first notices a disruption in connectivity to the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.Abort">
            <summary>
            Aborts the message queue connection and immediately returns control to the caller.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.Acknowledge(System.Int64)">
            <summary>
            Queues an acknowledgement to be sent to the server.
            </summary>
            <param name="messageId">The message which should be acknowledged</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.Close">
            <summary>
            Closes the message queue. Any pending acknowledgements are sent to the server prior to returning
            control to the caller.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.Close(System.TimeSpan)">
            <summary>
            Closes the message queue. Any pending acknowledgements are sent to the server prior to returning
            control to the caller.
            </summary>
            <param name="timeout">The maximum amount of time to wait for the queue to close</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.BeginClose(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to close the message queue. Any pending acknowledgements are sent to 
            the server prior to returning control to the caller.
            </summary>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
            <returns>The asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to close the message queue. Any pending acknowledgements are sent to 
            the server prior to returning control to the caller.
            </summary>
            <param name="timeout">The maximum amount of time to wait for for the queue to close</param>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
            <returns>The asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.EndClose(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to close the message queue.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.Dequeue(System.TimeSpan)">
            <summary>
            Dequeues a message from the queue. The caller will be blocked for a maximum duration of the 
            specified timeout.
            </summary>
            <param name="timeout">The maximum amount of time to wait for a message to be received</param>
            <returns>The message which was dequeued from the server, or null if the queue has been closed</returns>
            <exception cref="T:System.TimeoutException">if the specified timeout is exceeded</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.Dequeue(System.TimeSpan,Microsoft.TeamFoundation.Framework.Client.TfsDequeueContext@)">
            <summary>
            Dequeues a message from the queue. The caller will be blocked for a maximum duration of the 
            specified timeout.
            </summary>
            <param name="timeout">The maximum amount of time to wait for a message to be received</param>
            <param name="context">
            A context used for processing and acknowledging a message. If this value is null and the return value 
            is true, the message queue has been closed.
            </param>
            <returns>True if the call returned within the specified timeout; otherwise, false</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.BeginDequeue(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to dequeue a message from the queue.
            </summary>
            <param name="timeout">The maximum amount of time to wait for a message to be received</param>
            <param name="callback">
            The <c>System.AsyncCallback</c> delegate that receives notification that the operation is complete.
            </param>
            <param name="state">
            An object, specified by the caller, that contains state information associated with the
            asynchronous operation.
            </param>
            <returns>The asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.EndDequeue(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to dequeue a message from the queue.
            </summary>
            <param name="result">The asynchronous operation</param>
            <returns>The message which was dequeued from the server, or null if the queue has been closed</returns>
            <exception cref="T:System.TimeoutException">if the specified timeout is exceeded</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.EndDequeue(System.IAsyncResult,Microsoft.TeamFoundation.Framework.Client.TfsDequeueContext@)">
            <summary>
            Ends an asynchronous operation to dequeue a message from the queue.
            </summary>
            <param name="result">The asynchronous operation</param>
            <param name="context">
            A context used for processing and acknowledging a message. If this value is null and the return value 
            is true, the message queue has been closed.
            </param>
            <returns>True if the call returned within the specified timeout; otherwise, false</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.OnConnected">
            <summary>
            Raises the connected event if the connection was previously lost.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.OnDisconnected(System.Exception)">
            <summary>
            Raises the disconnected event if a connection is not re-established within a specified amount of time.
            </summary>
            <param name="exception">The exception that triggered the disconnection</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueue.NotifyDisconnectedCallback(System.Object)">
            <summary>
            Raises the disconnected event if certain conditions are met.
            </summary>
            <param name="state">The connection manager instance</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueDisconnectedEventArgs">
            <summary>
            Provides access to the underlying exception which caused the loss of connectivity.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueDisconnectedEventArgs.Exception">
            <summary>
            Gets the exception that occurred.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService">
            <summary>
            Provides centralized management for connections to Team Foundation Server message queues.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService.#ctor">
            <summary>
            Initializes a new <c>Microsoft.TeamFoundation.Framework.Client.TfsmqConnectionManager</c> instance. This 
            constructor should not be used directly by user code.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService.Credentials">
            <summary>
            Gets the credentials used for authentication to the Team Foundation Server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService.ReceiveTimeout">
            <summary>
            Gets the interval of time that a connection can sustain inactivity before timing out.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService.ReconnectTimeout">
            <summary>
            Gets the interval of time allowed for reconnection before the disconnected event is raised.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService.SleepTimeout">
            <summary>
            Gets the interval of time that a connection operation will sleep when an empty response is received.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService.Connection">
            <summary>
            Gets the associated connection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService.ProjectCollection">
            <summary>
            Gets the associated project collection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService.Version">
            <summary>
            Gets the version of the message queue service API which is supported.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService.QueueServiceLocation">
            <summary>
            Gets the queue service location for the associated project collection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService.Close">
            <summary>
            Closes all active queues and releases all associated resources.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService.System#IDisposable#Dispose">
            <summary>
            Closes all active queues and releases all associated resources.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService.CreateQueue(System.Uri)">
            <summary>
            Creates an object which may be used to dequeue messages from the specified queue.
            </summary>
            <param name="queueId">The queue identifier</param>
            <returns>An object for dequeuing messages from the server</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService.CreateQueue(System.Uri,System.Int32)">
            <summary>
            Creates an object which may be used to dequeue messages from the specified queue.
            </summary>
            <param name="queueId">The queue identifier</param>
            <returns>An object for dequeuing messages from the server</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService.CreateQueue(System.Uri,System.Int32,System.TimeSpan)">
            <summary>
            Creates an object which may be used to dequeue messages from the specified queue.
            </summary>
            <param name="queueId">The queue identifier</param>
            <returns>An object for dequeuing messages from the server</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService.CreateQueue(System.Uri,System.Int32,System.TimeSpan,System.Func{System.Web.Services.Protocols.SoapException,System.Exception})">
            <summary>
            Creates an object which may be used to dequeue messages from the specified queue.
            </summary>
            <param name="queueId">The queue identifier</param>
            <param name="convertException">
            An optional callback to convert a <c>SoapException</c> to a strongly typed exception
            </param>
            <returns>An object for dequeuing messages from the server</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TfsMessageQueueService.CreatePollChannel">
            <summary>
            Creates a channel factory for polling the associated Team Foundation Server.
            </summary>
            <returns>A new channel factory instance owned by the caller</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Offline.LocalMetadataTable.TraceKeywords">
            <summary>
            The tracing keywords that should be overridden by the implementers. 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Offline.LocalMetadataTable.IsDirty">
            <summary>
            If true, data will be serialized to the disk during Dispose.
            </summary>        
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Offline.LocalMetadataTable.FlushToDisk">
            <summary>
            If true, at save time, the table will have its handle flushed to disk by calling
            FlushFileBuffers
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Offline.LocalMetadataTable.IsAborted">
            <summary>
            If true, all changes made to this file will be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.Offline.LocalMetadataTable.IsEligibleForCachedLoad">
            <summary>
            If true, the owning transaction may cache this table for a future cached load.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Offline.LocalMetadataTable.Recover">
            <summary>
            Recover from an abandoned mutex.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Offline.LocalMetadataTable.PositionFile(System.Boolean)">
            <summary>
            Move the written file in slot 3 to slot 2, then to slot 1.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Offline.LocalMetadataTableLock.Acquire(System.Boolean)">
            <summary>
            Acquires the mutex corresponding to this LocalMetadataTableLock.
            </summary>
            <param name="requestYield">If true, then iff the lock cannot be obtained immediately, this thread will
            attempt to acquire the yield request mutex to signal to the holding thread that it should yield the mutex
            at its earliest opportunity.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Offline.LocalMetadataTableLock.IsYieldRequested">
            <summary>
            Returns true if another thread in the system is currently holding the yield request mutex for
            this LocalMetadataTableLock, indicating that we should yield if we have the opportunity.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.Offline.LocalMetadataTableLock.Yield">
            <summary>
            Releases and re-acquires the LocalMetadataTableLock. When the method returns, the lock
            has been re-acquired.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessTemplateService">
            <summary>
            Service for managing process templates (add, delete, etc.)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessTemplateService.#ctor(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection)">
            <summary>
            Create the process template service for the given connection
            </summary>
            <param name="tfs">The server connection object</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessTemplateService.GetTemplateNames">
            <summary>
            This method is obsolete. Please use the TemplateHeaders method instead
            
            Get the template names in XML package.
            </summary>
            <returns>Template names in XML package</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessTemplateService.TemplateHeaders">
            <summary>
            Get a list of the headers for all process templates on the server.
            The first entry will be the default template (if any).
            </summary>
            <returns>Array of template headers</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessTemplateService.DeleteTemplate(System.Int32)">
            <summary>
            Delete a template with the given id
            </summary>
            <param name="templateId">The id of the template to delete</param>
            <returns>Array of template headers after deleting the given template</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessTemplateService.MakeDefaultTemplate(System.Int32)">
            <summary>
            Set the given template to be the default template
            </summary>
            <param name="templateId">The id of the template to make default</param>
            <returns>Array of template headers after making the given template default</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessTemplateService.AddTemplate(System.String,System.String,System.String,System.String)">
            <summary>
            This method is obsolete. Please use AddUpdateTemplate instead.
            
            Add a template with the given properties. If a template already exists
            with the given name, it will be overwritten.       
            </summary>
            <param name="name">The name of the template</param>
            <param name="description">A description of the template</param>
            <param name="metadata">Extra metadata associated with the template</param>
            <param name="state">This value is no longer used and will be ignored</param>
            <returns>The unique id of the template that was added/updated.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessTemplateService.GetTemplateIndex(System.String)">
            <summary>
            Gets the index of the template with the given name or -1 if the template
            couldn't be found.
            </summary>
            <param name="name">The name of the template</param>
            <returns>Index of the template, or -1 if not found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessTemplateService.AddUpdateTemplate(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add or update a template with the given properties.
            </summary>
            <param name="name">The name of the template to add</param>
            <param name="description">A description of the template</param>
            <param name="metadata">Extra metadata associated with the template</param>
            <param name="state">This value is no longer used and will be ignored</param>
            <param name="zipFileName">The name of the zip file on containing the process template
            resources </param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessTemplateService.UploadMethodology(System.String,System.Int32)">
            <summary>
            This method is obsolete. Please use AddUpdateTemplate instead.
            
            Uploads the template resources for the given template id
            </summary>
            <param name="fileName">The name of the zip file containing the proces template
            resources</param>
            <param name="templateId">The id of the process template</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessTemplateService.GetTemplateData(System.Int32)">
            <summary>
            Retrieve a methodology zip file to a temporary file path
            </summary>
            <param name="templateId">The id of the template</param>
            <returns>The path do the template file</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessTemplateService.FormatFormHeader(System.String,System.String,System.String,System.Int64)">
            <summary>
            Return a utf8 encoded byte[] for the mime encoded form parameters.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="metadata"></param>
            <param name="fileLength"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessTemplateService.FormFooter">
            <summary>
            Return a utf8 encoded byte[] for the mime footer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessTemplateService.ProcessHttpWebResponse(System.Net.HttpWebResponse)">
            <summary>
            Process http web request and throw unauthorized exception
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationProcessTemplateService.ConvertToTemplateHeaders(Microsoft.TeamFoundation.Framework.Client.FrameworkTemplateHeader[])">
            <summary>
            Converts the specified array of FrameworkTemplateHeader objects to an array of public TemplateHeader
            objects.  This is here for public OM compatibility.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ArtifactPropertyValue">
            <summary>
            Represents a generic, user defined name (moniker) association to a property name and value set.
            The moniker can be optionaly versioned by specifying a version number.
            </summary>
            <summary>
            Represents a Team Foundation Artifact associated with a set of property-value pairs.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ArtifactPropertyValue.#ctor(Microsoft.TeamFoundation.Framework.Client.ArtifactSpec)">
            <summary>
            Creates an empty artifact property value for this artifact spec
            </summary>
            <param name="artifactSpec"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ArtifactPropertyValue.#ctor(Microsoft.TeamFoundation.Framework.Client.ArtifactSpec,System.Collections.Generic.List{Microsoft.TeamFoundation.Framework.Client.PropertyValue})">
            <summary>
            creates a versioned moniker with empty property values
            </summary>
            <param name="moniker"></param>
            <param name="version"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ArtifactPropertyValue.#ctor(Microsoft.TeamFoundation.Framework.Client.ArtifactSpec,System.String,System.Nullable{System.Int32})">
            <summary>
            creates non-versioned moniker property value
            </summary>
            <param name="moniker"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ArtifactPropertyValue.#ctor(Microsoft.TeamFoundation.Framework.Client.ArtifactSpec,System.String,System.Nullable{System.Double})">
            <summary>
            creates non-versioned moniker property value
            </summary>
            <param name="moniker"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ArtifactPropertyValue.#ctor(Microsoft.TeamFoundation.Framework.Client.ArtifactSpec,System.String,System.String)">
            <summary>
            creates non-versioned moniker property value
            </summary>
            <param name="moniker"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ArtifactPropertyValue.#ctor(Microsoft.TeamFoundation.Framework.Client.ArtifactSpec,System.String,System.Nullable{System.DateTime})">
            <summary>
            creates non-versioned moniker property value
            </summary>
            <param name="moniker"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ArtifactPropertyValue.#ctor(Microsoft.TeamFoundation.Framework.Client.ArtifactSpec,System.String,System.Byte[])">
            <summary>
            creates non-versioned moniker property value
            </summary>
            <param name="moniker"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ArtifactPropertyValue.PropertyValues">
            <summary>
            Set of values associated with the artifact
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ArtifactSpec">
            <summary>
            Represents a team foundation property moniker specification. 
            It can be the exact identity of the moniker or a filter specification.
            Filters can be any combination of valid characters, '*' and '?' wildcards.
            </summary>
            <summary>
            Represents a Team Foundation Artifact property specification.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ArtifactSpec.#ctor(System.Guid,System.String,System.Int32)">
            <summary>
            Initializes an artifact spec with options
            </summary>
            <param name="kind">The kind the artifact belongs too.</param>
            <param name="moniker">The string identifier of the artifact.</param>
            <param name="version">The version of the artifact</param>
            <param name="options">Options for the spec.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ArtifactSpec.#ctor(System.Guid,System.Int32,System.Int32)">
            <summary>
            Initializes an artifact spec with options
            </summary>
            <param name="kind">The kind the artifact belongs too.</param>
            <param name="moniker">The integer identifier of the artifact.</param>
            <param name="version">The version of the artifact</param>
            <param name="options">Options for the spec.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ArtifactSpec.#ctor(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Initializes an artifact spec with options
            </summary>
            <param name="kind">The kind the artifact belongs too.</param>
            <param name="moniker">The byte array identifier of the artifact.</param>
            <param name="version">The version of the artifact</param>
            <param name="options">Options for the spec.</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.IPropertyService">
            <summary>
            Generic Team Foundation Framework Property Service
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IPropertyService.GetProperties(Microsoft.TeamFoundation.Framework.Client.ArtifactSpec,System.String[])">
            <summary>
            Gets property-values associated with given artifact and property filters
            </summary>
            <param name="artifactSpec">an array of ArtifactSpecs</param>
            <param name="propertyNameFilters">and array of property name filters</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IPropertyService.GetProperties(Microsoft.TeamFoundation.Framework.Client.ArtifactSpec[],System.String[])">
            <summary>
            Gets property-values associated with given artifact and property filters
            </summary>
            <param name="artifactSpecs">an array of ArtifactSpecs</param>
            <param name="propertyNameFilters">and array of property name filters</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IPropertyService.GetProperties(Microsoft.TeamFoundation.Framework.Client.ArtifactSpec[],System.String[],Microsoft.TeamFoundation.Framework.Common.GetPropertiesOptions)">
            <summary>
            Gets property-values associated with given artifact and property filters
            </summary>
            <param name="artifactSpecs">an array of ArtifactSpecs</param>
            <param name="propertyNameFilters">and array of property name filters</param>
            <param name="options">Options to apply for the query</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IPropertyService.SetProperty(Microsoft.TeamFoundation.Framework.Client.ArtifactSpec,System.String,System.Nullable{System.Int32})">
            <summary>
            Sets property-value pair to non-versioned artifact
            </summary>
            <param name="artifactSpec">a user defined friendly name</param>
            <param name="propertyName">a property name</param>
            <param name="value">the value to bind to the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IPropertyService.SetProperty(Microsoft.TeamFoundation.Framework.Client.ArtifactSpec,System.String,System.Nullable{System.Double})">
            <summary>
            Sets property-value pair to non-versioned artifact
            </summary>
            <param name="artifactSpec">a user defined friendly name</param>
            <param name="propertyName">a property name</param>
            <param name="value">the value to bind to the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IPropertyService.SetProperty(Microsoft.TeamFoundation.Framework.Client.ArtifactSpec,System.String,System.String)">
            <summary>
            Sets property-value pair to non-versioned artifact
            </summary>
            <param name="artifactSpec">a user defined friendly name</param>
            <param name="propertyName">a property name</param>
            <param name="value">the value to bind to the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IPropertyService.SetProperty(Microsoft.TeamFoundation.Framework.Client.ArtifactSpec,System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets property-value pair to non-versioned artifact
            </summary>
            <param name="artifactSpec">a user defined friendly name</param>
            <param name="propertyName">a property name</param>
            <param name="value">the value to bind to the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IPropertyService.SetProperty(Microsoft.TeamFoundation.Framework.Client.ArtifactSpec,System.String,System.Byte[])">
            <summary>
            Sets property-value pair to non-versioned artifact
            </summary>
            <param name="artifactSpec">a user defined friendly name</param>
            <param name="propertyName">a property name</param>
            <param name="value">the value to bind to the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IPropertyService.SetProperties(Microsoft.TeamFoundation.Framework.Client.ArtifactPropertyValue)">
            <summary>
            set artifact-property-value
            </summary>
            <param name="artifactPropertyValues"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.IPropertyService.SetProperties(Microsoft.TeamFoundation.Framework.Client.ArtifactPropertyValue[])">
            <summary>
            bulk set artifact-property-values
            </summary>
            <param name="artifactPropertyValues"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.PropertyValue">
            <summary>
            Represents a property-value pair.
            </summary>
            <summary>
            Represents a property-value pair.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.PropertyValue.#ctor(System.String,System.Int32)">
            <summary>
            creates a property-value pair
            </summary>
            <param name="propertyName">property name</param>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.PropertyValue.#ctor(System.String,System.Double)">
            <summary>
            creates a property-value pair
            </summary>
            <param name="propertyName">property name</param>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.PropertyValue.#ctor(System.String,System.DateTime)">
            <summary>
            creates a property-value pair
            </summary>
            <param name="propertyName">property name</param>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.PropertyValue.#ctor(System.String,System.String)">
            <summary>
            creates a property-value pair
            </summary>
            <param name="propertyName">property name</param>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.PropertyValue.#ctor(System.String,System.Byte[])">
            <summary>
            creates a property-value pair
            </summary>
            <param name="propertyName">property name</param>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.PropertyValue.#ctor(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.PropertyValue.Value">
            <summary>
            get/set propety value
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.PropertyValue.PropertyType">
            <summary>
            get the Type of the property value
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationPropertyService.SetProperties(Microsoft.TeamFoundation.Framework.Client.ArtifactPropertyValue)">
            <summary>
            updates a set of property/values for and artifact
            </summary>
            <param name="artifactPropertyValue"></param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.PropertyServiceException"></exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationPropertyService.SetProperties(Microsoft.TeamFoundation.Framework.Client.ArtifactPropertyValue[])">
            <summary>
            updates multiple aritfacts with their respective set of properties
            </summary>
            <param name="artifactPropertyValues">array of ArtifactPropertyValue</param>
            <remarks>
            bulk set operation is executed in batches of 32MB. Set operation is atomic within the scope of each 
            batch only.
            </remarks>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.PropertyServiceException"></exception>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.AccessControlListDetails">
            <summary>
            This class exists for web service serialization and for reading ACLs out of the database.
            While this could be done on the AccessControlList class itself, this allows us to hide
            any properties that shouldn't actually be a part of the public server OM.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessControlListDetails.Entries">
            <summary>
            The permissions set on within this access control list.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessControlListDetails.IncludeExtendedInfo">
            <summary>
            True if this ACL holds ACEs that have extended information.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlListDetails.InitializeFromWebService">
            <summary>
            Make sure the AccessControList parent object is ready to be used.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlListDetails.PrepareForWebServiceSerialization(Microsoft.TeamFoundation.Framework.Client.AccessControlList)">
            <summary>
            Prepares the ACL for web service serialization.
            </summary>
            <param name="accessControlList"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.AceExtendedInformation">
            <summary>
            Holds the inherited and effective permission information for a given 
            AccessControlEntry.
            </summary>
            <summary>
            Holds the inherited and effective permission information for a given 
            AccessControlEntry.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AceExtendedInformation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new AceExtendedInformation object with the specified information.
            </summary>
            <param name="inheritedAllow">The allow bits received from inheritance.</param>
            <param name="inheritedDeny">The deny bits received from inheritance.</param>
            <param name="effectiveAllow">The effective allow bits.</param>
            <param name="effectiveDeny">The effective deny bits.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AceExtendedInformation.InheritedAllow">
            <summary>
            These are the permissions that are inherited for this
            identity on this token.  If the token does not inherit 
            permissions this will be 0.  Note that any permissions that
            have been explicitly set on this token for this identity, or 
            any groups that this identity is a part of, are not included here.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AceExtendedInformation.InheritedDeny">
            <summary>
            These are the permissions that are inherited for this
            identity on this token.  If the token does not inherit 
            permissions this will be 0.  Note that any permissions that
            have been explicitly set on this token for this identity, or 
            any groups that this identity is a part of, are not included here.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AceExtendedInformation.EffectiveAllow">
            <summary>
            This is the combination of all of the explicit and inherited
            permissions for this identity on this token.  These are the
            permissions used when determining if a given user has permission
            to perform an action.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AceExtendedInformation.EffectiveDeny">
            <summary>
            This is the combination of all of the explicit and inherited
            permissions for this identity on this token.  These are the
            permissions used when determining if a given user has permission
            to perform an action.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ActionDefinition.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates and ActionDefinition based on the inputs.
            </summary>
            <param name="bit">The bit mask integer for this action. Must be a power of 2.</param>
            <param name="name">The non-localized name for this action.</param>
            <param name="displayName">The localized display name for this action</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ActionDefinition.Bit">
            <summary>
            The bit mask integer for this action. Must be a power of 2.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ActionDefinition.Name">
            <summary>
            The non-localized name for this action.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ActionDefinition.DisplayName">
            <summary>
            The localized display name for this action.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.CatalogData">
            <summary>
            This is a class who's sole purpose is for serialization of catalog data
            over the web service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogData.CatalogNodes">
            <summary>
            The nodes to pass over the web service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogData.CatalogResourceTypes">
            <summary>
            The resource types to pass over the web service
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogData.CatalogResources">
            <summary>
            The resources to pass over the web service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogData.DeletedNodeResources">
            <summary>
            The resources for the deleted nodes to pass over the web service
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogData.DeletedNodes">
            <summary>
            The deleted nodes to pass over the web service
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogData.DeletedResources">
            <summary>
            The deleted resources to pass over the web service
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogData.LocationServiceLastChangeId">
            <summary>
            The last change id value of the location service
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogNodeDependency.AssociationKey">
            <summary>
            The key value that defines the association relationshiop.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogNodeDependency.FullPath">
            <summary>
            The full path for the node with the dependency
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogNodeDependency.IsSingleton">
            <summary>
            True if this dependency is a singleton dependency.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogNodeDependency.RequiredNodeFullPath">
            <summary>
            The full path for the required node.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.CatalogServiceReference">
            <summary>
            Contains details about a service definition reference.  This is used
            for passing resources over a web service and reading from the database.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogServiceReference.AssociationKey">
            <summary>
            The key value that defines the association relationshiop.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogServiceReference.ResourceIdentifier">
            <summary>
            Identifier for the resource that this reference is on.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.CatalogServiceReference.ServiceDefinition">
            <summary>
            Used to send the service definition over the web service.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ConnectedServiceMetadata">
            <summary>
            This class contains the "public" information of a ConnectedService.
            This includes Name, FriendlyName, kind, and Description. Used by Clients to display
            This information without revealing the secret info and used when reading from the database
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectedServiceMetadata.AuthenticatedBy">
            <summary>
            The GUID for the user who did the OAuth authentication to created this service
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectedServiceMetadata.Description">
            <summary>
            Extra description on the service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectedServiceMetadata.FriendlyName">
            <summary>
            A friendly name to represent the service in place of 'name' which will often be a GUID.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectedServiceMetadata.Kind">
            <summary>
            The kind of service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectedServiceMetadata.Name">
            <summary>
            Name of the service such as subscription id or other GUID.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectedServiceMetadata.ServiceUri">
            <summary>
            Optional uri to connect directly to the service such as https://windows.azure.com
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ConnectedServiceMetadata.TeamProject">
            <summary>
            Name of the project associated with this service
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ConnectedServiceKind.AzureSubscription">
            <summary>
            Azure Subscription
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.ConnectedServiceKind.Custom">
            <summary>
            Custom or unknown service
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.DeliverySchedule">
            <summary>
            Available delivery schedules
            </summary>
            <remarks>
            NOTE: Only DeliverySchedule.Immediate is currently supported. Other values are reserved for possible future use.
            </remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessCheckException.IdentityName">
            <summary>
            The name of the identity who failed the check.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessCheckException.Token">
            <summary>
            The token that this check failed on.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessCheckException.RequiredPermissions">
            <summary>
            The permissions that are needed for this check to succeed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessCheckException.NamespaceId">
            <summary>
            The id for the namespace that this check was made on.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessCheckException.IdentityDescriptor">
            <summary>
            The identity descriptor this exception was thrown for.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FileHandlerWebService.CreateDownloadRequest(System.Uri,System.String,Microsoft.TeamFoundation.Framework.Client.FileRepository.CredentialsType,System.Boolean@)">
            <summary>
            Create an HttpWebRequest object for downloading a file. 
            </summary>
            <param name="DownloadBaseUri">Base Uri for downloads</param>
            <param name="downloadUrl">Querystring attached to the download request</param>
            <param name="proxyCredentials">type of credentials to use with proxy</param>
            <param name="isProxyUrl">Indicates whether the URL set on the HttpWebRequest is a proxy URL</param>
            <returns>HttpWebRequest used for downloading files</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.FilteredIdentitiesList">
            <summary>
            This is the result of a call to ReadFilteredIdentities
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.FrameworkTemplateHeader">
            <summary>
            Metadata describing a process template
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.LocationServiceData">
            <summary>
            Data transfer class used to transfer data about the location
            service data over the web service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.LocationServiceData.AccessMappings">
            <summary>
            Data about the access mappings contained by this location service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.LocationServiceData.AccessPointsDoNotIncludeWebAppRelativeDirectory">
            <summary>
            This is because of a bug that was introduced in Rosario Beta1.  An access point used to
            be of the form http://server:8080/tfs/Collection0.  We have decided that it is much
            less work and more correct to not store the collection vdir on the access point and have
            the client construct it properly.  When we no longer support Rosario Beta 1 clients
            then we can remove the addition of the collection virtual directory to the access point
            in the LocationWebService class.  At that time this value should be set to true so that
            the new clients know how to handle the access points.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.LocationServiceData.ClientCacheFresh">
            <summary>
            True if the server thinks the
            client cache is fresh based on the passed up value.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.LocationServiceData.ClientCacheTimeToLive">
            <summary>
            The time to live on the location service cache.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.LocationServiceData.DefaultAccessMappingMoniker">
            <summary>
            The id for the last change that
            took place on the server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.LocationServiceData.LastChangeId">
            <summary>
            The id for the last change that
            took place on the server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.LocationServiceData.ServiceDefinitions">
            <summary>
            Data about the service definitions contained by this location service.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription">
            <summary>
            Class for describing the details of a TeamFoundationSecurityNamespace
            </summary>
            <summary>
            Class for describing the details of a SecurityNamespace
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription.#ctor(System.Guid,System.String,System.String,System.String,System.Char,System.Int32,Microsoft.TeamFoundation.Framework.Common.SecurityNamespaceStructure,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.ActionDefinition})">
            <summary>
            Creates a SecurityNamespaceDescription which can be used to create a 
            SecurityNamespace
            </summary>
            <param name="namespaceId">
                The id that uniquely identifies the SecurityNamespace.
            </param>
            <param name="name">
                The non-localized name for the SecurityNamespace that will be used for things
                like the command-line.
            </param>
            <param name="displayName">
                The localized display name for the SecurityNamespace.
            </param>
            <param name="databaseCategory">
                This is the database category that describes where the security information
                for this SecurityNamespace should be stored.
            </param>
            <param name="separatorValue">
                If the security tokens this namespace will be operating on need to be split 
                on certain characters to determine its elements that character should be 
                specified here. If not, this value must be the null character.
            </param>
            <param name="elementLength">
                If the security tokens this namespace will be operating on need to be split 
                on certain character lengths to determine its elements, that length should be
                specified here. If not, this value must be -1.</param>
            <param name="structure">
                The structure that this SecurityNamespace will use to organize its tokens.
                If this namespace is hierarchical, either the separatorValue or the 
                elementLength parameter must have a non-default value.
            </param>
            <param name="writePermission">
                The permission bits needed by a user in order to modify security data in this
                SecurityNamespace.
            </param>
            <param name="readPermission">
                The permission bits needed by a user in order to read security data in this
                SecurityNamespace.
            </param>
            <param name="actions">
                The list of actions that this SecurityNamespace is responsible for securing.
            </param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription.NamespaceStructure">
            <summary>
            The structure that this SecurityNamespace will use to organize its tokens.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription.DisplayName">
            <summary>
            The display name for the SecurityNamespace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription.NamespaceId">
            <summary>
            The id that uniquely identifies the SecurityNamespace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription.Name">
            <summary>
            The non-localized name for the SecurityNamespace that will be used for things
            like the command-line.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription.SeparatorValue">
            <summary>
            If the security tokens this namespace will be operating on need to be split 
            on certain characters to determine its elements that character should be 
            specified here. If not, this value will be the null character.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription.ElementLength" -->
        <member name="P:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription.WritePermission">
            <summary>
            The permission bits needed by a user in order to modify security data on the
            SecurityNamespace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription.ReadPermission">
            <summary>
            The permission bits needed by a user in order to read security data on the
            SecurityNamespace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription.DatabaseCategory">
            <summary>
            This is the database category that describes where the security information
            for this SecurityNamespace should be stored.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription.Actions">
            <summary>
            The list of actions that this SecurityNamespace is responsible for securing.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription.GetBitmaskForAction(System.String)">
            <summary>
            Returns the bit mask that corresponds to the action name or 0 if
            it is not an action defined in this SecurityNamespace.
            </summary>
            <param name="actionName">The non-localized name for the action.</param>
            <returns>
            The bit mask that corresponds to the action name or 0 if it is not an action
            defined in this namespace.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription.GetActionNameForBitmask(System.Int32)">
            <summary>
            Returns the action name for the bitmask or String.Empty if the bitmask
            doesn't correspond to an action defined in this SecurityNamespace.  
            </summary>
            <param name="bitmask">
                The bitmask for a single permission whose action name should be returned.  
                Note, the bitmask should only apply to one action. If 1 = Read and 2 = Write
                then 1 and 2 are valid values but 3 is not.
            </param>
            <returns>
            The action name for the bitmask or String.Empty if the bitmask
            doesn't correspond to an action defined in this SecurityNamespace.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription.GetActionDisplayNameForBitmask(System.Int32)">
            <summary>
            Returns the action display name for the bitmask or String.Empty if the
            bitmask doesn't correspond to an action.  
            </summary>
            <param name="bitmask">
                The bitmask for a single permission whose action display name should be 
                returned. Note, the bitmask should only apply to one action. If 1 = Read and
                2 = Write then 1 and 2 are valid values but 3 is not.
            </param>
            <returns>
            The action display name for the bitmask or String.Empty if the
            bitmask doesn't correspond to an action.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription.Clone">
            <summary>
            Returns a copy of the description.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription.PrepareForWebServiceSerialization">
            <summary>
            Called automatically before web service serialization.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ServiceIdentity">
            <summary>
            Represents the service identity known to the system
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServiceIdentity.Identity">
            <summary>
            The team foundation identity  of the service identity in the system
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServiceIdentity.IdentityInfo">
            <summary>
            The service identity info
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ServiceTypeFilter">
            <summary>
            A filter class for specifying the types of services to return.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServiceTypeFilter.Identifier">
            <summary>
            The identifier this filter is for.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.ServiceTypeFilter.ServiceType">
            <summary>
            The service type this filter is for.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.SigningInfo">
            <summary>
            Contains information associated with the signing of objects
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.SigningInfo.DownloadKey">
            <summary>
            Download key for this repository
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.SigningInfo.Id">
            <summary>
            Unique identifer for this repository.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.IFrameworkRegistration">
            <summary>
            Summary description for IRegistration.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.IFrameworkRegistration.InstanceId">
            <summary>
            Returns a Guid uniquely identifying the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.RegistrationService.LoadServerMap">
            <summary>
            Loads the URI -> GUID mappings from the ServerMap.xml file.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.RegistrationProxy.GetRegistrationEntries(System.String)">
            <remarks/>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.FileRepository.CredentialsType">
            <summary>
            Pick type of credentials to use in a web request.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FileRepository.#ctor(Microsoft.TeamFoundation.Client.TfsConnection)">
            <summary>
            A file repository represents an object which provides methods for downloading files
            from a collection.
            </summary>
            <param name="teamFoundationServer"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FileRepository.CreateDownloadRequest(System.Uri,System.String,Microsoft.TeamFoundation.Framework.Client.FileRepository.CredentialsType,System.Boolean@)">
            <summary>
            Create an HttpWebRequest object for downloading a file. 
            </summary>
            <param name="DownloadBaseUri">Base Uri for downloads</param>
            <param name="downloadUrl">Querystring attached to the download request</param>
            <param name="proxyCredentials">type of credentials to use with proxy</param>
            <param name="isProxyUrl">Indicates whether the URL set on the HttpWebRequest is a proxy URL</param>
            <returns>HttpWebRequest used for downloading files</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FileRepository.CreateDownloadRequest(System.String,Microsoft.TeamFoundation.Framework.Client.FileRepository.CredentialsType,System.Boolean@)">
            <summary>
            Create an HttpWebRequest object for downloading a file. 
            </summary>        
            <param name="downloadUrl">Querystring attached to the download request</param>
            <param name="proxyCredentials">type of credentials to use with proxy</param>
            <param name="isProxyUrl">Indicates whether the URL set on the HttpWebRequest is a proxy URL</param>
            <returns>HttpWebRequest used for downloading files</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FileRepository.QueryForRepositoryProperties">
            <summary>
            Returns an object which contains info about the repository that the collection is using 
            </summary>        
            <returns>HttpWebRequest used for downloading files</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.AccessControlEntry">
            <summary>
            Class for encapsulating the allowed and denied permissions for a given 
            IdentityDescriptor.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlEntry.#ctor(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32,System.Int32)">
            <summary>
            Creates an AccessControlEntry based on the supplied information.
            </summary>
            <param name="descriptor">
                The descriptor for the user this AccessControlEntry applies to.
            </param>
            <param name="allow">The allowed permissions for this descriptor.</param>
            <param name="deny">The denied permissions for this descriptor.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlEntry.#ctor(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32,System.Int32,Microsoft.TeamFoundation.Framework.Client.AceExtendedInformation)">
            <summary>
            Creates an AccessControlEntry based on the supplied information.
            </summary>
            <param name="descriptor">
                The descriptor for the user this AccessControlEntry applies to.
            </param>
            <param name="allow">The allowed permissions for this descriptor.</param>
            <param name="deny">The denied permissions for this descriptor.</param>
            <param name="extendedInfo">
                The extended info object to associate with this AccessControlEntry.
            </param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessControlEntry.Allow">
            <summary>
            The set of permission bits that represent the actions that the associated
            descriptor is allowed to perform.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessControlEntry.Deny">
            <summary>
            The set of permission bits that represent the actions that the associated
            descriptor is not allowed to perform.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessControlEntry.Descriptor">
            <summary>
            The descriptor for the user this AccessControlEntry applies to.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessControlEntry.ExtendedInfo">
            <summary>
            This value, when set, reports the inherited and effective information for 
            the associated descriptor. This value is only set on AccessControlEntries returned
            by the QueryAccessControlList(s) call when its includeExtendedInfo parameter is set to true.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessControlEntry.IsEmpty">
            <summary>
            Returns true if there are no permissions set on this AccessControlEntry
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.AccessControlList">
            <summary>
            The AccessControlList class is meant to associate a set of AccessControlEntries with 
            a security token and its inheritance settings. It is important to note that the 
            AccessControlList class does not talk to a web service when its methods are called.
            It provides a staging area for changes to the AccessControlEntries for a secured token.  Once 
            changes are made to an AccessControlList it can be saved to the web service by 
            passing it into a SecurityNamespace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlList.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new AccessControlList
            </summary>
            <param name="token">The token that this AccessControlList is for.</param>
            <param name="inherit">
                True if this AccessControlList should inherit permissions from its parents.
            </param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlList.#ctor(System.String,System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.AccessControlEntry})">
            <summary>
            Builds an instance of an AccessControlList
            </summary>
            <param name="token">The token that this AccessControlList is for.</param>
            <param name="inherit">
                True if this AccessControlList should inherit permissions from its parents.
            </param>
            <param name="accessControlEntries">
                The list of AccessControlEntries that apply to this AccessControlList.
            </param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlList.#ctor(Microsoft.TeamFoundation.Framework.Client.AccessControlList)">
            <summary>
            Builds an instance of an AccessControlList
            </summary>
            <param name="existingList">The AccessControlList to take its data from.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessControlList.InheritPermissions">
            <summary>
            True if this AccessControlList inherits permissions from parents.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessControlList.Token">
            <summary>
            The token that this AccessControlList is for.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.AccessControlList.AccessControlEntries">
            <summary>
            The list of AccessControlEntries that apply to this AccessControlList.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlList.RemovePermissions(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32)">
            <summary>
            Removes the specified permission bits from the existing allows and denys for
            this descriptor. If the descriptor is not found, nothing is done and an empty
            AccessControlEntry is returned.
            </summary>
            <param name="descriptor">The descriptor to remove the permissions from.</param>
            <param name="permissionsToRemove">The permission bits to remove.</param>
            <returns>
                The updated AccessControlEntry with the permissions removed.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlList.RemoveAccessControlEntry(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Removes the AccessControlEntry from this AccessControlList that applies to
            the given descriptor.
            </summary>
            <param name="descriptor">
                The descriptor for for the AccessControlEntry to remove.
            </param>
            <returns>True if something was removed.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlList.SetPermissions(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets a permission for the descriptor on this AccessControlList. 
            </summary>
            <param name="descriptor">The descriptor to set the permissions for.</param>         
            <param name="allow">The allowed permissions to set.</param>
            <param name="deny">The denied permissions to set.</param>
            <param name="merge">
                If merge is true and a preexisting AccessControlEntry for the descriptor is 
                found the two AccessControlEntries will be merged. When merging permissions
                in AccessControlEntries, if there is a conflict, the new permissions will 
                take precedence over the old permissions. If merge is false and a preexisting 
                AccessControlEntry for the descriptor is found it will be dropped and the 
                passed in AccessControlEntry will be the only AccessControlEntry that remains 
                for this descriptor on this AccessControlList.
            </param>
            <returns>
                The new or updated AccessControlEnty that was set in the AccessControlList.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlList.SetAccessControlEntry(Microsoft.TeamFoundation.Framework.Client.AccessControlEntry,System.Boolean)">
            <summary>
            Sets the provided AccessControlEntry in this AccessControlList. 
            </summary>
            <param name="accessControlEntry">
                The AccessControlEntry to set in the AccessControlList.
            </param>
            <param name="merge">
                If merge is true and a preexisting AccessControlEntry for the descriptor is 
                found the two AccessControlEntries will be merged. When merging permissions
                in AccessControlEntries, if there is a conflict, the new permissions will 
                take precedence over the old permissions. If merge is false and a preexisting 
                AccessControlEntry for the descriptor is found it will be dropped and the 
                passed in AccessControlEntry will be the only AccessControlEntry that remains 
                for this descriptor on this AccessControlList.
            </param>
            <returns>
            The new or updated AccessControlEntry that was set in the AccessControlList.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlList.SetAccessControlEntries(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.AccessControlEntry},System.Boolean)">
            <summary>
            Sets the provided AccessControlEntry in this AccessControlList. 
            </summary>
            <param name="accessControlEntries">
                The AccessControlEntries to set in the SecurityNamespace.
            </param>
            <param name="merge">
                If merge is true and a preexisting AccessControlEntry for the descriptor is 
                found the two AccessControlEntries will be merged. When merging permissions
                in AccessControlEntries, if there is a conflict, the new permissions will 
                take precedence over the old permissions. If merge is false and a preexisting 
                AccessControlEntry for the descriptor is found it will be dropped and the 
                passed in AccessControlEntry will be the only AccessControlEntry that remains 
                for this descriptor on this AccessControlList.
            </param>
            <returns>
            The new or updated permissions that were set in the AccessControlList.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlList.QueryAccessControlEntry(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Returns the AccessControlEntry for the descriptor provided. If no 
            AccessControlEntry exists for the provided descriptor in this 
            AccessControlList then an empty AccessControlEntry will be returned.
            </summary>
            <param name="descriptor">
                The descriptor to query the AccessControlEntry for. This cannot be null.
            </param>
            <returns>
            The AccessControlEntry for the descriptor provided. If no AccessControlEntry
            exists for the provided descriptor in this AccessControlList then an empty
            AccessControlEntry will be returned.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.AccessControlList.QueryAccessControlEntries(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor})">
            <summary>
            Returns the AccessControlEntries for the descriptors provided. 
            </summary>
            <param name="descriptors">
                The descriptors to query AccessControlEntries for. If null is passed in for this, 
                AccessControlEntries for all descriptors will be returned.
            </param>
            <returns>
            The AccessControlEntries for the descriptors provided. If no 
            AccessControlEntry exists for a given descriptor in this AccessControlList
            then an empty AccessControlEntry will be returned. The AccessControlEntries
            are retuned in the same order that the descriptors are passed in.
            </returns>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.AccessControlList.m_accessControlEntries">
            <summary>
            Storage of permissions keyed on the identity the permission is for.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.AccessControlList.m_includeExtendedInfoForAces">
            <summary>
            Keeps track of whether or not this ACL should include extended info when 
            returning ACEs
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.#ctor(Microsoft.TeamFoundation.Client.TfsConnection,Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription)">
            <summary>
            Creates an instance of the SecurityNamespace
            </summary>
            <param name="description">The description this object should be built from.</param>
            <param name="component">The persistence component that should be used
            to persist the data within this store.
            </param>
            <param name="checkForCacheFreshness">If true, this namespace will check with its
            data store on every request to see if its cache is fresh.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.Description">
            <summary>
            See base class.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.HasPermission(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32,System.Boolean)">
            <summary>
            See base class.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <param name="requestedPermissions"></param>
            <param name="alwaysAllowAdministrators"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.HasPermission(System.Collections.Generic.IEnumerable{System.String},Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32,System.Boolean)">
            <summary>
            See base class.
            </summary>
            <param name="tokens"></param>
            <param name="descriptor"></param>
            <param name="requestedPermissions"></param>
            <param name="alwaysAllowAdministrators"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.HasPermission(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor},System.Int32,System.Boolean)">
            <summary>
            See base class.
            </summary>
            <param name="token"></param>
            <param name="descriptors"></param>
            <param name="requestedPermissions"></param>
            <param name="alwaysAllowAdministrators"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.HasPermission(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            See base class.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <param name="requestedPermissions"></param>
            <param name="alwaysAllowAdministrators"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.HasWritePermission(System.String,System.Int32)">
            <summary>
            See base class.
            </summary>
            <param name="token"></param>
            <param name="permissionsToChange"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.HasWritePermission(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            See base class.
            </summary>
            <param name="token"></param>
            <param name="permissionsToChange"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.RemoveAccessControlLists(System.String,System.Boolean)">
            <summary>
            See base class.
            </summary>
            <param name="token"></param>
            <param name="recurse"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.RemoveAccessControlLists(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            See base class.
            </summary>
            <param name="tokens"></param>
            <param name="recurse"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.RemoveAccessControlEntries(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor})">
            <summary>
            See base class.
            </summary>
            <param name="token"></param>
            <param name="descriptors"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.RemoveAccessControlEntry(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            See base class.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.RemovePermissions(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32)">
            <summary>
            See base class.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <param name="permissionsToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.SetPermissions(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32,System.Int32,System.Boolean)">
            <summary>
            See base class.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <param name="allow"></param>
            <param name="deny"></param>
            <param name="merge"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.SetAccessControlEntry(System.String,Microsoft.TeamFoundation.Framework.Client.AccessControlEntry,System.Boolean)">
            <summary>
            See base class.
            </summary>
            <param name="token"></param>
            <param name="accessControlEntry"></param>
            <param name="merge"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.SetAccessControlEntries(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.AccessControlEntry},System.Boolean)">
            <summary>
            See base class.
            </summary>
            <param name="token"></param>
            <param name="accessControlEntries"></param>
            <param name="merge"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.SetAccessControlLists(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.AccessControlList})">
            <summary>
            See base class.
            </summary>
            <param name="accessControlLists"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.SetAccessControlList(Microsoft.TeamFoundation.Framework.Client.AccessControlList)">
            <summary>
            See base class.
            </summary>
            <param name="accessControlList"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.QueryAccessControlLists(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor},System.Boolean,System.Boolean)">
            <summary>
            See base class.
            </summary>
            <param name="token"></param>
            <param name="descriptors"></param>
            <param name="includeExtendedInfo"></param>
            <param name="recurse"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.QueryAccessControlList(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor},System.Boolean)">
            <summary>
            See base class.
            </summary>
            <param name="token"></param>
            <param name="descriptors"></param>
            <param name="includeExtendedInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.QueryEffectivePermissions(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            See base class.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.SetInheritFlag(System.String,System.Boolean)">
            <summary>
            See base class.
            </summary>
            <param name="token"></param>
            <param name="inherit"></param>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.m_description">
            <summary>
            The description for this namespace
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.FrameworkSecurityNamespace.m_securityProxy">
            <summary>
            The proxy for talking to the security web service.  This is internal
            for testing purposes.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.ISecurityService">
            <summary>
            An interface for managing collections of security namespaces. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ISecurityService.CreateSecurityNamespace(Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription)">
            <summary>
            Creates a SecurityNamespace that is based off of the provided information.
            </summary>
            <param name="description">The description to create the namespace from.</param>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.InvalidSecurityNamespaceDescriptionException">
                Thrown if the SecurityNamespaceDescription does not pass validation for some reason.
            </exception>
            <exception cref="T:Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceAlreadyExistsException">
                Thrown if a SecurityNamespace already exists with id of the description passed in.
            </exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ISecurityService.DeleteSecurityNamespace(System.Guid)">
            <summary>
            Deletes the SecurityNamespace from the collection of SecurityNamespaces.
            </summary>
            <param name="namespaceId">The id of the SecurityNamespace to delete.</param>
            <returns>True if something was deleted.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ISecurityService.GetSecurityNamespace(System.Guid)">
            <summary>
            Returns the SecurityNamespace associated with this id. Null is returned if
            a SecurityNamespace with this id does not exist.
            </summary>
            <param name="namespaceId">The id for the SecurityNamespace desired.</param>
            <returns>
            SecurityNamespace associated with this id. Null is returned if
            a SecurityNamespace with this id does not exist.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.ISecurityService.GetSecurityNamespaces">
            <summary>
            An enumeration of all of the SecurityNamespaces that exist as a part of this
            Security Service.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace">
            <summary>
            Class for managing and enforcing security for a set of AccessControlLists.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.Description">
            <summary>
            Returns a copy of the description for this SecurityNamespace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.HasPermission(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32,System.Boolean)">
            <summary>
            Determines whether or not the supplied descriptor has the requested
            permissions for the given token.
            </summary>
            <param name="token">The security token to perform the check on.</param>
            <param name="descriptor">
                The descriptor to perform the security check for.
            </param>
            <param name="requestedPermissions">The permissions being requested.</param>
            <param name="alwaysAllowAdministrators">
                True if administrators should always be gratned these permissions.
            </param>
            <returns>
            True if the supplied descriptor has the requested permissions for the given 
            token. False otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.HasPermission(System.Collections.Generic.IEnumerable{System.String},Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32,System.Boolean)">
            <summary>
            Determines whether or not the supplied descriptor has the requested 
            permissions for the given tokens.
            </summary>
            <param name="tokens">The security tokens to perform the check on.</param>
            <param name="descriptor">
                The descriptor to perform the security check for.
            </param>
            <param name="requestedPermissions">The permissions being requested.</param>
            <param name="alwaysAllowAdministrators">
                True if administrators should always be gratned these permissions.
            </param>
            <returns>
            A collection of booleans where a value of true indicates that the supplied
            descriptor has permission to the passed in token. Note that the returned 
            collection will be the same size and in the same order as the passed in 
            collection of tokens.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.HasPermission(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor},System.Int32,System.Boolean)">
            <summary>
            Determines whether or not the supplied descriptor have the requested
            permissions for the given token.
            </summary>
            <param name="token">The security token to perform the check on.</param>
            <param name="descriptors">
                The descriptors to perform the security check for.
            </param>
            <param name="requestedPermissions">The permissions being requested.</param>
            <param name="alwaysAllowAdministrators">
                True if administrators should always be gratned these permissions.
            </param>
            <returns>
            A collection of booleans where a value of true indicates that the supplied
            descriptors has permission to the passed in token. Note that the returned 
            collection will be the same size and in the same order as the passed in 
            collection of descriptors.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.HasPermission(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Determines whether or not the supplied descriptor has the requested
            permissions for the given token.
            </summary>
            <param name="token">The security token to perform the check on.</param>
            <param name="descriptor">
                The descriptor to perform the security check for.
            </param>
            <param name="requestedPermissions">The permissions being requested.</param>
            <param name="alwaysAllowAdministrators">
                True if administrators should always be gratned these permissions.
            </param>
            <returns>
            A collection of booleans where a value of true indicates that the supplied
            descriptors has permission to the passed in token. Note that the returned 
            collection will be the same size and in the same order as the passed in 
            collection of permissions.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.HasWritePermission(System.String,System.Int32)">
            <summary>
            Determines whether or not the current authorized user has permission 
            to change the permissions in permissionsToChange.
            </summary>
            <param name="token">The token to check write permissions on.</param>
            <param name="permissionsToChange">
                The permission bits that the authorized user may want to change.
            </param>
            <returns>
            True if the currently authorized user has permission to change the 
            permissions in permissionsToChange.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.HasWritePermission(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Determines whether or not the current authorized user has permission to
            write the permissions in permissionsToChange.
            </summary>
            <param name="token">The token to check write permissions on.</param>
            <param name="permissionsToChange">
                The permission bits that the authorized user may want to change.
            </param>
            <returns>
            A collection of booleans indicating whether or not the current authorized
            user has permission to change the bits passed in.  Note that the returned 
            collection will be the same size and in the same order as the passed in 
            collection of permissions. 
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.RemoveAccessControlLists(System.String,System.Boolean)">
            <summary>
            Removes the AccessControlList for the specified token. 
            </summary>
            <param name="token">
                The token whose AccessControlList is to be removed from this 
                SecurityNamespace.
            </param>
            <param name="recurse">
                True if all of the children below the provided token should also be removed.
            </param>
            <returns>True if something was removed. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.RemoveAccessControlLists(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Removes the AccessControlList for the specified tokens. 
            </summary>
            <param name="tokens">
                The tokens whose AccessControlLists are to be removed from this 
                SecurityNamespace.
            </param>
            <param name="recurse">
                True if all of the children below the provided tokens should also be removed.
            </param>
            <returns>True if something was removed. False otherwise.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.RemoveAccessControlEntries(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor})" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.RemoveAccessControlEntry(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)" -->
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.RemovePermissions(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32)">
            <summary>
            Removes the specified permission bits from the existing allows and denys for
            this descriptor. If no existing AccessControlEntry is found for this 
            descriptor then nothing is done and an empty AccessControlList is returned. This 
            function will not throw an exception if either the token or descriptor cannot be found.
            </summary>
            <param name="token">
                The token for the AccessControlList to remove the permissions from.
            </param>
            <param name="descriptor">The descriptor to remove the permissions for.</param>
            <param name="permissionsToRemove">The permission bits to remove.</param>
            <returns>The updated AccessControlEntry after removing the permissions.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.SetPermissions(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets a permission for the descriptor in this SecurityNamespace. 
            </summary>
            <param name="token">
                The token for the AccessControlList to set the permissions on.
            </param>
            <param name="descriptor">The descriptor to set the permissions for.</param>         
            <param name="allow">The allowed permissions to set.</param>
            <param name="deny">The denied permissions to set.</param>
            <param name="merge">
                If merge is true and a preexisting AccessControlEntry for the descriptor is 
                found the two permissions will be merged. When merging permissions, if there
                is a conflict, the new permissions will take precedence over the old 
                permissions. If merge is false and a preexisting AccessControlEntry for the
                descriptor is found it will be dropped and the passed in permissions will be
                the only permissions that remain for this descriptor on this 
                AccessControlList.
            </param>
            <returns>
            The new or updated AccessControlEnty that was set in the SecurityNamespace.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.SetAccessControlEntry(System.String,Microsoft.TeamFoundation.Framework.Client.AccessControlEntry,System.Boolean)">
            <summary>
            Sets the provided AccessControlEntry in this SecurityNamespace. 
            </summary>
            <param name="token">
                The token for the AccessControlList to set the permissions on.
            </param>
            <param name="accessControlEntry">
                The AccessControlEntry to set in the SecurityNamespace.
            </param>
            <param name="merge">
                If merge is true and a preexisting AccessControlEntry for the descriptor is 
                found the two permissions will be merged. When merging permissions, if there
                is a conflict, the new permissions will take precedence over the old 
                permissions. If merge is false and a preexisting AccessControlEntry for the
                descriptor is found it will be dropped and the passed in permissions will be
                the only permissions that remain for this descriptor on this 
                AccessControlList.
            </param>
            <returns>
            The new or updated permission that was set in the SecurityNamespace.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.SetAccessControlEntries(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.AccessControlEntry},System.Boolean)">
            <summary>
            Sets the provided AccessControlEntries in this SecurityNamespace. 
            </summary>
            <param name="token">
                The token for the AccessControlList to set the AccessControlEntry on.
            </param>
            <param name="accessControlEntries">
                The AccessControlEntries to set in the SecurityNamespace.
            </param>
            <param name="merge">
                If merge is true and a preexisting AccessControlEntry for the descriptor is found the two 
                AccessControlEntries will be merged. When merging AccessControlEntries, if 
                there is a conflict in permissions, the new permissions will take precedence 
                over the old permissions. If merge is false and a preexisting AccessControlEntry 
                for the descriptor is found it will be dropped and the passed in AccessControlEntry
                will be the only AccessControlEntry that remain for this descriptor on this AccessControlList.
            </param>
            <returns>
            The new or updated AccessControlEntires that were set in the SecurityNamespace.
            </returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.SetAccessControlList(Microsoft.TeamFoundation.Framework.Client.AccessControlList)">
            <summary>
            Sets the AccessControlList specified in the SecurityNamespace. Setting an 
            AccessControlList will always overwrite an existing AccessControlList if one
            exists.
            </summary>
            <param name="accessControlList">
                The AccessControlList to set in the SecurityNamespace.
            </param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.SetAccessControlLists(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.AccessControlList})">
            <summary>
            Sets the AccessControlLists specified in the SecurityNamespace. Setting an 
            AccessControlList will always overwrite an existing AccessControlList if one
            exists.
            </summary>
            <param name="accessControlLists">
                The AccessControlLists to set in the SecurityNamespace.
            </param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.QueryAccessControlLists(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor},System.Boolean,System.Boolean)">
            <summary>
            In all cases:
            This method will query the AccessControlList for the token specified. It will 
            return AccessControlEntry information for the descriptors that are supplied or all 
            descriptors if null is supplied for the descriptors parameter. 
            </summary>
            <param name="token">
                The token for the AccessControlList to query permissions for.
            </param>
            <param name="descriptors">
                The descriptors that are to have permission information retrieved about. 
                If this is left null, all descriptors will be considered.
            </param>
            <param name="includeExtendedInfo">
                If includeExtendedInfo is false:
                All of the ExtendedInfo properties for the returned AccessControlEntry 
                objects will be null.  
            
                If includeExtendedInfo is true:
                All of the ExtendedInfo properties for the returned AccessControlEntry 
                objects will contain references to valid AceExtendedInformation objects. 
                If the descriptors parameter is null, this function will return 
                AccessControlEntries for all descriptors that have explicit or inherited
                permissions on them.
            </param>
            <param name="recurse">
                If recurse is true and this is a hierarchical namespace:
                Information about the tokens that exist below the specified token passed in
                the SecurityNamespace will be returned as well.
            </param>
            <returns>AccessControlLists for the information passed in.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.QueryAccessControlList(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor},System.Boolean)">
            <summary>
            In all cases:
            This method will query the AccessControlList for the token specified. It will 
            return AccessControlEntry information on the descriptors that are supplied or all 
            descriptors if null is supplied for the descriptors parameter.
            </summary>
            <param name="token">
                The token for the AccessControlList to query permissions for.
            </param>
            <param name="descriptors">
                The descriptors that are to have permission information retrieved about. 
                If this is left null, all descriptors will be considered.
            </param>
            <param name="includeExtendedInfo">
                If includeExtendedInfo is false:
                All of the ExtendedInfo properties for the returned AccessControlEntry 
                objects will be null.  
            
                If includeExtendedInfo is true:
                All of the ExtendedInfo properties for the returned AccessControlEntry 
                objects will contain references to valid AceExtendedInformation objects. 
                If the descriptors parameter is null, this function will return 
                AccessControlEntries for all descriptors that have explicit or inherited
                permissions on them.
            </param>
            <returns>AccessControlLists for the information passed in.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.QueryEffectivePermissions(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Returns the effective allowed permissions for the given descriptor.
            </summary>
            <param name="token">
                The token for the AccessControlList we are querying permissions on.
            </param>
            <param name="descriptor">The descriptor to query permissions for.</param>
            <returns>The effective allowed permissions for the descriptor.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityNamespace.SetInheritFlag(System.String,System.Boolean)">
            <summary>
            Sets whether or not an AccessControlList should inherit permissions from
            its parents.
            </summary>
            <param name="token">
                The token for the AccessControlList to set the inherit flag on.
            </param>
            <param name="inherit">True if it should inherit permissions.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityService.#ctor(Microsoft.TeamFoundation.Client.TfsConnection)">
            <summary>
            Default constructor: Necessary for the ITeamFoundationServerObject implementation
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityService.CreateSecurityNamespace(Microsoft.TeamFoundation.Framework.Client.SecurityNamespaceDescription)">
            <summary>
            See interface.
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityService.DeleteSecurityNamespace(System.Guid)">
            <summary>
            See interface.
            </summary>
            <param name="namespaceId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityService.GetSecurityNamespace(System.Guid)">
            <summary>
            See interface.
            </summary>
            <param name="namespaceId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityService.GetSecurityNamespaces">
            <summary>
            See interface.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityService.SetServerSimulationMode(System.Boolean)">
            <summary>
            THIS FUNCTION IS FOR TEST PURPOSES ONLY!!!!!
            </summary>
            <param name="simulateVersionTwoServer"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.SecurityService.EnsureNamespacesLoaded">
            <summary>
            Ensures that all of the namespaces that exist in the system are loaded.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.SecurityService.m_ims">
            <summary>
            Allows us to check group membership.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.SecurityService.m_server">
            <summary>
            The server proxy we are talking to.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.SecurityService.m_namespaces">
            <summary>
            Dictionary used for the storage of the ISecurityNamespaces.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.SecurityService.m_accessLock">
            <summary>
            The lock used to control access to the m_namespaces dictionary
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Framework.Client.SecurityService.m_securityProxy">
            <summary>
            The proxy for talking to the security web service.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationStrongBoxService.CreateDrawer(System.String)">
            <summary>
            Create a new drawer in the StrongBox for this TeamProjectCollection
            </summary>
            <param name="name">The name of the Drawer</param>
            <returns>The unique identifier for the Drawer. Used in Drawer specific calls.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationStrongBoxService.UnlockDrawer(System.String)">
            <summary>
            Unlock an existing StrongBox drawer for access.
            </summary>
            <param name="name">The name of the drawer.</param>
            <returns>The unique identifier for the Drawer. Used in Drawer specific calls.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationStrongBoxService.DeleteDrawer(System.Guid)">
            <summary>
            Delete a StrongBox drawer. Deletes all contents of the drawer as well.
            </summary>
            <param name="drawerId">The unique identifier returned from CreateDrawer or UnlockDrawer.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationStrongBoxService.GetString(System.Guid,System.String)">
            <summary>
            Retrieve a value from a drawer as a string. This method returns the string as part of the https response from the server.
            </summary>
            <param name="drawerId">The unique identifier returned from CreateDrawer or UnlockDrawer.</param>
            <param name="lookupKey">The identifier used to lookup the value in the drawer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationStrongBoxService.RetrieveFile(System.Guid,System.String)">
            <summary>
            Retrieve a file from a drawer as a string. This method downloads value as a file to the local system, then
            reads its contents into the string.
            </summary>
            <param name="drawerId">The unique identifier returned from CreateDrawer or UnlockDrawer.</param>
            <param name="lookupKey">The identifier used to lookup the value in the drawer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationStrongBoxService.AddString(System.Guid,System.String,System.String)">
            <summary>
            Add a string value to the strong box. The method sends the string as part of a single https request, so
            should be small.
            </summary>
            <param name="drawerId">The unique identifier returned from CreateDrawer or UnlockDrawer.</param>
            <param name="lookupKey">The identifier used to lookup the value in the drawer.</param>
            <param name="value">The string to add to the drawer.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationStrongBoxService.UploadFile(System.Guid,System.String,System.IO.Stream)">
            <summary>
            Add a file to the StrongBox Drawer. This method uploads the file via chunks, so can be any size.
            </summary>
            <param name="drawerId">The unique identifier returned from CreateDrawer or UnlockDrawer.</param>
            <param name="lookupKey">The identifier used to lookup the value in the drawer.</param>
            <param name="file">The stream of the file.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Framework.Client.TeamFoundationStrongBoxService.DeleteItem(System.Guid,System.String)">
            <summary>
            Delete an item from the StrongBox drawer.
            </summary>
            <param name="drawerId">The unique identifier returned from CreateDrawer or UnlockDrawer.</param>
            <param name="lookupKey">The identifier used to lookup the value in the drawer.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Server.CommonStructureServiceFaultCodes.ArgumentException">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Server.CommonStructureServiceFaultCodes.ArgumentNullException">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Server.CommonStructureServiceFaultCodes.BadServerConfig">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.TeamFoundation.Server.ProjectInfo">
            <summary>
            Contains information of the project
            </summary>
            <summary>
            Contains information of the project
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Server.NodeInfo">
            <summary>
            Contains the information of the node
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Server.Property">
            <summary>
            Represents the property of a node
            </summary>
            <summary>
            Represents the property of a node
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.ListProjects">
            <summary>
            ListProjects
            </summary>
            <returns>list of 'WellFormed' projects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.ListAllProjects">
            <summary>
            ListAllProjects
            </summary>
            <returns>list of all projects, including those in the 'New' and 'Deleting' state.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.ListStructures(System.String)">
            <summary>
            Returns the node information of the root nodes 
            of the project
            </summary>
            <param name="projectUri"></param>
            <returns>Array of NodeInfo</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Server.ICommonStructureService.GetNodesXml(System.String[],System.Boolean)" -->
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.GetNode(System.String)">
            <summary>
             returns node information represented by the node uri
            </summary>
            <param name="nodeUri"></param>
            <returns>Node information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.GetNodeFromPath(System.String)">
            <summary>
            Returns the node information for the input path
            Project information is included in the path.
            The format of the path is \ProjectName\RootNodeName\NodeNameParent\NodeName
            </summary>
            <param name="nodeUri"></param>
            <returns>Node information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.GetProject(System.String)">
            <summary>
            returns the project information of the project from its Uri
            </summary>
            <param name="projectUri"></param>
            <returns>project information of the project</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.GetProjectFromName(System.String)">
            <summary>
             returns the project information of the project from its name
            </summary>
            <param name="projectName"></param>
            <returns>Project Information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.ClearProjectInfoCache">
            <summary>
            Clears the cached ProjectInfo objects.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Server.ICommonStructureService.GetDeletedNodesXml(System.String,System.DateTime)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Server.ICommonStructureService.CreateProject(System.String,System.Xml.XmlElement)" -->
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.DeleteProject(System.String)">
            <summary>
            Delete project. The project is moved to a tombstone
            and the all the nodes under this project get permanently deleted
            </summary>
            <param name="projectUri"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.CreateNode(System.String,System.String)">
            <summary>
            Create a new node
            </summary>
            <param name="nodeName">name of the node</param>
            <param name="parentNodeUri">parent uri</param>
            <returns>uri of the created node</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.RenameNode(System.String,System.String)">
            <summary>
            rename node
            </summary>
            <param name="nodeUri"></param>
            <param name="newNodeName">new name</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.MoveBranch(System.String,System.String)">
            <summary>
            move node and its children under new parent uri
            </summary>
            <param name="nodeUri"></param>
            <param name="newParentNodeUri"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.ReorderNode(System.String,System.Int32)">
            <summary>
            ordering of the node
            </summary>
            <param name="nodeUri"></param>
            <param name="moveBy"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.DeleteBranches(System.String[],System.String)">
            <summary>
            Delete node
            </summary>
            <param name="nodeUris"></param>
            <param name="reclassifyUri"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.GetProjectProperties(System.String,System.String@,System.String@,System.Int32@,Microsoft.TeamFoundation.Server.ProjectProperty[]@)">
            <summary>
            GetProjectProperties Get the current properties
            MSPROJ property will return xml that corresponds to V1 Project mapping schema.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.UpdateProjectProperties(System.String,System.String,Microsoft.TeamFoundation.Server.ProjectProperty[])">
            <summary>
            UpdateProjectProperties Replace existing properties with new ones.
            MSPROJ property cannot be updated using this.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService.GetChangedNodes(System.Int32)">
            <summary>
             return nodes changed with >= startSequenceId
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Server.ICommonStructureService3">
            <summary>
            CSS v1.0 and CSS v3.0 webservices support same set of methods.
             There are some functional differences between some of the
             CSS v1.0 and CSS v3.0 webmethods and CSS webservice handles this
             based on whether v1.0 or v3.0 webservice was used.
             We still need two interfaces ICommonStructureService and 
             ICommonStructureService3, as this will be used to lookup the
             location service url and clients can use the required interface
             for calling CSS webmethods.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService3.GetChangedNodesAndProjects(System.Int32)">
            <summary>
            Return nodes changed, and projects deleted, with >= startSequenceId.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.ICommonStructureService4.CreateNode(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Create a new node
            </summary>
            <param name="nodeName">name of the node</param>
            <param name="parentNodeUri">parent uri</param>
            <param name="startDate">(optional) start date</param>
            <param name="finishDate">(optional) finish date</param>
            <returns>uri of the created node</returns>
        </member>
        <member name="F:Microsoft.TeamFoundation.Server.TeamProjectCatalogConstants.ResourceType">
            <summary>
            The resource type guid for the TeamProject Catalog Resource type.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Server.TeamProjectCatalogConstants.ProjectNameProperty">
            <summary>
            Property, ServiceReference and Dependency keys for the Catalog resource
            type TeamProject
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Server.IProjectMaintenance">
            <summary>
            Summary description for IProjectMaintenance.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Server.CisDictionary">
            <summary>
            This is an INCOMPLETE implementation of a Hashtable that 
            handles the keys in a case-insensitive manner
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Server.IRegistration">
            <summary>
            Summary description for IRegistration.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Server.IRegistration.InstanceId">
            <summary>
            Returns a Guid uniquely identifying the server.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Server.RegistrationEntryRetrievalException">
            <summary>
            Exception type to be thrown when registration entries cannot be retrieved
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Server.RegistrationUtilities">
            <summary>
            Summary description for Utilities.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.RegistrationUtilities.GetServiceUrlForTool(Microsoft.TeamFoundation.Client.TfsConnection,System.String,System.String)">
            <summary>
            Get the ServiceUrl for a specific tool with only one service Url
            
            An ArgumentException will be thrown if there is more than one ServiceUrl for this tool instance
            If no ServiceInstances are returned for this tool name an RegistrationEntryRetrievalException will be thrown
            </summary>
            <param name="toolName">the tool intance name</param>
            <param name="interfaceName">Tool interfaca Name</param>
            <returns>the service Url for correspond to the provide tool instance name</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.RegistrationUtilities.GetServiceUrlForTool(Microsoft.TeamFoundation.Client.TfsConnection,System.String)">
            <summary>
            Get the ServiceUrl for a specific tool with only one service Url
            
            An ArgumentException will be thrown if there is more than one ServiceUrl for this tool instance
            If no ServiceInstances are returned for this tool name an RegistrationEntryRetrievalException will be thrown
            </summary>
            <param name="server">Team Foundation Server to query from.</param>
            <param name="toolName">the tool intance name</param>
            <returns>the service Url for correspond to the provide tool instance name</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Server.RegistrationUtilities.GetServiceInterfacesForTool(Microsoft.TeamFoundation.Server.IRegistration,System.String)" -->
        <member name="M:Microsoft.TeamFoundation.Server.RegistrationUtilities.GetConnectionString(Microsoft.TeamFoundation.Server.RegistrationEntry,System.String)">
            <summary>
            Get the generated connection string based on given registration entry and database name.
            </summary>
            <param name="entry">Registration entry</param>
            <param name="databaseName">The Name of database.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IGroupSecurityService.ReadIdentity(Microsoft.TeamFoundation.Server.SearchFactor,System.String,Microsoft.TeamFoundation.Server.QueryMembership)">
            <summary>
            Searches for an identity
            <para>?? permission is required to search for an identity</para>
            </summary>
            <param name="factor">specifies how search will proceed <see cref="T:Microsoft.TeamFoundation.Server.SearchFactor"/></param>
            <param name="factorValue">this value will be interpreted based on <see cref="T:Microsoft.TeamFoundation.Server.SearchFactor"/></param>
            <param name="queryMembership">specifies what membership data should be returned <see cref="T:Microsoft.TeamFoundation.Server.QueryMembership"/></param>
            <returns>The identity that meets the searching criteria</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IGroupSecurityService.ReadIdentities(Microsoft.TeamFoundation.Server.SearchFactor,System.String[],Microsoft.TeamFoundation.Server.QueryMembership)">
            <summary>
            Search for a list of identities.
            While <see cref="M:Microsoft.TeamFoundation.Server.IGroupSecurityService.ReadIdentity(Microsoft.TeamFoundation.Server.SearchFactor,System.String,Microsoft.TeamFoundation.Server.QueryMembership)"/> searches for only one identity at a time,
            this methods allows searching on multiple identities.
            <para>?? permission is required</para>
            </summary>
            <param name="factor">specifies how search will proceed <see cref="T:Microsoft.TeamFoundation.Server.SearchFactor"/></param>
            <param name="factorValue">this value will be interpreted based on <see cref="T:Microsoft.TeamFoundation.Server.SearchFactor"/></param>
            <param name="queryMembership">specifies what membership data should be returned <see cref="T:Microsoft.TeamFoundation.Server.QueryMembership"/></param>
            <returns>An array of identities that meet the searching criteria</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IGroupSecurityService.ReadIdentityFromSource(Microsoft.TeamFoundation.Server.SearchFactor,System.String)">
            <summary>
            ??
            <para>?? permission is required</para>
            </summary>
            <param name="factor">specifies how search will proceed <see cref="T:Microsoft.TeamFoundation.Server.SearchFactor"/></param>
            <param name="factorValue">this value will be interpreted based on <see cref="T:Microsoft.TeamFoundation.Server.SearchFactor"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IGroupSecurityService.IsIdentityCached(Microsoft.TeamFoundation.Server.SearchFactor,System.String)">
            <summary>
            Checks whether or not an identity is cached
            <para>?? permission is required</para>
            </summary>
            <param name="factor">specifies how search will proceed <see cref="T:Microsoft.TeamFoundation.Server.SearchFactor"/></param>
            <param name="factorValue">this value will be interpreted based on <see cref="T:Microsoft.TeamFoundation.Server.SearchFactor"/></param>
            <returns>True if and only if the identity is cached;
            otherwise, false</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IGroupSecurityService.GetChangedIdentities(System.Int32)">
            <summary>
            
            <para>?? permission is required</para>
            </summary>
            <param name="sequenceId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IGroupSecurityService.CreateApplicationGroup(System.String,System.String,System.String)">
            <summary>
            Creates a TFS application group
            <para>?? permission is required to create an application group at the server scope</para>
            <para>?? permission is required to create an application group at the project scope</para>
            </summary>
            <param name="projectUri">If null or empty, the group will be created at the server scope;
            or the group will be created at the project scope per this parameter</param>
            <param name="groupName">can be between ?? and ?? characters and must be unique within its scope</param>
            <param name="groupDescription">can be null or between 0 and ?? characters</param>
            <returns>A unique identifier (SID) for the created group</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IGroupSecurityService.ListApplicationGroups(System.String)">
            <summary>
            Lists all TFS application groups within the specified scope
            <para>?? permission is required to list all application groups at the server scope</para>
            <para>?? permission is required to list all application groups at the project scope</para>
            </summary>
            <param name="projectUri">If null or empty, application groups at the server scope will be listed;
            or application groups at the project scope, per this parameter, will be listed</param>
            <returns>Application groups as an array of identities</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IGroupSecurityService.UpdateApplicationGroup(System.String,Microsoft.TeamFoundation.Server.ApplicationGroupProperty,System.String)">
            <summary>
            Updates a property of a TFS application group
            <para>?? permission is required to update server application group's properties</para>
            <para>?? permission is required to update project application group's properties</para>
            </summary>
            <param name="groupSid">the unique identifier (SID) for the group</param>
            <param name="groupProperty">which property to update</param>
            <param name="newValue">the new value for the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IGroupSecurityService.DeleteApplicationGroup(System.String)">
            <summary>
            Deletes a TFS application group
            <para>?? permission is required to delete an application group at the server scope</para>
            <para>?? permission is required to delete an application group at the project scope</para>
            </summary>
            <param name="groupSid">the unique identifier (SID) for the group</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IGroupSecurityService.AddMemberToApplicationGroup(System.String,System.String)">
            <summary>
            Adds an identity (e.g. a user or a group) to a TFS application group
            <para>?? permission is required to add an identity to an application group at the server scope</para>
            <para>?? permission is required to add an identity to an application group at the project scope</para>
            </summary>
            <param name="groupSid">the unique identifier (SID) for the group</param>
            <param name="identitySid">the unique identifier for the identity</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IGroupSecurityService.RemoveMemberFromApplicationGroup(System.String,System.String)">
            <summary>
            Removes an identity (e.g. a user or a group) from a TFS application group
            <para>?? permission is required to remove an identity from an application group at the server scope</para>
            <para>?? permission is required to remove an identity from an application group at the project scope</para>
            </summary>
            <param name="groupSid">the unique identifier (SID) for the group</param>
            <param name="identitySid">the unique identifier for the identity</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IGroupSecurityService.IsMember(System.String,System.String)">
            <summary>
            Checks whether or not an identity (e.g. a user or a group) is a member (either direct or indirect) of a group
            <para>?? permission is required</para>
            </summary>
            <param name="groupSid">the unique identifier for the group</param>
            <param name="identitySid">the unique identifier for the identity</param>
            <returns>True if and only if the identity is a member (either direct or indirect) of the group;
            otherwise, false</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IGroupSecurityService.Convert(Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity)">
            <summary>
            Convert method.
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IGroupSecurityService.Convert(Microsoft.TeamFoundation.Server.Identity)">
            <summary>
            Convert method for backward compat scenarios that involve
            a Rosario client connecting to an Orcas or Whidbey server.
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IGroupSecurityService2.GetIdentityChanges(System.Int32,System.Int32@)">
            <summary>
            ??
            <para>?? permission is required</para>
            </summary>
            <param name="sequenceId"></param>
            <param name="lastSequenceId"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Server.SecurityValidation">
            <summary>
             Collection of methods for validating (and correcting) web service inputs
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.SecurityValidation.CheckSid(System.String@,System.String)">
            <summary>
            Verify that the sid is in a valid format
            </summary>
            <param name="sid">SID to check</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Server.DataChanged">
            <summary>
            Contains information of the project
            </summary>
            <summary>
            Contains information of the project
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IServerStatusService.GetServerStatus">
            <summary>
            GetServerStatus
            </summary>
            <returns>list of services that changed</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IServerStatusService.GetSupportedContractVersion">
            <summary>
            Return the minimum and current version of application tier.
            </summary>
            <returns>A string contains both minimum and current version number in minimun..current format (e.g. 1.0..2.0).</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IServerStatusService.CheckAuthentication">
            <summary>
            Checks whether or not the client is authenticated and returns the authenticated user name
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Server.CssDataProvider">
            <summary>
            CssDataProvider 
            It is used in conjunction with CssHierarchyControl.
            CssHierarchyControl replaces the old CssPicker.
            This class is used as the provider required by CssHierarchyControl.
            The class loads a given structure of css and provides cache for the csshierarchy control
            Root nodes of the css structures are hidden and project is instead used as a root node (for display purposes)
            Call GetCssNodeInfo to get the corresponding css node for the selected path in CssHierarchyControl
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.CssDataProvider.#ctor(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String,System.String,System.String,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="tfs">
            TeamFoundationServer object
            </param>
            <param name="projectUri">
            Uri of the project
            </param>
            <param name="structureType">
            css structure type
            </param>
            <param name="initialPath">
            Css path of the node that should have initial selection when used with 
            CssHierarchycontrol
            </param>
            <param name="nodeUrisToBeSkipped">
            Array of nodeUris which should be skipped loading. 
            The children of these nodeUris are skipped as well.
            When used with CssHierarchyControl,the skipped nodes don't appear 
            in the dropdown
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Server.CssDataProvider.TryGetCssNodeInfo(System.String)" -->
        <member name="M:Microsoft.TeamFoundation.Server.CssDataProvider.Microsoft#TeamFoundation#Client#ICssDataProvider#GetChildNodes(Microsoft.TeamFoundation.Client.CssNode)">
            <summary>
            GetChildNodes
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.CssDataProvider.Microsoft#TeamFoundation#Client#ICssDataProvider#GetInitialPath">
            <summary>
            GetInitialPath
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.CssDataProvider.Microsoft#TeamFoundation#Client#ICssDataProvider#GetDefaultRootNodeName">
            <summary>
            Returns node to be selected on dropdown if no initial path specified. Just return blank since
            we have just one root node.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Server.CssDataProviderNode">
            <summary>
            Summary description for CssDataProviderNode
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Server.ApplicationGroupProperty.Description">
            <summary>
            The description of an application group
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Server.ApplicationGroupProperty.Name">
            <summary>
            The name of an application group
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Server.ApplicationGroupProperty.None">
            <summary>
            ??
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Server.QueryMembership.Direct">
            <summary>
            Query will return only direct membership data
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Server.QueryMembership.Expanded">
            <summary>
            Query will return expanded membership data
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Server.QueryMembership.None">
            <summary>
            Query will not return any membership data
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Server.SearchFactor.AccountName">
            <summary>
            Treat search factor value as a logon name or a TFS application group name
            </summary>
            <example>
            DOMAIN\username, PROJECT_URI\groupname, PROJECT_GUID\groupname
            </example>
        </member>
        <member name="F:Microsoft.TeamFoundation.Server.SearchFactor.AdministrativeApplicationGroup">
            <summary>
            If search factor value is null or empty, search will return the server admin. group;
            or search will treat the search factor value as a project URI or a project GUID, and return the project admin group
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Server.SearchFactor.DistinguishedName">
            <summary>
            Treat search factor value as a distinguished name, optionally prepended by <c>LDAP://</c>.
            The search factor value must be LDAP-escaped.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Server.SearchFactor.EveryoneApplicationGroup">
            <summary>
            Search will discard search factor value and return the <c>All Valid Users</c> group.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Server.SearchFactor.None">
            <summary>
            ??
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Server.SearchFactor.ServiceApplicationGroup">
            <summary>
            Search will discard search factor value and return the service application group.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Server.SearchFactor.Sid">
            <summary>
            Treat search factor value as a SID
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespaceFactory.GetActionDefinitions(Microsoft.TeamFoundation.Server.IAuthorizationService,System.String)">
            <summary>
            Builds the set of action definitions from the auth service for the given class id.
            </summary>
            <param name="authorizationService"></param>
            <param name="classId"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.Description">
            <summary>
            The description for this security namespace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.HasPermission(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Evaluates whether or not the user has permission to perform the operation.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <param name="requestedPermissions"></param>
            <param name="alwaysAllowAdministrators"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.HasPermission(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor},System.Int32,System.Boolean)">
            <summary>
            Evaluates whether or not the user has permission to perform the operation.
            </summary>
            <param name="token"></param>
            <param name="descriptors"></param>
            <param name="requestedPermissions"></param>
            <param name="alwaysAllowAdministrators"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.HasPermission(System.Collections.Generic.IEnumerable{System.String},Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32,System.Boolean)">
            <summary>
            Evaluates whether or not the user has permission to perform the operation.
            </summary>
            <param name="tokens"></param>
            <param name="descriptor"></param>
            <param name="requestedPermissions"></param>
            <param name="alwaysAllowAdministrators"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.HasPermission(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32,System.Boolean)">
            <summary>
            Evaluates whether or not the user has permission to perform the operation.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <param name="requestedPermissions"></param>
            <param name="alwaysAllowAdministrators"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.HasWritePermission(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Evaluates whether or not the user has permission to change security.
            </summary>
            <param name="token"></param>
            <param name="permissionsToChange"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.HasWritePermission(System.String,System.Int32)">
            <summary>
            Evaluates whether or not the user has permission to change security.
            </summary>
            <param name="token"></param>
            <param name="permissionsToChange"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.QueryAccessControlList(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor},System.Boolean)">
            <summary>
            Queries the permissions using the Auth APIs and converts them to the Framework Security objects.
            </summary>
            <param name="token"></param>
            <param name="descriptors"></param>
            <param name="includeExtendedInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.QueryAccessControlLists(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor},System.Boolean,System.Boolean)">
            <summary>
            Queries the permissions using the Auth APIs and converts them to the Framework Security objects.
            
            Note, the Auth APIs did not support recursion so we will throw if recurse = true.
            </summary>
            <param name="token"></param>
            <param name="descriptors"></param>
            <param name="includeExtendedInfo"></param>
            <param name="recurse"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.RemoveAccessControlLists(System.String,System.Boolean)">
            <summary>
            Removes all of the permissions for the given tokens.
            
            Note, the Auth APIs did not support recursion so we will throw if recurse = true.
            </summary>
            <param name="tokens"></param>
            <param name="recurse"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.RemoveAccessControlLists(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Removes all of the permissions for the given tokens.
            
            Note, the Auth APIs did not support recursion so we will throw if recurse = true.
            </summary>
            <param name="tokens"></param>
            <param name="recurse"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.RemovePermissions(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32)">
            <summary>
            Removes the permission bits for the specified token and descriptor.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <param name="permissionsToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.RemoveAccessControlEntry(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Removes all of the permissions for this identity on this token.
            </summary>
            <param name="token"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.RemoveAccessControlEntries(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor})">
            <summary>
            Removes all of the permissions for the identities on this token.
            </summary>
            <param name="token"></param>
            <param name="descriptors"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.SetAccessControlList(Microsoft.TeamFoundation.Framework.Client.AccessControlList)">
            <summary>
            Replaces the existing ACL with this one.
            </summary>
            <param name="accessControlList"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.SetAccessControlLists(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.AccessControlList})">
            <summary>
            Replaces the existing ACLs for the ACLs passed in with the ones passed in.
            </summary>
            <param name="accessControlLists"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.SetAccessControlEntry(System.String,Microsoft.TeamFoundation.Framework.Client.AccessControlEntry,System.Boolean)">
            <summary>
            Sets the permission passed in.
            </summary>
            <param name="token"></param>
            <param name="permission"></param>
            <param name="merge"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.SetPermissions(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the permission passed in.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <param name="allow"></param>
            <param name="deny"></param>
            <param name="merge"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.AuthorizationSecurityNamespace.SetAccessControlEntries(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.AccessControlEntry},System.Boolean)">
            <summary>
            Sets the permissions passed in.
            </summary>
            <param name="token"></param>
            <param name="permissions"></param>
            <param name="merge"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Server.IProcessTemplates">
            <summary>
            Service interface for managing process templates (add, delete, etc.)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IProcessTemplates.GetTemplateNames">
            <summary>
            This method is obsolete. Please use the TemplateHeaders method instead
            
            Get the template names in XML package.
            </summary>
            <returns>Template names in XML package</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IProcessTemplates.TemplateHeaders">
            <summary>
            Get a list of the headers for all process templates on the server.
            The first entry will be the default template (if any).
            </summary>
            <returns>Array of template headers</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IProcessTemplates.DeleteTemplate(System.Int32)">
            <summary>
            Delete a template with the given id
            </summary>
            <param name="templateId">The id of the template to delete</param>
            <returns>Array of template headers after deleting the given template</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IProcessTemplates.MakeDefaultTemplate(System.Int32)">
            <summary>
            Set the given template to be the default template
            </summary>
            <param name="templateId">The id of the template to make default</param>
            <returns>Array of template headers after making the given template default</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IProcessTemplates.AddTemplate(System.String,System.String,System.String,System.String)">
            <summary>
            This method is obsolete. Please use AddUpdateTemplate instead.
            
            Add a template with the given properties. If a template already exists
            with the given name, it will be overwritten.       
            </summary>
            <param name="name">The name of the template</param>
            <param name="description">A description of the template</param>
            <param name="metadata">Extra metadata associated with the template</param>
            <param name="state">This value is no longer used and will be ignored</param>
            <returns>The unique id of the template that was added/updated.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IProcessTemplates.GetTemplateIndex(System.String)">
            <summary>
            Gets the index of the template with the given name or -1 if the template
            couldn't be found.
            </summary>
            <param name="name">The name of the template</param>
            <returns>Index of the template, or -1 if not found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IProcessTemplates.AddUpdateTemplate(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add or update a template with the given properties.
            </summary>
            <param name="name">The name of the template to add</param>
            <param name="description">A description of the template</param>
            <param name="metadata">Extra metadata associated with the template</param>
            <param name="state">This value is no longer used and will be ignored</param>
            <param name="zipFileName">The name of the zip file on containing the process template
            resources </param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IProcessTemplates.UploadMethodology(System.String,System.Int32)">
            <summary>
            This method is obsolete. Please use AddUpdateTemplate instead.
            
            Uploads the template resources for the given template id
            </summary>
            <param name="fileName">The name of the zip file containing the proces template
            resources</param>
            <param name="templateId">The id of the process template</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.IProcessTemplates.GetTemplateData(System.Int32)">
            <summary>
            Retrieve a methodology zip file to a temporary file path
            </summary>
            <param name="templateId">The id of the template</param>
            <returns>The path do the template file</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Server.TemplateHeader">
            <summary>
            Metadata describing a process template.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.TemplateHeader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Server.TemplateHeader.#ctor(Microsoft.TeamFoundation.Framework.Client.FrameworkTemplateHeader)">
            <summary>
            Constructs a TemplateHeader object with the contents of a FrameworkTemplateHeader object
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Server.TemplateHeader.Description">
            <summary>
            Description of the process template.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Server.TemplateHeader.Metadata">
            <summary>
            Metadata xml associated with the process template, including the set of plugins to be used.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Server.TemplateHeader.Name">
            <summary>
            The name of the process template
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Server.TemplateHeader.Rank">
            <summary>
            Stack ordering of the process template in the UI.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Server.TemplateHeader.State">
            <summary>
            Current state of the process template.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Server.TemplateHeader.TemplateId">
            <summary>
            Unique id for the process template.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Warehouse.WarehouseSecurity">
            <summary>
            Warehouse security constants.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Warehouse.WarehouseSecurity.WarehouseNamespaceId">
            <summary>
            Warehouse security namespace identifier.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Warehouse.WarehouseSecurity.WarehouseNamespaceToken">
            <summary>
            Warehouse security token name.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Warehouse.WarehousePermissions">
            <summary>
            Warehouse security permissions constant values.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Warehouse.WarehousePermissions.Administer">
            <summary>
            Administer Warehouse.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Common.ELeadRegistry">
            <summary>
              Custom logic support for opening a subkey from HKCU registry.
              Read open falls back to HKLM if HKCU fails.
              Write open copies subkey from HKLM if HKCU fails. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ELeadRegistry.OpenSubKey(System.String,System.Boolean)">
            <summary>
              Open a subkey from HKCU. If not found, copy the subkey from HKLM to HKCU and use the copy. 
              Currently, no invocations set writable to true.
            </summary>
            <param name="keyName">key name to read or write</param>
            <param name="writable">true if open for write</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ELeadRegistry.OpenSubKeyOrCreate(System.String)">
            <summary>
              Open a writable subkey from HKCU. 
              If not found, copy the subkey from HKLM to HKCU and use the copy.  
              If HKLM version not found either, just create HKCU subkey.
            </summary>
            <param name="keyName">key name to read or write</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ELeadRegistry.GetValueFromRegistry(System.String,System.String)">
            <summary>
              Reads a value from a key in HKCU (or HKLM if the key/value pair is not found in HKCU).
            </summary>
            <param name="keyName">key name to read</param>
            <param name="valueName">value name to read</param>
            <returns>Returns value object or null (if not found)</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ELeadRegistry.OpenSubKey(System.String)">
            <summary>
             Overload.  Open a key under HKCU for read. If not found, copy it from HKLM.
            </summary>
            <param name="keyName">key name to read</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Common.ELeadRegistry.CopySubKeyFromHKLM(System.String)">
            <summary>
              Recursively blind copy a subkey from HKLM to HKCU
              Potentially overwrites HKCU information, but this method is not being used.
            </summary>
            <param name="keyName">the keyname</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Controls.CommonStructureEdit.FindNodeOrClosestParent(System.Xml.XmlNode,System.Windows.Forms.TreeNode)">
            <summary>
            FindNodeOrClosestParent
            Finds the XmlNode for the corresponding treenode. If the node is not avaliable
            the closest ascendant is chosen.
            </summary>
            <param name="xn"></param>
            <param name="tn"></param>
            <returns>XmlNode corresponding to the node or its closest ascendant</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Controls.CommonStructureEdit.ToolStripAccessibilityName">
            <summary>
            gets or sets the AccessibilityName for the ToolStrip
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Controls.CommonStructureEdit.UpdateEnabledState">
            <devdoc>
                Sets the enabled states of all the buttons
            </devdoc>
        </member>
        <member name="M:Microsoft.TeamFoundation.Controls.CommonStructureEdit.OnUnindentButtonClick">
            <devdoc>
                Moves the selected node to be a sibling of its parent node
            </devdoc>
        </member>
        <member name="M:Microsoft.TeamFoundation.Controls.CommonStructureEdit.OnIndentButtonClick">
            <devdoc>
                Moves the selected node to be a child of the previous node
            </devdoc>
        </member>
        <member name="T:Microsoft.TeamFoundation.Controls.DeleteNodesDialog">
            <summary>
            Summary description for DeleteNodesDialog.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Controls.DeleteNodesDialog.#ctor(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String,System.String)">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Controls.DeleteNodesDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Controls.DeleteNodesDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Controls.DeleteNodesDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.CommonStructureService.ListProjects">
            <summary>
            ListProjects
            </summary>
            <returns>list of 'WellFormed' projects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.CommonStructureService.ListAllProjects">
            <summary>
            ListAllProjects
            </summary>
            <returns>list of all projects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.CommonStructureService.ListStructures(System.String)">
            <summary>
            Returns the node information of the root nodes 
            of the project
            </summary>
            <param name="projectUri"></param>
            <returns>Array of NodeInfo</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Proxy.CommonStructureService.GetNodesXml(System.String[],System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Proxy.CommonStructureService.GetDeletedNodesXml(System.String,System.DateTime)" -->
        <member name="M:Microsoft.TeamFoundation.Proxy.CommonStructureService.GetProject(System.String)">
            <summary>
            returns the project information of the project from its Uri
            </summary>
            <param name="projectUri"></param>
            <returns>project information of the project</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.CommonStructureService.GetNode(System.String)">
            <summary>
             returns node information represented by the node uri
            </summary>
            <param name="nodeUri"></param>
            <returns>Node information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.CommonStructureService.GetNodeFromPath(System.String)">
            <summary>
            Returns the node information for the input path
            Project information is included in the path.
            The format of the path is \ProjectName\RootNodeName\NodeNameParent\NodeName
            </summary>
            <param name="nodeUri"></param>
            <returns>Node information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.CommonStructureService.GetProjectFromName(System.String)">
            <summary>
             returns the project information of the project from its name
            </summary>
            <param name="projectName"></param>
            <returns>Project Information</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Proxy.CommonStructureService.CreateProject(System.String,System.Xml.XmlElement)" -->
        <member name="M:Microsoft.TeamFoundation.Proxy.CommonStructureService.DeleteProject(System.String)">
            <summary>
            Delete project. The project is moved to a tombstone
            and the all the nodes under this project get permanently deleted
            </summary>
            <param name="projectUri"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.CommonStructureService.CreateNode(System.String,System.String)">
            <summary>
            Create a new node
            </summary>
            <param name="nodeName">name of the node</param>
            <param name="parentNodeUri">parent uri</param>
            <returns>uri of the created node</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.CommonStructureService.RenameNode(System.String,System.String)">
            <summary>
            rename node
            </summary>
            <param name="nodeUri"></param>
            <param name="newNodeName">new name</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.CommonStructureService.MoveBranch(System.String,System.String)">
            <summary>
            move node and its children under new parent uri
            </summary>
            <param name="nodeUri"></param>
            <param name="newParentNodeUri"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.CommonStructureService.ReorderNode(System.String,System.Int32)">
            <summary>
            ordering of the node
            </summary>
            <param name="nodeUri"></param>
            <param name="moveBy"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.CommonStructureService.DeleteBranches(System.String[],System.String)">
            <summary>
            Delete node
            </summary>
            <param name="nodeUris"></param>
            <param name="reclassifyUri"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.CommonStructureService.GetProjectInfoFromNameFromCache(System.String)">
            <summary>
            Locks the cache and loops through it to find the team project with
            the given name.  It then returns the ProjectInfo for this object.
            
            This function assumes that m_locker is locked.
            
            If a project for the name doesn't exist then null is returned.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.GroupSecurityService.Convert(Microsoft.TeamFoundation.Server.Identity)">
            <summary>
            Convert method for backward compat scenarios that involve
            a Rosario client connecting to an Orcas or Whidbey server.
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.Security.GroupSecurityService2.#ctor(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection)">
            <remarks/>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.ServerStatusService.GetServerStatus">
            <summary>
            GetServerStatus
            </summary>
            <returns>list of services that changed</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.ServerStatusService.GetSupportedContractVersion">
            <summary>
            Return the minimum and current version of application tier.
            </summary>
            <returns>A string contains both minimum and current version number in minimun..current format (e.g. 1.0..2.0).</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Proxy.ServerStatusService.CheckAuthentication">
            <summary>
            Checks whether or not the client is authenticated and returns the authenticated user name
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Internal.Performance.TfCodeMarkers">
            <summary>
            API call Forwarding wrapper for internal VS Microsoft.Internal.Performance.CodeMarkers Singleton API used by TFS assemblies.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.Performance.TfCodeMarkerStartEnd">
            <summary>
            Wrapper for internal VS Microsoft.Internal.Performance.CodeMarkerExStartEnd class used by TFS assemblies.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerStartEnd">
            <summary>
            Use CodeMarkerStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerExStartEnd">
            <summary>
            Use CodeMarkerExStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.
            </summary>
        </member>
    </members>
</doc>
