<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.TeamFoundation.SharePointReporting.Integration</name>
    </assembly>
    <members>
        <member name="T:Microsoft.TeamFoundation.Client.Reporting.ReportNodeType">
            <summary>
            The type of IReportNode
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Reporting.IReportNode">
            <summary>
            IReportNode is the base type for all nodes in a Rosetta Report
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.IReportNode.Type">
            <summary>
            The type of this IReportNode
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.IReportNode.Name">
            <summary>
            The name of this Node
            </summary>
            <value>report type</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.IReportNode.HasDisplayableUrl">
            <summary>
            Does the IReportNode provide a displayable Url?
            </summary>
            <value>true if one is provided, false if not</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.IReportNode.DisplayableUrl">
            <summary>
            Get the URI of this IReportNode
            </summary>
            <value>the Url</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.IReportNode.Path">
            <summary>
            The path from the report root to this IReportNode
            </summary>
            <value>the path</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.IReportNode.IsExpandable">
            <summary>
            Is this an expandable node?  If so the IReportNode's GetChildren method is garanteed
            to return an IList (that may or may not be empty), if not GetChildren will return null
            </summary>
            <value>true if expandable, false if not</value>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.IReportNode.GetChildren">
            <summary>
            Return a collection of the children of this node, null if their aren't any
            </summary>
            <returns>the children of this node</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Reporting.Report">
            <summary>
            Report is the Report specialization of IReportNode
            
            It is the encapsilation of interaction with Reports through the Rosetta ReportingService
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Reporting.Report.m_name">
            <summary>
            This folder's name
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Reporting.Report.m_fullPath">
            <summary>
            The full path from the root to this folder
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Reporting.Report.m_displayUrl">
            <summary>
            the path to display this report
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Reporting.Report.m_parent">
            <summary>
            The parent of this folder
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Reporting.Report.m_reportService">
            <summary>
            The Rosetta web service proxy
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.Report.#ctor(Microsoft.TeamFoundation.Client.Reporting.ReportFolder,Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String)">
            <summary>
            Construct a report instance
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.Report.GetReportData">
            <summary>
            Get the report data for this report from Rosetta
            </summary>
            <returns>the reports data</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.Report.SaveReportToLocation(System.String)">
            <summary>
            Save this report to a local file
            </summary>
            <param name="location">The path (including filename) where the report will be saved</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.Report.Path">
            <summary>
            The path from the report root to this IReportNode
            </summary>
            <value>the path</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.Report.Type">
            <summary>
            The type of this IReportNode
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.Report.Name">
            <summary>
            The name of this Node
            </summary>
            <value>report type</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.Report.HasDisplayableUrl">
            <summary>
            Is this an expandable node?  If so the IReportNode's GetChildren method is garanteed
            to return an IList (that may or may not be empty), if not GetChildren will return null
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.Report.DisplayableUrl">
            <summary>
            Get the URI of this IReportNode
            </summary>
            <value>the Url</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.Report.IsExpandable">
            <summary>
            Is this an expandable node?
            </summary>
            <value>true if expandable, false if not</value>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.Report.GetChildren">
            <summary>
            Return a collection of the children of this node, null if their aren't any
            </summary>
            <returns>the children of this node</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.Report.Service">
            <summary>
            Returns the reporting service associated with this report.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.m_name">
            <summary>
            This folder's name
            </summary>        
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.m_fullPath">
            <summary>
            The full path from the root to this folder
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.m_reports">
            <summary>
            The reports in this folder
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.m_subfolders">
            <summary>
            The sub folders of this folder
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.m_parent">
            <summary>
            A reference to this folder's parent
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.m_reportService">
            <summary>
            The Web proxy to the Rossetta ReportService
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.#ctor(System.String,Microsoft.TeamFoundation.Client.Reporting.ReportingService)">
            <summary>
            Create a root folder this caches the report structure from the provided path and below
            </summary>
            <param name="pathFromReportRoot">the path from report root that this ReportFolder instance will cash</param>
            <param name="defaultDataSourceSet">the default data source set to be used when creating report, null if not to be used</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.#ctor(Microsoft.TeamFoundation.Client.Reporting.ReportFolder,Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String)">
            <summary>
            Create ReportFolder as a subfolder of the provided parent
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.GetSubfolder(System.String)">
            <summary>
            Get the SubFolder with this name
            </summary>
            <param name="name">the name of the subfolder</param>
            <returns>the corresponding ReportFolder or null if it does not exist</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.GetReport(System.String)">
            <summary>
            Get the Report with this name, return null if it is not found
            </summary>
            <param name="reportName">the name of the report</param>
            <returns>the corresponding Report or null if it does not exist</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.CreateSubfolder(System.String)">
            <summary>
            Create, add, and a return a new subfolder to this folder
            </summary>
            <param name="subfolderName">the new folder's name</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.CreateReport(System.String,System.String,System.Boolean)">
            <summary>
            Create a report with the provided name and data (do not set the Reports DataSource set and ReportParamers)
            </summary>
            <param name="path">The path (on the file system) to the report *including* the report file name</param>
            <param name="name">the name that Rosetta will use for the report</param>
            <param name="overwrite">true if existing report is to be overwritten, false if not</param>
            <returns>the newly created Report</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.CreateReport(System.String,System.Byte[],System.Boolean)">
            <summary>
            Create a report with the provided name and data (do not set the Reports DataSource set and ReportParamers)
            </summary>
            <param name="reportName">the name that Rosetta will use for the report</param>
            <param name="reportDefinition">the contents of the report</param>
            <param name="overwrite">true if existing report is to be overwritten, false if not</param>
            <returns>the newly created or existing Report</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.CreateReport(System.String,System.Byte[],System.Boolean,Microsoft.TeamFoundation.Client.Reporting.DataSource[],Microsoft.TeamFoundation.Client.Reporting.ReportParameter[])">
            <summary>
            create a report with the provided name and data
            </summary>
            <param name="reportName">the name that Rosetta will use for the report</param>
            <param name="reportDefinition">the contents of the report</param>
            <param name="overwrite">true if existing report is to be overwritten, false if not</param>
            <param name="dataSourceSet">the DataSources for this report, null if none provided</param>
            <param name="reportParams">the ReportParameters for this report, null if none provided</param>
            <returns>the newly created or existing Report</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.CreateReport(System.String,System.String,System.Boolean,Microsoft.TeamFoundation.Client.Reporting.DataSource[],Microsoft.TeamFoundation.Client.Reporting.ReportParameter[])">
            <summary>
            Load the report from the provided path and Add it to this folder
            </summary>
            <param name="path">The path (on the file system) to the report *including* the report file name</param>
            <param name="name">the name that Rosetta will use for the report</param>
            <param name="overwrite">true if existing report is to be overwritten, false if not</param>
            <param name="dataSourceSet">the DataSources for this report, null if none provided</param>
            <param name="reportParams">the ReportParameters for this report, null if none provided</param>
            <returns>the newly created Report</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.Type">
            <summary>
            The type of this IReportNode
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.Name">
            <summary>
            Get this folder's name
            </summary>
            <value>folder name</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.Path">
            <summary>
            Get the full path of this folder from the root (including this folder's name)
            </summary>
            <value>the full path</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.HasDisplayableUrl">
            <summary>
            Is this an expandable node?  If so the IReportNode's GetChildren method is garanteed
            to return an IList (that may or may not be empty), if not GetChildren will return null
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.DisplayableUrl">
            <summary>
            Get the URI of this IReportNode
            </summary>
            <value>the Url</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.IsExpandable">
            <summary>
            Is this an expandable node?
            </summary>
            <value>true if expandable, false if not</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.ChildCount">
            <summary>
            Returns the number of children contained in this folder.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.GetChildren">
            <summary>
            Return a collection of the children of this node, null if their aren't any
            </summary>
            <returns>the children of this node</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.Subfolders">
            <summary>
            Return the subfolders of this folder
            </summary>
            <value>the subfolders in this folder</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.Reports">
            <summary>
            Read only property to get the name of the reports in this folder
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.LoadSubFolderStructure">
            <summary>
            Get this folder and it's children's structure from Rosetta
            </summary>
            <param name="server">there server name to get the </param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportFolder.GetRelativePath(System.String[],System.String)">
            <summary>
            Given two paths that coincide for their common length, where one path, deepPath,
               is longer than the other,
               return the tokenized path of deepPath that is the path �past� shallowPath
            
            Or in other words return a tokenized path that is relative to shallowPath
            </summary>
            <param name="tokenizedShallowPath">the shorter path to return the relative path from</param>
            <param name="deepPath">the longer path that extends past shallowPath</param>
            <returns>the tokenized relative path from shallowPath, null if these paths don't coinicide</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Reporting.ReportingOperations">
            <summary>
            Contains the field names and corresponding values for operations that users can perform on items in SQL Server Reporting Services.
            </summary>
            <remarks>
            This class maps to the Microsoft.ReportingServices.Interfaces.OperationNames class in the Reporting Services SDK.
            See http://msdn.microsoft.com/en-us/library/microsoft.reportingservices.interfaces.operationnames_members(SQL.90).aspx
            for more info.
            </remarks>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Reporting.ReportingTaskPermissions">
            <summary>
            Lists the permissions associated with item-level and system-level tasks.
            </summary>
            <remarks>
            Mappings obtained from http://msdn.microsoft.com/en-us/library/ms160344(SQL.90).aspx,
            and http://msdn.microsoft.com/en-us/library/ms157353(SQL.90).aspx.
            </remarks>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Reporting.ReportingTasks">
            <summary>
            Provides a list of role tasks available in Report Server, as well as the list 
            of tasks associated with default roles.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Reporting.ReportingUploader">
            <summary>
            A helper class for uploading reports and other reports items to a Report
            Server instance. The uploader is driven by an XML manifest and a source folder
            containing RDL files.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.Client.Reporting.ReportingUploader.MessageLogged">
            <summary>
            An event that is fired whenever an event is logged by the uploader.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUploader.#ctor(Microsoft.TeamFoundation.Client.Reporting.ReportingService,Microsoft.TeamFoundation.Client.Reporting.ReportingUploaderData)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="proxy">A report server proxy.</param>
            <param name="data">The configuration data for the uploader.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUploader.Validate">
            <summary>
            Ensures that the current input configuration data is valid and usable (e.g.
            validating that report files exist, and that the user has permissions to items in RS).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUploader.Validate(System.Xml.XmlNode,System.String)">
            <summary>
            Validates the xml for the reports is valid (e.g.
            validating that report files exist).
            </summary>
            <param name="manifest"></param>
            <param name="sourceFolder"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUploader.Run">
            <summary>
            Executes the upload process by parsing all the elements in the input manifest XML
            and performing the requested operations.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Reporting.ReportingUploaderData">
            <summary>
            Encapsulates the configuration data used as input to the report uploader. This consists of:
            - An XML manifest containing upload operations.
            - A source folder containing RDL files.
            - A target report folder that already exists in Report Server, or Project Data that will be used
              to create a reporting site.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.ReportingUploaderData.AllowTargetFolderToExist">
            <summary>
            This means that we need to be tolerant of the target site (project root folder) existing already.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.Reporting.ReportingUploaderData.ForceUpdate">
            <summary>
            This means that we need to create folders and reports in the manifest regardless of whether they already exist or not. 
            Folders may already exist, but should be created if they don't exist.
            Reports or datasources may already exist and if they do, they will be overwritten.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Reporting.ReportingUploaderProjectData">
            <summary>
            Encapsulates the information used by the uploader to create a reporting site for a given team project.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Reporting.ReportingUploaderException">
            <summary>
            An exception class that indicates an error condition during report upload.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Reporting.ReportingUploaderMessageHandler">
            <summary>
            A handler that gets notified whenever the report uploader loads the ocurrence of an event.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.CreateReportingServiceProxy(Microsoft.TeamFoundation.Client.TfsConnection,System.Uri)">
            <summary>
            Creates the reporting service proxy with the credentials from a given TFS instance, and the service URL from 
            a given reporting server entry for the current zone.
            </summary>
            <param name="tfs">The TFS.</param>
            <param name="reportingServer">The reporting server entry.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.CreateReportingServiceProxy(System.Net.ICredentials,System.Uri)">
            <summary>
            Creates the reporting service proxy with the credentials from a given TFS instance, and the service URL from 
            a given reporting server entry for the current zone.
            </summary>
            <param name="credentials">The users credentials.</param>
            <param name="reportServerLocation">The location for the reportserver service.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.CreateReportingServiceProxy(System.Uri,System.Net.ICredentials)">
            <summary>
            Creates the reporting service proxy for a given service URL with a set of 
            provided credentials.
            </summary>
            <param name="fullyQualifiedServiceUri">The URL of the web service</param>
            <param name="credentials">The credentials to use when accessing the web service.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.IsReportingConfigured(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection)">
            <summary>
            Returns 'true' if reporting is configured for the specified TPC, 'false' otherwise.
            </summary>
            <param name="tfs"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.IsReportingConfigured(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.Uri)">
            <summary>
            Returns 'true' if reporting is configured for the specified project, false otherwise
            </summary>
            <param name="tfs"></param>
            <param name="projectUri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.IsReportingCubeConfigured(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String@,System.String@,System.String@)">
            <summary>
            For Excel Reporting: Checks whether reporting Cube is configured with the given TFS server 
            Two cases which can affect reporting cube configuration
                1. A full server license but reporting cube not configured
                2. A TFSe server license where reporting cube is not available
            </summary>
            <returns>true if reporting cube is configured</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.GetReportServiceUri(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection)" -->
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.GetBaseProjectCollectionPath(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection)">
            <summary>
            Returns the item path for the project collection, such as 'tfsreports/collection0'.
            </summary>
            <param name="tpc"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.GetBaseProjectPath(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String)">
            <summary>
            Returns the item path for the project, such as 'tfsreports/collection0/project1'.
            </summary>
            <param name="tfs"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.GetReportSiteUri(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String)">
            <summary>
            Retrieves the base report manager site url for the specified project.
            </summary>
            <param name="tfs"></param>
            <param name="projectUri"></param>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.GetReportManagerUri(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection)">
            <summary>
            Retrieves the Report manager uri.
            </summary>
            <param name="tfs"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.RemoveKnownWebServicePaths(System.Uri)">
            <summary>
            Strip off known service names, like 'ReportService.asmx' and 'ReportService2005.asmx'.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.FormatReportManagerPath(System.String,System.String)">
            <summary>
            Formats the path for accessing the report manager for a particular item path.  
            This is primarily used by TfsRedirect.
            </summary>
            <param name="reportManagerUrl"></param>
            <param name="itemPath"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.FormatReportViewerPath(System.String,System.String,System.Boolean)">
            <summary>
            Formats the path for accessing a particular report for a particular item path.  
            This is primarily used by TfsRedirect.
            </summary>
            <param name="reportWebServiceUrl"></param>
            <param name="itemPath"></param>
            <param name="showToolbar"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.GetUniqueItemPath(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String)">
            <summary>
            Generates a unique report item path given a base name. If no item exists with the base path, that
            is returned. Otherwise, a numeric postfix is appended until the path becomes unique and non-existent.
            </summary>
            <param name="rs">The reporting service proxy.</param>
            <param name="basePath">The base path to use.</param>
            <returns>A unique report item path guaranteed to not exist.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.ItemExists(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String)">
            <summary>
            Determines whether a given report item exists (can be of any item type).
            </summary>
            <param name="proxy">The web service proxy.</param>
            <param name="itemPath">The path to an item.</param>
            <returns><c>true</c> if a report item with that given path exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.FolderExists(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String)">
            <summary>
            Determines whether a given report folder exists.
            </summary>
            <param name="proxy">The web service proxy.</param>
            <param name="folderPath">The folder path.</param>
            <returns><c>true</c> if the folder exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.CreateFolder(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String)">
            <summary>
            Creates a report folder given a full folder path. This will attempt to create
            any elements in the path that are missing.
            </summary>
            <param name="proxy">The web service proxy.</param>
            <param name="folderPath">full The folder path (starting with /).</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.EnsureFolderExists(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String)">
            <summary>
            Ensures the specified folder exists creating it if it does not
            </summary>
            <param name="proxy">The web service proxy.</param>
            <param name="folderPath">full The folder path (starting with /).</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.BatchCreateFolders(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a set of report folders in a single batch operation. Note that the parents of
            the input folders must already exist, or the folders must be passed int the appropriate
            order if creating a hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.BatchEnsureFoldersExist(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ensures that a set of report folders exist in a single batch operation.
            </summary>
            <param name="proxy"></param>
            <param name="folderPaths"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.IsInRole(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String,System.String,System.String)">
            <summary>
            Determines wheter a given user plays a given role for a given item path.
            </summary>
            <param name="proxy">The web service proxy.</param>
            <param name="itemPath">The path to a report item.</param>
            <param name="userName">The user being checked.</param>
            <param name="roleName">The name of the role to verify.</param>
            <returns><c>true</c> if the user is in that role; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.AddRolePolicy(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String,System.String,System.String)">
            <summary>
            Adds a role policy for a given user and item path (if the policy didn't already exist).
            </summary>
            <param name="proxy">The web service proxy.</param>
            <param name="itemPath">The path to a report item.</param>
            <param name="userName">The user being checked.</param>
            <param name="roleName">The name of the role to verify.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.RemoveRolePolicy(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String,System.String,System.String)">
            <summary>
            Adds a role policy for a given user and item path (if the policy didn't already exist).
            </summary>
            <param name="proxy">The web service proxy.</param>
            <param name="itemPath">The path to a report item.</param>
            <param name="userName">The user being checked.</param>
            <param name="roleName">The name of the role to verify.</param>
            <returns>whether the user had the role (and therefore, whether it was removed)</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.EnsureRoleExists(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ensures that a given Reporting Services role exists and has the associated required tasks.
            </summary>
            <param name="proxy">A web service proxy.</param>
            <param name="roleName">The target role name.</param>
            <param name="roleDescription">The role description used if creating the role.</param>
            <param name="requiredTaskIds">The collection of task ids that we require the role to have.</param>
            <returns><c>true</c> if a role was created or an existing role was updated; <c>false</c> if the role already existed
            and didn't need to be udpated.</returns>
            <remarks>
            If the role doesn't exist, it will be created with the associated tasks. If it already exists, and doesn't have one
            of the required tasks, it will be updated. If it exists and has all required tasks, nothing will be changed.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.EnsureRoleHasTasks(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ensures that an existing role has the associated required tasks.
            </summary>
            <param name="proxy">A web service proxy.</param>
            <param name="roleName">The target role name.</param>
            <param name="requiredTaskIds">The collection of task ids that we require the role to have.</param>
            <returns><c>true</c> if a role was created or an existing role was updated; <c>false</c> if the role already existed
            and didn't need to be udpated.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.CreateRole(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a role with a set of associated tasks.
            </summary>
            <param name="proxy">A web service proxy.</param>
            <param name="roleName">The target role name.</param>
            <param name="roleDescription">The role description.</param>
            <param name="associatedTaskIds">The collection of task ids that will be associated with the role.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.RoleExists(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String)">
            <summary>
            Determines if a given role exists.
            </summary>
            <param name="proxy">A web service proxy.</param>
            <param name="roleName">The target role name.</param>
            <returns><c>true</c> if the role exists; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.SetRoleDescription(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String,System.String)">
            <summary>
            Changes the description of a role.
            </summary>
            <param name="proxy">A web service proxy.</param>
            <param name="roleName">The target role name.</param>
            <param name="roleDescription">The new description of the role.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.CheckCreateFolder(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String)">
            <summary>
            Verifies that the client has permissions to create a report folder with the given path.
            </summary>
            <param name="proxy">The web service proxy.</param>
            <param name="folderPath">The folder path.</param>
            <remarks>If the parent folder does not exist, this method will check that the client
            has permissions to create subfolders under the first existing parent.</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.CheckFolderExists(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String)">
            <summary>
            Verifies that a given report folder exists.
            </summary>
            <param name="proxy">The web service proxy.</param>
            <param name="folderPath">The folder path.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.CheckManageFoldersAndReports(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String)">
            <summary>
            Ensures that the calling user has permissions to manager folder and reports at the given folder path (or its first
            existing ancestor).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.CheckItemType(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String,Microsoft.TeamFoundation.Client.Reporting.ItemTypeEnum)">
            <summary>
            Ensures that a given item exists, is accessible, and is of a given type.
            </summary>
            <param name="proxy">The web service proxy.</param>
            <param name="itemPath">The report item path.</param>
            <param name="expectedType">The expected type for the item.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.HasPermissions(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String,System.String[])">
            <summary>
            Determines whether the client has one or more given permissions to a given item path.
            </summary>
            <param name="proxy">The web service proxy.</param>
            <param name="itemPath">The path to a report item.</param>
            <param name="permissions">The permissions being checked (e.g. see ReportingOperations).</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.HasSystemPermissions(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String[])">
            <summary>
            Determines whether the client has one or more given system permissions.
            </summary>
            <param name="proxy">The web service proxy.</param>
            <param name="itemPath">The path to a report item.</param>
            <param name="permissions">The permissions being checked (e.g. see ReportingOperations).</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.CheckPermissions(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String,System.String[])">
            <summary>
            Determines whether the client has one or more given permissions to a given item path.
            </summary>
            <param name="proxy">The web service proxy.</param>
            <param name="itemPath">The path to a report item.</param>
            <param name="requiredPermissions">The permissions being checked (e.g. see ReportingOperations).</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.ValidateItemPath(System.String)">
            <summary>
            Validates an input item path:
                It cannot be null or empty
                Exceed a maximum length of 260 characters
                It has to start with "/"
                Contain items with invalid names
                Contain any surrogate character
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.IsValidItemName(System.String)">
            <summary>
            Checks that a given report item name is valid. It cannot be null or empty, cannot contain invalid characters,
            and cannot consists of only dots or spaces.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.CheckContainsInvalidPathChars(System.String)">
            <summary>
            Throws an exception if the path contains invalid characters.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.ContainsInvalidPathChars(System.String)">
            <summary>
            Helper method to test if a path contains invalid chars
            </summary>
            <param name="folderName">the path to be validated (null or empty is ok; means relative to self)</param>
            <returns>true if does not contain invalid path chars, false if it does</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.EndOfPath(System.String)">
            <summary>
            Get the last file or folder name in a path
            </summary>
            <param name="path">a path</param>
            <returns>Empty if the path was to root or empty, otherwise return the end of the path</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.GetParent(System.String)">
            <summary>
            Get the parent of the current report node in the path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.GetExistingSelfOrAncestor(Microsoft.TeamFoundation.Client.Reporting.ReportingService,System.String)">
            <summary>
            Returns the path to the given report item, or its closest ancestor folder if the report item
            doesn't exit.
            </summary>
            <param name="proxy">The web service proxy.</param>
            <param name="itemPath">A report item path.</param>
            <returns>The report item path if it exists, or its closest ancestor folder if the report item doesn't exist.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.CombinePath(System.String,System.String)">
            <summary>
            Combines a base report item path with a sub item.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.TryGetReportingServicesErrorMessage(System.Web.Services.Protocols.SoapException)" -->
        <member name="M:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.ConvertException(System.Web.Services.Protocols.SoapException)">
            <summary>
            Converts a SoapException to a typed ReportingServiceException, potentially cleaning up
            the returned error message.
            </summary>
            <param name="e">The SoapException returned by a ReportingService call.</param>
            <returns>A new exception that wraps the original one.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Reporting.ReportingUtilities.CatalogItemComparer">
            <summary>
            Private inner class CatalogItemComparer, used to compare two CatalogItems by path
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.Reporting.ReportData">
            <summary>
            Data structure to define the report with parameters and associated data sources.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.SharePoint.FaultInfo">
            <summary>
            Object representing data to transfer back to the client when an exception 
            occurs in the host process.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.SharePointServiceContractProxy.System#IDisposable#Dispose">
            <summary>
            Overriding ClientBase Dispose implementation because it masks failures (such as timeouts)
            </summary>
            <remarks>See: http://msdn.microsoft.com/en-us/library/aa355056.aspx and 
            http://blogs.msdn.com/b/jjameson/archive/2010/03/18/avoiding-problems-with-the-using-statement-and-wcf-service-proxies.aspx</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.SharePointServiceContractProxy.Initialize">
            <summary>
            Initialize the client
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.SharePointServiceContractProxy.SetChannelTimeout(System.TimeSpan)">
            <summary>
            Set the underlying Channel's timeout
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.SharePoint.ProcessGuidanceHelper">
            <summary>
            Helper class to aid in launching Process Guidance and finding urls associated with process guidance.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.ProcessGuidanceHelper.LaunchProcessGuidance(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Launches process guidance for the specified tpc and team project.  Iterates over the specified
            set of document paths, finds the first valid file (one that exists), and launches the url.
            
            If process guidance is not configured it will launch the 'not configured' url.  If process guidance
            is configured but it cannot reach any document in the set of paths, it will attempt to open the
            process guidance site directly (just the path, no file appended).
            </summary>        
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.ProcessGuidanceHelper.GetProcessGuidanceUrl(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String)">
            <summary>
            Retrieves the process guidance url after checking that it exists.  First tries 
            ProcessGuidance.aspx then ProcessGuidance.html.  If process guidance is not
            configured it will return the 'not configured' url.  If process guidance
            is configured but it cannot reach either of the files, it will return
            the root process guidance path.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.ProcessGuidanceHelper.IsProcessGuidanceConfigured(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String)">
            <summary>
            Returns 'true' if process guidance is configured for the specified project, 'false' otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.ProcessGuidanceHelper.IsValidUrl(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String)">
            <summary>
            Determines whether or not the specified url points to a file that exists.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.ProcessGuidanceHelper.GetProcessGuidanceUrl(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a uri for a process guidance path by iterating over the specified set of document paths and checking to
            see if they exist.  Returns the uri for the first document it finds that exists.  If none exist it will return the
            root process guidance site.  If process guidance is not configured it will return the 'not configured' url.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.SharePoint.Lists">
            <summary>
            Non-generated implementation for the WSS Lists service proxy.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.SharePoint.SharePointTeamFoundationIntegrationService">
            <summary>
            Non-generated implementation for the proxy of the TFS service on WSS servers.
            This is called TeamFoundationIntegrationService on the SharePoint side, but we added the SharePoint Prefix to make is more clear since TFS also has an Integration service.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.SharePoint.WssWebTemplates">
            <summary>
            Enumerates some of the default template definitions for WSS sites.
            </summary>
            <remarks>
            From: http://msdn.microsoft.com/en-us/library/administration.admin.createsite.aspx
            Can be obtained doing: stsadm -o -enuminstalledsitetemplates -url "http://intranet/".
            </remarks>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.SharePoint.WssTreeNode">
            <summary>
            Represents a node in a tree of items returned by the WSS server.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.SharePoint.WssFileUploadException">
            <summary>
            Exception class that captures errors during a WSS file upload action.
            This is thrown whenever WSS returns an error after a file upload 
            operation. The error elements include the local file name that we are 
            trying to upload, the error message itself and inner exception 
            containing details.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.SharePoint.WssDataUploadException">
            <summary>
            Exception class for WSS Data Upload. This is thrown whenever WSS returns an error
            during the file upload process. Error elements include remote file, site url, 
            WSS error text, and WSS error number extracted from the text.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.SharePoint.DocumentLibraryInfo.AsciiName">
            <summary>
            Name of the document library as it appears in the url (not necessarily the same as the Title).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.SharePoint.DocumentLibraryInfo.IsValid">
            <summary>
            Determines whether or not we were able to get the appropriate set of information about the document library
            from the information that SharePoint sent back.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.SharePoint.DocumentLibraryInfo.IsHidden">
            <summary>
            Determines whether or not a document library is hidden.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.SharePoint.DocumentLibraryInfo.CheckoutRequired">
            <summary>
            Determines whether or not the document library requires checkout to edit files.  If so,
            then adding a new file will cause it to be automatically checked out to the current user
            and not visible to other users of the system.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.DocumentLibraryInfo.TryGetBooleanAttribute(System.Xml.XmlElement,System.String,System.Boolean@)">
            <summary>
            Attempts to retrieve the boolean value of an attribute on the specified node.
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.DocumentLibraryInfo.TryGetAsciiName(Microsoft.TeamFoundation.Client.TfsConnection,System.Xml.XmlElement,System.String@)">
            <summary>
            Extracts the relevant URLs from the document library xml node and attempts to determine the url path segment
            for the document library (historically known as the 'ascii' name for the document library).
            This uses up to 3 different mechanisms to extract the ascii name, if they all fail then the document library is considered
            invalid.
            </summary>
            <param name="tfs"></param>
            <param name="node"></param>
            <param name="asciiName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.DocumentLibraryInfo.TryGetAsciiNameFromWebFullUrl(System.String,System.String,System.String@)">
            <summary>
            Attempts to extract the 'Ascii' name of the document library by trimming off the web url from the view url and returing
            the first segment of the path.  This mechanism works on WSS 3.0+ machines only, WSS 2.0 does not have the 'WebFullUrl' attribute.
            </summary>
            <param name="defaultViewUrl">Url of the default view for the document library.</param>
            <param name="webFullUrl">Url of the web, should be the prefix of the defaultViewUrl</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.DocumentLibraryInfo.TryGetAsciiNameFromIRegistrationDelta(Microsoft.TeamFoundation.Client.TfsConnection,System.String,System.String@)">
            <summary>
            Attempts to retrieve the 'ascii' name by diffing the default view url with the data in IRegistration
            and removing the prefix.  This should only be necessary when working against Orcas servers using
            sub-sites (an extremely rare and unsupported case).  This was added in Orcas SP1.
            </summary>
            <param name="tfs"></param>
            <param name="defaultViewUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.DocumentLibraryInfo.TryGetAsciiNameFromTemplateUrl(System.String,System.String@)">
            <summary>
            Split the default view url and take the segment that *should* be the document library name on Orcas servers.
            This is the mechanism that was used in Orcas and Whidbey and is used only as a last resort on those platforms.
            </summary>
            <param name="defaultViewUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.VerifyTeamFoundationSharePointExtensions(System.Net.ICredentials,System.Uri)">
            <summary>
            Throws an exception if SharePoint is not installed, the SharePoint Extensions are not installed, 
            or if the extensions are not version compatible with what we know how to deal with.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.GetTeamFoundationSharePointExtensionsVersion(System.Net.ICredentials,System.Uri,System.Int32@,System.Int32@)">
            <summary>
            Verifies that Team Foundation Server SharePoint Extensions have been installed at the target URL.  Throws an exception if the service is not available.
            </summary>
            <param name="credentials">Credentials</param>
            <param name="url">SharePoint Administrative URL</param>
            <param name="majorVersion">Receives TFS SharePoint Extension major version</param>
            <param name="minorVersion">Receives TFS SharePoint Extension minor version</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CheckIsAlive(System.Net.ICredentials,System.Uri)">
            <summary>
            Checks the health of the SharePoint server by invoking a web method on the SharePoint Extensions web service.
            </summary>
            <remarks>
            This assumes that the SharePoint Extensions are installed.
            </remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CheckUrl(System.Net.ICredentials,System.Uri,System.Uri,Microsoft.TeamFoundation.Client.SharePoint.CheckUrlOptions,System.Guid,System.Guid)">
            <summary>
            Checks a given URL per the given options.  SharePointTeamFoundationIntegrationService is used. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CheckCreateSite(Microsoft.TeamFoundation.Client.TfsConnection,System.Uri,System.Uri)">
            <summary>
            Checks if the site can be created.  If IsEtmSupported(tfs) is true, then the SharePointTeamFoundationIntegrationService is used.  Otherwise, the SharePoint Admin service is used.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CheckCreateSite(System.Net.ICredentials,System.Uri,System.Uri,System.Guid,System.Guid)">
            <summary>
            Checks if the site can be created.  SharePointTeamFoundationIntegrationService is used. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CheckCreateSiteBackcompat(System.Net.ICredentials,System.Uri,System.Uri)">
            <summary>
            Checks if the site can be created.  The SharePoint Admin service is used.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.VerifyTeamFoundationMapping(Microsoft.TeamFoundation.Client.TfsConnection,System.Uri)">
            <summary>
            Verify the mapping back to this TFS server is on the SharePoint side.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.VerifyTeamFoundationMapping(System.Net.ICredentials,System.Uri,System.Guid,System.Guid)">
            <summary>
            Verify the mapping back to this TFS server is on the SharePoint side.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CheckDeleteSite(Microsoft.TeamFoundation.Client.TfsConnection,System.Uri)">
            <summary>
            Verify that a site can be deleted.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CheckDeleteSite(System.Net.ICredentials,System.Uri)">
            <summary>
            Checks if the site can be created.  SharePointTeamFoundationIntegrationService is used. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CheckDeleteSiteBackcompat(System.Net.ICredentials,System.Uri)">
            <summary>
            Checks that the site exists.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CreateSite(Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.WssSiteData,Microsoft.TeamFoundation.Client.TfsConnection,System.Uri)">
            <summary>
            Creates a site.  If IsEtmSupported(tfs) is true, then the SharePointTeamFoundationIntegrationService is used.  Otherwise, the SharePoint Admin service is used.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CheckIsFarmAdministrator(System.Net.ICredentials,System.Uri)">
            <summary>
            Determine if the user is a farm administrator. May throw an exception if the web service returns an error instead of a boolean.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.IsFarmAdmin(System.Uri,System.String)">
            <summary>
            Determine if the specified user is a farm administrator. 
            May throw an exception if the web service returns an error instead of a boolean.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.GetCreateSiteLocation(System.Net.ICredentials,System.Uri)">
            <summary>
            Figure out where to call the CreateSite method... on the admin URL or the content URL.  This throws an exception if neither.  
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CheckPermissionsForCreateSiteLocation(System.Net.ICredentials,System.Uri,Microsoft.TeamFoundation.Client.SharePoint.CreateSiteLocation)">
            <summary>
            Throws an exception if CreateSite should be called on the Admin URL and the user is not a farm administrator.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CreateSite(System.Net.ICredentials,System.Uri,Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.WssSiteData,System.Guid,System.Guid)">
            <summary>
            Create the site using the SharePointTeamFoundationIntegrationService service.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CreateSiteBackcompat(System.Net.ICredentials,System.Uri,Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.WssSiteData)">
            <summary>
            Create the site using the SharePoint Admin service.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.TryDeleteSite(Microsoft.TeamFoundation.Client.TfsConnection,System.Uri,System.Uri)">
            <summary>
            Deletes a site.  If IsEtmSupported(tfs) is true, then the SharePointTeamFoundationIntegrationService is used.  Otherwise, the SharePoint Admin service is used.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.TryDeleteSite(System.Net.ICredentials,System.Uri)">
            <summary>
            Deletes a site.  SharePointTeamFoundationIntegrationService is used.  
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.TryDeleteSiteBackcompat(System.Net.ICredentials,System.Uri,System.Uri)">
            <summary>
            Deletes a site.  The SharePoint Admin service is used.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.GetLanguageIdsBackcompat(System.Net.ICredentials,System.Uri)">
            <summary>
            Gets languages. The SharePoint Admin service is used.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.TryGetSiteTemplatesBackcompat(Microsoft.TeamFoundation.Client.TfsConnection,System.Uri,System.Int32,Microsoft.TeamFoundation.Client.SharePoint.TemplateInfo[]@,System.String@,System.Exception@)">
            <summary>
            Gets the available site templates using the SharePoint Sites web service.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.GetWebIdentifier(System.Net.ICredentials,System.Uri)">
            <summary>
            Returns the Guid for the WSS site at the specified address.  SharePointTeamFoundationIntegrationService is used. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.ActivateSiteFeatureById(System.Net.ICredentials,System.Uri,System.Guid)">
            <summary>
            Activate a site collection or web level feature.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.ActivateWebApplicationFeatureById(System.Net.ICredentials,System.Uri,System.Uri,System.Guid)">
            <summary>
            Activate a web application level feature.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.UploadFile(System.String,System.String,System.String,Microsoft.TeamFoundation.Client.TfsConnection)">
            <summary>
            Uploads a file from the disk to the target location.
            </summary>
            <param name="localFile">Full path to the file to upload</param>
            <param name="targetDocLib">Document library we are uploading to.</param>
            <param name="remoteFullName">site relative path to the target file</param>
            <param name="siteUrl">Url of the site to upload to</param>
            <param name="tfs">TFS server associated with this request (for authentication/client certs)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.EscapeFileName(System.String)">
            <summary>
            UploadData uses WSS FPRPC to upload files. Part of the FPRPC command contains reserved chars which need escaping with '\'. 
            </summary>
            <param name="fileName">file name to escape</param>
            <returns>Escaped file name</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CheckInDocument(System.String,System.String,Microsoft.TeamFoundation.Client.TfsConnection)">
            <summary>
            Checks in a document. RPC Documentation at http://msdn.microsoft.com/en-us/library/ms439083.aspx
            the error).
            </summary>
            <param name="targetPath">Path to the file (ie: doclibname\folder1\folder2\filename.ext</param>
            <param name="siteUrl">Url of the site</param>
            <param name="tfs">Team Foundation Server associated with this request (primarily used for authentication/client certs)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CheckOutDocument(System.String,System.String,System.Boolean,System.Int32,Microsoft.TeamFoundation.Client.TfsConnection)">
            <summary>
            Checks out a document. RPC documentation at http://msdn.microsoft.com/en-us/library/ms437509            
            </summary>
            <param name="targetPath">Path to the file (ie: doclibname\folder1\folder2\filename.ext</param>
            <param name="siteUrl">Url of the site</param>
            <param name="force">When true, the checkout will cancel any prior checkouts, otherwise the checkout attempt not proceed. Sharepoint default behavior is false.</param>
            <param name="timeout">The duration in seconds for the checkout lock to be reserved.</param>
            <param name="tfs">Team Foundation Server associated with this request (primarily used for authentication/client certs)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.FindDocumentLibrary(Microsoft.TeamFoundation.Client.TfsConnection,System.Uri,System.Guid)">
            <summary>
            Retrieves the document library info object from the WssDocumentLibrary object.
            </summary>
            <param name="tfs"></param>
            <param name="sitePath"></param>
            <param name="docLibId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.FindDocumentLibraryByAsciiName(Microsoft.TeamFoundation.Client.TfsConnection,System.Uri,System.String)">
            <summary>
            Retrieves the DocumentLibraryInfo object from the specified path where the document libraries 'ascii' name matches
            the specified ascii name.
            Returns 'null' if the document library is not found.
            </summary>
            <param name="tfs"></param>
            <param name="sitePath"></param>
            <param name="docLibAsciiName">Url name of the document library.  This is the name in the path to the doc lib, not the title.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.FindDocumentLibraryByTitle(Microsoft.TeamFoundation.Client.TfsConnection,System.Uri,System.String)">
            <summary>
            Retrieves the DocumentLibraryInfo object from the specified path where the document libraries 'title' matches
            the specified title name.
            Returns 'null' if the document library is not found.
            </summary>
            <param name="tfs"></param>
            <param name="sitePath"></param>
            <param name="docLibTitle">Document library title.  This is the visible name of the document library.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CheckSharePointFunctionality(Microsoft.TeamFoundation.Common.ITFLogger,System.Uri,System.Uri,System.String)">
            <summary>
            Ensures that we are looking at a valid SharePoint
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.MoveItem(Microsoft.TeamFoundation.Client.TfsConnection,System.String,System.String,System.String)">
            <summary>
            Moves a document or folder from one location to another on the same site.
            Does not work across sites even if they are on the same server.
            Does not overwrite target folders if there is a collision.
            </summary>
            <param name="tfs">Team Foundation Server object, used for credentials (etc) when preparing the web request</param>
            <param name="siteUrl">The url of the base site.</param>
            <param name="source">relative path (including document library) to the item to move</param>
            <param name="target">relative path (including document library and filename) of the target item</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.AttachWeb(Microsoft.TeamFoundation.Client.TfsConfigurationServer,System.Uri)">
            <summary>
            Attaches a TFS configuration server to a particular SharePoint web.  SharePointTeamFoundationIntegrationService is used.  
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.AttachWeb(System.Net.ICredentials,System.Uri,System.Guid)">
            <summary>
            Attaches a TFS configuration server to a particular SharePoint web.  SharePointTeamFoundationIntegrationService is used.  
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.DetachWeb(System.Net.ICredentials,System.Uri)">
            <summary>
            Detaches a particular SharePoint web from a TFS configuration server.  SharePointTeamFoundationIntegrationService is used.  
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.FormatFpRpcCall(System.String,System.String[])">
            <summary>
            Formats the string for an RPC call.  UrlEncodes the parameters, replaces '.' and '_', and converts it to a byte array.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.SendFpRpcData(Microsoft.TeamFoundation.Client.TfsConnection,System.String,System.Byte[])">
            <summary>
            Sends the specified block of data to the specified site.
            </summary>
            <returns>results of the call as a string</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.HandleFpRpcReturnValue(System.String,System.String,System.String)">
            <summary>
            Checks for errors in the return string from an FpRpc call.  Throws an exception if errors are found.
            </summary>
            <param name="retStr">String returned from the Front Page RPC call</param>
            <param name="remoteFullName">url of the target file</param>
            <param name="siteUrl">Url of the site</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePoint.WssUtilities.CheckForFpRpcError(System.String,System.UInt32@,System.String@)">
            <summary>
            Checks the return value from an FpRpc call.  Parses out the error number and message
            if there is one.
            </summary>
            <param name="htmlText">String returned from the Front Page RPC call</param>
            <param name="errorNo">out - error number found in the htmlText</param>
            <param name="msg">out - error message found in the htmlText</param>
            <returns>true if there is an error, false otherwise</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient">
            <summary>
            Context which tracks HostServiceClients so they can be shut down or killed as appropriate. 
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.KillAllHosts">
            <summary>
            Kill any processes that are our host service process.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.GetServiceContractProxy``1">
            <summary>
            Returns the requested WCF service proxy.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.GetInstanceName">
            <summary>
            Returns the instance name.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.ShutDownKnownHosts">
            <summary>
            Try to shut down the host services that we're tracking in a nice way.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.KillKnownHosts">
            <summary>
            Kill host service processes that the we're tracking.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.GetHostServiceInstance">
            <summary>
            Get an instance of the HostServiceClient.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.InitializeServiceHost">
            <summary>
            Initializes the host process EXE and calls back to code that needs to use the services.  This method is to be called within client code that needs the services.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.GetProcessStartInfo(System.String)">
            <summary>
            Get the information about the process to start.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.WcfHostExeName">
            <summary>
            Retrieves the name of the executable to launch.  There are two, one for SharePoint 15 and beyond
            and one for SharePoint 14 and below.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.KillProcess(System.Diagnostics.Process)">
            <summary>
            Kill a particular process.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.FormatLogMessage(System.String,System.String)">
            <summary>
            Format a log message to include the host instance name.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.Dispose">
            <summary>
            Implement IDisposable.
            Do not make this method virtual.  Implementation of the actual clean up code.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.Dispose(System.Boolean)">
            <summary>
            Implementation for disposal.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.HostServiceInstanceInfo">
            <summary>
            Helper class for clients of WCF services hosted inside HostService.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.HostServiceClient.HostServiceInstanceInfo.#ctor(System.String,System.Diagnostics.Process)">
            <summary>
            Constructor.  
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WcfHelpers.SharePointServiceContractClient">
            <summary>
            Wrapper class to call SharePoint WCF service used during setup/configuration.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.SharePointServiceContractClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.SharePointServiceContractClient.TranslateWebApplicationUrl(System.Uri)">
            <summary>
            Calls the TranslateWebApplicationUrl method over WCF in a host on the local machine.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.SharePointServiceContractClient.CheckUrl(System.String,System.String,Microsoft.TeamFoundation.Client.SharePoint.CheckUrlOptions,System.Guid,System.Guid)">
            <summary>
            Calls the CheckUrl method over WCF in a host on the local machine.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.SharePointServiceContractClient.CheckSharePointAppPoolAccount(System.String)">
            <summary>
            Calls the CheckSharePointAppPoolAccount method over WCF in a host on the local machine.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.SharePointServiceContractClient.CheckForContentUrls">
            <summary>
            Calls the CheckForContentUrls method over WCF in a host on the local machine.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.SharePointServiceContractClient.CheckIsFarmAdministrator">
            <summary>
            Calls the CheckIsFarmAdministrator method over WCF in a host on the local machine.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.SharePointServiceContractClient.IsFarmAdmin(System.String)">
            <summary>
            Calls the IsFarmAdmin method over WCF in a host on the local machine.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.SharePointServiceContractClient.SetLegacyLogging(System.Boolean)">
            <summary>
            Calls the SetLegacyLogging method over WCF in a host on the local machine.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.SharePointServiceContractClient.EnsureWildcardInclusionPathExists(System.Uri,System.String)">
            <summary>
            Calls the EnsureWildcardInclusionPathExists method over WCF in a host on the local machine.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.SharePointServiceContractClient.SolutionExists(System.String)">
            <summary>
            Calls the SolutionExists method over WCF in a host on the local machine.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.SharePointServiceContractClient.ProvisionSolution(System.String,System.String)">
            <summary>
            Calls the ProvisionSolution method over WCF in a host on the local machine.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.SharePointServiceContractClient.AddFaultInfo(System.Exception)">
            <summary>
            Adds any details it can obtain from the remote exception from the host process
            to the specified exception so that the data ends up in the log.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.Client.WcfHelpers.WcfServerInfo">
            <summary>
            Helper class that allows the client and server sides to get the bindings and addresses in a consistent way.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.WcfHelpers.WcfServerInfo.InstanceName">
            <summary>
            Allows multiple hosts to be running at the same time.  The instance name gives the services a new address.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.WcfHelpers.WcfServerInfo.Name">
            <summary>
            Name of the service.  Used in the address.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.WcfHelpers.WcfServerInfo.Contract">
            <summary>
            Interface with the service contract.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.WcfHelpers.WcfServerInfo.Implementation">
            <summary>
            Class that implements the service contract.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.WcfHelpers.WcfServerInfo.BaseAddressUri">
            <summary>
            The base address to the service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.WcfHelpers.WcfServerInfo.AddressUri">
            <summary>
            The address to this particular service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.WcfHelpers.WcfServerInfo.Address">
            <summary>
            Endpoint address for the service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.Client.WcfHelpers.WcfServerInfo.Binding">
            <summary>
            Binding used by the service.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.WcfHelpers.WcfServerInfo.#ctor(System.String,System.String,System.Type,System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="instanceName">Allows multiple hosts to be running at the same time.  The instance name gives the services a new address.</param>
            <param name="name">Name of the service.  Used in the address.</param>
            <param name="contract">Interface with the service contract.</param>
            <param name="implementation">Class that implements the service contract.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.#cctor">
            Creates the resource manager instance.
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.Get(System.String)">
            Returns a localized string given a resource string name.
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.GetInt(System.String)">
            Returns a localized integer given a resource string name.
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.GetBool(System.String)">
            Returns a localized string given a resource string name.
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.Format(System.String,System.Object[])">
            A little helper function to alleviate some typing associated with loading resources and
            formatting the strings.  In DEBUG builds, it also asserts that the number of format
            arguments and the length of args match.
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.FailedToRetieveReports">
            <summary>
            &quot;TF249029: A list of reports could not be retrieved from the server. Either no reports are stored on the server, or the server is not responding.&quot;
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.Reporting_IllegalFolderName">
            <summary>
            TF249055: The folder name is not valid.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.Reporting_PathsDoNotCoincide">
            <summary>
            TF249057: The provided paths do not match, or one is not a valid relative path of the other.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.ReportingUploader_FileNotExists(System.Object)">
            <summary>
            TF30221: File &apos;{0}&apos; does not exist
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.ReportingUploader_DuplicateTarget(System.Object)">
            <summary>
            TF249044: A report can only be uploaded once to any location. The process template uploads the following report more than once to the same location: {0}. You must modify the process template to remove the duplication.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.ReportingUploader_CreatingDataSource(System.Object)">
            <summary>
            Creating data source: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.ReportingUploader_CreatingDataSourceError(System.Object)">
            <summary>
            TF30220: Error occurred creating data source {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.ReportingUploader_CreatingFolder(System.Object)">
            <summary>
            Creating folder: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.ReportingUploader_CreatingReport(System.Object)">
            <summary>
            Creating report: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.ReportingUploader_CreatingSite(System.Object)">
            <summary>
            Creating site: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.ReportingUploader_UploadReportError(System.Object,System.Object)">
            <summary>
            TF30225: Error uploading report &apos;{0}&apos;: {1}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.ReportingUploader_SettingData(System.Object)">
            <summary>
            Setting data sources for report: {0}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.ReportingUploader_IgnoringSiteDirective">
            <summary>
            Ignoring site directive as no project data for site creation was specified.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.ReportingUploader_SkippingFolderAlreadyExists(System.Object)">
            <summary>
            The following report folder already exists: {0}. Folder creation will be skipped.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.ReportingUploader_DeletingDatasourceAlreadyExists(System.Object)">
            <summary>
            The following data source already exists in the report folder: {0}. The data source in the folder will be deleted so that the new version can be uploaded to the folder.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.ReportingUploader_DeletingReportAlreadyExists(System.Object)">
            <summary>
            The following report already exists in the report folder: {0}. The report in the folder will be deleted so that the new version can be uploaded to the folder.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.ReportingUploader_CreateReportWarning(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The report was uploaded, but a warning occurred. The severity of the warning is: {1}. The message is: {2}. The code is: {0}. The value for ObjectType is: {3}. The value for ObjectName is: {4}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.ReportingUploader_CreatingReportRetry(System.Object,System.Object)">
             <summary>
             {0} is the report path and name, {1} is a number, usually between 1 and 3.
            
             </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.UnableToRetrieveReportDefinition(System.Object)">
            <summary>
            TF249028: Failed to retrieve the definition for the following report: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.Reporting_ReportingUtilities_FolderAlreadyExists(System.Object)">
            <summary>
            TF249030: A folder with the following name already exists on the server: {0}. You must specify a different name for the folder.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.Reporting_ReportingUtilities_InsufficientPrivilegesToCreate(System.Object)">
            <summary>
            TF249031: A folder with the following name could not be created: {0}. The user account does not have permissions to create folders on the server that hosts reports.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.Reporting_ReportingUtilities_FolderDoesntExist(System.Object)">
            <summary>
            TF249032: A folder with the following name could not be accessed: {0}. Either that folder does not exist, or the user account does not have permissions to access that folder.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.Reporting_InvalidItemPath(System.Object,System.Object,System.Object)">
            <summary>
            TF249058: The path that you specified for the report item, &apos;{0}&apos;, is not valid. The path must not be empty, must begin with a slash (/) character, must not be longer than {1} characters, and must not contain any of the following characters: {2}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.Reporting_InvalidPathChars">
            <summary>
            TF249056: The path contains characters that are not valid.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.Reporting_InvalidItemPath_Surrogates(System.Object)">
            <summary>
            TF249059: The path that you specified for the report item, &apos;{0}&apos;, is not valid as it contains one or more surrogate characters. The path must not contain surrogate characters, which are characters that require two Unicode characters to represent.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.Reporting_ItemNotFound(System.Object)">
            <summary>
            TF249060: No report item with the following path could be found: {0}. Verify that the report item exists, that the path is correct, and that your account has the permissions required to access the report item.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.Reporting_UnexpectedItemType(System.Object,System.Object,System.Object)">
            <summary>
            An error occurred while accessing the report item with the following path: {0}. The report item was found, but it has the following type: {1}. The expected type for this report item is: {2}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.Reporting_NoPermissions(System.Object)">
            <summary>
            TF249061: You cannot access the following report item: {0}. Access was denied because your account does not have one or more permissions required to access this item.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.SharePoint_WssUtilities_SiteIsNotRunningSharePointExtensions(System.Object,System.Object)">
            <summary>
            TF255329: The following site could not be accessed: {0}. The server that you specified did not return the expected response. Either you have not installed the Team Foundation Server Extensions for SharePoint Products on this server, or a firewall is blocking access to the specified site or the SharePoint Central Administration site. For more information, see the Microsoft Web site ({1}).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.SharePoint_WssUtilities_SiteIsRunningUnsupportedExtensions(System.Object,System.Object,System.Object)">
            <summary>
            TF255328: The following site is running an unsupported version of Team Foundation Server Extensions for SharePoint Products: {0}. The following version is installed on the site: {1}. You must install the following version on the site: {2}. Check that you have the correct URL. If the URL is correct, verify that it is available and the firewall is not blocking access to it.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.SharePoint_WssUtilities_IntegrationServiceNotAvailable(System.Object,System.Object)">
            <summary>
            TF249038: The following Web service is not available: {0}. This Web service is used for the Team Foundation Server Extensions for SharePoint Products. Either the extensions are not installed, or there is a problem with the URL. Verify that the following URL points to a valid SharePoint Web application and that the application is available: {1}. If the URL is correct and the Web application is operating normally, verify that a firewall is not blocking access to the Web application.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.SharePoint_WssUtilities_IntegrationServiceNotAvailableWithInner(System.Object,System.Object,System.Object)">
            <summary>
            TF249063: The following Web service is not available: {0}. This Web service is used for the Team Foundation Server Extensions for SharePoint Products. The underlying error is: {2}. Verify that the following URL points to a valid SharePoint Web application and that the application is available: {1}. If the URL is correct and the Web application is operating normally, verify that a firewall is not blocking access to the Web application.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.SharePoint_WssUtilities_IntegrationServiceInvalidResponse(System.Object,System.Object)">
            <summary>
            TF249064: The following Web service returned an response that is not valid: {0}. This Web service is used for the Team Foundation Server Extensions for SharePoint Products. Either the extensions are not installed, the request resulted in HTML being returned, or there is a problem with the URL. Verify that the following URL points to a valid SharePoint Web application and that the application is available: {1}. If the URL is correct and the Web application is operating normally, verify that a firewall is not blocking access to the Web application.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.SharePoint_WssUtilities_FolderCreationError">
            <summary>
            TF249034: A folder could not be created. The account might not have the required permissions to create a folder in this location.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.SharePoint_WssUtilities_FileNameError(System.Object)">
            <summary>
            TF249035: The following file could not be uploaded: {0}. The file name contains one or more characters that are not allowed.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.SharePoint_WssUtilities_FileUploadError(System.Object,System.Object)">
            <summary>
            TF249036: An error occurred while uploading the following file: {0}. SharePoint Products error: {1}
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.SharePoint_WssUtilities_InsufficientPrivilegesToCreateBackcompat(System.Object)">
            <summary>
            TF249020: A SharePoint site could not be created at the following location: {0}. The user account does not have the required permissions to create a site in this location.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.WcfHelpers_HostDidNotSignal(System.Object)">
            <summary>
            TF255370: No response was received from the process before the timeout limit was reached. Process name: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.Client.SharePointReportingResources.WcfHelpers_HostExitedUnexpected(System.Object,System.Object)">
            <summary>
            TF255371: The following process stopped before it could be used: {0}. The server returned the following error message: {1}.
            </summary>
        </member>
    </members>
</doc>
