<?xml version="1.0"?>
<doc>
    <assembly>
        <name>App.Metrics.Abstractions</name>
    </assembly>
    <members>
        <member name="P:App.Metrics.Apdex.ApdexContext.Elapsed">
            <summary>
                Gets the currently elapsed time from when the instance has been created
            </summary>
            <value>
                The elapsed.
            </value>
        </member>
        <member name="T:App.Metrics.Apdex.ApdexOptions">
            <summary>
                <see href="https://en.wikipedia.org/wiki/Apdex">Apdex</see> allows us to measure an apdex score which is a ratio of
                the number of satisfied and tolerating requests to the total requests made. Each satisfied request counts as one
                request, while each tolerating request counts as half a satisfied request.
                <para>
                    Apdex tracks three response counts, counts based on samples measured by the chosen
                    <see cref="T:App.Metrics.ReservoirSampling.IReservoir">reservoir</see>.
                </para>
            </summary>
            <seealso cref="T:App.Metrics.MetricValueWithSamplingOption" />
        </member>
        <member name="P:App.Metrics.Apdex.ApdexOptions.AllowWarmup">
            <summary>
                Gets or sets a value indicating whether to allow the app to warmup before calcaulting.
                If set to <c>true</c> allows the service to warmup before starting to calculate the apdex,
                the score will intitially be 1 until enough samples have been recorded.
            </summary>
            <value>
                <c>true</c> if [allow warmup]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:App.Metrics.Apdex.ApdexOptions.ApdexTSeconds">
            <summary>
                Gets or sets the apdex t seconds.
                <para>
                    Satisfied, Tolerated and Frustrated request counts are calculated as follows using a user value of T seconds.
                </para>
                <list type="bullet">
                    <item>
                        <description>
                            Satisfied: T or less
                        </description>
                    </item>
                    <item>
                        <description>
                            Tolerated: Greater than T or less than 4T
                        </description>
                    </item>
                    <item>
                        <description>
                            Frustrated: Greater than 4 T
                        </description>
                    </item>
                </list>
            </summary>
            <value>
                The apdex T seconds used in calculating the score on the samples collected.
            </value>
        </member>
        <member name="P:App.Metrics.Apdex.ApdexOptions.ResetOnReporting">
            <summary>
                Gets or sets a value indicating whether the counts and score should be reset when it is reported, otherwise values
                are cummulative. Note: If using more than one reporter, the count will be reset for the first reporter which sends
                the value. Defaults to <c>false</c>.
            </summary>
            <value>
                <c>true</c> if [reset on reporting]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:App.Metrics.Apdex.ApdexSnapshot.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Apdex.ApdexSnapshot.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.Apdex.ApdexValue">
            <summary>
                The value reported by an Apdex Metric
            </summary>
        </member>
        <member name="T:App.Metrics.Apdex.IApdex">
            <summary>
                <see href="https://en.wikipedia.org/wiki/Apdex">Apdex</see> allows us to measure an apdex score which is a ratio of
                the number of satisfied and tolerating requests to the total requests made. Each satisfied request counts as one
                request, while each tolerating request counts as half a satisfied request.
                <para>
                    Apdex tracks three response counts, counts based on samples measured by the chosen
                    <see cref="T:App.Metrics.ReservoirSampling.IReservoir">reservoir</see>.
                </para>
                <para>
                    Satisfied, Tolerated and Frustrated request counts are calculated as follows using a user value of T seconds.
                </para>
                <list type="bullet">
                    <item>
                        <description>
                            Satisfied: T or less
                        </description>
                    </item>
                    <item>
                        <description>
                            Tolerated: Greater than T or less than 4T
                        </description>
                    </item>
                    <item>
                        <description>
                            Frustrated: Greater than 4 T
                        </description>
                    </item>
                </list>
            </summary>
            <seealso>
                <cref>App.Metrics.IResetableMetric</cref>
            </seealso>
        </member>
        <member name="M:App.Metrics.Apdex.IApdex.CurrentTime">
            <summary>
                This is part of advanced timer API. Use Timer.NewContext() by default.
                Returns the current time in nanoseconds for computing elapsed time.
            </summary>
            <returns>value representing the current time in nanoseconds.</returns>
        </member>
        <member name="M:App.Metrics.Apdex.IApdex.EndRecording">
            <summary>
                This is part of advanced timer API. Use Apdex.NewContext() by default.
                Manually ends timing an action.
            </summary>
            <returns>value representing the current time in nanoseconds.</returns>
        </member>
        <member name="M:App.Metrics.Apdex.IApdex.NewContext">
            <summary>
                Creates a new disposable instance and records the time it takes until the instance is disposed.
                <code>
            using(apdex.NewContext())
            {
                ExecuteMethodThatNeedsMonitoring();
            }
            </code>
            </summary>
            <returns>A disposable instance that will record the time passed until disposed.</returns>
        </member>
        <member name="M:App.Metrics.Apdex.IApdex.StartRecording">
            <summary>
                This is part of advanced apdex API. Use Apdex.NewContext() by default.
                Manually start timing an action.
            </summary>
            <returns>value representing the current time in nanoseconds.</returns>
        </member>
        <member name="M:App.Metrics.Apdex.IApdex.Track(System.Int64)">
            <summary>
                This is part of advanced apdex API. Use Apdex.NewContext() by default.
                Manually record timer value use to calculate the apdex score.
            </summary>
            <param name="duration">The value representing the manually measured time.</param>
        </member>
        <member name="M:App.Metrics.Apdex.IApdex.Track(System.Action)">
            <summary>
                Runs the <paramref name="action" /> and records the time it took allowing us to calculate an apdex score.
            </summary>
            <param name="action">Action to run and record time for.</param>
        </member>
        <member name="M:App.Metrics.Apdex.IApdex.Track``1(System.Func{``0})">
            <summary>
                Runs the <paramref name="action" /> returning the result and records the time it took allowing us to calculate an
                apdex score.
            </summary>
            <typeparam name="T">Type of the value returned by the action</typeparam>
            <param name="action">Action to run and record time for.</param>
            <returns>The result of the <paramref name="action" /></returns>
        </member>
        <member name="T:App.Metrics.Apdex.IApdexMetric">
            <summary>
                Provides access to a adpex metric implementation.
                <seealso>
                    <cref>App.Metrics.Core.Interfaces.IApdex</cref>
                </seealso>
                <seealso>
                    <cref>App.Metrics.Data.Interfaces.IMetricValueProvider{ApdexValue}</cref>
                </seealso>
                <seealso>
                    <cref>System.IDisposable</cref>
                </seealso>
            </summary>
        </member>
        <member name="T:App.Metrics.Apdex.IApdexProvider">
            <summary>
                Provides access to an ApdexProvider Implementation responsible for sampling measured duration to calculate an apdex
                score
            </summary>
        </member>
        <member name="M:App.Metrics.Apdex.IApdexProvider.GetSnapshot(System.Boolean)">
            <summary>
                Gets a <see cref="T:App.Metrics.Apdex.ApdexSnapshot">snapshot</see> including the number of satisfied, tolerating, frustrating
                requests, the apdex score and the number of samples used to calculate the result.
            </summary>
            <param name="resetReservoir">if set to <c>true</c> [reset reservoir].</param>
            <returns>The apdex snapshot</returns>
        </member>
        <member name="M:App.Metrics.Apdex.IApdexProvider.Reset">
            <summary>
                Reset all values, in addition to the underlying reservoir.
            </summary>
        </member>
        <member name="M:App.Metrics.Apdex.IApdexProvider.Update(System.Int64)">
            <summary>
                Update the chosen <see cref="T:App.Metrics.ReservoirSampling.IReservoir">reservoir</see> with a new sample.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:App.Metrics.Apdex.IMeasureApdexMetrics">
            <summary>
                Provides access to the API allowing Apdex Metrics to be measured/recorded.
            </summary>
        </member>
        <member name="M:App.Metrics.Apdex.IMeasureApdexMetrics.Track(App.Metrics.Apdex.ApdexOptions,System.Action)">
            <summary>
                Records a <see cref="T:App.Metrics.Apdex.IApdexMetric" /> which measures the time taken to process an action, samples data and procuded
                an apdex score.
            </summary>
            <param name="options">The settings of the apdex metric that is being measured</param>
            <param name="action">The action to measure.</param>
        </member>
        <member name="M:App.Metrics.Apdex.IMeasureApdexMetrics.Track(App.Metrics.Apdex.ApdexOptions,App.Metrics.MetricTags,System.Action)">
            <summary>
                Records a <see cref="T:App.Metrics.Apdex.IApdexMetric" /> which measures the time taken to process an action, samples data and procuded
                an apdex score.
            </summary>
            <param name="options">The settings of the apdex metric that is being measured</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="action">The action to measure.</param>
        </member>
        <member name="M:App.Metrics.Apdex.IMeasureApdexMetrics.Track(App.Metrics.Apdex.ApdexOptions)">
            <summary>
                Records a <see cref="T:App.Metrics.Apdex.IApdexMetric" /> which measures the time taken to process an action, samples data and procuded
                an apdex score.
            </summary>
            <param name="options">The settings of the apdex metric that is being measured</param>
            <returns>
                A disposable context, when disposed records the time token to process the using block
            </returns>
        </member>
        <member name="M:App.Metrics.Apdex.IMeasureApdexMetrics.Track(App.Metrics.Apdex.ApdexOptions,App.Metrics.MetricTags)">
            <summary>
                Records a <see cref="T:App.Metrics.Apdex.IApdexMetric" /> which measures the time taken to process an action, samples data and procuded
                an apdex score.
            </summary>
            <param name="options">The settings of the apdex metric that is being measured</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <returns>
                A disposable context, when disposed records the time token to process the using block
            </returns>
        </member>
        <member name="F:App.Metrics.AppMetricsReservoirSamplingConstants.DefaultMinimumSampleWeight">
            <summary>
                Samples with weight of less than 10% of average should be discarded when rescaling
            </summary>
        </member>
        <member name="P:App.Metrics.IEnvOutputFormattingBuilder.Builder">
            <summary>
            Gets the <see cref="T:App.Metrics.IMetricsBuilder"/> where App Metrics is configured.
            </summary>
        </member>
        <member name="M:App.Metrics.IEnvOutputFormattingBuilder.Using(App.Metrics.Formatters.IEnvOutputFormatter)">
            <summary>
                <para>
                    Uses the specifed <see cref="T:App.Metrics.Formatters.IEnvOutputFormatter"/> as one of the available formatters when reporting environment information.
                </para>
                <para>
                    Multiple formatters can be used, in which case the <see cref="P:App.Metrics.IMetricsRoot.DefaultOutputEnvFormatter"/> will be set to the first configured formatter.
                </para>
            </summary>
            <param name="formatter">An <see cref="T:App.Metrics.Formatters.IEnvOutputFormatter"/> instance used to format environment information when reporting.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IEnvOutputFormattingBuilder.Using``1">
            <summary>
                <para>
                    Uses the specifed <see cref="T:App.Metrics.Formatters.IEnvOutputFormatter"/> as one of the available formatters when reporting environment information.
                </para>
                <para>
                    Multiple formatters can be used, in which case the <see cref="P:App.Metrics.IMetricsRoot.DefaultOutputEnvFormatter"/> will be set to the first configured formatter.
                </para>
            </summary>
            <typeparam name="TEvnOutputFormatter">An <see cref="T:App.Metrics.Formatters.IEnvOutputFormatter"/> type used to format environment information when reporting.</typeparam>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="P:App.Metrics.IMetricFieldsBuilder.Builder">
            <summary>
            Gets the <see cref="T:App.Metrics.IMetricsBuilder"/> where App Metrics is configured.
            </summary>
        </member>
        <member name="T:App.Metrics.IMetricsBuilder">
            <summary>
                An interface for configuring App Metrics services and options.
            </summary>
        </member>
        <member name="P:App.Metrics.IMetricsBuilder.Filter">
            <summary>
                Builder for configuring the <see cref="T:App.Metrics.Filters.IFilterMetrics" /> used to globally filter specific metrics when reporting.
            </summary>
        </member>
        <member name="P:App.Metrics.IMetricsBuilder.Configuration">
            <summary>
                Builder for configuring core App Metrics options.
            </summary>
        </member>
        <member name="P:App.Metrics.IMetricsBuilder.OutputEnvInfo">
            <summary>
                <para>
                    Builder for configuring environment information output formatting for reporting.
                </para>
                <para>
                    Multiple formatters can be used, in which case the <see cref="P:App.Metrics.IMetricsRoot.DefaultOutputEnvFormatter" /> will
                    be set to the first configured formatter.
                </para>
            </summary>
        </member>
        <member name="P:App.Metrics.IMetricsBuilder.OutputMetrics">
            <summary>
                <para>
                    Builder for configuring metrics output formatting for reporting.
                </para>
                <para>
                    Multiple formatters can be used, in which case the <see cref="P:App.Metrics.IMetricsRoot.DefaultOutputMetricsFormatter" />
                    will be set to the first configured formatter.
                </para>
            </summary>
        </member>
        <member name="P:App.Metrics.IMetricsBuilder.SampleWith">
            <summary>
                Builder for configuring the default reservoir sampling using an <see cref="T:App.Metrics.IMetricsBuilder" />. Reservoir sampling
                is used on specific metrics types. By default is set to "DefaultForwardDecayingReservoir".
            </summary>
        </member>
        <member name="P:App.Metrics.IMetricsBuilder.TimeWith">
            <summary>
                Builder for configuring the <see cref="T:App.Metrics.IClock" /> used for specific metrics types which requiring timing.
            </summary>
        </member>
        <member name="M:App.Metrics.IMetricsBuilder.Build">
            <summary>
                Builds an <see cref="T:App.Metrics.IMetrics" /> with the services configured via an <see cref="T:App.Metrics.IMetricsBuilder" />.
            </summary>
            <returns>An <see cref="T:App.Metrics.IMetricsRoot" /> with services configured via an <see cref="T:App.Metrics.IMetricsBuilder" />.</returns>
        </member>
        <member name="P:App.Metrics.IMetricsClockBuilder.Builder">
            <summary>
            Gets the <see cref="T:App.Metrics.IMetricsBuilder"/> where App Metrics is configured.
            </summary>
        </member>
        <member name="M:App.Metrics.IMetricsClockBuilder.Clock(App.Metrics.IClock)">
            <summary>
                <para>
                    Uses the specifed <see cref="T:App.Metrics.IClock"/> to time specific <see cref="T:App.Metrics.MetricType"/>s. e.g. <see cref="F:App.Metrics.MetricType.Timer"/>.
                </para>
                <para>
                    A single <see cref="T:App.Metrics.IClock"/> should be configured. The last <see cref="T:App.Metrics.IClock"/> configured will be used.
                </para>
            </summary>
            <param name="clock">An <see cref="T:App.Metrics.IClock"/> instance used for timing. e.g. "StopwatchClock"</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsClockBuilder.Clock``1">
            <summary>
                <para>
                    Uses the specifed <see cref="T:App.Metrics.IClock"/> to time specific <see cref="T:App.Metrics.MetricType"/>s. e.g. <see cref="F:App.Metrics.MetricType.Timer"/>.
                </para>
                <para>
                    A single <see cref="T:App.Metrics.IClock"/> should be configured. The last <see cref="T:App.Metrics.IClock"/> configured will be used.
                </para>
            </summary>
            <typeparam name="TClock">An <see cref="T:App.Metrics.IClock"/> type used for timing. e.g. "StopwatchClock"</typeparam>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsClockBuilder.StopwatchClock">
            <summary>
                <para>
                    Uses the "StopwatchClock" to time specific <see cref="T:App.Metrics.MetricType"/>s. e.g. <see cref="F:App.Metrics.MetricType.Timer"/>.
                </para>
                <para>
                    A single <see cref="T:App.Metrics.IClock"/> should be configured. The last <see cref="T:App.Metrics.IClock"/> configured will be used.
                </para>
            </summary>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsClockBuilder.SystemClock">
            <summary>
                <para>
                    Uses the "SystemClock" to time specific <see cref="T:App.Metrics.MetricType"/>s. e.g. <see cref="F:App.Metrics.MetricType.Timer"/>.
                </para>
                <para>
                    A single <see cref="T:App.Metrics.IClock"/> should be configured. The last <see cref="T:App.Metrics.IClock"/> configured will be used.
                </para>
            </summary>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="P:App.Metrics.IMetricsConfigurationBuilder.Builder">
            <summary>
            Gets the <see cref="T:App.Metrics.IMetricsBuilder"/> where App Metrics is configured.
            </summary>
        </member>
        <member name="M:App.Metrics.IMetricsConfigurationBuilder.Configure(App.Metrics.MetricsOptions)">
            <summary>
                    Uses the specifed <see cref="T:App.Metrics.MetricsOptions" /> instance for App Metrics core configuration.
            </summary>
            <param name="options">An <see cref="T:App.Metrics.MetricsOptions" /> instance used to configure core App Metrics options.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsConfigurationBuilder.Configure(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
                <para>
                    Uses the specifed key value pairs to configure an <see cref="T:App.Metrics.MetricsOptions" /> instance for App Metrics core
                    configuration.
                </para>
                <para>
                    Keys match the <see cref="T:App.Metrics.MetricsOptions" />s property names.
                </para>
            </summary>
            <param name="optionValues">Key value pairs for configuring App Metrics</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsConfigurationBuilder.Configure(App.Metrics.MetricsOptions,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
                <para>
                    Uses the specifed key value pairs to configure an <see cref="T:App.Metrics.MetricsOptions" /> instance for App Metrics core
                    configuration.
                </para>
                <para>
                    Keys match the <see cref="T:App.Metrics.MetricsOptions" />s property names. Any make key will override the
                    <see cref="T:App.Metrics.MetricsOptions" /> value configured.
                </para>
            </summary>
            <param name="options">An <see cref="T:App.Metrics.MetricsOptions" /> instance used to configure core App Metrics options.</param>
            <param name="optionValues">Key value pairs for configuring App Metrics</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsConfigurationBuilder.Configure(System.Action{App.Metrics.MetricsOptions})">
            <summary>
                <para>
                    Uses the specifed key value pairs to configure an <see cref="T:App.Metrics.MetricsOptions" /> instance for App Metrics core
                    configuration.
                </para>
                <para>
                    Keys match the <see cref="T:App.Metrics.MetricsOptions" />s property names. Any make key will override the
                    <see cref="T:App.Metrics.MetricsOptions" /> value configured.
                </para>
            </summary>
            <param name="setupAction">An <see cref="T:App.Metrics.MetricsOptions" /> setup action used to configure core App Metrics options.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsConfigurationBuilder.Extend(App.Metrics.MetricsOptions)">
            <summary>
                Merges the specifed <see cref="T:App.Metrics.MetricsOptions" /> instance with any previously configured options.
            </summary>
            <param name="options">An <see cref="T:App.Metrics.MetricsOptions" /> instance used to configure core App Metrics options.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsConfigurationBuilder.Extend(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
                Merges the specifed <see cref="T:App.Metrics.MetricsOptions" /> instance with any previously configured options.
            </summary>
            <param name="optionValues">An <see cref="T:System.Collections.Generic.KeyValuePair`2"/> used to configure core App Metrics options.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="P:App.Metrics.IMetricsFilterBuilder.Builder">
            <summary>
            Gets the <see cref="T:App.Metrics.IMetricsBuilder"/> where App Metrics is configured.
            </summary>
        </member>
        <member name="M:App.Metrics.IMetricsFilterBuilder.ByIncludingOnlyContext(System.String)">
            <summary>
                Filters metrics the specified context. Metrics can be grouped using a context label. The default context label used
                can be configured on <see cref="P:App.Metrics.MetricsOptions.DefaultContextLabel" />.
            </summary>
            <param name="context">The context label to filter by.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsFilterBuilder.ByIncludingOnlyTagKeyValues(App.Metrics.Filters.TagKeyValueFilter)">
            <summary>
                Filters metrics the specified tag key value pair. When fetched only metrics with a matching key and value will be returned.
            </summary>
            <param name="tagKeyValues">The tag key value pair to filter by.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsFilterBuilder.ByIncludingOnlyTags(System.String[])">
            <summary>
                Filters metrics the specified tag key. When fetched only metrics with a matching tag key.
            </summary>
            <param name="tagKeys">The tag to filter by.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsFilterBuilder.ByIncludingOnlyTypes(App.Metrics.MetricType[])">
            <summary>
                Filters metrisc the specified <see cref="T:App.Metrics.MetricType" />s.
            </summary>
            <param name="types">The <see cref="T:App.Metrics.MetricType" />s to include when fetching metrics.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsFilterBuilder.With(App.Metrics.Filters.IFilterMetrics)">
            <summary>
                <para>
                    Uses the specifed <see cref="T:App.Metrics.Filters.IFilterMetrics" /> to ftiler metrics when their values are fetched.
                </para>
                <para>
                    A single <see cref="T:App.Metrics.Filters.IFilterMetrics" /> should be configured. The last <see cref="T:App.Metrics.Filters.IFilterMetrics" /> configured
                    will be used.
                </para>
            </summary>
            <param name="filter">An <see cref="T:App.Metrics.Filters.IFilterMetrics" /> instance used for filtering metrics.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsFilterBuilder.With(System.Action{App.Metrics.Filters.IFilterMetrics})">
            <summary>
                <para>
                    Uses the specifed <see cref="T:App.Metrics.Filters.IFilterMetrics" /> setup <see cref="T:System.Action" /> to ftiler metrics when their values
                    are fetched.
                </para>
            </summary>
            <param name="setupAction">An <see cref="T:App.Metrics.Filters.IFilterMetrics" /> instance used for filtering metrics.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="P:App.Metrics.IMetricsOutputFormattingBuilder.Builder">
            <summary>
                Gets the <see cref="T:App.Metrics.IMetricsBuilder" /> where App Metrics is configured.
            </summary>
        </member>
        <member name="M:App.Metrics.IMetricsOutputFormattingBuilder.Using(App.Metrics.Formatters.IMetricsOutputFormatter)">
            <summary>
                <para>
                    Uses the specifed <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" /> as one of the available formatters when reporting
                    metric values.
                </para>
                <para>
                    Multiple formatters can be used, in which case the <see cref="P:App.Metrics.IMetricsRoot.DefaultOutputMetricsFormatter" />
                    will be set to the first configured formatter.
                </para>
            </summary>
            <param name="formatter">An <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" /> instance used to format metric values when reporting.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsOutputFormattingBuilder.Using``1(App.Metrics.MetricFields)">
            <summary>
                <para>
                    Uses the specifed <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" /> as one of the available formatters when reporting
                    metric values.
                </para>
                <para>
                    Multiple formatters can be used, in which case the <see cref="P:App.Metrics.IMetricsRoot.DefaultOutputMetricsFormatter" />
                    will be set to the first configured formatter.
                </para>
            </summary>
            <param name="fields">The metric fields to write as well as thier names.</param>
            <typeparam name="TMetricsOutputFormatter">
                An <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" /> type used to format metric values
                when reporting.
            </typeparam>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsOutputFormattingBuilder.Using(App.Metrics.Formatters.IMetricsOutputFormatter,System.Boolean)">
            <summary>
                <para>
                    Uses the specifed <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" /> as one of the available formatters when reporting
                    metric values.
                </para>
                <para>
                    Multiple formatters can be used, in which case the <see cref="P:App.Metrics.IMetricsRoot.DefaultOutputMetricsFormatter" />
                    will be set to the first configured formatter.
                </para>
            </summary>
            <param name="formatter">An <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" /> instance used to format metric values when reporting.</param>
            <param name="replaceExisting">
                If [true] replaces matching formatter type with the formatter instance, otherwise the
                existing formatter instance of matching type.
            </param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsOutputFormattingBuilder.Using``1(System.Boolean,App.Metrics.MetricFields)">
            <summary>
                <para>
                    Uses the specifed <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" /> as one of the available formatters when reporting
                    metric values.
                </para>
                <para>
                    Multiple formatters can be used, in which case the <see cref="P:App.Metrics.IMetricsRoot.DefaultOutputMetricsFormatter" />
                    will be set to the first configured formatter.
                </para>
            </summary>
            <typeparam name="TMetricsOutputFormatter">
                An <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" /> type used to format metric values
                when reporting.
            </typeparam>
            <param name="replaceExisting">
                If [true] replaces matching formatter type with the formatter instance, otherwise the
                existing formatter instance of matching type.
            </param>
            <param name="fields">The metric fields to write as well as thier names.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="P:App.Metrics.Builder.IMetricsReportingBuilder.Builder">
            <summary>
                Gets the <see cref="T:App.Metrics.IMetricsBuilder" /> where App Metrics is configured.
            </summary>
        </member>
        <member name="M:App.Metrics.Builder.IMetricsReportingBuilder.Using(App.Metrics.Reporting.IReportMetrics)">
            <summary>
                Reports metrics using the specifed <see cref="T:App.Metrics.Reporting.IReportMetrics" />.
            </summary>
            <param name="reporter">An <see cref="T:App.Metrics.Reporting.IReportMetrics" /> instance used to report metric values.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.Builder.IMetricsReportingBuilder.Using``1">
            <summary>
                Reports metrics using the specifed <see cref="T:App.Metrics.Reporting.IReportMetrics" />.
            </summary>
            <typeparam name="TReportMetrics">
                An <see cref="T:App.Metrics.Reporting.IReportMetrics" /> type used to report metric
                values.
            </typeparam>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.Builder.IMetricsReportingBuilder.Using``1(App.Metrics.Filters.IFilterMetrics)">
            <summary>
                Reports metrics using the specifed <see cref="T:App.Metrics.Reporting.IReportMetrics" />.
            </summary>
            <typeparam name="TReportMetrics">
                An <see cref="T:App.Metrics.Reporting.IReportMetrics" /> type used to report metric
                values.
            </typeparam>
            <param name="filter">
                An <see cref="T:App.Metrics.Filters.IFilterMetrics" /> instance used to filter metrics for this
                <see cref="T:App.Metrics.Reporting.IReportMetrics" />.
            </param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.Builder.IMetricsReportingBuilder.Using``1(App.Metrics.Formatters.IMetricsOutputFormatter)">
            <summary>
                Reports metrics using the specifed <see cref="T:App.Metrics.Reporting.IReportMetrics" />.
            </summary>
            <typeparam name="TReportMetrics">
                An <see cref="T:App.Metrics.Reporting.IReportMetrics" /> type used to report metric
                values.
            </typeparam>
            <param name="formatter">
                An <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" /> instance used to format metrics for this
                <see cref="T:App.Metrics.Reporting.IReportMetrics" />.
            </param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.Builder.IMetricsReportingBuilder.Using``1(App.Metrics.Filters.IFilterMetrics,System.TimeSpan)">
            <summary>
                Reports metrics using the specifed <see cref="T:App.Metrics.Reporting.IReportMetrics" />.
            </summary>
            <typeparam name="TReportMetrics">
                An <see cref="T:App.Metrics.Reporting.IReportMetrics" /> type used to report metric
                values.
            </typeparam>
            <param name="filter">
                An <see cref="T:App.Metrics.Filters.IFilterMetrics" /> instance used to filter metrics for this
                <see cref="T:App.Metrics.Reporting.IReportMetrics" />.
            </param>
            <param name="flushInterval">The <see cref="T:System.TimeSpan" /> interval used if intended to schedule metrics reporting.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.Builder.IMetricsReportingBuilder.Using``1(App.Metrics.Formatters.IMetricsOutputFormatter,App.Metrics.Filters.IFilterMetrics,System.TimeSpan)">
            <summary>
                Reports metrics using the specifed <see cref="T:App.Metrics.Reporting.IReportMetrics" />.
            </summary>
            <typeparam name="TReportMetrics">
                An <see cref="T:App.Metrics.Reporting.IReportMetrics" /> type used to report metric
                values.
            </typeparam>
            <param name="formatter">
                An <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" /> instance used to format metrics for this
                <see cref="T:App.Metrics.Reporting.IReportMetrics" />.
            </param>
            <param name="filter">
                An <see cref="T:App.Metrics.Filters.IFilterMetrics" /> instance used to filter metrics for this
                <see cref="T:App.Metrics.Reporting.IReportMetrics" />.
            </param>
            <param name="flushInterval">The <see cref="T:System.TimeSpan" /> interval used if intended to schedule metrics reporting.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.Builder.IMetricsReportingBuilder.Using``1(App.Metrics.Formatters.IMetricsOutputFormatter,System.TimeSpan)">
            <summary>
                Reports metrics using the specifed <see cref="T:App.Metrics.Reporting.IReportMetrics" />.
            </summary>
            <typeparam name="TReportMetrics">
                An <see cref="T:App.Metrics.Reporting.IReportMetrics" /> type used to report metric
                values.
            </typeparam>
            <param name="formatter">
                An <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" /> instance used to format metrics for this
                <see cref="T:App.Metrics.Reporting.IReportMetrics" />.
            </param>
            <param name="flushInterval">The <see cref="T:System.TimeSpan" /> interval used if intended to schedule metrics reporting.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.Builder.IMetricsReportingBuilder.Using``1(System.TimeSpan)">
            <summary>
                Reports metrics using the specifed <see cref="T:App.Metrics.Reporting.IReportMetrics" />.
            </summary>
            <typeparam name="TReportMetrics">
                An <see cref="T:App.Metrics.Reporting.IReportMetrics" /> type used to report metric
                values.
            </typeparam>
            <param name="flushInterval">The <see cref="T:System.TimeSpan" /> interval used if intended to schedule metrics reporting.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="P:App.Metrics.IMetricsReservoirSamplingBuilder.Builder">
            <summary>
            Gets the <see cref="T:App.Metrics.IMetricsBuilder"/> where App Metrics is configured.
            </summary>
        </member>
        <member name="M:App.Metrics.IMetricsReservoirSamplingBuilder.AlgorithmR(System.Int32)">
            <summary>
                <para>
                    Uses the "DefaultAlgorithmRReservoir" reservoir for <see cref="T:App.Metrics.MetricType" />s which require
                    sampling.
                </para>
                <para>
                    A histogram with a uniform reservoir produces
                    <see href="https://en.wikipedia.org/wiki/Quantile">quantiles</see>
                    which are valid for the entirely of the histogram’s lifetime.
                </para>
                <para>
                    This sampling reservoir can be used when you are interested in long-term measurements, it does not offer a
                    sence of recency.
                </para>
                <para>
                    All samples are equally likely to be evicted when the reservoir is at full capacity.
                </para>
            </summary>
            <param name="sampleSize">The number of samples to keep in the sampling reservoir.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsReservoirSamplingBuilder.AlgorithmR">
            <summary>
                <para>
                    Uses the "DefaultAlgorithmRReservoir" reservoir for <see cref="T:App.Metrics.MetricType" />s which require
                    sampling.
                </para>
                <para>
                    A histogram with a uniform reservoir produces
                    <see href="https://en.wikipedia.org/wiki/Quantile">quantiles</see>
                    which are valid for the entirely of the histogram’s lifetime.
                </para>
                <para>
                    This sampling reservoir can be used when you are interested in long-term measurements, it does not offer a
                    sence of recency.
                </para>
                <para>
                    All samples are equally likely to be evicted when the reservoir is at full capacity.
                </para>
            </summary>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsReservoirSamplingBuilder.ForwardDecaying(System.Int32,System.Double)">
            <summary>
                <para>
                    Uses the "DefaultForwardDecayingReservoir" reservoir for <see cref="T:App.Metrics.MetricType" />s which
                    require sampling.
                    A histogram with an exponentially decaying reservoir produces
                    <see href="https://en.wikipedia.org/wiki/Quantile">quantiles</see> which are representative of (roughly) the
                    last five minutes of data.
                </para>
                <para>
                    The reservoir is produced by using a
                    <see href="http://dimacs.rutgers.edu/~graham/pubs/papers/fwddecay.pdf">forward-decaying reservoir</see> with an
                    exponential weighty towards recent data unlike a Uniform Reservoir which does not provide a sense of recency.
                </para>
                <para>
                    This sampling reservoir can be used when you are interested in recent changes to the distribution of data
                    rather than a median on the lifetime of the histgram.
                </para>
            </summary>
            <param name="sampleSize">The number of samples to keep in the sampling reservoir.</param>
            <param name="alpha">
                The alpha value, e.g 0.015 will heavily biases the reservoir to the past 5 mins of measurements. The higher the
                value the more biased the reservoir will be towards newer values.
            </param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsReservoirSamplingBuilder.ForwardDecaying(System.Int32,System.Double,System.Double)">
            <summary>
                <para>
                    Uses the "DefaultForwardDecayingReservoir" reservoir for <see cref="T:App.Metrics.MetricType" />s which
                    require sampling.
                    A histogram with an exponentially decaying reservoir produces
                    <see href="https://en.wikipedia.org/wiki/Quantile">quantiles</see> which are representative of (roughly) the
                    last five minutes of data.
                </para>
                <para>
                    The reservoir is produced by using a
                    <see href="http://dimacs.rutgers.edu/~graham/pubs/papers/fwddecay.pdf">forward-decaying reservoir</see> with an
                    exponential weighty towards recent data unlike a Uniform Reservoir which does not provide a sense of recency.
                </para>
                <para>
                    This sampling reservoir can be used when you are interested in recent changes to the distribution of data
                    rather than a median on the lifetime of the histgram.
                </para>
            </summary>
            <param name="sampleSize">The number of samples to keep in the sampling reservoir.</param>
            <param name="alpha">
                The alpha value, e.g 0.015 will heavily biases the reservoir to the past 5 mins of measurements. The higher the
                value the more biased the reservoir will be towards newer values.
            </param>
            <param name="minimumSampleWeight">
                Minimum weight required for a sample to be retained during reservoir rescaling. Samples with weights less than this value will be discarded.
                This behavior is useful if there are longer periods of very low or no activity. Default value is zero, which preserves all samples during rescaling.
            </param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsReservoirSamplingBuilder.ForwardDecaying(System.Int32,System.Double,System.Double,App.Metrics.IClock)">
            <summary>
                <para>
                    Uses the "DefaultForwardDecayingReservoir" reservoir for <see cref="T:App.Metrics.MetricType" />s which
                    require sampling.
                    A histogram with an exponentially decaying reservoir produces
                    <see href="https://en.wikipedia.org/wiki/Quantile">quantiles</see> which are representative of (roughly) the
                    last five minutes of data.
                </para>
                <para>
                    The reservoir is produced by using a
                    <see href="http://dimacs.rutgers.edu/~graham/pubs/papers/fwddecay.pdf">forward-decaying reservoir</see> with an
                    exponential weighty towards recent data unlike a Uniform Reservoir which does not provide a sense of recency.
                </para>
                <para>
                    This sampling reservoir can be used when you are interested in recent changes to the distribution of data
                    rather than a median on the lifetime of the histgram.
                </para>
            </summary>
            <param name="sampleSize">The number of samples to keep in the sampling reservoir.</param>
            <param name="alpha">
                The alpha value, e.g 0.015 will heavily biases the reservoir to the past 5 mins of measurements. The higher the
                value the more biased the reservoir will be towards newer values.
            </param>
            <param name="minimumSampleWeight">
                Minimum weight required for a sample to be retained during reservoir rescaling. Samples with weights less than this value will be discarded.
                This behavior is useful if there are longer periods of very low or no activity. Default value is zero, which preserves all samples during rescaling.
            </param>
            <param name="clock">The <see cref="T:App.Metrics.IClock" /> used for timing.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsReservoirSamplingBuilder.ForwardDecaying(System.Int32,System.Double,System.Double,App.Metrics.IClock,App.Metrics.Scheduling.IReservoirRescaleScheduler)">
            <summary>
                <para>
                    Uses the "DefaultForwardDecayingReservoir" reservoir for <see cref="T:App.Metrics.MetricType" />s which
                    require sampling.
                    A histogram with an exponentially decaying reservoir produces
                    <see href="https://en.wikipedia.org/wiki/Quantile">quantiles</see> which are representative of (roughly) the
                    last five minutes of data.
                </para>
                <para>
                    The reservoir is produced by using a
                    <see href="http://dimacs.rutgers.edu/~graham/pubs/papers/fwddecay.pdf">forward-decaying reservoir</see> with an
                    exponential weighty towards recent data unlike a Uniform Reservoir which does not provide a sense of recency.
                </para>
                <para>
                    This sampling reservoir can be used when you are interested in recent changes to the distribution of data
                    rather than a median on the lifetime of the histgram.
                </para>
            </summary>
            <param name="sampleSize">The number of samples to keep in the sampling reservoir.</param>
            <param name="alpha">
                The alpha value, e.g 0.015 will heavily biases the reservoir to the past 5 mins of measurements. The higher the
                value the more biased the reservoir will be towards newer values.
            </param>
            <param name="minimumSampleWeight">
                Minimum weight required for a sample to be retained during reservoir rescaling. Samples with weights less than this value will be discarded.
                This behavior is useful if there are longer periods of very low or no activity. Default value is zero, which preserves all samples during rescaling.
            </param>
            <param name="clock">The <see cref="T:App.Metrics.IClock" /> used for timing.</param>
            <param name="rescaleScheduler">The <see cref="T:App.Metrics.Scheduling.IReservoirRescaleScheduler" /> used to rescale the reservoir.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsReservoirSamplingBuilder.ForwardDecaying(System.Double,System.TimeSpan)">
            <summary>
                <para>
                    Uses the "DefaultForwardDecayingReservoir" reservoir for <see cref="T:App.Metrics.MetricType" />s which
                    require sampling.
                    A histogram with an exponentially decaying reservoir produces
                    <see href="https://en.wikipedia.org/wiki/Quantile">quantiles</see> which are representative of (roughly) the
                    last five minutes of data.
                </para>
                <para>
                    The reservoir is produced by using a
                    <see href="http://dimacs.rutgers.edu/~graham/pubs/papers/fwddecay.pdf">forward-decaying reservoir</see> with an
                    exponential weighty towards recent data unlike a Uniform Reservoir which does not provide a sense of recency.
                </para>
                <para>
                    This samling reservoir can be used when you are interested in recent changes to the distribution of data
                    rather than a median on the lifetime of the histgram.
                </para>
            </summary>
            <param name="alpha">
                The alpha value, e.g 0.015 will heavily biases the reservoir to the past 5 mins of measurements. The higher the
                value the more biased the reservoir will be towards newer values.
            </param>
            <param name="rescalePeriod">The interval at which the reservoir will be rescaled.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsReservoirSamplingBuilder.ForwardDecaying(System.TimeSpan)">
            <summary>
                <para>
                    Uses the "DefaultForwardDecayingReservoir" reservoir for <see cref="T:App.Metrics.MetricType" />s which
                    require sampling.
                    A histogram with an exponentially decaying reservoir produces
                    <see href="https://en.wikipedia.org/wiki/Quantile">quantiles</see> which are representative of (roughly) the
                    last five minutes of data.
                </para>
                <para>
                    The reservoir is produced by using a
                    <see href="http://dimacs.rutgers.edu/~graham/pubs/papers/fwddecay.pdf">forward-decaying reservoir</see> with an
                    exponential weighty towards recent data unlike a Uniform Reservoir which does not provide a sense of recency.
                </para>
                <para>
                    This samling reservoir can be used when you are interested in recent changes to the distribution of data
                    rather than a median on the lifetime of the histgram.
                </para>
            </summary>
            <param name="rescalePeriod">The interval at which the reservoir will be rescaled.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsReservoirSamplingBuilder.ForwardDecaying">
            <summary>
                <para>
                    Uses the "DefaultForwardDecayingReservoir" reservoir for <see cref="T:App.Metrics.MetricType" />s which
                    require sampling.
                    A histogram with an exponentially decaying reservoir produces
                    <see href="https://en.wikipedia.org/wiki/Quantile">quantiles</see> which are representative of (roughly) the
                    last five minutes of data.
                </para>
                <para>
                    The reservoir is produced by using a
                    <see href="http://dimacs.rutgers.edu/~graham/pubs/papers/fwddecay.pdf">forward-decaying reservoir</see> with an
                    exponential weighty towards recent data unlike a Uniform Reservoir which does not provide a sense of recency.
                </para>
                <para>
                    This samling reservoir can be used when you are interested in recent changes to the distribution of data
                    rather than a median on the lifetime of the histgram.
                </para>
            </summary>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsReservoirSamplingBuilder.Reservoir(System.Func{App.Metrics.ReservoirSampling.IReservoir})">
            <summary>
                Uses the specifed <see cref="T:App.Metrics.ReservoirSampling.IReservoir" /> for <see cref="T:App.Metrics.MetricType" />s which require sampling.
            </summary>
            <param name="reservoirBuilder">
                An <see cref="T:App.Metrics.ReservoirSampling.IReservoir" /> function used to sample metrics.
            </param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsReservoirSamplingBuilder.Reservoir``1">
            <summary>
                Uses the specifed <see cref="T:App.Metrics.ReservoirSampling.IReservoir" /> for <see cref="T:App.Metrics.MetricType" />s which require sampling.
            </summary>
            <typeparam name="TReservoir">An <see cref="T:App.Metrics.ReservoirSampling.IReservoir" /> type used to sample metrics.</typeparam>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsReservoirSamplingBuilder.SlidingWindow(System.Int32)">
            <summary>
                Uses "DefaultSlidingWindowReservoir" reservoir sample for <see cref="T:App.Metrics.MetricType" />s which
                require sampling. A Reservoir implementation backed by a sliding window that stores only the measurements made in
                the last N seconds (or other time unit).
            </summary>
            <param name="sampleSize">The number of samples to keep in the sampling reservoir.</param>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.IMetricsReservoirSamplingBuilder.SlidingWindow">
            <summary>
                Uses "DefaultSlidingWindowReservoir" reservoir sample for <see cref="T:App.Metrics.MetricType" />s which
                require sampling. A Reservoir implementation backed by a sliding window that stores only the measurements made in
                the last N seconds (or other time unit).
            </summary>
            <returns>
                An <see cref="T:App.Metrics.IMetricsBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="T:App.Metrics.Counter.CounterOptions">
            <summary>
                Configuration of a <see cref="T:App.Metrics.Counter.ICounter" /> that will be measured
            </summary>
            <seealso cref="T:App.Metrics.MetricValueOptionsBase" />
        </member>
        <member name="P:App.Metrics.Counter.CounterOptions.ReportItemPercentages">
            <summary>
                Gets or sets a value indicating whether the counter's set items should be reported. Defaults to <c>true</c>.
            </summary>
            <value>
                <c>true</c> if [report item percentages]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:App.Metrics.Counter.CounterOptions.ReportSetItems">
            <summary>
                Gets or sets a value indicating whether or not to report the counter's set items. Defaults to <c>true</c>.
            </summary>
            <value>
                <c>true</c> if [report set items]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:App.Metrics.Counter.CounterOptions.ResetOnReporting">
            <summary>
                Gets or sets a value indicating whether the counter should be reset when it is reported, otherwise counts are
                cummulative. Note: If using more than one reporter, the count will be reset for the first reporter which sends
                the value. Defaults to <c>false</c>.
            </summary>
            <value>
                <c>true</c> if [reset on reporting]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:App.Metrics.Counter.CounterValue.Count">
            <summary>
                Gets the total count of the counter instance.
            </summary>
            <value>
                The count.
            </value>
        </member>
        <member name="P:App.Metrics.Counter.CounterValue.Items">
            <summary>
                Gets counters for each registered set item.
            </summary>
            <value>
                The counter's set items.
            </value>
        </member>
        <member name="P:App.Metrics.Counter.CounterValue.SetItem.Count">
            <summary>
                Gets the specific count for this item.
            </summary>
            <value>
                The count.
            </value>
        </member>
        <member name="P:App.Metrics.Counter.CounterValue.SetItem.Item">
            <summary>
                Gets the registered item name.
            </summary>
            <value>
                The item.
            </value>
        </member>
        <member name="P:App.Metrics.Counter.CounterValue.SetItem.Percent">
            <summary>
                Gets the percent of this item from the total count.
            </summary>
            <value>
                The percent.
            </value>
        </member>
        <member name="T:App.Metrics.Counter.CounterValueSource">
            <summary>
                Combines the value for a counter with the defined unit for the value.
            </summary>
        </member>
        <member name="M:App.Metrics.Counter.CounterValueSource.#ctor(System.String,App.Metrics.IMetricValueProvider{App.Metrics.Counter.CounterValue},App.Metrics.Unit,App.Metrics.MetricTags,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Counter.CounterValueSource" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="unit">The unit.</param>
            <param name="tags">The tags.</param>
            <param name="resetOnReporting">if set to <c>true</c> [reset on reporting]. Defaults to <c>false</c>.</param>
            <param name="reportItemPercentages">if set to <c>true</c> [report item percentages]. Defaults to <c>true</c></param>
            <param name="reportSetItems">if set to <c>true</c> [report set items]. Defaults to <c>true</c></param>
        </member>
        <member name="T:App.Metrics.Counter.ICounter">
            <summary>
                A counter is a simple incrementing and decrementing 64-bit integer.
                Each operation can also be applied to a item from a set and the counter will store individual count for each set
                item.
            </summary>
        </member>
        <member name="M:App.Metrics.Counter.ICounter.Decrement(System.String)">
            <summary>
                Decrement the counter value for an item from a set. The counter value is decremented but the counter will also keep
                track and decrement another counter associated with the <paramref name="setItem" />.
                The counter value will contain the total count and for each item the specific count and percentage of total count.
            </summary>
            <param name="setItem">Item from the set for which to increment the counter value.</param>
        </member>
        <member name="M:App.Metrics.Counter.ICounter.Decrement(System.Int64)">
            <summary>
                Decrement the counter value with a specified amount.
            </summary>
            <param name="amount">The amount with which to increment the counter.</param>
        </member>
        <member name="M:App.Metrics.Counter.ICounter.Decrement(System.String,System.Int64)">
            <summary>
                Decrement the counter value with a specified amount for an item from a set.
                The counter value is decremented but the counter will also keep track and decrement another counter associated with
                the <paramref name="setItem" />.
                The counter value will contain the total count and for each item the specific count and percentage of total count.
            </summary>
            <param name="setItem">Item from the set for which to increment the counter value.</param>
            <param name="amount">The amount with which to increment the counter.</param>
        </member>
        <member name="M:App.Metrics.Counter.ICounter.Increment">
            <summary>
                Increment the counter value.
            </summary>
        </member>
        <member name="M:App.Metrics.Counter.ICounter.Increment(System.String)">
            <summary>
                Increment the counter value for an item from a set.
                The counter value is incremented but the counter will also keep track and increment another counter associated with
                the <paramref name="setItem" />.
                The counter value will contain the total count and for each item the specific count and percentage of total count.
            </summary>
            <param name="setItem">Item from the set for which to increment the counter value.</param>
        </member>
        <member name="M:App.Metrics.Counter.ICounter.Increment(System.Int64)">
            <summary>
                Increment the counter value with a specified amount.
            </summary>
            <param name="amount">The amount with which to increment the counter.</param>
        </member>
        <member name="M:App.Metrics.Counter.ICounter.Increment(System.String,System.Int64)">
            <summary>
                Increment the counter value with a specified amount for an item from a set.
                The counter value is incremented but the counter will also keep track and increment another counter associated with
                the <paramref name="setItem" />.
                The counter value will contain the total count and for each item the specific count and percentage of total count.
            </summary>
            <param name="setItem">Item from the set for which to increment the counter value.</param>
            <param name="amount">The amount with which to increment the counter.</param>
        </member>
        <member name="T:App.Metrics.Counter.ICounterMetric">
            <summary>
                Provides access to a counter metric implementation
            </summary>
            <seealso cref="T:App.Metrics.Counter.ICounter" />
            <seealso cref="T:App.Metrics.IMetricValueProvider`1" />
        </member>
        <member name="T:App.Metrics.Counter.IMeasureCounterMetrics">
            <summary>
                Provides access to the API allowing Counter Metrics to be measured/recorded.
            </summary>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Decrement(App.Metrics.Counter.CounterOptions)">
            <summary>
                Decrements a <see cref="T:App.Metrics.Counter.ICounterMetric" />
            </summary>
            <param name="options">The details of the counter that is being decremented</param>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Decrement(App.Metrics.Counter.CounterOptions,App.Metrics.MetricTags)">
            <summary>
                Decrements a <see cref="T:App.Metrics.Counter.ICounterMetric" />
            </summary>
            <param name="options">The details of the counter that is being decremented</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Decrement(App.Metrics.Counter.CounterOptions,System.Int64)">
            <summary>
                Decrements a <see cref="T:App.Metrics.Counter.ICounterMetric" /> by the specificed amount
            </summary>
            <param name="options">The details of the counter that is being decremented</param>
            <param name="amount">The amount to decrement the counter.</param>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Decrement(App.Metrics.Counter.CounterOptions,App.Metrics.MetricTags,System.Int64)">
            <summary>
                Decrements a <see cref="T:App.Metrics.Counter.ICounterMetric" /> by the specificed amount
            </summary>
            <param name="options">The details of the counter that is being decremented</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="amount">The amount to decrement the counter.</param>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Decrement(App.Metrics.Counter.CounterOptions,System.String)">
            <summary>
                Decrements the specified options.
            </summary>
            <param name="options">The options.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Decrement(App.Metrics.Counter.CounterOptions,App.Metrics.MetricTags,System.String)">
            <summary>
                Decrements the specified options.
            </summary>
            <param name="options">The options.</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="item">The item.</param>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Decrement(App.Metrics.Counter.CounterOptions,System.Int64,System.String)">
            <summary>
                Decrements the specified options.
            </summary>
            <param name="options">The options.</param>
            <param name="amount">The amount.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Decrement(App.Metrics.Counter.CounterOptions,App.Metrics.MetricTags,System.Int64,System.String)">
            <summary>
                Decrements the specified options.
            </summary>
            <param name="options">The options.</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="amount">The amount.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Decrement(App.Metrics.Counter.CounterOptions,App.Metrics.MetricSetItem)">
            <summary>
                Decrements a <see cref="T:App.Metrics.Counter.ICounterMetric" /> as well as the specified item within the counter's set
            </summary>
            <remarks>
                The counter value is decremented as is the specified <see cref="T:App.Metrics.MetricSetItem" />'s counter within the set.
                The <see cref="T:App.Metrics.MetricSetItem" /> within the set will also keep track of it's percentage from the total sets count.
            </remarks>
            <param name="options">The details of the counter that is being decremented</param>
            <param name="setItem">The item within the set to decrement.</param>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Decrement(App.Metrics.Counter.CounterOptions,System.Int64,App.Metrics.MetricSetItem)">
            <summary>
                Decrements a <see cref="T:App.Metrics.Counter.ICounterMetric" /> by the specified amount as well as the specified item within the
                counter's set
            </summary>
            <param name="options">The details of the counter that is being decremented</param>
            <param name="amount">The amount to decrement the counter.</param>
            <param name="setItem">The item within the set to decrement.</param>
            <remarks>
                The counter value is decremented as is the specified <see cref="T:App.Metrics.MetricSetItem" />'s counter within the set.
                The <see cref="T:App.Metrics.MetricSetItem" /> within the set will also keep track of it's percentage from the total sets count.
            </remarks>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Increment(App.Metrics.Counter.CounterOptions)">
            <summary>
                Increments a <see cref="T:App.Metrics.Counter.ICounterMetric" />
            </summary>
            <param name="options">The details of the counter that is being incremented</param>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Increment(App.Metrics.Counter.CounterOptions,App.Metrics.MetricTags)">
            <summary>
                Increments a <see cref="T:App.Metrics.Counter.ICounterMetric" />
            </summary>
            <param name="options">The details of the counter that is being incremented</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Increment(App.Metrics.Counter.CounterOptions,System.Int64)">
            <summary>
                Increments a <see cref="T:App.Metrics.Counter.ICounterMetric" />
            </summary>
            <param name="options">The details of the counter that is being incremented</param>
            <param name="amount">The amount to decrement the counter.</param>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Increment(App.Metrics.Counter.CounterOptions,App.Metrics.MetricTags,System.Int64)">
            <summary>
                Increments a <see cref="T:App.Metrics.Counter.ICounterMetric" />
            </summary>
            <param name="options">The details of the counter that is being incremented</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="amount">The amount to decrement the counter.</param>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Increment(App.Metrics.Counter.CounterOptions,System.String)">
            <summary>
                Increments a <see cref="T:App.Metrics.Counter.ICounterMetric" /> as well as the specified item within the counter's set
            </summary>
            <remarks>
                The counter value is incremented as is the specified <see cref="T:App.Metrics.MetricTags" />'s counter within the set.
                The <see cref="T:App.Metrics.MetricTags" /> within the set will also keep track of it's percentage from the total sets count.
            </remarks>
            <param name="options">The details of the counter that is being incremented</param>
            <param name="item">The item within the set to increment.</param>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Increment(App.Metrics.Counter.CounterOptions,App.Metrics.MetricTags,System.String)">
            <summary>
                Increments a <see cref="T:App.Metrics.Counter.ICounterMetric" /> as well as the specified item within the counter's set
            </summary>
            <param name="options">The details of the counter that is being incremented</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="item">The item within the set to increment.</param>
            <remarks>
                The counter value is incremented as is the specified <see cref="T:App.Metrics.MetricTags" />'s counter within the set.
                The <see cref="T:App.Metrics.MetricTags" /> within the set will also keep track of it's percentage from the total sets count.
            </remarks>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Increment(App.Metrics.Counter.CounterOptions,App.Metrics.MetricTags,System.Int64,System.String)">
            <summary>
                Increments a <see cref="T:App.Metrics.Counter.ICounterMetric" /> as well as the specified item within the counter's set
            </summary>
            <param name="options">The details of the counter that is being incremented</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="amount">The amount to increment the counter.</param>
            <param name="item">The item within the set to increment.</param>
            <remarks>
                The counter value is incremented as is the specified <see cref="T:App.Metrics.MetricTags" />'s counter within the set.
                The <see cref="T:App.Metrics.MetricTags" /> within the set will also keep track of it's percentage from the total sets count.
            </remarks>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Increment(App.Metrics.Counter.CounterOptions,System.Int64,System.String)">
            <summary>
                Increments a <see cref="T:App.Metrics.Counter.ICounterMetric" /> as well as the specified item within the counter's set
            </summary>
            <remarks>
                The counter value is incremented as is the specified <see cref="T:App.Metrics.MetricTags" />'s counter within the set.
                The <see cref="T:App.Metrics.MetricTags" /> within the set will also keep track of it's percentage from the total sets count.
            </remarks>
            <param name="options">The details of the counter that is being incremented</param>
            <param name="amount">The amount to increment the counter.</param>
            <param name="item">The item within the set to increment.</param>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Increment(App.Metrics.Counter.CounterOptions,App.Metrics.MetricSetItem)">
            <summary>
                Increment a <see cref="T:App.Metrics.Counter.ICounterMetric" /> as well as the specified item within the counter's set
            </summary>
            <remarks>
                The counter value is incremented as is the specified <see cref="T:App.Metrics.MetricSetItem" />'s counter within the set.
                The <see cref="T:App.Metrics.MetricSetItem" /> within the set will also keep track of it's percentage from the total sets count.
            </remarks>
            <param name="options">The details of the counter that is being incremented</param>
            <param name="setItem">The item within the set to increment.</param>
        </member>
        <member name="M:App.Metrics.Counter.IMeasureCounterMetrics.Increment(App.Metrics.Counter.CounterOptions,System.Int64,App.Metrics.MetricSetItem)">
            <summary>
                Increment a <see cref="T:App.Metrics.Counter.ICounterMetric" /> by the specified amount as well as the specified item within the
                counter's set
            </summary>
            <param name="options">The details of the counter that is being decremented</param>
            <param name="amount">The amount to increment the counter.</param>
            <param name="setItem">The item within the set to increment.</param>
            <remarks>
                The counter value is incremented as is the specified <see cref="T:App.Metrics.MetricSetItem" />'s counter within the set.
                The <see cref="T:App.Metrics.MetricSetItem" /> within the set will also keep track of it's percentage from the total sets count.
            </remarks>
        </member>
        <member name="M:App.Metrics.Filters.IFilterMetrics.IsApdexMatch(App.Metrics.Apdex.ApdexValueSource)">
            <summary>
                Determines whether the specified apdex is match.
            </summary>
            <param name="apdex">The apdex.</param>
            <returns>True if the metric type is an apdex, the name matches and tags match</returns>
        </member>
        <member name="M:App.Metrics.Filters.IFilterMetrics.IsCounterMatch(App.Metrics.Counter.CounterValueSource)">
            <summary>
                Determines whether the specified counter is match.
            </summary>
            <param name="counter">The counter.</param>
            <returns>True if the metric type is a counter, the name matches and tags match</returns>
        </member>
        <member name="M:App.Metrics.Filters.IFilterMetrics.IsGaugeMatch(App.Metrics.Gauge.GaugeValueSource)">
            <summary>
                Determines whether the specified gauge is match.
            </summary>
            <param name="gauge">The gauge.</param>
            <returns>True if the metric type is a gauge, the name matches and tags match</returns>
        </member>
        <member name="M:App.Metrics.Filters.IFilterMetrics.IsHistogramMatch(App.Metrics.Histogram.HistogramValueSource)">
            <summary>
                Determines whether the specified histogram is match.
            </summary>
            <param name="histogram">The histogram.</param>
            <returns>True if the metric type is a histogram, the name matches and tags match</returns>
        </member>
        <member name="M:App.Metrics.Filters.IFilterMetrics.IsContextMatch(System.String)">
            <summary>
                Determines whether the specified context is match.
            </summary>
            <param name="context">The context.</param>
            <returns>true if the context matches</returns>
        </member>
        <member name="M:App.Metrics.Filters.IFilterMetrics.IsMeterMatch(App.Metrics.Meter.MeterValueSource)">
            <summary>
                Determines whether the specified meter is match.
            </summary>
            <param name="meter">The meter.</param>
            <returns>True if the metric type is a meter, the name matches and tags match</returns>
        </member>
        <member name="M:App.Metrics.Filters.IFilterMetrics.IsTimerMatch(App.Metrics.Timer.TimerValueSource)">
            <summary>
                Determines whether the specified timer is match.
            </summary>
            <param name="timer">The timer.</param>
            <returns>True if the metric type is a timer, the name matches and tags match</returns>
        </member>
        <member name="M:App.Metrics.Filters.IFilterMetrics.WhereContext(System.Predicate{System.String})">
            <summary>
                Filters metrics where the specified predicate on the metrics context is <c>true</c>
            </summary>
            <param name="condition">The predicate on the context to filter on.</param>
            <returns>A filter where the metric context should match</returns>
        </member>
        <member name="M:App.Metrics.Filters.IFilterMetrics.WhereContext(System.String)">
            <summary>
                Filters metrics where the specified context matches
            </summary>
            <param name="context">The metrics context to filter on.</param>
            <returns>A filter where the metric context should match</returns>
        </member>
        <member name="M:App.Metrics.Filters.IFilterMetrics.WhereName(System.String)">
            <summary>
                Filters metrics where the specified predicate on the metric name is <c>true</c>
            </summary>
            <param name="name">The metric name to filter on.</param>
            <returns>A filter where the metric name should match</returns>
        </member>
        <member name="M:App.Metrics.Filters.IFilterMetrics.WhereName(System.Predicate{System.String})">
            <summary>
                Filters metrics where the specified predicate on the metric name is <c>true</c>
            </summary>
            <param name="condition">The predicate on the metric name to filter on.</param>
            <returns>A filter where the metric name should match</returns>
        </member>
        <member name="M:App.Metrics.Filters.IFilterMetrics.WhereNameStartsWith(System.String)">
            <summary>
                Filters metrics where the metric name starts with the specified name
            </summary>
            <param name="name">The metrics name to filter on.</param>
            <returns>A filter where the metric name starts with the specified name</returns>
        </member>
        <member name="M:App.Metrics.Filters.IFilterMetrics.WhereTaggedWithKey(System.String[])">
            <summary>
                Filters metrics where the metrics contain the specified tags keys
            </summary>
            <param name="tagKeys">The metrics tag keys to filter on.</param>
            <returns>A filter where the metric tags keys should match</returns>
        </member>
        <member name="M:App.Metrics.Filters.IFilterMetrics.WhereTaggedWithKeyValue(App.Metrics.Filters.TagKeyValueFilter)">
            <summary>
                Filters metrics where the metrics contain the specified tags key/value pair
            </summary>
            <param name="tags">The metrics tag key/values to filter on.</param>
            <returns>A filter where the metric tags key and value should match</returns>
        </member>
        <member name="M:App.Metrics.Filters.IFilterMetrics.WhereType(App.Metrics.MetricType[])">
            <summary>
                Filters metrics by matching types
            </summary>
            <param name="types">The metric types to filter on.</param>
            <returns>A filter where metrics types should match</returns>
        </member>
        <member name="P:App.Metrics.Formatters.IEnvOutputFormatter.MediaType">
            <summary>
                Gets the <see cref="T:App.Metrics.Formatters.MetricsMediaTypeValue" /> of the formatter.
            </summary>
        </member>
        <member name="M:App.Metrics.Formatters.IEnvOutputFormatter.WriteAsync(System.IO.Stream,App.Metrics.Infrastructure.EnvironmentInfo,System.Threading.CancellationToken)">
            <summary>
                Writes the specified <see cref="T:App.Metrics.Infrastructure.EnvironmentInfo" /> to the given stream.
            </summary>
            <param name="output">The output stream of the formatted <see cref="T:App.Metrics.Infrastructure.EnvironmentInfo" /></param>
            .
            <param name="environmentInfo">The <see cref="T:App.Metrics.Infrastructure.EnvironmentInfo" /> being written.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous write operation.</returns>
        </member>
        <member name="P:App.Metrics.Formatters.IMetricsOutputFormatter.MediaType">
            <summary>
                Gets the <see cref="T:App.Metrics.Formatters.MetricsMediaTypeValue" /> of the formatter.
            </summary>
        </member>
        <member name="M:App.Metrics.Formatters.IMetricsOutputFormatter.WriteAsync(System.IO.Stream,App.Metrics.MetricsDataValueSource,System.Threading.CancellationToken)">
            <summary>
                Writes the specified <see cref="T:App.Metrics.MetricsDataValueSource" /> to the given stream.
            </summary>
            <param name="output">The output stream of the formatted <see cref="T:App.Metrics.MetricsDataValueSource" /></param>
            .
            <param name="metricsData">The <see cref="T:App.Metrics.MetricsDataValueSource" /> being written.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous write operation.</returns>
        </member>
        <member name="T:App.Metrics.Gauge.GaugeOptions">
            <summary>
                Configuration of an <see cref="T:App.Metrics.Gauge.IGaugeMetric" /> that will be measured
            </summary>
            <seealso cref="T:App.Metrics.MetricValueOptionsBase" />
        </member>
        <member name="T:App.Metrics.Gauge.GaugeValueSource">
            <summary>
                Combines the value of a gauge (a double) with the defined unit for the value.
            </summary>
        </member>
        <member name="T:App.Metrics.Gauge.IGaugeMetric">
            <summary>
                Provides access to a gauge metric implementation e.g. App.Metrics.FunctionGauge, App.Metrics.HitRatioGauge,
                App.Metrics.DerivedGauge, App.Metrics.HitPercentageGauge, App.Metrics.PercentageGauge
                Allows custom gauges to be implemented
            </summary>
            <seealso cref="T:App.Metrics.Gauge.IGaugeMetric" />
        </member>
        <member name="T:App.Metrics.Gauge.IMeasureGaugeMetrics">
            <summary>
                Provides access to the API allowing Gauge Metrics to be measured/recorded.
            </summary>
        </member>
        <member name="M:App.Metrics.Gauge.IMeasureGaugeMetrics.SetValue(App.Metrics.Gauge.GaugeOptions,System.Func{System.Double})">
            <summary>
                Records <see cref="T:App.Metrics.Gauge.IGaugeMetric" /> which is a point in time instantaneous value
            </summary>
            <param name="options">The details of the gauge that is being measured.</param>
            <param name="valueProvider">A function that returns custom value provider for the gauge.</param>
        </member>
        <member name="M:App.Metrics.Gauge.IMeasureGaugeMetrics.SetValue(App.Metrics.Gauge.GaugeOptions,System.Func{App.Metrics.IMetricValueProvider{System.Double}})">
            <summary>
                Records <see cref="T:App.Metrics.Gauge.IGaugeMetric" /> which is a point in time instantaneous value
            </summary>
            <param name="options">The details of the gauge that is being measured.</param>
            <param name="valueProvider">A function that returns custom value provider for the gauge.</param>
        </member>
        <member name="M:App.Metrics.Gauge.IMeasureGaugeMetrics.SetValue(App.Metrics.Gauge.GaugeOptions,App.Metrics.MetricTags,System.Func{App.Metrics.IMetricValueProvider{System.Double}})">
            <summary>
                Records <see cref="T:App.Metrics.Gauge.IGaugeMetric" /> which is a point in time instantaneous value
            </summary>
            <param name="options">The details of the gauge that is being measured.</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique
                <see cref="T:App.Metrics.MetricTags" />
            </param>
            <param name="valueProvider">A function that returns custom value provider for the gauge.</param>
        </member>
        <member name="M:App.Metrics.Gauge.IMeasureGaugeMetrics.SetValue(App.Metrics.Gauge.GaugeOptions,App.Metrics.MetricTags,System.Func{System.Double})">
            <summary>
                Records <see cref="T:App.Metrics.Gauge.IGaugeMetric" /> which is a point in time instantaneous value
            </summary>
            <param name="options">The details of the gauge that is being measured.</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique
                <see cref="T:App.Metrics.MetricTags" />
            </param>
            <param name="valueProvider">A function that returns the value for the gauge.</param>
        </member>
        <member name="T:App.Metrics.Histogram.HistogramOptions">
            <summary>
                Configuration of an <see cref="T:App.Metrics.Histogram.IHistogramMetric" /> that will be measured
            </summary>
            <seealso cref="T:App.Metrics.MetricValueWithSamplingOption" />
        </member>
        <member name="T:App.Metrics.Histogram.HistogramValue">
            <summary>
                The value reported by a Histogram Metric
            </summary>
        </member>
        <member name="T:App.Metrics.Histogram.HistogramValueSource">
            <summary>
                Combines the value of the histogram with the defined unit for the value.
            </summary>
        </member>
        <member name="T:App.Metrics.Histogram.IHistogram">
            <summary>
                A Histogram measures the distribution of values in a stream of data: e.g., the number of results returned by a
                search.
            </summary>
        </member>
        <member name="M:App.Metrics.Histogram.IHistogram.Update(System.Int64,System.String)">
            <summary>
                Records a value.
            </summary>
            <param name="value">Value to be added to the histogram.</param>
            <param name="userValue">
                A custom user value that will be associated to the results.
                Useful for tracking (for example) for which id the max or min value was recorded.
            </param>
        </member>
        <member name="M:App.Metrics.Histogram.IHistogram.Update(System.Int64)">
            <summary>
                Records a value.
            </summary>
            <param name="value">Value to be added to the histogram.</param>
        </member>
        <member name="T:App.Metrics.Histogram.IHistogramMetric">
            <summary>
                Provides access to a histgram metric implementation, allows custom
                histograms to be implemented
            </summary>
            <seealso cref="T:App.Metrics.Histogram.IHistogram" />
            <seealso cref="T:App.Metrics.IMetricValueProvider`1" />
        </member>
        <member name="T:App.Metrics.Histogram.IMeasureHistogramMetrics">
            <summary>
                Provides access to the API allowing Histogram Metrics to be measured/recorded.
            </summary>
        </member>
        <member name="M:App.Metrics.Histogram.IMeasureHistogramMetrics.Update(App.Metrics.Histogram.HistogramOptions,System.Int64)">
            <summary>
                Updates a <see cref="T:App.Metrics.Histogram.IHistogramMetric" /> which measures the distribution of values in a stream of data. Records
                the min, mean,
                max and standard deviation of values and also quantiles such as the medium, 95th percentile, 98th percentile, 99th
                percentile and 99.9th percentile
            </summary>
            <param name="options">The details of the histogram that is being measured</param>
            <param name="value">The value to be added to the histogram.</param>
        </member>
        <member name="M:App.Metrics.Histogram.IMeasureHistogramMetrics.Update(App.Metrics.Histogram.HistogramOptions,App.Metrics.MetricTags,System.Int64)">
            <summary>
                Updates a <see cref="T:App.Metrics.Histogram.IHistogramMetric" /> which measures the distribution of values in a stream of data. Records
                the min, mean,
                max and standard deviation of values and also quantiles such as the medium, 95th percentile, 98th percentile, 99th
                percentile and 99.9th percentile
            </summary>
            <param name="options">The details of the histogram that is being measured</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="value">The value to be added to the histogram.</param>
        </member>
        <member name="M:App.Metrics.Histogram.IMeasureHistogramMetrics.Update(App.Metrics.Histogram.HistogramOptions,System.Int64,System.String)">
            <summary>
                Updates a <see cref="T:App.Metrics.Histogram.IHistogramMetric" /> which measures the distribution of values in a stream of data. Records
                the min, mean,
                max and standard deviation of values and also quantiles such as the medium, 95th percentile, 98th percentile, 99th
                percentile and 99.9th percentile
            </summary>
            <param name="options">The details of the histogram that is being measured</param>
            <param name="value">The value to be added to the histogram.</param>
            <param name="userValue">The user value to track where a Min, Max and Last duration is recorded.</param>
        </member>
        <member name="M:App.Metrics.Histogram.IMeasureHistogramMetrics.Update(App.Metrics.Histogram.HistogramOptions,App.Metrics.MetricTags,System.Int64,System.String)">
            <summary>
                Updates a <see cref="T:App.Metrics.Histogram.IHistogramMetric" /> which measures the distribution of values in a stream of data. Records
                the min, mean,
                max and standard deviation of values and also quantiles such as the medium, 95th percentile, 98th percentile, 99th
                percentile and 99.9th percentile
            </summary>
            <param name="options">The details of the histogram that is being measured</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="value">The value to be added to the histogram.</param>
            <param name="userValue">The user value to track where a Min, Max and Last duration is recorded.</param>
        </member>
        <member name="M:App.Metrics.Histogram.IProvideHistogramMetrics.Instance(App.Metrics.Histogram.HistogramOptions)">
            <summary>
                Instantiates an instance of a <see cref="T:App.Metrics.Histogram.IHistogram" />
            </summary>
            <param name="options">The details of the histogram that is being measured</param>
            <returns>A new instance of an <see cref="T:App.Metrics.Histogram.IHistogram" /> or the existing registered instance of the histogram</returns>
        </member>
        <member name="M:App.Metrics.Histogram.IProvideHistogramMetrics.Instance``1(App.Metrics.Histogram.HistogramOptions,System.Func{``0})">
            <summary>
                Instantiates an instance of a <see cref="T:App.Metrics.Histogram.IHistogram" />
            </summary>
            <typeparam name="T">The type of <see cref="T:App.Metrics.Histogram.IHistogram" /> to instantiate</typeparam>
            <param name="options">The details of the <see cref="T:App.Metrics.Histogram.IHistogram" /> that is being measured</param>
            <param name="builder">The function used to build the histogram metric.</param>
            <returns>A new instance of an <see cref="T:App.Metrics.Histogram.IHistogram" /> or the existing registered instance of the histogram</returns>
        </member>
        <member name="M:App.Metrics.Histogram.IProvideHistogramMetrics.Instance(App.Metrics.Histogram.HistogramOptions,App.Metrics.MetricTags)">
            <summary>
                Instantiates an instance of a <see cref="T:App.Metrics.Histogram.IHistogram" />
            </summary>
            <param name="options">The details of the histogram that is being measured</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <returns>
                A new instance of an <see cref="T:App.Metrics.Histogram.IHistogram" /> or the existing registered instance of the histogram
            </returns>
        </member>
        <member name="M:App.Metrics.Histogram.IProvideHistogramMetrics.Instance``1(App.Metrics.Histogram.HistogramOptions,App.Metrics.MetricTags,System.Func{``0})">
            <summary>
                Instantiates an instance of a <see cref="T:App.Metrics.Histogram.IHistogram" />
            </summary>
            <typeparam name="T">The type of <see cref="T:App.Metrics.Histogram.IHistogram" /> to instantiate</typeparam>
            <param name="options">The details of the <see cref="T:App.Metrics.Histogram.IHistogram" /> that is being measured</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="builder">The function used to build the histogram metric.</param>
            <returns>
                A new instance of an <see cref="T:App.Metrics.Histogram.IHistogram" /> or the existing registered instance of the histogram
            </returns>
        </member>
        <member name="T:App.Metrics.IBuildMetrics">
            <summary>
                Provides access to APIs which build instances of all available metric types. Metrics created are not added to the
                <see cref="T:App.Metrics.Registry.IMetricsRegistry" />.
            </summary>
        </member>
        <member name="P:App.Metrics.IBuildMetrics.Apdex">
            <summary>
                Gets the Apdex API to build <see cref="T:App.Metrics.Apdex.IApdexMetric" />s
            </summary>
            <value>
                The Apdex API for building <see cref="T:App.Metrics.Apdex.IApdexMetric" />s
            </value>
        </member>
        <member name="P:App.Metrics.IBuildMetrics.Counter">
            <summary>
                Gets the Counter API to build <see cref="T:App.Metrics.Counter.ICounterMetric" />s
            </summary>
            <value>
                The Counter API for building <see cref="T:App.Metrics.Counter.ICounterMetric" />s
            </value>
        </member>
        <member name="P:App.Metrics.IBuildMetrics.Gauge">
            <summary>
                Gets the Gauge API to build <see cref="T:App.Metrics.Gauge.IGaugeMetric" />s
            </summary>
            <value>
                The Gauge API for building <see cref="T:App.Metrics.Gauge.IGaugeMetric" />s
            </value>
        </member>
        <member name="P:App.Metrics.IBuildMetrics.Histogram">
            <summary>
                Gets the Histogram API to build <see cref="T:App.Metrics.Histogram.IHistogramMetric" />s
            </summary>
            <value>
                The Histogram API for building <see cref="T:App.Metrics.Histogram.IHistogramMetric" />s
            </value>
        </member>
        <member name="P:App.Metrics.IBuildMetrics.Meter">
            <summary>
                Gets the Meter API to build <see cref="T:App.Metrics.Meter.IMeterMetric" />s
            </summary>
            <value>
                The Meter API for building <see cref="T:App.Metrics.Meter.IMeterMetric" />s
            </value>
        </member>
        <member name="P:App.Metrics.IBuildMetrics.Timer">
            <summary>
                Gets the Timer API to build <see cref="T:App.Metrics.Timer.ITimerMetric" />s
            </summary>
            <value>
                The Timer API for building <see cref="T:App.Metrics.Timer.ITimerMetric" />s
            </value>
        </member>
        <member name="M:App.Metrics.IManageMetrics.Disable">
            <summary>
                Disables all recording of metrics
            </summary>
        </member>
        <member name="M:App.Metrics.IManageMetrics.Reset">
            <summary>
                Allows resetting of all metric data at runtime.
            </summary>
        </member>
        <member name="M:App.Metrics.IManageMetrics.ShutdownContext(System.String)">
            <summary>
                Allows clearing all metrics belonging to the specified context at runtime.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:App.Metrics.IMeasureMetrics">
            <summary>
                Provides access to measure/record available metric types
            </summary>
        </member>
        <member name="P:App.Metrics.IMeasureMetrics.Apdex">
            <summary>
                Gets the available Apdex API allowing Apdex metrics to be measured
            </summary>
            <value>
                The Apdex API for measuring Apdex metrics
            </value>
        </member>
        <member name="P:App.Metrics.IMeasureMetrics.Counter">
            <summary>
                Gets the available Counter API allowing Counter metrics to be measured
            </summary>
            <value>
                The Counter API for measuring Counter metrics
            </value>
        </member>
        <member name="P:App.Metrics.IMeasureMetrics.Gauge">
            <summary>
                Gets the available Gauge API allowing Gauge metrics to be measured
            </summary>
            <value>
                The Gauge API for measuring Gauge metrics
            </value>
        </member>
        <member name="P:App.Metrics.IMeasureMetrics.Histogram">
            <summary>
                Gets the available Histogram API allowing Histogram metrics to be measured
            </summary>
            <value>
                The Histogram API for measuring Histogram metrics
            </value>
        </member>
        <member name="P:App.Metrics.IMeasureMetrics.Meter">
            <summary>
                Gets the available Meter API allowing Meter metrics to be measured
            </summary>
            <value>
                The Meter API for measuring Meter metrics
            </value>
        </member>
        <member name="P:App.Metrics.IMeasureMetrics.Timer">
            <summary>
                Gets the available Timer API allowing Timer metrics to be measured
            </summary>
            <value>
                The Timer API for measuring Timer metrics
            </value>
        </member>
        <member name="P:App.Metrics.IMetricsRoot.OutputMetricsFormatters">
            <summary>
                Gets a list of <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" />s that are used by this application to format metric
                results.
            </summary>
            <value>
                A list of <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" />s that are used by this application.
            </value>
        </member>
        <member name="P:App.Metrics.IMetricsRoot.DefaultOutputMetricsFormatter">
            <summary>
                Gets the default <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" /> to use when metrics are attempted to be formatted.
            </summary>
            <value>
                The default <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" />s that is used by this application.
            </value>
        </member>
        <member name="P:App.Metrics.IMetricsRoot.DefaultOutputEnvFormatter">
            <summary>
                Gets the default <see cref="T:App.Metrics.Formatters.IEnvOutputFormatter" /> to use when the environment's info is attempted to be formatted.
            </summary>
            <value>
                The default <see cref="T:App.Metrics.Formatters.IEnvOutputFormatter" />s that is used by this application.
            </value>
        </member>
        <member name="P:App.Metrics.IMetricsRoot.OutputEnvFormatters">
            <summary>
                Gets a list of <see cref="T:App.Metrics.Formatters.IEnvOutputFormatter" />s that are used by this application to format environment info.
            </summary>
            <value>
                A list of <see cref="T:App.Metrics.Formatters.IEnvOutputFormatter" />s that are used by this application.
            </value>
        </member>
        <member name="T:App.Metrics.IMetricValueProvider`1">
            <summary>
                Indicates the ability to provide the value for a metric.
                This is the raw value. Consumers should use MetricValueSourceBase{T} />
            </summary>
            <typeparam name="T">Type of the value returned by the metric</typeparam>
        </member>
        <member name="P:App.Metrics.IMetricValueProvider`1.Value">
            <summary>
                Gets the current value of the metric.
            </summary>
            <value>
                The value.
            </value>
        </member>
        <member name="M:App.Metrics.IMetricValueProvider`1.GetValue(System.Boolean)">
            <summary>
                Get the current value for the metric, but also reset the metric.
                Useful for pushing data to only one consumer (ex: graphite) where you might want to only capture values just
                between the report interval.
            </summary>
            <param name="resetMetric">if set to true the metric will be reset.</param>
            <returns>The current value for the metric.</returns>
        </member>
        <member name="M:App.Metrics.Infrastructure.EnvironmentInfoEntry.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Infrastructure.EnvironmentInfoEntry.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.Internal.HashCodeCombiner">
            <summary>
            Copied from Microsoft.Extensions.HashCodeCombiner.Sources - Microsoft.Extensions.Internal.HashCodeCombiner
            </summary>
        </member>
        <member name="T:App.Metrics.Internal.IHideObjectMembers">
            <summary>
                Marker interface to cleanup editor visible members.
            </summary>
            <remarks>Created by Daniel Cazzulino http://www.clariusconsulting.net/blogs/kzu/archive/2008/03/10/58301.aspx</remarks>
        </member>
        <member name="T:App.Metrics.Internal.StringBuilderCache">
            <summary>
                Original Source: https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Text/StringBuilderCache.cs
            </summary>
        </member>
        <member name="M:App.Metrics.Internal.StringBuilderCache.Acquire(System.Int32)">
            <summary>
                Acquire is used to get a string builder to use of a particular size.It can be called any number of times, if a
                stringbuilder is in the
                cache then it will be returned and the cache emptied. Subsequent calls will return a new stringbuilder.
            </summary>
            <param name="capacity">The capacity.</param>
            <returns>A new or cached string buildeer for this thread</returns>
        </member>
        <member name="M:App.Metrics.Internal.StringBuilderCache.GetStringAndRelease(System.Text.StringBuilder)">
            <summary>
                ToString() the string builder, release it to the cache and return the resulting string
            </summary>
            <param name="sb">The string builder.</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:App.Metrics.Internal.StringBuilderCache.Release(System.Text.StringBuilder)">
            <summary>
                Place the specified builder in the cache if it is not too big. The stringbuilder should not be used after it has
                been released.
                Unbalanced Releases are perfectly acceptable. It will merely cause the runtime to create a new stringbuilder next
                time Acquire is
                called.
            </summary>
            <param name="sb">The string builder instance.</param>
        </member>
        <member name="T:App.Metrics.IProvideMetrics">
            <summary>
                Provides access to APIs which get or add metrics to the <see cref="T:App.Metrics.Registry.IMetricsRegistry" /> and return the instance.
            </summary>
        </member>
        <member name="P:App.Metrics.IProvideMetrics.Apdex">
            <summary>
                Gets the Apdex API to register and retrieve <see cref="T:App.Metrics.Apdex.IApdexMetric" />s to be measured.
            </summary>
            <value>
                The Apdex API for registering and retrieving <see cref="T:App.Metrics.Apdex.IApdexMetric" />s to be measured
            </value>
        </member>
        <member name="P:App.Metrics.IProvideMetrics.Counter">
            <summary>
                Gets the Counter API to register and retrieve <see cref="T:App.Metrics.Counter.ICounterMetric" />s to be measured.
            </summary>
            <value>
                The Counter API for registering and retrieving <see cref="T:App.Metrics.Counter.ICounterMetric" />s to be measured
            </value>
        </member>
        <member name="P:App.Metrics.IProvideMetrics.Gauge">
            <summary>
                Gets the Gauge API to register and retrieve <see cref="T:App.Metrics.Gauge.IGaugeMetric" />s to be measured.
            </summary>
            <value>
                The Gauge API for registering and retrieving <see cref="T:App.Metrics.Gauge.IGaugeMetric" />s to be measured
            </value>
        </member>
        <member name="P:App.Metrics.IProvideMetrics.Histogram">
            <summary>
                Gets the Histogram API to register and retrieve <see cref="T:App.Metrics.Histogram.IHistogramMetric" />s to be measured.
            </summary>
            <value>
                The Histogram API for registering and retrieving <see cref="T:App.Metrics.Histogram.IHistogramMetric" />s to be measured
            </value>
        </member>
        <member name="P:App.Metrics.IProvideMetrics.Meter">
            <summary>
                Gets the Meter API to register and retrieve <see cref="T:App.Metrics.Meter.IMeterMetric" />s to be measured.
            </summary>
            <value>
                The Meter API for registering and retrieving <see cref="T:App.Metrics.Meter.IMeterMetric" />s to be measured
            </value>
        </member>
        <member name="P:App.Metrics.IProvideMetrics.Timer">
            <summary>
                Gets the Timer API to register and retrieve <see cref="T:App.Metrics.Timer.ITimerMetric" />s to be measured.
            </summary>
            <value>
                The Timer API for registering and retrieving <see cref="T:App.Metrics.Timer.ITimerMetric" />s to be measured
            </value>
        </member>
        <member name="T:App.Metrics.IProvideMetricValues">
            <summary>
                Provides access to the current metrics recorded by the application
            </summary>
        </member>
        <member name="M:App.Metrics.IProvideMetricValues.Get">
            <summary>
                Returns the current metrics data for all contexts.
            </summary>
            <returns>
                A snapshot of the current metrics data, if a global <see cref="T:App.Metrics.Filters.IFilterMetrics" /> is configured this will be
                applied on the result.
            </returns>
        </member>
        <member name="M:App.Metrics.IProvideMetricValues.Get(App.Metrics.Filters.IFilterMetrics)">
            <summary>
                Returns the current metrics data for the context for which this provider has been created.
            </summary>
            <param name="overrideGlobalFilter">
                The override the configured global filter and filters metric data by the specified
                <see cref="T:App.Metrics.Filters.IFilterMetrics" />.
            </param>
            <returns>
                A snapshot of the current metrics data filtered by the specified <see cref="T:App.Metrics.Filters.IFilterMetrics" />
            </returns>
        </member>
        <member name="M:App.Metrics.IProvideMetricValues.GetForContext(System.String)">
            <summary>
                Retrieves a snapshot of the current metrics values recorded.
            </summary>
            <param name="context">The metric context to retreive.</param>
            <returns>Metrics data belonging to the specified context</returns>
        </member>
        <member name="T:App.Metrics.IResetableMetric">
            <summary>
                Indicates a metric's ability to be reset. Reseting a metric clear all currently collected data.
            </summary>
        </member>
        <member name="M:App.Metrics.IResetableMetric.Reset">
            <summary>
                Clear all currently collected data for this metric.
            </summary>
        </member>
        <member name="T:App.Metrics.Meter.IMeasureMeterMetrics">
            <summary>
                Provides access to the API allowing Meter Metrics to be measured/recorded.
            </summary>
        </member>
        <member name="M:App.Metrics.Meter.IMeasureMeterMetrics.Mark(App.Metrics.Meter.MeterOptions)">
            <summary>
                Marks a <see cref="T:App.Metrics.Meter.IMeterMetric" /> which increments an increment-only counter and measures the rate of events over
                time
            </summary>
            <param name="options">The details of the meter that is being marked</param>
        </member>
        <member name="M:App.Metrics.Meter.IMeasureMeterMetrics.Mark(App.Metrics.Meter.MeterOptions,System.Int64)">
            <summary>
                Marks a <see cref="T:App.Metrics.Meter.IMeterMetric" /> which increments an increment-only counter and measures the rate of events over
                time
            </summary>
            <param name="options">The details of the meter that is being marked</param>
            <param name="amount">The amount to mark the meter.</param>
        </member>
        <member name="M:App.Metrics.Meter.IMeasureMeterMetrics.Mark(App.Metrics.Meter.MeterOptions,App.Metrics.MetricTags,System.Int64)">
            <summary>
                Marks a <see cref="T:App.Metrics.Meter.IMeterMetric" /> which increments an increment-only counter and measures the rate of events over
                time
            </summary>
            <param name="options">The details of the meter that is being marked</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="amount">The amount to mark the meter.</param>
        </member>
        <member name="M:App.Metrics.Meter.IMeasureMeterMetrics.Mark(App.Metrics.Meter.MeterOptions,App.Metrics.MetricTags)">
            <summary>
                Marks a <see cref="T:App.Metrics.Meter.IMeterMetric" /> which increments an increment-only counter and measures the rate of events
                overtime, will mark as 1.
            </summary>
            <param name="options">The details of the meter that is being marked</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
        </member>
        <member name="M:App.Metrics.Meter.IMeasureMeterMetrics.Mark(App.Metrics.Meter.MeterOptions,System.String)">
            <summary>
                Marks a <see cref="T:App.Metrics.Meter.IMeterMetric" /> which increments an increment-only counter and measures the rate of events over
                time
            </summary>
            <param name="options">The details of the meter that is being marked</param>
            <param name="item">The metric item within the set to mark.</param>
        </member>
        <member name="M:App.Metrics.Meter.IMeasureMeterMetrics.Mark(App.Metrics.Meter.MeterOptions,App.Metrics.MetricTags,System.String)">
            <summary>
                Marks a <see cref="T:App.Metrics.Meter.IMeterMetric" /> which increments an increment-only counter and measures the rate of events over
                time
            </summary>
            <param name="options">The details of the meter that is being marked</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="item">The metric item within the set to mark.</param>
        </member>
        <member name="M:App.Metrics.Meter.IMeasureMeterMetrics.Mark(App.Metrics.Meter.MeterOptions,App.Metrics.MetricSetItem)">
            <summary>
                Marks a <see cref="T:App.Metrics.Meter.IMeterMetric" /> which increments an increment-only counter and measures the rate of events over
                time
            </summary>
            <param name="options">The details of the meter that is being marked</param>
            <param name="setItem">The <see cref="T:App.Metrics.MetricSetItem" />  within the set to mark.</param>
        </member>
        <member name="M:App.Metrics.Meter.IMeasureMeterMetrics.Mark(App.Metrics.Meter.MeterOptions,App.Metrics.MetricTags,App.Metrics.MetricSetItem)">
            <summary>
                Marks a <see cref="T:App.Metrics.Meter.IMeterMetric" /> which increments an increment-only counter and measures the rate of events over
                time
            </summary>
            <param name="options">The details of the meter that is being marked</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="setItem">The <see cref="T:App.Metrics.MetricSetItem" />  within the set to mark.</param>
        </member>
        <member name="M:App.Metrics.Meter.IMeasureMeterMetrics.Mark(App.Metrics.Meter.MeterOptions,System.Int64,System.String)">
            <summary>
                Marks a <see cref="T:App.Metrics.Meter.IMeterMetric" /> which increments an increment-only counter and measures the rate of events over
                time
            </summary>
            <param name="options">The details of the meter that is being marked</param>
            <param name="amount">The amount to mark the meter.</param>
            <param name="item">The metric item within the set to mark.</param>
        </member>
        <member name="M:App.Metrics.Meter.IMeasureMeterMetrics.Mark(App.Metrics.Meter.MeterOptions,App.Metrics.MetricTags,System.Int64,System.String)">
            <summary>
                Marks a <see cref="T:App.Metrics.Meter.IMeterMetric" /> which increments an increment-only counter and measures the rate of events over
                time
            </summary>
            <param name="options">The details of the meter that is being marked</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="amount">The amount to mark the meter.</param>
            <param name="item">The metric item within the set to mark.</param>
        </member>
        <member name="M:App.Metrics.Meter.IMeasureMeterMetrics.Mark(App.Metrics.Meter.MeterOptions,System.Int64,App.Metrics.MetricSetItem)">
            <summary>
                Marks a <see cref="T:App.Metrics.Meter.IMeterMetric" /> which increments an increment-only counter and measures the rate of events over
                time
            </summary>
            <param name="options">The details of the meter that is being marked</param>
            <param name="amount">The amount to mark the meter.</param>
            <param name="setItem">The <see cref="T:App.Metrics.MetricSetItem" /> within the set to mark.</param>
        </member>
        <member name="M:App.Metrics.Meter.IMeasureMeterMetrics.Mark(App.Metrics.Meter.MeterOptions,App.Metrics.MetricTags,System.Int64,App.Metrics.MetricSetItem)">
            <summary>
                Marks a <see cref="T:App.Metrics.Meter.IMeterMetric" /> which increments an increment-only counter and measures the rate of events over
                time
            </summary>
            <param name="options">The details of the meter that is being marked</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="amount">The amount to mark the meter.</param>
            <param name="setItem">The <see cref="T:App.Metrics.MetricSetItem" /> within the set to mark.</param>
        </member>
        <member name="T:App.Metrics.Meter.IMeter">
            <summary>
                A meter measures the rate at which a set of events occur, in a few different ways.
                The mean rate is the average rate of events. It’s generally useful for trivia,
                but as it represents the total rate for your application’s entire lifetime (e.g., the total number of requests
                handled,
                divided by the number of seconds the process has been running), it doesn’t offer a sense of recency.
                Luckily, meters also record three different exponentially-weighted moving average rates: the 1-, 5-, and 15-minute
                moving averages.
            </summary>
        </member>
        <member name="M:App.Metrics.Meter.IMeter.Mark">
            <summary>
                Mark the occurrence of an event.
            </summary>
        </member>
        <member name="M:App.Metrics.Meter.IMeter.Mark(System.String)">
            <summary>
                Mark the occurrence of an event for an item in a set.
                The total rate of the event is updated, but the meter will also keep track and update a specific rate for each
                <paramref name="item" /> registered.
                The meter value will contain the total rate and for each registered item the specific rate and percentage of total
                count.
            </summary>
            <param name="item">Item from the set for which to record the event.</param>
        </member>
        <member name="M:App.Metrics.Meter.IMeter.Mark(App.Metrics.MetricSetItem)">
            <summary>
                Mark the occurrence of an event for an item in a set.
                The total rate of the event is updated, but the meter will also keep track and update a specific rate for each
                <paramref name="setItem" /> registered.
                The meter value will contain the total rate and for each registered item the specific rate and percentage of total
                count.
            </summary>
            <param name="setItem">Item from the set for which to record the event.</param>
        </member>
        <member name="M:App.Metrics.Meter.IMeter.Mark(App.Metrics.MetricSetItem,System.Int64)">
            <summary>
                Mark the occurrence of an event for an item in a set.
                The total rate of the event is updated, but the meter will also keep track and update a specific rate for each
                <paramref name="setItem" /> registered.
                The meter value will contain the total rate and for each registered item the specific rate and percentage of total
                count.
            </summary>
            <param name="setItem">Item from the set for which to record the event.</param>
            <param name="amount">The amount to mark the meter.</param>
        </member>
        <member name="M:App.Metrics.Meter.IMeter.Mark(System.Int64)">
            <summary>
                Mark the occurrence of <paramref name="amount" /> events.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:App.Metrics.Meter.IMeter.Mark(System.String,System.Int64)">
            <summary>
                Mark the occurrence of <paramref name="amount" /> events for an item in a set.
                The total rate of the event is updated, but the meter will also keep track and update a specific rate for each
                <paramref name="item" /> registered.
                The meter value will contain the total rate and for each registered item the specific rate and percentage of total
                count.
            </summary>
            <param name="item">Item from the set for which to record the events.</param>
            <param name="amount">The amount.</param>
        </member>
        <member name="T:App.Metrics.Meter.IMeterMetric">
            <summary>
                Provides access to a meter metric implementation, allows custom meters to be implemented.
            </summary>
            <seealso cref="T:App.Metrics.Meter.IMeter" />
            <seealso cref="T:App.Metrics.IMetricValueProvider`1" />
        </member>
        <member name="M:App.Metrics.Meter.IProvideMeterMetrics.Instance(App.Metrics.Meter.MeterOptions)">
            <summary>
                Instantiates an instance of a <see cref="T:App.Metrics.Meter.IMeter" />
            </summary>
            <param name="options">The details of the <see cref="T:App.Metrics.Meter.IMeter" />  that is being marked</param>
            <returns>A new instance of an <see cref="T:App.Metrics.Meter.IMeter" /> or the existing registered instance of the meter</returns>
        </member>
        <member name="M:App.Metrics.Meter.IProvideMeterMetrics.Instance``1(App.Metrics.Meter.MeterOptions,System.Func{``0})">
            <summary>
                Instantiates an instance of a <see cref="T:App.Metrics.Meter.IMeter" />
            </summary>
            <typeparam name="T">The type of <see cref="T:App.Metrics.Meter.IMeter" /> to instantiate</typeparam>
            <param name="options">The details of the <see cref="T:App.Metrics.Meter.IMeter" />  that is being marked</param>
            <param name="builder">The function used to build the meter metric.</param>
            <returns>A new instance of an <see cref="T:App.Metrics.Meter.IMeter" /> or the existing registered instance of the meter</returns>
        </member>
        <member name="M:App.Metrics.Meter.IProvideMeterMetrics.Instance(App.Metrics.Meter.MeterOptions,App.Metrics.MetricTags)">
            <summary>
                Instantiates an instance of a <see cref="T:App.Metrics.Meter.IMeter" />
            </summary>
            <param name="options">The details of the <see cref="T:App.Metrics.Meter.IMeter" />  that is being marked</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <returns>
                A new instance of an <see cref="T:App.Metrics.Meter.IMeter" /> or the existing registered instance of the meter
            </returns>
        </member>
        <member name="M:App.Metrics.Meter.IProvideMeterMetrics.Instance``1(App.Metrics.Meter.MeterOptions,App.Metrics.MetricTags,System.Func{``0})">
            <summary>
                Instantiates an instance of a <see cref="T:App.Metrics.Meter.IMeter" />
            </summary>
            <typeparam name="T">The type of <see cref="T:App.Metrics.Meter.IMeter" /> to instantiate</typeparam>
            <param name="options">The details of the <see cref="T:App.Metrics.Meter.IMeter" />  that is being marked</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="builder">The function used to build the meter metric.</param>
            <returns>
                A new instance of an <see cref="T:App.Metrics.Meter.IMeter" /> or the existing registered instance of the meter
            </returns>
        </member>
        <member name="T:App.Metrics.Meter.MeterOptions">
            <summary>
                Configuration of an <see cref="T:App.Metrics.Meter.IMeterMetric" /> that will be measured
            </summary>
            <seealso cref="T:App.Metrics.MetricValueOptionsBase" />
        </member>
        <member name="M:App.Metrics.Meter.MeterOptions.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Meter.MeterOptions" /> class.
            </summary>
        </member>
        <member name="P:App.Metrics.Meter.MeterOptions.RateUnit">
            <summary>
                Gets or sets the rate unit used for visualization which defaults to Minutes
            </summary>
            <value>
                The rate unit.
            </value>
        </member>
        <member name="P:App.Metrics.Meter.MeterOptions.ReportSetItems">
            <summary>
                Gets or sets a value indicating whether or not to report the counter's set items. Defaults to <c>true</c>.
            </summary>
            <value>
                <c>true</c> if [report set items]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:App.Metrics.Meter.MeterValue">
            <summary>
                The value reported by a Meter Metric
            </summary>
        </member>
        <member name="T:App.Metrics.Meter.MeterValueSource">
            <summary>
                Combines the value of the meter with the defined unit and the rate unit at which the value is reported.
            </summary>
        </member>
        <member name="T:App.Metrics.MetricSetItem">
            <summary>
                <para>
                    Metric items provide the ability to track either a count or rate for each item in a counters or meters finite
                    set
                    respectively. They also track the overall percentage of each item in the set.
                </para>
                <para>
                    This is useful for example if we needed to track the total number of emails sent but also the count of each
                    type of emails sent or The total rate of emails sent but also the rate at which type of email was sent.
                </para>
            </summary>
        </member>
        <member name="M:App.Metrics.MetricSetItem.#ctor(System.String[],System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.MetricSetItem" /> struct.
            </summary>
            <param name="keys">The keys to use to generate a name for the set item.</param>
            <param name="values">The values to use to generate a name for the set item.</param>
            <exception cref="T:System.InvalidOperationException">
                keys length must be equal to values length
            </exception>
            <exception cref="T:System.ArgumentNullException">
                keys cannot be null
                or
                values items cannot be null
                or
                keys cannot be empty
                or
                values cannot be empty
            </exception>
        </member>
        <member name="M:App.Metrics.MetricSetItem.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.MetricSetItem.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.MetricSetItem.ToString">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.MetricSetItem.Equals(App.Metrics.MetricSetItem)">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.MetricsOptions">
            <summary>
                Provides programmatic configuration for the App Metrics framework.
            </summary>
        </member>
        <member name="P:App.Metrics.MetricsOptions.DefaultContextLabel">
            <summary>
                Gets or sets the default context label using for grouping metrics in contexts.
            </summary>
            <remarks>Defaults to "Application"</remarks>
            <value>
                The default context label used for grouping metrics within the <see cref="T:App.Metrics.Registry.IMetricsRegistry" />.
            </value>
        </member>
        <member name="P:App.Metrics.MetricsOptions.GlobalTags">
            <summary>
                Gets or sets the global tags to apply on all metrics when reporting.
            </summary>
            <value>
                The global tags applied to on all metrics when reporting.
            </value>
        </member>
        <member name="P:App.Metrics.MetricsOptions.Enabled">
            <summary>
                Gets or sets a value indicating whether [metrics tracking enabled]. This will also avoid registering all metric
                tracking middleware if using App.Metrics.Middleware.
            </summary>
            <remarks>If disabled no metrics will be recorded or stored in memory</remarks>
            <value>
                <c>true</c> if [metrics enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:App.Metrics.MetricsOptions.ReportingEnabled">
            <summary>
                Gets or sets a value indicating whether [reporting enabled].
            </summary>
            <value>
                <c>true</c> if [reporting enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:App.Metrics.MetricTags.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.MetricTags.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.MetricTags.Equals(App.Metrics.MetricTags)">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.MetricType">
            <summary>
                Available metric types
            </summary>
        </member>
        <member name="F:App.Metrics.MetricType.Gauge">
            <summary>
                A <see href="http://app-metrics.io/getting-started/metric-types/gauges.html">Gauge</see>
                Metric
            </summary>
        </member>
        <member name="F:App.Metrics.MetricType.Counter">
            <summary>
                A <see href="http://app-metrics.io/getting-started/metric-types/counters.html">Counter</see>
                Metric
            </summary>
        </member>
        <member name="F:App.Metrics.MetricType.Meter">
            <summary>
                A <see href="http://app-metrics.io/getting-started/metric-types/meters.html">Meter</see>
                Metric
            </summary>
        </member>
        <member name="F:App.Metrics.MetricType.Histogram">
            <summary>
                A
                <see href="http://app-metrics.io/getting-started/metric-types/histograms.html">Histogram</see>
                Metric
            </summary>
        </member>
        <member name="F:App.Metrics.MetricType.Timer">
            <summary>
                A <see href="http://app-metrics.io/getting-started/metric-types/histograms.html">Timer</see>
                Metric
            </summary>
        </member>
        <member name="F:App.Metrics.MetricType.Apdex">
            <summary>
                An <see href="http://app-metrics.io/getting-started/metric-types/apdex.html">Apdex</see>
                Metric
            </summary>
        </member>
        <member name="T:App.Metrics.MetricValueOptionsBase">
            <summary>
                Configuration of a Metric that will be measured
            </summary>
        </member>
        <member name="P:App.Metrics.MetricValueOptionsBase.Context">
            <summary>
                Gets or sets the context for which the metric belongs e.g. Application.WebRequests
            </summary>
            <value>
                The context.
            </value>
        </member>
        <member name="P:App.Metrics.MetricValueOptionsBase.MeasurementUnit">
            <summary>
                Gets or sets the description of what is being measured, a <see cref="T:App.Metrics.Unit" /> is something that is expressed in MB,
                kB for example
            </summary>
            <value>
                The measurement unit.
            </value>
        </member>
        <member name="P:App.Metrics.MetricValueOptionsBase.Name">
            <summary>
                Gets or sets the name of the Metric being measure, this should be unique per <see cref="T:App.Metrics.MetricType" />
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:App.Metrics.MetricValueOptionsBase.Tags">
            <summary>
                Gets or sets the <see cref="T:App.Metrics.MetricTags" /> associated with the metric, this is useful for grouping metrics when
                visualizing
            </summary>
            <value>
                The tags.
            </value>
        </member>
        <member name="T:App.Metrics.MetricValueSourceBase`1">
            <summary>
                Provides the value of a metric and information about units.
                This is the class that metric consumers should use.
            </summary>
            <typeparam name="T">Type of the metric value</typeparam>
        </member>
        <member name="P:App.Metrics.MetricValueSourceBase`1.IsMultidimensional">
            <summary>
                Gets a value indicating whether this instance is a multidimensional metric.
            </summary>
            <value>
                <c>true</c> if this instance is a multidimensional metric; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:App.Metrics.MetricValueSourceBase`1.MultidimensionalName">
            <summary>
                Gets the name of the multidimensional metric. If tags were set at runtime, this will be the name of the metric
                without the concatenated metric tags so that these metrics can be reported as one.
            </summary>
            <value>
                The name of the multidimensional metric.
            </value>
        </member>
        <member name="P:App.Metrics.MetricValueSourceBase`1.Name">
            <summary>
                Gets the Name of the metric.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:App.Metrics.MetricValueSourceBase`1.Tags">
            <summary>
                Gets the Tags associated with the metric.
            </summary>
            <value>
                The tags.
            </value>
        </member>
        <member name="P:App.Metrics.MetricValueSourceBase`1.Unit">
            <summary>
                Gets the Unit representing what the metric is measuring.
            </summary>
            <value>
                The unit.
            </value>
        </member>
        <member name="P:App.Metrics.MetricValueSourceBase`1.Value">
            <summary>
                Gets the current value of the metric.
            </summary>
            <value>
                The value.
            </value>
        </member>
        <member name="P:App.Metrics.MetricValueSourceBase`1.ValueProvider">
            <summary>
                Gets the instance capable of returning the current value for the metric.
            </summary>
            <value>
                The value provider.
            </value>
        </member>
        <member name="T:App.Metrics.MetricValueWithSamplingOption">
            <summary>
                Configuration of a Metric that will be measured using a reservoir sampling type
            </summary>
        </member>
        <member name="P:App.Metrics.MetricValueWithSamplingOption.Reservoir">
            <summary>
                Gets or sets an <see cref="T:App.Metrics.ReservoirSampling.IReservoir" /> implementation for sampling.
            </summary>
            <value>
                The reservoir instance to use for sampling.
            </value>
            <remarks>
                Reservoir sampling avoids unbound memory usage, allows metrics to be generated from a reservoir of values.
            </remarks>
        </member>
        <member name="P:App.Metrics.Reporting.IReportMetrics.Filter">
            <summary>
                Gets the <see cref="T:App.Metrics.Filters.IFilterMetrics" /> to use for just this reporter provider.
            </summary>
            <value>
                The <see cref="T:App.Metrics.Filters.IFilterMetrics" /> to use for this reporter provider.
            </value>
        </member>
        <member name="P:App.Metrics.Reporting.IReportMetrics.FlushInterval">
            <summary>
                Gets <see cref="T:System.TimeSpan" /> interval to flush metrics values. Defaults to
                <see cref="F:App.Metrics.AppMetricsConstants.Reporting.DefaultFlushInterval" />.
            </summary>
        </member>
        <member name="P:App.Metrics.Reporting.IReportMetrics.Formatter">
            <summary>
                Gets the <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" /> used to format <see cref="T:App.Metrics.MetricsDataValueSource" /> before
                flushing. If not set the default <see cref="T:App.Metrics.Formatters.IMetricsOutputFormatter" /> will be used.
            </summary>
        </member>
        <member name="M:App.Metrics.Reporting.IReportMetrics.FlushAsync(App.Metrics.MetricsDataValueSource,System.Threading.CancellationToken)">
            <summary>
                Flushes the current metrics snapshot using the configured output formatter.
            </summary>
            <param name="metricsData">The current snapshot of metrics.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if metrics were successfully flushed, false otherwise.</returns>
        </member>
        <member name="M:App.Metrics.Reporting.IRunMetricsReports.RunAllAsync(System.Threading.CancellationToken)">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> which flush the current snapshot of metrics via each configured
                <see cref="T:App.Metrics.Reporting.IReportMetrics" />.
            </summary>
            <param name="cancellationToken">The cancellation token to use for each reporting task.</param>
            <returns>Tasks to flush the current snapshot of metrics via each configured <see cref="T:App.Metrics.Reporting.IReportMetrics" />.</returns>
        </member>
        <member name="M:App.Metrics.Reporting.IRunMetricsReports.RunAsync``1(System.Threading.CancellationToken)">
            <summary>
                Returns an <see cref="T:System.Threading.Tasks.Task" /> which flushes the current snapshot of metrics via the specified
                <see cref="T:App.Metrics.Reporting.IReportMetrics" /> type. The <see cref="T:App.Metrics.Reporting.IReportMetrics" /> must be configured on the
                <see cref="T:App.Metrics.IMetricsBuilder" /> otherwise throws an <see cref="T:System.InvalidOperationException" />.
            </summary>
            <typeparam name="TMetricReporter">The typeof of reporter used to flush the current snapshot of metrics.</typeparam>
            <param name="cancellationToken">The cancellation token to use for the reporting task.</param>
            <returns>Tasks to flush the current snapshot of metrics via each configured <see cref="T:App.Metrics.Reporting.IReportMetrics" />.</returns>
        </member>
        <member name="T:App.Metrics.ReservoirSampling.IReservoir">
            <summary>
                Provides access to a Reservoir Sampling implementation. Reservoir sampling is a family of randomized algorithms for
                randomly choosing a sample of k items from a list S containing n items, where n is either a very large or unknown
                number. Typically n is large enough that the list doesn't fit into main memory.
            </summary>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.IReservoir.GetSnapshot(System.Boolean)">
            <summary>
                Gets a statistical <see cref="T:App.Metrics.ReservoirSampling.IReservoirSnapshot">snapshot</see> including
                <see href="https://en.wikipedia.org/wiki/Percentile">percentiles</see> of the current sample.
            </summary>
            <param name="resetReservoir">if set to <c>true</c> [reset reservoir].</param>
            <returns>A <see cref="T:App.Metrics.ReservoirSampling.IReservoirSnapshot">snapshot</see> of the current sample</returns>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.IReservoir.GetSnapshot">
            <summary>
                Gets a statistical <see cref="T:App.Metrics.ReservoirSampling.IReservoirSnapshot">snapshot</see> including
                <see href="https://en.wikipedia.org/wiki/Percentile">percentiles</see> of the current sample.
            </summary>
            <returns>A <see cref="T:App.Metrics.ReservoirSampling.IReservoirSnapshot">snapshot</see> of the current sample</returns>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.IReservoir.Reset">
            <summary>
                Reset all statistics, in addition to the underlying reservoir.
            </summary>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.IReservoir.Update(System.Int64,System.String)">
            <summary>
                Update statistics and the reservoir with a new sample.
            </summary>
            <param name="value">The value.</param>
            <param name="userValue">The user value.</param>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.IReservoir.Update(System.Int64)">
            <summary>
                Update statistics and the reservoir with a new sample.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:App.Metrics.ReservoirSampling.IReservoirSnapshot">
            <summary>
                Provides access to a snapshot used for calculating
                <see href="https://en.wikipedia.org/wiki/Quantile">quantile</see> statistics.
            </summary>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.IReservoirSnapshot.Count">
            <summary>
                Gets the number of samples that the histogram has been updated with.
            </summary>
            <value>
                The count.
            </value>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.IReservoirSnapshot.Max">
            <summary>
                Gets the maximum value of all samples
            </summary>
            <value>
                The maximum.
            </value>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.IReservoirSnapshot.MaxUserValue">
            <summary>
                Gets the maximum value which was recorded in the samples set
            </summary>
            <value>
                The maximum user value.
            </value>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.IReservoirSnapshot.Mean">
            <summary>
                Gets the average of all samples since the histogram was created.
            </summary>
            <value>
                The mean.
            </value>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.IReservoirSnapshot.Median">
            <summary>
                Gets the median value of all samples
            </summary>
            <value>
                The median.
            </value>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.IReservoirSnapshot.Min">
            <summary>
                Gets the minimum value of all samples.
            </summary>
            <value>
                The minimum.
            </value>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.IReservoirSnapshot.MinUserValue">
            <summary>
                Gets the minumum value which was recorded in the samples set
            </summary>
            <value>
                The minimum user value.
            </value>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.IReservoirSnapshot.Percentile75">
            <summary>
                Gets the 75th percentile of all samples
            </summary>
            <value>
                The percentile75.
            </value>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.IReservoirSnapshot.Percentile95">
            <summary>
                Gets the 95th percentile of all samples
            </summary>
            <value>
                The percentile95.
            </value>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.IReservoirSnapshot.Percentile98">
            <summary>
                Gets the 98th percentile of all samples
            </summary>
            <value>
                The percentile98.
            </value>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.IReservoirSnapshot.Percentile99">
            <summary>
                Gets the 99th percentile of all samples
            </summary>
            <value>
                The percentile99.
            </value>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.IReservoirSnapshot.Percentile999">
            <summary>
                Gets the 99.9th percentile of all samples
            </summary>
            <value>
                The percentile999.
            </value>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.IReservoirSnapshot.Size">
            <summary>
                Gets the current size of the histogram's reservoir
            </summary>
            <value>
                The size.
            </value>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.IReservoirSnapshot.StdDev">
            <summary>
                Gets the standard deviation of all samples.
            </summary>
            <value>
                The standard dev.
            </value>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.IReservoirSnapshot.Sum">
            <summary>
                Gets the sum of observed values.
            </summary>
            <value>
                The sum.
            </value>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.IReservoirSnapshot.Values">
            <summary>
                Gets the samples of the snapshot
            </summary>
            <value>
                The values.
            </value>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.IReservoirSnapshot.GetValue(System.Double)">
            <summary>
                Calculate an arbitrary quantile value for the snapshot. Values below zero or greater than one will be clamped to
                the range [0, 1]
            </summary>
            <param name="quantile">The quantile.</param>
            <returns>The quantile value</returns>
        </member>
        <member name="T:App.Metrics.Serialization.EnvironmentInfoSerializer">
            <summary>
                Serializes <see cref="T:App.Metrics.Infrastructure.EnvironmentInfo" /> into the different formats.
            </summary>
        </member>
        <member name="M:App.Metrics.Serialization.EnvironmentInfoSerializer.Serialize(App.Metrics.Serialization.IEnvInfoWriter,App.Metrics.Infrastructure.EnvironmentInfo)">
            <summary>
                Serializes the specified <see cref="T:App.Metrics.Infrastructure.EnvironmentInfo" /> and writes the environment information using the specified
                <see cref="T:App.Metrics.Serialization.IEnvInfoWriter" />.
            </summary>
            <param name="writer">The <see cref="T:App.Metrics.Serialization.IMetricSnapshotWriter" /> used to write the metrics snapshot.</param>
            <param name="envInfo">The <see cref="T:App.Metrics.Infrastructure.EnvironmentInfo" /> to serilize.</param>
        </member>
        <member name="M:App.Metrics.Serialization.IEnvInfoWriter.Write(App.Metrics.Infrastructure.EnvironmentInfo)">
            <summary>
            Writes the specified <see cref="T:App.Metrics.Infrastructure.EnvironmentInfo"/>.
            </summary>
            <param name="envInfo">The environment information to write.</param>
        </member>
        <member name="M:App.Metrics.Serialization.IMetricSnapshotWriter.Write(System.String,System.String,System.String,System.Object,App.Metrics.MetricTags,System.DateTime)">
            <summary>
            Writes the specific metrics and tags
            </summary>
            <param name="context">The metric's context</param>
            <param name="name">The name of the metric</param>
            <param name="field">The label for the metric value</param>
            <param name="value">The value of the metrics</param>
            <param name="tags">The metric's tags</param>
            <param name="timestamp">The timestamp of the metrics snapshot</param>
        </member>
        <member name="M:App.Metrics.Serialization.IMetricSnapshotWriter.Write(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object},App.Metrics.MetricTags,System.DateTime)">
            <summary>
            Writes the specific metrics and tags
            </summary>
            <param name="context">The metric's context</param>
            <param name="name">The name of the metric</param>
            <param name="columns">The metric names</param>
            <param name="values">The corresponding metrics values</param>
            <param name="tags">The metric's tags</param>
            <param name="timestamp">The timestamp of the metrics snapshot</param>
        </member>
        <member name="T:App.Metrics.Serialization.MetricSnapshotSerializer">
            <summary>
                Serializes <see cref="T:App.Metrics.MetricsDataValueSource" /> into the different formats.
            </summary>
        </member>
        <member name="M:App.Metrics.Serialization.MetricSnapshotSerializer.Serialize(App.Metrics.Serialization.IMetricSnapshotWriter,App.Metrics.MetricsDataValueSource,App.Metrics.MetricFields)">
            <summary>
                Serializes the specified <see cref="T:App.Metrics.MetricsDataValueSource" /> and writes the metrics snapshot using the specified
                <see cref="T:App.Metrics.Serialization.IMetricSnapshotWriter" />.
            </summary>
            <param name="writer">The <see cref="T:App.Metrics.Serialization.IMetricSnapshotWriter" /> used to write the metrics snapshot.</param>
            <param name="metricsData">The <see cref="T:App.Metrics.MetricsDataValueSource" /> to serilize.</param>
            <param name="fields">The metric fields to write</param>
        </member>
        <member name="T:App.Metrics.Timer.IMeasureTimerMetrics">
            <summary>
                Provides access to the API allowing Timer Metrics to be measured/recorded.
            </summary>
        </member>
        <member name="M:App.Metrics.Timer.IMeasureTimerMetrics.Time(App.Metrics.Timer.TimerOptions,System.Action)">
            <summary>
                Records a <see cref="T:App.Metrics.Timer.ITimerMetric" /> which measures the time taken to process an action using a timer metric.
                Records a histogram of the duration of a type of event and a meter of the rate of it's occurance
            </summary>
            <param name="options">The details of the timer that is being measured</param>
            <param name="action">The action to measure.</param>
        </member>
        <member name="M:App.Metrics.Timer.IMeasureTimerMetrics.Time(App.Metrics.Timer.TimerOptions,App.Metrics.MetricTags,System.Action)">
            <summary>
                Records a <see cref="T:App.Metrics.Timer.ITimerMetric" /> which measures the time taken to process an action using a timer metric.
                Records a histogram of the duration of a type of event and a meter of the rate of it's occurance
            </summary>
            <param name="options">The details of the timer that is being measured</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="action">The action to measure.</param>
        </member>
        <member name="M:App.Metrics.Timer.IMeasureTimerMetrics.Time(App.Metrics.Timer.TimerOptions,System.Action,System.String)">
            <summary>
                Records a <see cref="T:App.Metrics.Timer.ITimerMetric" /> which measures the time taken to process an action using a timer metric.
                Records a histogram of the duration of a type of event and a meter of the rate of it's occurance
            </summary>
            <param name="options">The details of the timer that is being measured</param>
            <param name="action">The action to measure.</param>
            <param name="userValue">The user value to track where a Min, Max and Last duration is recorded.</param>
        </member>
        <member name="M:App.Metrics.Timer.IMeasureTimerMetrics.Time(App.Metrics.Timer.TimerOptions,App.Metrics.MetricTags,System.Action,System.String)">
            <summary>
                Records a <see cref="T:App.Metrics.Timer.ITimerMetric" /> which measures the time taken to process an action using a timer metric.
                Records a histogram of the duration of a type of event and a meter of the rate of it's occurance
            </summary>
            <param name="options">The details of the timer that is being measured</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="action">The action to measure.</param>
            <param name="userValue">The user value to track where a Min, Max and Last duration is recorded.</param>
        </member>
        <member name="M:App.Metrics.Timer.IMeasureTimerMetrics.Time(App.Metrics.Timer.TimerOptions,App.Metrics.MetricTags,System.String)">
            <summary>
                Records a <see cref="T:App.Metrics.Timer.ITimerMetric" /> which measures the time taken to process an action using a timer metric.
                Records a histogram of the duration of a type of event and a meter of the rate of it's occurance
            </summary>
            <param name="options">The details of the timer that is being measured</param>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
            <param name="userValue">The user value to track where a Min, Max and Last duration is recorded.</param>
            <returns>A disposable context, when disposed records the time token to process the using block</returns>
        </member>
        <member name="M:App.Metrics.Timer.IMeasureTimerMetrics.Time(App.Metrics.Timer.TimerOptions,System.String)">
            <summary>
                Records a <see cref="T:App.Metrics.Timer.ITimerMetric" /> which measures the time taken to process an action using a timer metric.
                Records a histogram of the duration of a type of event and a meter of the rate of it's occurance
            </summary>
            <param name="options">The details of the timer that is being measured</param>
            <param name="userValue">The user value to track where a Min, Max and Last duration is recorded.</param>
            <returns>A disposable context, when disposed records the time token to process the using block</returns>
        </member>
        <member name="M:App.Metrics.Timer.IMeasureTimerMetrics.Time(App.Metrics.Timer.TimerOptions,App.Metrics.MetricTags)">
            <summary>
                Records a <see cref="T:App.Metrics.Timer.ITimerMetric" /> which measures the time taken to process an action using a timer metric.
                Records a histogram of the duration of a type of event and a meter of the rate of it's occurance
            </summary>
            <param name="options">The details of the timer that is being measured</param>
            <returns>A disposable context, when disposed records the time token to process the using block</returns>
            <param name="tags">
                The runtime tags to set in addition to those defined on the options, this will create a separate metric per unique <see cref="T:App.Metrics.MetricTags"/>
            </param>
        </member>
        <member name="M:App.Metrics.Timer.IMeasureTimerMetrics.Time(App.Metrics.Timer.TimerOptions)">
            <summary>
                Records a <see cref="T:App.Metrics.Timer.ITimerMetric" /> which measures the time taken to process an action using a timer metric.
                Records a histogram of the duration of a type of event and a meter of the rate of it's occurance
            </summary>
            <param name="options">The details of the timer that is being measured</param>
            <returns>A disposable context, when disposed records the time token to process the using block</returns>
        </member>
        <member name="T:App.Metrics.Timer.ITimer">
            <summary>
                A timer is basically a histogram of the duration of a type of event and a meter of the rate of its occurrence.
                <seealso cref="T:App.Metrics.Histogram.IHistogram" /> and <seealso cref="T:App.Metrics.Meter.IMeter" />
            </summary>
        </member>
        <member name="M:App.Metrics.Timer.ITimer.CurrentTime">
            <summary>
                This is part of advanced timer API. Use Timer.NewContext() by default.
                Returns the current time in nanoseconds for computing elapsed time.
            </summary>
            <returns>value representing the current time in nanoseconds.</returns>
        </member>
        <member name="M:App.Metrics.Timer.ITimer.EndRecording">
            <summary>
                This is part of advanced timer API. Use Timer.NewContext() by default.
                Manually ends timing an action.
            </summary>
            <returns>value representing the current time in nanoseconds.</returns>
        </member>
        <member name="M:App.Metrics.Timer.ITimer.NewContext(System.String)">
            <summary>
                Creates a new disposable instance and records the time it takes until the instance is disposed.
                <code>
            using(timer.NewContext())
            {
                ExecuteMethodThatNeedsMonitoring();
            }
            </code>
            </summary>
            <param name="userValue">
                A custom user value that will be associated to the results.
                Useful for tracking (for example) for which id the max or min value was recorded.
            </param>
            <returns>A disposable instance that will record the time passed until disposed.</returns>
        </member>
        <member name="M:App.Metrics.Timer.ITimer.NewContext">
            <summary>
                Creates a new disposable instance and records the time it takes until the instance is disposed.
                <code>
            using(timer.NewContext())
            {
                ExecuteMethodThatNeedsMonitoring();
            }
            </code>
            </summary>
            <returns>A disposable instance that will record the time passed until disposed.</returns>
        </member>
        <member name="M:App.Metrics.Timer.ITimer.Record(System.Int64,App.Metrics.TimeUnit,System.String)">
            <summary>
                This is part of advanced timer API. Use Timer.NewContext() by default.
                Manually record timer value.
            </summary>
            <param name="time">The value representing the manually measured time.</param>
            <param name="unit">Unit for the value.</param>
            <param name="userValue">
                A custom user value that will be associated to the results.
                Useful for tracking (for example) for which id the max or min value was recorded.
            </param>
        </member>
        <member name="M:App.Metrics.Timer.ITimer.Record(System.Int64,App.Metrics.TimeUnit)">
            <summary>
                This is part of advanced timer API. Use Timer.NewContext() by default.
                Manually record timer value.
            </summary>
            <param name="time">The value representing the manually measured time.</param>
            <param name="unit">Unit for the value.</param>
        </member>
        <member name="M:App.Metrics.Timer.ITimer.StartRecording">
            <summary>
                This is part of advanced timer API. Use Timer.NewContext() by default.
                Manually start timing an action.
            </summary>
            <returns>value representing the current time in nanoseconds.</returns>
        </member>
        <member name="M:App.Metrics.Timer.ITimer.Time(System.Action,System.String)">
            <summary>
                Runs the <paramref name="action" /> and records the time it took.
            </summary>
            <param name="action">Action to run and record time for.</param>
            <param name="userValue">
                A custom user value that will be associated to the results.
                Useful for tracking (for example) for which id the max or min value was recorded.
            </param>
        </member>
        <member name="M:App.Metrics.Timer.ITimer.Time(System.Action)">
            <summary>
                Runs the <paramref name="action" /> and records the time it took.
            </summary>
            <param name="action">Action to run and record time for.</param>
        </member>
        <member name="M:App.Metrics.Timer.ITimer.Time``1(System.Func{``0},System.String)">
            <summary>
                Runs the <paramref name="action" /> returning the result and records the time it took.
            </summary>
            <typeparam name="T">Type of the value returned by the action</typeparam>
            <param name="action">Action to run and record time for.</param>
            <param name="userValue">
                A custom user value that will be associated to the results.
                Useful for tracking (for example) for which id the max or min value was recorded.
            </param>
            <returns>The result of the <paramref name="action" /></returns>
        </member>
        <member name="M:App.Metrics.Timer.ITimer.Time``1(System.Func{``0})">
            <summary>
                Runs the <paramref name="action" /> returning the result and records the time it took.
            </summary>
            <typeparam name="T">Type of the value returned by the action</typeparam>
            <param name="action">Action to run and record time for.</param>
            <returns>The result of the <paramref name="action" /></returns>
        </member>
        <member name="T:App.Metrics.Timer.ITimerMetric">
            <summary>
                Provides access to a timer metric implementation, allows custom timers to be implemented
            </summary>
            <seealso cref="T:App.Metrics.IMetricValueProvider`1" />
        </member>
        <member name="T:App.Metrics.Timer.TimerContext">
            <summary>
                This struct is meant to be returned by the timer.NewContext() method and is intended to be used inside a using
                statement:
                <code>
            using(timer.NewContext())
            {
                ExecuteMethodThatNeedsMonitoring();
            }
            </code>
                <remarks>
                    Double disposing the instance, or a copy of the instance (since it is a struct) will cause the timer to record
                    wrong values.
                    Stick to directly passing it to the using() statement.
                </remarks>
            </summary>
        </member>
        <member name="P:App.Metrics.Timer.TimerContext.Elapsed">
            <summary>
                Gets the currently elapsed time from when the instance has been created
            </summary>
            <value>
                The elapsed.
            </value>
        </member>
        <member name="M:App.Metrics.Timer.TimerContext.TrackUserValue(System.String)">
            <summary>
                Set the user value for this timer context.
            </summary>
            <param name="value">New user value to use for this context.</param>
        </member>
        <member name="P:App.Metrics.Timer.TimerOptions.DurationUnit">
            <summary>
                Gets or sets the duration unit used for visualization which defaults to Milliseconds
            </summary>
            <value>
                The duration unit.
            </value>
        </member>
        <member name="P:App.Metrics.Timer.TimerOptions.RateUnit">
            <summary>
                Gets or sets the rate unit used for visualization which defaults to Minutes
            </summary>
            <value>
                The rate unit.
            </value>
        </member>
        <member name="T:App.Metrics.Timer.TimerValue">
            <summary>
                The value reported by a Timer Metric
            </summary>
        </member>
        <member name="T:App.Metrics.Timer.TimerValueSource">
            <summary>
                Combines the value of the timer with the defined unit and the time units for rate and duration.
            </summary>
        </member>
        <member name="T:App.Metrics.TimeUnit">
            <summary>
                The time unit used for a measurement
            </summary>
        </member>
        <member name="F:App.Metrics.Unit.Requests">
            <summary>
            HTTP requests, database queries, etc
            </summary>
        </member>
    </members>
</doc>
