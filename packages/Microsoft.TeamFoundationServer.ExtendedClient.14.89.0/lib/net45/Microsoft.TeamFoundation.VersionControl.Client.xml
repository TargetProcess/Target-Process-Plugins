<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.TeamFoundation.VersionControl.Client</name>
    </assembly>
    <members>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.AffectedTeamProjects.#ctor">
            <summary>
            Determines the affected team projects from a set of pending changes
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.AffectedTeamProjects.#ctor(Microsoft.TeamFoundation.VersionControl.Client.PendingChange[])">
            <summary>
            Determines the affected team projects from a set of pending changes
            </summary>
            <param name="changes">PendingChanges used to determine team projects affected</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.AffectedTeamProjects.#ctor(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.PendingChange})">
            <summary>
            Determines the affected team projects from a set of pending changes
            </summary>
            <param name="changes">PendingChanges used to determine team projects affected</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AffectedTeamProjects.TeamProjectPaths">
            <summary>
            An array of the team projects affected by the pending changes
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.AffectedTeamProjects.Update(Microsoft.TeamFoundation.VersionControl.Client.PendingChange[])">
            <summary>
            Update the list of affected Team projects based on the new list of pending changes.
            If the list of affected Team projects changes, return true, otherwise false.
            </summary>
            <param name="changes">PendingChanges used to determine team projects affected</param>
            <returns>true if set of affected team projects has changed, 
            false if the set remained the same</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.AffectedTeamProjects.Update(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.PendingChange})">
            <summary>
            Update the list of affected Team projects based on the new list of pending changes.
            If the list of affected Team projects changes, return true, otherwise false.
            </summary>
            <param name="changes">PendingChanges used to determine team projects affected</param>
            <returns>true if set of affected team projects has changed, 
            false if the set remained the same</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.VersionControlArtifactProvider">
             <summary>
             The SourceControlArtificatProvider implements IArtifactProvider
             making available, the source control artifacts in their general
             form. This includes through an Artifact object, or via the XML
             Document that describes the basic data.
            
             Additionlly it implements methods to retrieve the artifacts and
             convert them into the real objects that are unsd in the object
             model. This allows clients to have full access to the API even
             if they only have an artifact Uri.
             </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlArtifactProvider.GetArtifactDocument(System.Uri)">
            <summary>
            See IArtifactProvider Interface
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlArtifactProvider.GetArtifactType(System.Uri)">
            <summary>
            Gets the type of source control artifact that the specified artifact uri represents.
            </summary>
            <param name="artifactUri">The uri for which to determine the type</param>
            <returns>The type of artifact this Uri represents; returns
              VersionControlArtifactType.None if it does not represent a known source control
              artifact type</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlArtifactProvider.GetChangeset(System.Uri)">
            <summary>
            This is used to get a changeset object.
            </summary>
            <param name="artifactUri">Uri for the changeset being retreieved.</param>
            <returns>The referenced changeset object.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlArtifactProvider.GetShelveset(System.Uri)">
            <summary>
            This is used to get a shelveset object.
            </summary>
            <param name="artifactUri">Uri for the shelveset being retreieved.</param>
            <returns>The referenced shelveset object.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlArtifactProvider.GetLabel(System.Uri)">
            <summary>
            This is used to retrieve a label object.
            </summary>
            <param name="artifactUri">Uri for the label being retreieved.</param>
            <returns>The referenced label object.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlArtifactProvider.GetLatestItemVersion(System.Uri)">
            <summary>
            This is used to retrieve the latest version of an item.
            </summary>
            <param name="artifactUri">Uri for the item being retreieved.</param>
            <returns>The referenced item.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlArtifactProvider.GetVersionedItem(System.Uri)">
            <summary>
            This is used to retrieve a specific version of an item.
            </summary>
            <param name="artifactUri">Uri for the item being retreieved.</param>
            <returns>The referenced item.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlArtifactProvider.GetAssociatedWorkItemInfoForArtifact(System.Uri)">
            <summary>
            Given an artifact URI, returns a limited set of information about the work items
            associated with that artifact URI, without using the work item tracking client
            object model. The linking service on the server is contacted directly.
            </summary>
            <param name="artifactUri">Artifact URI whose associated work items should be looked up</param>
            <returns>A limited set of data about the work items</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.VersionControlArtifactType">
            <summary>
            These are the artifacts surfaced by Version Control.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin">
            <summary>
            Represents a saved attempt of a checkin for a workspace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.#ctor(Microsoft.TeamFoundation.VersionControl.Client.PendingChange[],System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinNote,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo[],System.String)">
            <summary>
            Construct checkin information from an attempted checkin
            </summary>
            <param name="changes">Pending changes for the attempted checkin</param>
            <param name="comment">Checkin comments for the attempted checkin</param>
            <param name="checkinNotes">Any checkin notes specified in the attempted checkin</param>
            <param name="workItemCheckinInfo">Work items checked as part of thes attempted checkin</param>
            <param name="policyOverrideComment">Policy override comment (if specified) in the attempted checkin</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.#ctor(Microsoft.TeamFoundation.VersionControl.Client.PendingChange[],System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinNote,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo[],System.String)">
            <summary>
            Construct checkin information from an attempted checkin
            </summary>
            <param name="changes">Pending changes for the attempted checkin</param>
            <param name="comment">Checkin comments for the attempted checkin</param>
            <param name="checkinNotes">Any checkin notes specified in the attempted checkin</param>
            <param name="WorkItemCheckedInfo">Work items checked as part of thes attempted checkin</param>
            <param name="policyOverrideComment">Policy override comment (if specified) in the attempted checkin</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.#ctor(System.String,Microsoft.TeamFoundation.VersionControl.Client.PendingChange[],Microsoft.TeamFoundation.VersionControl.Client.CheckinNote,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo[],System.String)">
            <summary>
            Construct checkin information from an attempted checkin
            </summary>
            <param name="changes">Pending changes for the attempted checkin</param>
            <param name="excludedChanges">Pending changes to be excluded</param>
            <param name="comment">Checkin comments for the attempted checkin</param>
            <param name="checkinNotes">Any checkin notes specified in the attempted checkin</param>
            <param name="WorkItemCheckedInfo">Work items checked as part of thes attempted checkin</param>
            <param name="policyOverrideComment">Policy override comment (if specified) in the attempted checkin</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.#ctor(System.Collections.Generic.ICollection{System.String},System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinNote,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo[],System.String)">
            <summary>
            Construct checkin information from an attempted checkin
            </summary>
            <param name="changes">Pending changes for the attempted checkin</param>
            <param name="excludedServerPaths">server paths of pending changes to be excluded</param>
            <param name="comment">Checkin comments for the attempted checkin</param>
            <param name="checkinNotes">Any checkin notes specified in the attempted checkin</param>
            <param name="WorkItemCheckedInfo">Work items checked as part of thes attempted checkin</param>
            <param name="policyOverrideComment">Policy override comment (if specified) in the attempted checkin</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.#ctor(System.Collections.Generic.Dictionary{System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinItem},System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinNote,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo[],System.String)">
            <summary>
            
            </summary>
            <param name="checkinItems">Items that were part of the attempted checkin</param>
            <param name="excludedItems">Items to be excluded</param>
            <param name="comment">Checkin comments for the attempted checkin</param>
            <param name="checkinNotes">Any checkin notes specified in the attempted checkin</param>
            <param name="workItemCheckinInfo">Work items checked as part of thes attempted checkin</param>
            <param name="policyOverrideComment">Policy override comment (if specified) in the attempted checkin</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Shelveset)">
            <summary>
            Creates an SavedCheckin from the information in a shelveset.
            </summary>
            <param name="shelveset">Shelveset to use to populate this attempted checkin object</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.Clone">
            <summary>
            Clone a saved checkin
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.Initialize(System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinNote,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo[],System.String,System.Boolean)">
            <summary>
            Initialized this object from the data specified in an attempted checkin
            </summary>
            <param name="comment">Checkin comments for the attempted checkin</param>
            <param name="checkinNotes">Any checkin notes specified in the attempted checkin</param>
            <param name="WorkItemCheckedInfo">Work items checked as part of thes attempted checkin</param>
            <param name="policyOverrideComment">Policy override comment (if specified) in the attempted checkin</param>
            <param name="mergeWorkItems">true to merge the work items</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.HasMatchingCheckinItem(Microsoft.TeamFoundation.VersionControl.Client.PendingChange)">
            <summary>
            Returns true if there is an item from this attempted checkin that matches the specified
            pending change.
            </summary>
            <param name="pc">the pending change</param>
            <returns>true if there is a check item that matches the pending change</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.IsExcluded(System.String)">
            <summary>
            Returns true if there if the item is excluded in this checkin.
            </summary>
            <param name="targetServerItem">The target item to check.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.MergeShelvesetMetadata(Microsoft.TeamFoundation.VersionControl.Client.Shelveset,Microsoft.TeamFoundation.VersionControl.Client.PendingChange[])">
            <summary>
            Reinitialize this SavedCheckin with the metadata contined within the specified shelveset
            and update the check states with the the specified set of pending changes.
            </summary>
            <param name="shelveset">The shelveset containing the desired metadata.</param>
            <param name="unshelvedChanges">The pending changes that where unshelved.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.MergeWorkItems(Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo[])">
            <summary>
            Merge the work items
            </summary>
            <param name="workItemsCheckedInfo">work items to be merged</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.UpdateCheckinItems(Microsoft.TeamFoundation.VersionControl.Client.PendingChange[],Microsoft.TeamFoundation.VersionControl.Client.PendingChange[])">
            <summary>
            Update the saved channel info with the current check states.  The specified checked states may be
            a filtered subset of the overall set of pending changes so this list does not replace the current
            channel checked states.  Instead, this method ensures that the specified checked states exist in
            saved channel info and the unchecked changes do not.
            </summary>
            <param name="checkedPendingChanges">the set of checked pending changes to merge with the overall set of checked items</param>
            <param name="uncheckedPendingChanges">the set of unchecked pending changes to remove from the overall set of checked items</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Creates an instance from the XML representation used in the cache file.
            </summary>
            <param name="attemptedCheckinNode">the XML node</param>
            <returns>an instance of SavedCheckin created from the XML</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.LoadItemsFromXml(System.Xml.XmlNode,System.Collections.Generic.Dictionary{System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinItem})">
            <summary>
            Load the items from Xml
            </summary>
            <param name="child">node</param>
            <param name="itemList">resulting item list</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.SaveAsXml(System.Xml.XmlNode)">
            <summary>
            Saves this instance to the XML format used in the cache file.
            </summary>
            <param name="parent">the XML parent node</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.SaveItemsAsXml(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.Collections.Generic.Dictionary{System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinItem})">
            <summary>
            Save the items to Xml
            
            Write out the pending change server items, if there are not a huge number
            of them.  We set a limit to prevent the cache file from becoming huge.
            </summary>
            <param name="outputDoc">output Xml doc</param>
            <param name="attemptedCheckinNode">data node</param>
            <param name="tagName">items tag name (SelectedItems or ExcludedItems)</param>
            <param name="itemList">pending changes</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.SavedCheckin.WorkItemsCheckedInfo">
            <summary>
            Get the list of the persistent work items checked info.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CheckinItem">
            <summary>
            CheckinItem is a simple class to hold the server path and item ID for each item being checked
            in. We store itemId poastOrcas for backward compatibility - the xml is shared across different
            clients. ItemID is ignored in the current implementation and we use only ServerPath.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CheckinItem.FromPendingChanges(Microsoft.TeamFoundation.VersionControl.Client.PendingChange[])">
            <summary>
            Creates Dictionary indexed by ServerPath containing persistent information for PendingChange objects
            </summary>
            <param name="pendingChanges"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CheckinItem.FromServerPaths(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Creates Dictionary indexed by ServerPath containing persistent information
            </summary>
            <param name="serverPaths">server paths</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CheckinItem.FromCheckinItems(System.Collections.Generic.Dictionary{System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinItem})">
            <summary>
            Creates Dictionary indexed by ServerPath containing persistent information
            </summary>
            <param name="sourceCheckinItems">source checkinItems to copy</param>
            <returns>dictionary</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BranchHistoryTreeItem">
            <summary>
            The branch history tree item node type that represents an individual node in a
            branch topology tree.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BranchHistoryTreeItem.#ctor(Microsoft.TeamFoundation.VersionControl.Client.BranchHistoryTreeItem,Microsoft.TeamFoundation.VersionControl.Client.BranchRelative,System.Int32)">
            <summary>
            Constructor that creats a tree item.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BranchHistoryTreeItem.Microsoft#TeamFoundation#VersionControl#Common#IBranchHistoryTreeItem#AddChild(Microsoft.TeamFoundation.VersionControl.Common.IBranchHistoryTreeItem)">
            <summary>
            Call this method to add another tree item to .Children.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchHistoryTreeItem.Relative">
            <summary>
            Returns the edge of the branch topology tree that this node lies on.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchHistoryTreeItem.Microsoft#TeamFoundation#VersionControl#Common#IBranchHistoryTreeItem#Relative">
            <summary>
            Returns the edge of the branch topology tree that this node lies on.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchHistoryTreeItem.Level">
            <summary>
            The depth of this node in the branch topology tree.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchHistoryTreeItem.Microsoft#TeamFoundation#VersionControl#Common#IBranchHistoryTreeItem#Level">
            <summary>
            The depth of this node in the branch topology tree.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchHistoryTreeItem.Parent">
            <summary>
            The parent branch topology tree node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchHistoryTreeItem.Microsoft#TeamFoundation#VersionControl#Common#IBranchHistoryTreeItem#Parent">
            <summary>
            The parent branch topology tree node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchHistoryTreeItem.Children">
            <summary>
            Returns the children branch topology nodes of the current node.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchHistoryTreeItem.Microsoft#TeamFoundation#VersionControl#Common#IBranchHistoryTreeItem#Children">
            <summary>
            Returns the children branch topology nodes of the current node.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BranchHistoryTreeItem.GetRequestedItem">
            <summary>
            GetRequestedItem will look for the specified item in the
            tree from the point in the tree you request down though
            each of the roots.
            </summary>
            <returns>The requested history tree item</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BranchHistoryTreeItem.Microsoft#TeamFoundation#VersionControl#Common#IBranchHistoryTreeItem#GetRequestedItem">
            <summary>
            GetRequestedItem will look for the specified item in the
            tree from the point in the tree you request down though
            each of the roots.
            </summary>
            <returns>The requested history tree item</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BranchHistoryUtil">
            <summary>
            A utility class for constructing IBranchHistoryTreeItem trees.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BranchHistoryUtil.ConvertBranchRelativeSetToHistoryTrees``2(System.Collections.Generic.ICollection{``1})">
            <summary>
            Convert BranchRelativeSet instance to list of BranchHistoryTreeItem instances.  A single
            BranchRelativeSet may contain multiple trees, causing the 1:n mapping.
            </summary>
            <param name="branchRelativeSet">the BranchRelativeSet instance to convert to an array of branch history trees</param>
            <returns>the equivalent List of BranchHistoryTreeItem objects (these are the roots)</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BranchObject">
            <summary>
            Represents a first class branch object on the server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchObject.ChildBranches">
            <summary>
            List of child branches
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchObject.DateCreated">
            <summary>
            Date branch object was created
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchObject.Properties">
            <summary>
            Updateable properties of the branch object.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchObject.RelatedBranches">
            <summary>
            Branches related with a merge relationship.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BranchProperties">
            <summary>
            Container class for all the updateable properties
            of a branch object
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchProperties.BranchMappings">
            <summary>
            List of mappings to use in branch, merge operations of this branch object.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchProperties.Description">
            <summary>
            Description of the branch object
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchProperties.ParentBranch">
            <summary>
            Itemspec of the parent branch, null if the branch object
            does not have a parent.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchProperties.RootItem">
            <summary>
            The root item of the branch
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier">
            <summary>
            Class used to represent a given item at a given version.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier.#ctor(System.String)">
            <summary>
            Creates an item identifier.
            </summary>
            <param name="item">Server or local item</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier.#ctor(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            Creates an item identifier with the item and specified version
            </summary>
            <param name="item">Server or local item</param>
            <param name="version">Version Spec used for the identifier.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier.#ctor(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32)">
            <summary>
            Creates an item identifier with the item and specified version
            </summary>
            <param name="item">Server or local item</param>
            <param name="version">Version Spec used for the identifier.</param>
            <param name="deletionId">DeletionId of the identifier - to be deprecated in a future releae</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Change)">
            <summary>
            Creates an item identifier from a change object
            </summary>
            <param name="change"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier.Equals(Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier)">
            <summary>
            Compares an item identifier to this item identifier for equality
            </summary>
            <param name="id">item identifer to compare to</param>
            <returns>true for same, false otherwise</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier.ChangeType">
            <summary>
            Change type of the item at the given version.   
            Populated only if object is returned from server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier.DeletionId">
            <summary>
            The deletion id of the item identifier, this is intentionally internal
            as we want to eventually obsolete DeletionId, use IsDeleted instead
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier.IsDeleted">
            <summary>
            If the item is deleted at the VersionSpec version.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier.Item">
            <summary>
            Server item
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier.Version">
            <summary>
            Version at which item exists.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BranchRelative">
            <summary>
            Class representing one row from QueryBranches
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchRelative.BranchFromItem">
            <summary>
            Optional BranchedFrom item.
            This is set to NULL if the user doesn't have permission to read the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchRelative.BranchToItem">
            <summary>
            Optional BranchedTo item.
            This is set to NULL if the user doesn't have permission to read the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchRelative.RelativeFromItemId">
            <summary>
            RelativeId for BranchFromItem item.
            RelativeIds exist because the members BranchFromItem and BranchToItem can both be NULL for security reasons.
            The RelativeFromItemId of 0 means that this is the root of the branch topology graph.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchRelative.RelativeToItemId">
            <summary>
            RelativeId for the BranchToItem item.
            RelativeIds exist because the members BranchFromItem and BranchToItem can both be NULL for security reasons.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ChangeRequest">
            <summary>
            Represents a request to pend a change for an item.
            </summary>
            <summary>
            Object representing a request from the client to pend changes to an item
            or item wildcards
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ChangeRequest.#ctor(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.RequestType,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Int32,System.String,System.Boolean)">
            <summary>
            Create a change request object.
            </summary>
            <param name="item">the item to which the change will be applied</param>
            <param name="version">the version</param>
            <param name="requestType">the type of change request</param>
            <param name="itemType">the type of the item (only used for add)</param>
            <param name="encoding">the encoding (only used with files for add or Encoding changes)</param>
            <param name="lockLevel">the lock level to apply to the item</param>
            <param name="deletionId">the deletion id (non-zero if the item is deleted, as for Undelete)</param>
            <param name="targetItem">the target name (used for Rename and Undelete with a new name)</param>
            <param name="checkTarget">if true, check the type of the target on disk</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ChangeRequest.FromStrings(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RequestType,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.Boolean)">
            <summary>
            Convert an array of paths to an array of ChangeRequest objects with the specified options.
            </summary>
            <param name="paths">the paths to the items</param>
            <param name="requestType">the type of change request</param>
            <param name="lockLevel">the lock level to apply to the item</param>
            <param name="recursion">the recurion level</param>
            <param name="checkTarget">(only applies to rename, branch, undelete) if true, check the
              type of the target on disk</param>
            <returns>an array of ChangeRequests</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ChangeRequest.FromItemSpecs(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.RequestType,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean)">
            <summary>
            Convert an array of ItemSpec objects to an array of ChangeRequest objects with the
            specified options.
            </summary>
            <param name="itemSpecs">the items</param>
            <param name="requestType">the type of change request</param>
            <param name="lockLevel">the lock level to apply to the item</param>
            <param name="checkTarget">(only applies to rename, branch, undelete) if true, check the
              type of the target on disk</param>
            <returns>an array of ChangeRequests</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ChangeRequest.DeletionId">
            <summary>
            If RequestType is Undelete and there is more than one deleted item
            with the same repository path, this ID is used to disambiguate them.
            Otherwise, it should be 0
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ChangeRequest.Encoding">
            <summary>
            The enocding attribute is a versioned property of a file. This defines
            the Windows encoding used to represent the data.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ChangeRequest.ItemSpec">
            <summary>
            Server or local path for the item to add
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ChangeRequest.ItemType">
            <summary>
            The ItemType is a non-versioned property that may only be set when 
            adding an item to the repository. Once an item is a file or folder the
            Type may not be changed. The client should supply the ItemType on
            calls to help disambiguate.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ChangeRequest.LockLevel">
            <summary>
            Specifies the new lock level of the item.  If the value
            "Unchanged" is passed in, the lock level is not changed from the
            previous pending change.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ChangeRequest.Properties">
            <summary>
            The properties to pend changes for.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ChangeRequest.RequestType">
            <summary>
            List of change types being made to the item (see RequestType)
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ChangeRequest.TargetItem">
            <summary>
            If RequestType is Rename, Branch or Undelete, this specifies the new item being changed.  
            Null otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ChangeRequest.TargetItemType">
            <summary>
            If TargetItem is specified, this value can override the server's detection
            of whether the target is a folder or item (move vs rename).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ChangeRequest.VersionSpec">
            <summary>
            Version specifier.  Optional argument used with RequestType.Branch or .Merge.
            If specified, the branch/merge is to be started from the given VersionSpec,
            Otherwise, allow the merge logic to figure it out.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ItemProperties">
            <summary>
            Encapsulates a set of properties associated with a path.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ItemProperties.Path">
            <summary>
            The path that has the properties
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ItemProperties.Properties">
            <summary>
            The properties associated with the path.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.Changeset">
            <summary>
            Represents a changeset as returned by the QueryHistory command
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Changeset.#ctor(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinNote,Microsoft.TeamFoundation.VersionControl.Client.PolicyOverrideInfo,System.DateTime)">
            <summary>
            NOTE:  Do not use outside of Hatteras.Client!
            Creates a changeset object to pass to the web service CheckIn() method.
            </summary>
            <param name="sourceControl">the VersionControlServer object</param>
            <param name="owner">the user checking in the changes</param>
            <param name="comment">Checkin comment</param>
            <param name="checkinNote">Checkin note</param>
            <param name="policyOverride">Policy failure override</param>
            <param name="creationDate">Date of the checkin, DateTime.MinValue means a date was not specified.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Changeset.SetChangesetId(System.Int32)">
            <summary>
            INTERNAL:  Do not use outside of Hatteras.Client!
            This method is used by CheckIn to set the changeset number after it is committed.
            </summary>
            <param name="changesetId">the committed changeset number</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Changeset.Update">
            <summary>
            Update changeset metadata on the server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Changeset.ArtifactUri">
            <summary>
            Artifact Uri
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Changeset.AssociatedWorkItems">
            <summary>
            Returns a limited set of information about the associated work items with this changeset.
            This property does not spin up a WorkItemStore, so it is very quick.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Changeset.WorkItems">
            <summary>
            Currituck work items associated with this changeset.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Changeset.VersionControlServer">
            <summary>
            The source control object representing the repository on which the changeset exists.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Changeset.SortChanges">
            <summary>
            Sorts the changes in the changeset
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Changeset.Properties">
            <summary>
            Returns a read-only collection of properties associated with the changeset.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Changeset.Changes">
            <summary>
            Individual per-item changes contained in this changeset
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Changeset.ChangesetId">
            <summary>
            The changeset number.  Monotonically increases over time
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Changeset.CheckinNote">
            <summary>
            This is the checkinNote associated with this changeset
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Changeset.Comment">
            <summary>
            The checkin comment
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Changeset.Committer">
            <summary>
            Authoritative name of user who committed this change
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Changeset.CommitterDisplayName">
            <summary>
            Display name of user who committed this change
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Changeset.CreationDate">
            <summary>
            Timestamp when changeset was committed
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Changeset.InternalProperties">
            <summary>
            Changeset properties
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Changeset.Owner">
            <summary>
            Authoritative name of user who owns this change.  May differ from Committer if
            the change was imported or committed on behalf of another user.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Changeset.OwnerDisplayName">
            <summary>
            Display name of user who owns this change.  May differ from Committer if
            the change was imported or committed on behalf of another user.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Changeset.PolicyOverride">
            <summary>
            The policy override is used to record a failure of a policy
            when the client attempted to checkin. Checkin's are not prevented
            and the client can override them, but must supply a reason why
            they were overridden.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.Change">
            <summary>
            This represents and individual change to an item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Change.Comparer">
            <summary>
            Static Comparer for change objects, create one and cache it on first use.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Change.MergeSources">
            <summary>
            Source information of merges and renames. 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Change.Item">
            <summary>
            The item involved in the change
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ChangeComparer">
            <summary>
            Used to compare 2 change objects
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ChangeComparer.System#Collections#Generic#IComparer{Microsoft#TeamFoundation#VersionControl#Client#Change}#Compare(Microsoft.TeamFoundation.VersionControl.Client.Change,Microsoft.TeamFoundation.VersionControl.Client.Change)">
            <summary>
            Compares 2 changes based upon the underlying item
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ChangesetMerge">
            <summary>
            Represents a historical merge operation.
            </summary>
            <summary>
            Represents a merge of one changeset into another
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ChangesetMerge.TargetChangeset">
            <summary>
            The actual Changeset that the merge happened in.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ChangesetMerge.Partial">
            <summary>
            If false, all changes in the source changeset were merged to the
            target
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ChangesetMerge.SourceVersion">
            <summary>
            The number of the changeset merged from.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ChangesetMerge.TargetVersion">
            <summary>
            Number of the new changeset the source was merged into.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ChangesetSummary">
            <summary>
            Contains the information needed for a single changeset / item involved in a merge
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CheckinEvaluationResult">
            <summary>
            This class holds the results of evaluating a set of changes for checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinEvaluationResult.Conflicts">
            <summary>
            These are the checkin conflicts returned by the server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinEvaluationResult.NoteFailures">
            <summary>
            These are the checkin note problems (missing required notes, invalid checkin notes, etc.).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinEvaluationResult.PolicyFailures">
            <summary>
            These are the checkin policy failures.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinEvaluationResult.PolicyEvaluationException">
            <summary>
            If evaluating policies throws an exception, this is the exception that occurred.  It is null
            otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CheckinConflict">
            <summary>
            This class represents conflicts that are recorded by checkin evaluation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinConflict.ServerItem">
            <summary>
            The path for the server item that is in conflict.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinConflict.Message">
            <summary>
            The localized message describing the conflict.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinConflict.Resolvable">
            <summary>
            True if the conflict is a conflict that can be resolved via the standard conflict resolution
            mechanism.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CheckinEvaluationOptions">
            <summary>
            Used in pre-checkin evaluation, this enumeration is used to specify which aspects of a
            checkin should be evaluated.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.CheckinEvaluationOptions.Policies">
            <summary>
            Evaluate checkin policies.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.CheckinEvaluationOptions.Conflicts">
            <summary>
            Before uploading content, check to see if any conflicts would be filed at check-in time.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.CheckinEvaluationOptions.Notes">
            <summary>
            Evaluate checkin notes, to see if invalid notes have been supplied or if any required
            notes are missing.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.CheckinEvaluationOptions.AddMissingFieldValues">
            <summary>
            Supply this bit only in combination with the Notes bit. Indicates that the EvaluateCheckin
            family of methods should modify the CheckinNote object provided to add CheckinNoteFieldValues
            for checkin notes that are defined, but for which no value was supplied. The values will
            be added with a value of String.Empty.
            
            The string casing of the Name portion of each CheckinNoteFieldValue provided by the caller
            will also be corrected to match the casing in the corresponding CheckinNoteFieldDefinition.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CheckinNote">
            <summary>
            Represents the checkin notes that are part of a changeset.
            </summary>
            <summary>
            A checkin note class is used to hold the data that represents an 
            instance of a checkin note.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CheckinNote.MergeWithFieldDefinitions(Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldDefinition[])">
            <summary>
            For any unspecified CheckinNoteFieldDefinitions that are in scope, add a CheckinNoteFieldValue
            with an empty string value.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CheckinNote.Evaluate(Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldDefinition[])">
            <summary>
            Evaluates this CheckinNote's CheckinNoteFieldValues against the supplied CheckinNoteFieldDefinitions
            and returns a CheckinNoteFailure for each note not specified, or each note specified that has
            no definition (extraneous notes).
            </summary>
            <param name="fieldDefinitions">The set of field definitions to evaluate against</param>
            <returns>The set of checkin note failures</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CheckinNote.Evaluate(Microsoft.TeamFoundation.VersionControl.Client.CheckinNote,Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldDefinition[])">
            <summary>
            Evaluates a CheckinNote's CheckinNoteFieldValues against the supplied CheckinNoteFieldDefinitions
            and returns a CheckinNoteFailure for each note not specified, or each note specified that has
            no definition (extraneous notes).
            </summary>
            <param name="note">The CheckinNote to evaluate. May be null.</param>
            <param name="fieldDefinitions">The set of field definitions to evaluate against</param>
            <returns>The set of checkin note failures</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CheckinNote.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Creates an instance from the XML representation used in the cache file.
            </summary>
            <param name="checkinNoteNode">the checkin notes node</param>
            <returns>an instance of CheckinNote created from the XML</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CheckinNote.SaveAsXml(System.Xml.XmlNode)">
            <summary>
            Saves this instance to the XML format used in the cache file.
            </summary>
            <param name="parent">the XML node for the workspace's local mappings</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CheckinNote.CanonicalizeName(System.String)">
            <summary>
            Check if the specified string is a valid checkin note name and strip any leading and
            trailing whitespace characters.  Throw an exception if the name is invalid.
            </summary>
            <param name="name">A checkin note name</param>
            <returns>Cleaned up name.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinNote.Values">
            <summary>
            This is the set of CheckinNoteFieldValues that as associated with this checkin
            note. Each checkin note may have a variable set of fields. They are
            not of a fixed schema.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.Client">
            <summary>
            The Hatteras client.
            </summary>
            <summary>
            This is the get support for the client.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.#cctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.#ctor(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer)">
            <summary>
            **** NOTE:  Only the VersionControlServer class should call this constructor! ****
            Create a Hatteras client associated with a VersionControlServer object.
            </summary>
            <param name="sourceControl">the associated VersionControlServer object</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.SetWorkspaceLocationProgress">
            <summary>
            This event is raised during a call to Workspace.Update, when the location of the workspace
            is being changed (server to local, or local to server).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnSetWorkspaceLocationProgress(Microsoft.TeamFoundation.VersionControl.Client.SetWorkspaceLocationProgressEventArgs)">
            <summary>
            This event is raised during a call to Workspace.Update, when the location of the workspace
            is being changed (server to local, or local to server).
            </summary>
            <param name="e">Information about the current progress</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.BeforeCheckinPendingChange">
            <summary>
            This event is sent as CheckIn() processes each pending change but before the
            pending changes are committed.  It is basically a progress indicator.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnBeforeCheckinPendingChange(Microsoft.TeamFoundation.VersionControl.Client.ProcessingChangeEventArgs)">
            <summary>
            This event is sent as the check in command processes each pending change but before the
            pending changes are committed.
            </summary>
            <param name="e">Information on the pending change being checked in.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.CommitCheckin">
            <summary>
            Committed checkin event.  This is fired after pending checkins have been committed 
            into the Hatteras repository
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnCommitCheckin(Microsoft.TeamFoundation.VersionControl.Client.CommitCheckinEventArgs)">
            <summary>
            This event is sent after a successful checkin.
            </summary>
            <param name="e">Information on the changeset committed</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.ChangesetReconciled">
            <summary>
            Reconcile to changeset event.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnChangesetReconciled(Microsoft.TeamFoundation.VersionControl.Client.ChangesetReconciledEventArgs)">
            <summary>
            This event is raised after reconciling a particular changeset.
            </summary>
            <param name="e">Information on the changeset committed</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.FolderContentChanged">
            <summary>
            Folder content changed event. This is raised when server folder content is changed
            without pending changes. Examples are creating committed branch and destroying item.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnFolderContentChanged(Microsoft.TeamFoundation.VersionControl.Client.FolderContentChangedEventArgs)">
            <summary>
            This event is raised after a server folder content is changed without pending changes.
            </summary>
            <param name="e">Information on the changeset committed, if available</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.BeforeShelvePendingChange">
            <summary>
            This event is sent as Shelve() processes each pending change but before the
            shelveset is created.  It is basically a progress indicator.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnBeforeShelvePendingChange(Microsoft.TeamFoundation.VersionControl.Client.ProcessingChangeEventArgs)">
            <summary>
            This event is sent as the shelve command processes each pending change but before the
            pending changes are shelved.
            </summary>
            <param name="e">Information on the pending change being shelved.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.CommitShelveset">
            <summary>
            Committed shelveset event.  This is fired after the changes have been shelved 
            into the Hatteras repository
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnCommitShelveset(Microsoft.TeamFoundation.VersionControl.Client.CommitShelvesetEventArgs)">
            <summary>
            This event is sent after successfully committing a shelveset.
            </summary>
            <param name="e">Information on the shelveset created</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.DeletedShelveset">
            <summary>
            Deleted shelveset event.  This is fired after deleting a shelveset in the repository.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnDeleteShelveset(Microsoft.TeamFoundation.VersionControl.Client.DeletedShelvesetEventArgs)">
            <summary>
            This event is sent after successfully deleting a shelveset.
            </summary>
            <param name="e">Information on the pending change being shelved</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.UnshelveShelveset">
            <summary>
            Unshelve shelveset event.  This is fired after unshelving the changes in a shelveset.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnUnshelveShelveset(Microsoft.TeamFoundation.VersionControl.Client.UnshelveShelvesetEventArgs)">
            <summary>
            This event is sent after unshelving a shelveset.
            </summary>
            <param name="e">Information on the shelveset unshelved</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.Merging">
            <summary>
            This event is sent for each item merged.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnMerging(Microsoft.TeamFoundation.VersionControl.Client.MergeEventArgs)">
            <summary>
            This event is sent for each item merged.
            </summary>
            <param name="e">Information on the merge of two items.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.NewPendingChange">
            <summary>
            This event is sent when a change is being pended (for example, checkout, add,
            delete, etc).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnPendingChange(Microsoft.TeamFoundation.VersionControl.Client.PendingChangeEventArgs)">
            <summary>
            The PendingChange event is sent when a change is being pended (for example, checkout, add,
            delete, etc).
            </summary>
            <param name="e">Information on the pending change being pended.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.UndonePendingChange">
            <summary>
            This event is sent when a change is undone.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnUndonePendingChange(Microsoft.TeamFoundation.VersionControl.Client.PendingChangeEventArgs)">
            <summary>
            The UndonePendingChange event is sent when a change is undone.
            </summary>
            <param name="e">Information on the change undone.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.ResolvedConflict">
            <summary>
            This event is sent when a conflict is resolved.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnResolvedConflict(Microsoft.TeamFoundation.VersionControl.Client.ResolvedConflictEventArgs)">
            <summary>
            This event is sent when a conflict is resolved.
            </summary>
            <param name="e">Information on the conflict.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.Conflict">
            <summary>
            This event is sent when a conflict happens when doing a checkin.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnConflict(Microsoft.TeamFoundation.VersionControl.Client.ConflictEventArgs)">
            <summary>
            This event is sent when a conflict happens when doing a checkin.
            </summary>
            <param name="e">Information on the conflict.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.UnshelveConflict">
            <summary>
            This event is sent when a conflict happens when doing an unshelve.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnUnshelveConflict(Microsoft.TeamFoundation.VersionControl.Client.ConflictEventArgs)">
            <summary>
            This event is sent when a conflict happens when doing a checkin.
            </summary>
            <param name="e">Information on the conflict.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.NonFatalError">
            <summary>
            The NonFatalError event is sent when some error occurs in the client but does not cause
            the processing of the command to terminate.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnNonFatalError(Microsoft.TeamFoundation.VersionControl.Client.ExceptionEventArgs)">
            <summary>
            The NonFatalError event is sent when some error occurs in the client but does not cause
            the processing of the command to terminate.
            </summary>
            <param name="e">Information about the non-fatal error.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnNonFatalError(System.Exception,Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.Int32)">
            <summary>
            The NonFatalError event is sent when some error occurs in the client but does not cause
            the processing of the command to terminate.
            </summary>
            <param name="e">Exception for the non-fatal error.</param>
            <param name="workspace">The workspace involved or null if no workspace or unknown.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnNonFatalError(System.String,Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.Int32)">
            <summary>
            This is used to issue warnings on the client side (for example, proxy server is down).
            </summary>
            <param name="message">the warning message</param>
            <param name="workspace">if non-null, the workspace in which the warning occurred</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.CreatedWorkspace">
            <summary>
            This event is fired when a workspace is created.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnWorkspaceCreated(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceEventArgs)">
            <summary>
            This event is sent after a workspace is created.
            </summary>
            <param name="e">Information on the workspace created</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.UpdatedWorkspace">
            <summary>
            This event is fired when a workspace is updated.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnWorkspaceUpdated(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceEventArgs)">
            <summary>
            This event is sent after a workspace is updated
            </summary>
            <param name="e">Information on the workspace that was updated.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.DeletedWorkspace">
            <summary>
            This event is fired when a workspace is deleted.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnWorkspaceDeleted(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceEventArgs)">
            <summary>
            This event is sent after a workspace is deleted.
            </summary>
            <param name="e">Information on the workspace deleted.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.GetCompleted">
            <summary>
            This event is fired when a get operation completes on a workspace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnGetCompleted(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceEventArgs)">
            <summary>
            This event is sent when a get operation completes on a workspace.
            </summary>
            <param name="e">Information on the workspace which completed a get operation.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.PendingChangesChanged">
            <summary>
            This event is fired when a workspace's pending changes are modified.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnPendingChangesChanged(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceEventArgs)">
            <summary>
            This event is sent after a workspace's pending changes are modified.
            </summary>
            <param name="e">Information on the workspace whose pending changes changed.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.PendingChangeCandidatesChanged">
            <summary>
            This event is fired when a workspace's pending change candidates are modified.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnPendingChangeCandidatesChanged(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceEventArgs)">
            <summary>
            This event is sent after a workspace's pending change candidates are modified.
            </summary>
            <param name="e">Information on the workspace whose pending change candidates
            changed.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnBeforeDeleteWorkspace(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Fires off BeforeWorkspaceDelete events to listeners.
            </summary>
            <param name="workspace">Workspace to be deleted</param>
            <returns>true if the workspace can be deleted; 
            false if a listener does not want the workspace deleted</returns>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.WorkItemUpdated">
            <summary>
            This event is sent as each work item is updated at check in.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnWorkItemUpdated(Microsoft.TeamFoundation.VersionControl.Client.WorkItemUpdatedEventArgs)">
            <summary>
            This event is sent as each work item is updated at check in.
            </summary>
            <param name="e">Information on the work item update.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.BeforeWorkItemsUpdate">
            <summary>
            This event is sent before check in starts updating work items.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnBeforeWorkItemsUpdate(Microsoft.TeamFoundation.VersionControl.Client.WorkItemsUpdateEventArgs)">
            <summary>
            This event is sent before check in starts updating work items.
            </summary>
            <param name="e">Information on the work item update.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.AfterWorkItemsUpdated">
            <summary>
            This event is sent after check in has updated work items.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnAfterWorkItemsUpdated(Microsoft.TeamFoundation.VersionControl.Client.WorkItemsUpdateEventArgs)">
            <summary>
            This event is sent after check in has updated work items.
            </summary>
            <param name="e">Information on the work item update.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.PendChanges(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.ChangeRequest[],System.Boolean,Microsoft.TeamFoundation.VersionControl.Common.PendChangesOptions,System.String[],System.String[],System.Int32)">
            <summary>
            Pends changes in the specified workspace on the specified server.
            
            NOTE: The mid-tier requires that all ChangeRequests be of the same ChangeRequestType and that
                  each item appears in only one request.  If the same item appears more than once, the mid-tier
                  only processes the first ChangeRequest for that item.
            </summary>
            <param name="changeRequests">the changes to pend</param>
            <param name="updateDisk">if true, the local disk is updated according to the pending changes;
              if false, the disk is not modified and changes are not acknowledged</param>
            <returns>the number of pending changes</returns>
            <param name="options">The set of PendChanges options, not including the supported feature flags.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.AutoResolveValidConflicts(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.Conflict},Microsoft.TeamFoundation.VersionControl.Client.AutoResolveOptions)">
            <summary>
            Takes a list of candidates for AutoResolve and attempts to resolve them with
            the correct resolution and performing a content merge if necessary.
            </summary>
            <param name="workspace"></param>
            
            <param name="conflicts"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.Merge(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Common.MergeOptionsEx,System.String[],System.String[],System.Int32)">
            <summary>
            Performs a merge of the source to the target.
            </summary>
            <param name="workspace">the workspace</param>
            <param name="source">the source of the merge (local or server path)</param>
            <param name="target">the target of the merge (local or server path -- must be mapped)</param>
            <param name="versionFrom">the starting version (may be null)</param>
            <param name="versionTo">the ending version (may be null)</param>
            <param name="lockLevel">the lock level to apply to each item specified by the target</param>
            <param name="mergeOptions">the merge options specified</param>
            <param name="itemAttributeFilters">List of attribute names to return with the get ops.</param>
            <param name="itemPropertyFilters">List of property names to return with the get ops.</param>
            <returns>status information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.Rollback(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Common.RollbackOptions,System.String[],System.String[],System.Int32)">
            <summary>
            Pends a rollback for changes which happened to a certain path, within the specified versions
            </summary>
            <param name="workspace">The workspace in which the rollback will be pended</param>
            <param name="itemSpecs">An array of itemSpecs (path and recursion filter)</param>
            <param name="itemSpecVersion">The version spec used to identify the path the user is referring to</param>
            <param name="versionFrom">The version we are rolling back from</param>
            <param name="versionTo">The version we are rolling back to</param>
            <param name="lockLevel">The lock level to apply to each item being rolled back</param>
            <param name="options">Options to use.</param>
            <returns>Status information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.Unshelve(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.String[],System.String[],System.String[],System.Boolean,System.Boolean,Microsoft.TeamFoundation.VersionControl.Client.PendingChange[]@,Microsoft.TeamFoundation.VersionControl.Client.Conflict[]@,System.Int32)">
            <summary>
            Unshelves the pending changes from the specified shelveset.
            Throws an UnshelveException if unshelving fails on the server.
            </summary>
            <param name="shelvesetName">The name of the shelveset to unshelve</param>
            <param name="shelvesetOwner">The name of the user who created the shelveset</param>
            <param name="workspace">The workspace to unshelve the changest into.</param>
            <param name="items">A list of files and/or folders within the shelveset that should be
              unshelved or null for all</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <param name="shelvesetPropertyNameFilters">A list of shelveset properties to return with
            the shelveset object.</param>
            <param name="merge">True if "merge" should be performed when unshelving. This will file
            merge and version conflicts for items that have conflicting pending changes and different
            pended versions respectively.</param>
            <param name="noAutoResolve">Prevents any conflicts from being auto resolved even if the
            option is set in the registry.</param>
            <param name="changes">Return the set of unshelved pending changes</param>
            <param name="conflicts">The list of conflicts that were generated by the unshelve operation.
            Conflicts are only filed if the merge parameter is true.  In the case where merge is false
            an empty array will be returned.</param>
            <returns>the Shelveset that was unshelved or null if the unshelving failed</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.Undo(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean,System.Boolean,System.String[],System.String[],System.Int32)">
            <summary>
            Undo the pending changes for the specified items.  The items may contain wildcards.
            </summary>
            <param name="workspace">the workspace (cannot be null)</param>
            <param name="itemSpecs">the items for which to undo pending changes</param>
            <param name="updateDisk">if true, update the items on disk for the undo; otherwise, the disk is not modified</param>
            <param name="deleteAdds">determines if adds should be deleted</param>
            <returns>returns the number of undone changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.GetBranchHistory(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            Gets the branch history for items in the repository
            </summary>
            <param name="workspaceName">the workspace name -- only necessary if any local paths are used</param>
            <param name="workspaceOwner">the workspace owner -- only necessary if any local paths are used</param>
            <param name="itemSpecs">the filespecs to get the branch history for</param>
            <param name="version">the version at which to retrieve the branch history</param>
            <returns>the array of branch history trees from the repository</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.GetMergesWithDetails(System.String,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
             Look up the merge history (detailed) of the requested item with an optional source.
            </summary>
            <param name="workspaceName">the workspace name -- only necessary if any local paths are used</param>
            <param name="workspaceOwner">the workspace owner -- only necessary if any local paths are used</param>
            <param name="source">the filespec of the optional source item</param>
            <param name="sourceVersion">the version of the optional source spec</param>
            <param name="sourceDeletionId">DeletionId of the source</param>
            <param name="target">the filespec of the required target item</param>
            <param name="targetVersion">the version of the required target spec</param>
            <param name="targetDeletionId">DeletionId of the target</param>
            <param name="versionFrom">start of the merge history range, null for "start of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="versionTo">end of the merge history range, null for "end of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="recursion">what level of recursion we should apply to the target search.</param>
            <returns>A ChangeSetMergeDetails object</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.GetMergesWithDetails(System.String,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.Boolean)">
            <summary>
             Look up the merge history (detailed) of the requested item with an optional source.
            </summary>
            <param name="workspaceName">the workspace name -- only necessary if any local paths are used</param>
            <param name="workspaceOwner">the workspace owner -- only necessary if any local paths are used</param>
            <param name="source">the filespec of the optional source item</param>
            <param name="sourceVersion">the version of the optional source spec</param>
            <param name="sourceDeletionId">DeletionId of the source</param>
            <param name="target">the filespec of the required target item</param>
            <param name="targetVersion">the version of the required target spec</param>
            <param name="targetDeletionId">DeletionId of the target</param>
            <param name="versionFrom">start of the merge history range, null for "start of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="versionTo">end of the merge history range, null for "end of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="recursion">what level of recursion we should apply to the target search.</param>
            <param name="showAll">indicates whether to include merge history of renamed items.</param>
            <returns>A ChangeSetMergeDetails object</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.GetMerges(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
             Look up the merge history of the requested item with an optional source.
            </summary>
            <param name="workspaceName">the workspace name -- only necessary if any local paths are used</param>
            <param name="workspaceOwner">the workspace owner -- only necessary if any local paths are used</param>
            <param name="sourceItemSpec">the optional source itemspec</param>
            <param name="sourceVersion">the version of the optional source spec</param>
            <param name="targetItemSpec">the required target itemspec</param>
            <param name="targetVersion">the version of the required target spec</param>
            <param name="versionFrom">start of the merge history range, null for "start of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="versionTo">end of the merge history range, null for "end of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <returns>an array of ChangesetMerge objects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.GetMerges(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Boolean)">
            <summary>
             Look up the merge history of the requested item with an optional source.
            </summary>
            <param name="workspaceName">the workspace name -- only necessary if any local paths are used</param>
            <param name="workspaceOwner">the workspace owner -- only necessary if any local paths are used</param>
            <param name="sourceItemSpec">the optional source itemspec</param>
            <param name="sourceVersion">the version of the optional source spec</param>
            <param name="targetItemSpec">the required target itemspec</param>
            <param name="targetVersion">the version of the required target spec</param>
            <param name="versionFrom">start of the merge history range, null for "start of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="versionTo">end of the merge history range, null for "end of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="showAll">indicates whether to include merge history of renamed items.</param>
            <returns>an array of ChangesetMerge objects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.GetMergeCandidates(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,System.String,Microsoft.TeamFoundation.VersionControl.Common.MergeOptionsEx)">
            <summary>
             Returns a list of changesets the need to be merged.
            </summary>
            <param name="workspaceName">the workspace name (only need if local paths are used)</param>
            <param name="workspaceOwner">the workspace owner (only need if local paths are used)</param>
            <param name="source">the itemspec of the source item</param>
            <param name="target">the filespec of the target item</param>
            <returns>returns a list of changesets the need to be merged</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.QueryWorkspace(System.String,System.String)">
            <summary>
            Call the appropriate QueryWorkspace method based on the server we are talking to.
            If Repository4 is available, call QueryWorkspace there. If not, call it on the
            old Repository web service.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.CreateWorkspace(Microsoft.TeamFoundation.VersionControl.Client.CreateWorkspaceParameters)">
            <summary>
            Create a new workspace on the VersionControlServer associated with this Client.
            </summary>
            <param name="createWorkspaceParameters">A CreateWorkspaceParameters instance</param>
            <returns>The newly created workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.SetWorkspaceLocation(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Common.WorkspaceLocation)">
            <summary>
            Given a workspace object, changes its location from server to local or vice versa.
            </summary>
            <param name="workspace">Workspace whose location should be changed</param>
            <param name="newLocation">The new location for the workspace (server or local)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.DeleteWorkspace(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Delete the specified workspace.  Remove it both from the server and from the client (if
            it is owned by this user on this computer).
            </summary>
            <param name="workspace">Workspace to delete.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.SetWorkingFolder(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder)">
            <summary>
            Set the specified working folder.  Update the workspace and if the workspace is local
            update the local working folder config data as well.  Validate the working folder (if it
            is local) to make sure that it does not cross repository or workspace boundaries.
            </summary>
            <param name="workingFolder">the working folder (includes reference to the workspace)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.DeleteWorkingFolder(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder)">
            <summary>
            Delete the specified working folder mapping.
            </summary>
            <param name="workingFolder">working folder to delete</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.InternalSetWorkingFolder(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder,System.Boolean)">
            <summary>
            Update or delete the working folder mappings.
            </summary>
            <param name="workingFolder">working folder to update</param>
            <param name="isDelete">if true, delete the working folder; otherwise, set it, replacing
              any matching existing working folder</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.RemovePartialMatches(System.Collections.Generic.List{Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder},Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder,System.Boolean)">
            <summary>
            Remove WorkingFolder entries from the given list of folders that match either the specified
            workingFolder's server item *or* local item.  If isDelete is true, the Type properties of
            the WorkingFolder objects must match as well for removal.
            </summary>
            <param name="folders">WorkingFolder collection to remove matching mappings from</param>
            <param name="workingFolder">mapping that will be matched against existing list of items</param>
            <param name="isDelete">if true, we should force match on type</param>
            <returns>number of entries that were removed from the list</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.GetLocalWorkspace(System.String,System.Boolean)">
            <summary>
            Gets the workspace containing a mapping for the given path.  May throw a 
            ItemNotMappedException if there is no mapping or it's not mapped for this server.
            </summary>
            <param name="path">the path</param>
            <param name="throwIfNotFound">if true, this method throws ItemNotMappedException if the
              path is not mapped; otherwise, returns null</param>
            <returns>the workspace containing a mapping for the path</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.GetLocalWorkspace(System.String,System.String)">
            Look up the local workspace for the specified repository, workspaceName and workspaceOwner
            combo.  This will only ever return anything if the workspaceOwner matches the current
            user.  This returns the actual instance, not a copy!
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.GetRepositoryWorkspace(System.String,System.String)">
            <summary>
            Retrieve the specified workspace directly from the repository server.  The server throws an
            exception if it does not have a workspace that matches.  If the server reports that the 
            workspace does not exist, the workspace will be deleted from the cache if it exists there.
            </summary>
            <param name="workspaceName">the workspace name</param>
            <param name="workspaceOwner">the workspace owner</param>
            <returns>the workspaces from the repository server</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.GetRepositoryWorkspaces(System.String,System.String,System.String)">
            <summary>
            Get a list of matching workspaces.  The repository must be a valid repository but the workspace
            name, owner, and computer may be null, which means match all:
            Note that this method returns a "private" copy of the workspace so that any future changes
            to the workspace will not affect the returned workspaces.
            </summary>
            <param name="workspaceName">Name of the workspaces (null matches any).</param>
            <param name="workspaceOwner">OwnerName of the workspaces (null matches any).</param>
            <param name="computer">Computer the workspaces are on (null matches any).</param>
            <returns>The set of workspaces matching the provided filters</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.GetRepositoryWorkspaces(System.String,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkspacePermissions)">
            <summary>
            Get a list of matching workspaces.  The repository must be a valid repository but the workspace
            name, owner, and computer may be null, which means match all:
            Note that this method returns a "private" copy of the workspace so that any future changes
            to the workspace will not affect the returned workspaces.
            </summary>
            <param name="workspaceName">Name of the workspaces (null matches any).</param>
            <param name="workspaceOwner">OwnerName of the workspaces (null matches any).</param>
            <param name="computer">Computer the workspaces are on (null matches any).</param>
            <param name="permissionsFilter">WorkspacePermissions to use for filtering by the AuthorizedUsers's If not
             permissions. Supply WorkspacePermissions.NoneOrNotSupported to not use permission filtering.</param>
            <returns>The set of workspaces matching the provided filters</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.ReportCheckInConflictsFailuresAndThrow(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.CheckinResult,Microsoft.TeamFoundation.VersionControl.Client.Failure[],Microsoft.TeamFoundation.VersionControl.Client.Failure[],System.Boolean,System.Int32)">
            <summary>
            Given the failures from CheckIn() or CheckPendingChanges(), report them to listeners and
            then throw.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.ConvertToCheckinConflicts(Microsoft.TeamFoundation.VersionControl.Client.Failure[],System.Boolean@)">
            <summary>
            Create checkin conflicts from the failures returned by CheckIn() or CheckPendingChanges().
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.ReportFailures(Microsoft.TeamFoundation.VersionControl.Client.Failure[],Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Reports failures by firing an event for each failure object.
            </summary>
            <param name="failures">the failures to report</param>
            <param name="workspace">the workspace involved or null if unknown</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.ReportFailures(Microsoft.TeamFoundation.VersionControl.Client.Failure[],Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.Int32)">
            <summary>
            Reports failures by firing an event for each failure object.
            </summary>
            <param name="failures">the failures to report</param>
            <param name="workspace">the workspace involved or null if unknown</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.ResolveUserDisplayName(System.String)">
            <summary>
            Resolve the specified user name to an actual, fully qualified user name.  This may involve
            contacting the server to find out who we will authenticate as.
            </summary>
            <param name="user">the user name to resolve</param>
            <returns>the resolved, full-qualified user name</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.ResolveUserUniqueName(System.String)">
            <summary>
            Resolve the specified user name to an actual, fully qualified unique user name.  This may involve
            contacting the server to find out who we will authenticate as.
            </summary>
            <param name="user">the user name to resolve</param>
            <returns>the resolved, full-qualified unique user name</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.ThrowIfCanceled">
            <summary>
            Throw a CancelException if the user has requested cancellation of the client's actions
            and reset the client's canceled state back to false right before throwing the System.OperationCanceledException.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.WorkstationNonFatalError(System.Object,Microsoft.TeamFoundation.VersionControl.Client.WorkstationExceptionEventArgs)">
            <summary>
            Called by workstation in case of non-fatal errors.
            Filters events targetting only this VersionControlServer and rises NonFatalError.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.Get(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.GetRequest[],Microsoft.TeamFoundation.VersionControl.Client.GetOptions,System.Int32)">
             <summary>
             Get all of the specified items to the specified workspace.
             
             Note that Preview will not always show exactly what will happen.  Some conflicts such 
             as SourceDirectoryNotEmpty are artificially created when using Preview (it can't actually delete
             files, so the directory isn't empty) and others are not generated even though they should be,
             such as lacking the permissions to delete a file.
             </summary>
             <param name="workspace">The workspace to get into.</param>
             <param name="requests">The list of items to get; if null or empty, get the latest version 
               of all items the workspace.</param>
             <param name="options">The options for this get.</param>
             <returns>An object describing the number of operations, failures, and conflicts.</returns>
            
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.Get(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.GetRequest[],Microsoft.TeamFoundation.VersionControl.Client.GetOptions,Microsoft.TeamFoundation.VersionControl.Client.GetFilterCallback,System.Object,System.String[],System.String[],System.Boolean,Microsoft.TeamFoundation.VersionControl.Client.Conflict[]@,System.Int32)">
            <summary>
            Performs a Get like the other overload, but this one adds the ability for the user to
            specify a delegate to be called to filter the operations before they are processed.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.CalculateConflictScope(Microsoft.TeamFoundation.VersionControl.Client.GetRequest[],System.String[],System.Boolean@)">
            <summary>
            Calculates set of paths, used for quering for conflicts.
            </summary>
            <param name="getRequests">Paths specified by the user</param>
            <param name="writableConflictPaths">Paths of files causing SourceWritable or TargetWritable
            conflicts</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.FilterOperations(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.GetOperation[],Microsoft.TeamFoundation.VersionControl.Client.GetOptions,Microsoft.TeamFoundation.VersionControl.Client.GetFilterCallback,System.Object)">
            <summary>
            If the user supplied a filter delegate, this method handles calling the delegate and
            updating the server (revert-to and conflict tables).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.ShouldDeleteAsUndoAdd(Microsoft.TeamFoundation.VersionControl.Client.AsyncGetOperation,Microsoft.TeamFoundation.VersionControl.Client.GetOperation)">
            <summary>
            Returns true if the target file of the action should be deleted, because it's undo of pending add
            and deletePendingAdds was set to true;
            </summary>
            <returns></returns>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.Client.Getting">
            <summary>
            This event is sent when an item is being gotten.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.OnGetting(Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs)">
            <summary>
            The Getting event is fired when an item is being gotten and includes detail about whether
            there are things preventing it from proceeding or whether an attempt will be made.
            </summary>
            <param name="e">Information on the item being gotten.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.LocalContentIsRedundant(System.String,System.Byte[])">
            <summary>
            Returns true if the local file exists and it has the same hash content as the server file.
            </summary>
            <param name="localItemPath"></param>
            <param name="serverHashValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Client.DeleteSource(Microsoft.TeamFoundation.VersionControl.Client.GetOperation,System.IO.FileAttributes)">
            <summary>
            Deletes the current local item for a get operation.
            </summary>
            <param name="action"></param>
            <param name="existingLocalAttrs"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.AsyncOperation.Begin">
            <summary>
            Begin an async operation.  If there is a maxCount associated with this AsyncOperation,
            ensure that the current # of pending operations is below it and if not, wait until one
            completes.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.AsyncOperation.End">
            <summary>
            Record that an asynchronous operation has finished.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.AsyncOperation.WaitForCompletion">
            <summary>
            Wait for all async operations begun on this instance to complete.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.AsyncOperation.WaitForCompletion(System.Int32)">
            <summary>
            Wait for all async operations begun on this instance to complete.
            If the timeout expires first, the return value will be false.
            </summary>
            <param name="millisecondsTimeout">Timeout in milliseconds</param>
            <returns>True if the AsyncOperation completed, false if the timeout expired.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AsyncOperation.Exception">
            <summary>
            An exception that occurs on the background gets set here.
            The exception gets thrown back to the guy that called this method to begin with.
            ExceptionToMarshal can only be set once, additional sets are treated as a no-op
            (since we can only throw one exception -- the one that gets here first wins)
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AsyncOperation.Failed">
            <summary>
            A boolean indicating whether or not any of the operations have failed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AsyncOperation.Pending">
            <summary>
            Returns the number of pending async operations.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AsyncOperation.MaxCount">
            <summary>
            The maximum number of pending async operations before
            threads calling Begin() will block.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.Conflict">
            <summary>
            Conflict represents a single conflict or merge.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Conflict.GetFullMessage">
            <summary>
            Converts this conflict into a message that includes the path.  See GetBriefMessage() for
            the short version.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Conflict.GetBriefMessage">
            <summary>
            Converts this conflict into a message that does not include the path.  See GetFullMessage()
            for the long version containing the path.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Conflict.GetDetailedMessage(System.Boolean)">
            <summary>
            Converts this conflict into a displayable message.
            </summary>
            <returns>the displayable message for this conflict</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.TheirShelvesetDisplayName">
            <summary>
            Shelveset display name, consisting of shelveset name and username if it's different than AuthorizedUser.
            If this is unshelve conflict, but shelveset was deleted, returns "Shelveset deleted".
            Returns null if this is not unshelve conflict.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Conflict.DownloadBaseFile(System.String)">
            <summary>
            Downloads the content for the base (original) file in the conflict.  Throws if there is no
            base file, which is only valid for conflicts of type Merge.
            </summary>
            <param name="localFileName">where to save the downloaded file contents</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Conflict.DownloadTheirFile(System.String)">
            <summary>
            Downloads the content for their file in the conflict.  Throws if there is no
            their file.
            </summary>
            <param name="localFileName">where to save the downloaded file contents</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Conflict.DownloadYourFile(System.String)">
            <summary>
            Downloads the content for your file in the conflict.  Throws if there is no
            your file.
            </summary>
            <param name="localFileName">where to save the downloaded file contents</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.CanMergeContent">
            <summary>
            Returns true if this conflict would need a content merge, if the user chooses to AcceptMerge
            This property does not check the resolution (e.g., app may merge on a background thread prior
            to the user picking a resolution).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.TheirFileExists">
            <summary>
            Returns true if the their side of the conflict has a file associated with it.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.Status">
            <summary>
            The type of conflict.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.ResolutionOptions">
            <summary>
            Options to control how the conflict is resolved.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.MergedFileName">
            <summary>
            For an edit conflict, set this property to the path of the temporary merged file if the file is merged
            before calling the resolve methods.
            </summary>
            <value>the fully-qualified path to the merged file</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.ContentMergeSummary">
            <summary>
            This is the summary from the file content merge (yours, theirs, both, conflicting).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.VersionControlServer">
            <summary>
            The source control repository containing this Conflict.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.IsBaseless">
            <summary>
            True if this is the result of a baseless merge.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.TheirChangeType">
            <summary>
            ChangeType of their version
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.Options">
            <summary>
            Options returned from the server, about how the client should process the conflict.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.RequiresExplicitAcceptMerge">
            <summary>
            Returns true if the AcceptMerge resolution is not conservative and may produce unexpected results.
            Examples are undeleting a file (edit-delete conflict) or deleting it (delete-edit conflicts).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.IsEncodingMismatched">
            <summary>
            True if their and your encoding values are different.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.IsBinary">
            <summary>
            True if either base, their or your encoding is binary.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.IsBasicMergeAllowed">
            <summary>
            Check the basic requirements for merge operation.
            Does not validate that content needs merging (CanMergeContent).
            Allows different encodings, because user can override them.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.EncodingChanged">
            <summary>
            Check to see if the encoding has changed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.IsPropertyConflict">
            <summary>
            True if this conflict has conflicting properties
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.LocalOrTargetFileInVersionControl">
            <summary>
            Check to see if the local/target file is in version control.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.MergeValidForFileType">
             <summary>
             Check to see if the merge operations are valid for file of this
             type. The check is made against the file types from the server.
            
             File types with exclusive checkout enabled cannot be merged, 
             automatically or with a merge tool.
             </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.LocalPath">
            <summary>
            Get this conflict's local path or intended local path.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.ServerPath">
            <summary>
            Get this conflict's server path.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.FileName">
            <summary>
            Returns the calculated file name for this conflict.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.FileExtension">
            <summary>
            Get this conflict's file extension only.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.AutoResolved">
            <summary>
            True if this conflict was resolved automatically
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.IsFromDeletedShelveset">
            <summary>
            True if IsFromShelveset = true and their shelveset was deleted.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.IsVersionConflictAndServerItemDoesNotExist">
            <summary>
            True if this is a version conflict and the server item doesn't exst at the requested 
            version.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.IsVersionGetCheckinConflict">
            <summary>
            True if this conflict is a version get/checkin conflict.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.NameChanged">
            <summary>
            Check to see if the file name has changed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.HasNoLocalRenames">
            <summary>
            True if there is no local/target (YourChangeType) rename, false otherwise
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.MayBeRedundant">
            <summary>
            Lightweight way to verify if it's Redundant Conflict.
            Does not compare content. Does not compare property values.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.IsValidForAutoMerge">
            <summary>
            Returns true if this conflict is valid for AcceptMerge with no additional arguments
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Conflict.IsAutoMergeApplicable(Microsoft.TeamFoundation.VersionControl.Client.AutoResolveOptions)">
            <summary>
            Return True if conflict can be auto resolved as AcceptMerge in the given mode.
            This method requires ContentMergeSummary to be calculated.
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Conflict.IsRedundant(System.Boolean,Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Verifies that conflict is caused by 2 identical changes.
            </summary>
            <param name="quick">If true, does not recalculate local file hash and quickly fails. If false, computes hash if it's not valid.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Conflict.MergeProperties(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Generates the properties merge summary. Returns null if there is not a property
            conflict.
            </summary>
            <param name="workspace"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.PropertiesMergeSummary">
            <summary>
            Returns the property merge summary if one has been generated.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.YourProperties">
            <summary>
            Properties for YourServerItem. Not populated until DownloadProperties()
            or GetPropertiesMergeSummary is called.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.TheirProperties">
            <summary>
            Properties for TheirServerItem. Not populated until DownloadProperties()
            or GetPropertiesMergeSummary is called.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.BaseProperties">
            <summary>
            Properties for BaseServerItem. Not populated until DownloadProperties()
            or GetPropertiesMergeSummary is called.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.LocalFileLastModifiedDateUsedForThreeWayMerge">
            <summary>
            Last Modified UTC time of the local file, which was used for performing three way merge and creating merge file.
            Value is expressed in Ticks.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Conflict.ResetChangeSummaryIfLocalFileModified">
            <summary>
            Removes ChangeSummary and merge file if local file was modified after those values were calculated.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.ContentMayChanged">
            <summary>
            True if Edit or Branch were involved in this conflict and it's a file.
            This does not involve checking if merge of content is possible.
            Depends on Dev10 TheirChangeType property.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.LocalHashValue">
            <summary>
            Return hash of the local file.
            Returns null if hash was not calculated yet or is out-of-date.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.LocalFileLastModifiedDate">
            <summary>
            Last Write UTC time of the local file, expressed in Ticks. 0 if local file does not exist or error occurred.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.LocalFileLastModifiedDateUsedForHashValue">
            <summary>
            Last Modified UTC time of the local file, which was used to calculate local hash value.
            Value is expressed in Ticks.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Conflict.UpdateLocalHashValue">
            <summary>
            Updates LocalHashValue if it's invalid.
            The hash is calculated even if the conflict content has not changed (e.g. rename conflict).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.HasNoContentChange">
            <summary>
            Return True only if the conflict has ContentMergeSummary calculated
            and the source and target are identical - TotalConflicting = 0, TotalLatest = 0, TotalModified = 0.
            False otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.HasLocalTargetContentChangeOnly">
            <summary>
            Return True only if the conflict has ContentMergeSummary calculated
            and the conflicting and source/server chunks are 0, but local/target are not zero.
            False otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.HasSourceServerContentChangeOnly">
            <summary>
            Return True only if the conflict has ContentMergeSummary calculated
            and the conflicting and target/local chunks are 0, but source/server are not zero.
            False otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.HasConflictingContentChange">
            <summary>
            Determine if the conflict contains one or more conflicting change.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.HasConflictingPropertyChange">
            <summary>
            Determine if the conflict contains conflicting property changes.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Conflict.CleanUpMergedResultFile">
            <summary>
            If the merged result file exists, delete it and clear the conflict.
            Keep the summary.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.BaseEncoding">
            <summary>
            BaseEncoding
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.BaseHashValue">
            <summary>
            Not in mergeop. Is this necessary?
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.BaseItemId">
            <summary>
            SourceItemId
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.BaseItemType">
            <summary>
            ItemType
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.BaseServerItem">
            <summary>
            BaseServerItem
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.BaseVersion">
            <summary>
            BaseVersion
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.IsForced">
            <summary>
            IsForced
            Not used for non-Merge conflicts
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.IsNamespaceConflict">
            <summary>
            Namespace conflict information:
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.IsResolved">
            <summary>
            When set to true, the conflict is marked as resolved.  This has no effect other than
            recording it.  It is used by the client to mark conflicts as resolved so that it is easy
            for code holding a reference to a conflict to determine whether it is resolved.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.PendingChangeId">
            <summary>
            Not used for merges. Could be used for merge namespace conflicts or optionally set dending on conflict reason.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.SourceLocalItem">
            <summary>
            TargetLocalItem
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.TheirDeletionId">
            <summary>
            SourceDeletionId
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.TheirEncoding">
            <summary>
            SourceEncoding
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.TheirHashValue">
            <summary>
            SourceHashValue
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.TheirItemId">
            <summary>
            SourceItemId
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.TheirItemType">
            <summary>
            ItemType
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.TheirLastMergedVersion">
            <summary>
            SourceLastMergedVersion
            Not calculated for non-MergeConflicts:
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.TheirServerItem">
            <summary>
            SourceServerItem
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.TheirVersion">
            <summary>
            SourceVersion
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.TheirVersionFrom">
            <summary>
            Is the version from of the source item of the conflict
            This is the next version from the base version.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.YourDeletionId">
            <summary>
            TargetDeletionId
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.YourEncoding">
            <summary>
            TargetEncoding
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.YourItemId">
            <summary>
            TargetItemId
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.YourLastMergedVersion">
            <summary>
            TargetLastMergedVersion
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.YourServerItem">
            <summary>
            TargetServerItem
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.YourServerItemSource">
            <summary>
            TargetServerItemSource
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Conflict.YourVersion">
            <summary>
            VersionPended
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ResolutionOptions">
            <summary>
            These options control how the conflict resolution code processes the conflict.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ResolutionOptions.IsEncodingOverride">
            <summary>
            Set this to true to indicate that the file involved should be treated as the though the
            file's encoding is the one specified by the Encoding property.  This property and 
            IsConvertToEncoding must not both be true at the same time.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ResolutionOptions.IsConvertToEncoding">
            <summary>
            Set this to true to indicate that the files should be converted to the one specified
            by the Encoding property.  This property and IsEncodingOverride must not both be true
            at the same time.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ResolutionOptions.Encoding">
            <summary>
            The encoding to use when the encoding is being either overridden or converted.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ResolutionOptions.UseInternalEngine">
            <summary>
            If true, the built-in merge engine is used rather than a registered third-party app.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ResolutionOptions.AcceptMergeEncoding">
            <summary>
            When a conflict is to be resolved with the AcceptMerge resolution and there is a conflicting
            pending encoding change, this property contains the desired encoding.  If this property
            is set to EncodingUnchanged, the conflict will not be resolved.
            Note that there is no encoding conversion associated with this property.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ResolutionOptions.AcceptMergeProperties">
            <summary>
            When a conflict is to be resolved with the AcceptMerge resolution and there is a conflicting
            pending property change, this property contains the desired properties. If this propert is
            left as null, the conflict will not be resolved.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ResolutionOptions.AcceptMergeWithConflicts">
            <summary>
            When true, content conflicts will not prevent the AcceptMerge resolution from resolving
            a conflict.  The resulting file will contain conflict markers and require manual editing.
            The default is false.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ResolutionOptions.NewPath">
            <summary>
            When a conflict is to be resolved, and the conflited item, or the item that is in the way
            needs to move to a new location, then this property is set to that location.
            <nl/>
            Examples:<nl/>
            When a merge conflict is to be resolved with the AcceptMerge resolution and there is a conflicting
            pending rename, this property contains the desired name.  If the name is null, the conflict
            will not be resolved.<nl/>
            When a namespace conflict is to be resolved with the AcceptTheirs resolution, this property
            contains the new location of the item coming down in the conflict.<nl/>
            When a namespcae conflict is to be resolved with the AcceptYours resolution, this property
            contains the new location of the local item that was in the way of the server item that
            wanted to come down in the conflict.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ConflictComparer">
            <summary>
            A comparer used to compare conflicts.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ConflictComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two conflicts by server path for display purposes (culture sensitive and case insensitive).
            </summary>
            <param name="x">Conflict object</param>
            <param name="y">Conflict object</param>
            <returns>result of String.Compare() (integer indicating lexical relationship)</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.GetNotificationParam(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo)">
            <summary>
            Get the string to use as a notification parameter.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.GetNotificationParam(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Get the string to use as a notification parameter.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.GetNotificationParam(System.String,System.String)">
            <summary>
            Get the string to use as a notification parameter.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.GetNotificationWorkspaceHashCode(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Get a consistent hash code for use with notification parameters across CLR versions and
            clients running both 32bit and 64bit.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.GetNotificationWorkspaceHashCode(System.String)">
            <summary>
            Get a consistent hash code for use with notification parameters across CLR versions and
            clients running both 32bit and 64bit.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.GetNotificationServerHashCode(System.Guid)">
            <summary>
            Get a consistent hash code for use with notification parameters across CLR versions and
            clients running both 32bit and 64bit.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.EnqueueForWorkspace(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.Client.Internal.Notification)">
            <summary>
            Queue a notification with the NotificationManager to be posted as a x-process notification the next time its timer goes off.
            There are two parameters passed to the notification manager. The first is the GUID of the server, which will be used
            to generate a hash to identify the relevant server for the message, if the receiving window is capable of understanding GUID
            server identification (Orcas SP1 and later).
            The second parameter is the string "workspacename;username" which will be hashed and sent in all cases.
            </summary>
            <param name="workspace">workspace changed</param>
            <param name="notification">The kind of notification to send</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.EnqueueChangesetReconciled(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.Int32)">
            <summary>
            Queue a notification with the NotificationManager to be posted as an x-proc notification the next time its
            timer goes off. The notification is a ChangesetReconciled notification.
            </summary>
            <param name="sourceControl">version control server</param>
            <param name="changesetId">Id of changeset reconciled</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.EnqueueFolderContentChanged(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer)">
            <summary>
            Queue a notification with the NotificationManager to be posted as an x-proc notification the next time its
            timer goes off. The notification is a FolderContentChanged without a changeset Id (-1).
            </summary>
            <param name="sourceControl">version control server</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.EnqueueFolderContentChanged(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.Int32)">
            <summary>
            Queue a notification with the NotificationManager to be posted as an x-proc notification the next time its
            timer goes off. The notification is a FolderContentChanged with a changeset Id.
            </summary>
            <param name="sourceControl">version control server</param>
            <param name="changesetId">Id of changeset committed the change</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.AdjustNotificationParametersForWindow(Microsoft.TeamFoundation.Client.Internal.Notification,System.UInt32,System.Object,System.IntPtr@,System.IntPtr@)">
            <summary>
            Callback method for adjusting the notification parameters to support older clients.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.MatchesNotification(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo,System.IntPtr,System.IntPtr)">
            <summary>
            Returns true if the server hash code and workspace hash code from an x-proc notification
            match the given WorkspaceInfo object.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.MatchesNotification(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.IntPtr,System.IntPtr)">
            <summary>
            Returns true if the server hash code and workspace hash code from an x-proc notification
            match the given Workspace object.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.MatchesNotification(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.IntPtr)">
            <summary>
            Returns true if the server hash code from an x-proc notification
            matches the given VersionControlServer object.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.MatchesServer(System.IntPtr,System.Guid,System.Uri)">
            <summary>
            Returns true if the server hash code from an x-proc notification
            matches the given server data (Guid or Uri depending).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.MatchesServerAndWorkspace(System.IntPtr,System.IntPtr,System.Guid,System.Uri,System.String)">
            <summary>
            We got a notification in from some other process using the TF.Client notificationmanager class.
            We have two 32-bit values -- a hashcode identifying the server and a hashcode identifying the workspace.
            
            Potential server hash code formats:
            
                Dev10+          InternalHashMethod(serverGuid.ToString("D").ToUpperInvariant())
                Orcas SP1       Hash of the relevant server's GUID (a 128-bit value hashed to 32 bits)
                Orcas RTM       Hash of the server URI.
                Whidbey         There were no cross process notifcations in Whidbey.
            
            Potential workspace hash code formats:
            
                Dev10+          InternalHashMethod(workspaceName;workspaceOwner)
                Orcas SP1       String.GetHashCode(workspaceName;workspaceOwner) // Generated in 32bit (x86) only
                Orcas RTM       Same as Orcas SP1.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CrossProcessNotification.WorkspaceNotificationData">
            <summary>
            A class containing data needed for AdjustNotificationParametersForWindow. We capture this data
            instead of putting the Workspace itself as the userData, in order to prevent the NotificationManager's
            delivery queue from rooting the Workspace in the garbage collector.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.IDiffItem">
            <summary>
            IDiff item interface defining the data that diff items should expose
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IDiffItem.GetFile">
            <summary>
            Gets the file path for the item
            </summary>
            <returns>file path for item</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IDiffItem.GetEncoding">
            <summary>
            Gets the encoding for the item
            </summary>
            <returns>the encoding</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IDiffItem.IsTemporary">
            <summary>
            Whether the file created is a temporary copy or not
            If the file is temporary, it will be cleaned up when the
            operation completes
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IDiffItem.Label">
            <summary>
            The label for the item
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IDiffItem.LabelTag">
            <summary>
            The tag portion of the label
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IDiffItem.LabelFile">
            <summary>
            The file portion of the label
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.DiffItemLocalFile">
            <summary>
            IDiffItem implementation for files on local disk
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.DiffItemVersionedFile">
            <summary>
            IDiffItem implementation for files in version control
            that are not on local disk
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.DiffItemVersionedFile.#ctor(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.Int32,System.Int32,System.String)">
            <summary>
            Construct a diff item based on an item ID at a particular changeset.
            </summary>
            <param name="versionControl">The source control server containing the item.</param>
            <param name="itemId">The ID of the item to diff.</param>
            <param name="changeset">The changeset version of the item.</param>
            <param name="displayPath">This is the path to be used in the exception in the case where the
              item does not exist at the specified changeset version.</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.DiffItemShelvedChange">
            <summary>
            IDiffItem implementation for files in shelvesets
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.DiffItemPendingChangeBase">
            <summary>
            IDiffItem implementation for files that are the base of items
            on local disk that have pending changes
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.DiffItemLocalWorkspace">
            <summary>
            IDiffItem class for comparing files in local workspaces
            against their original (workspace version) content.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.DiffItemLocalWorkspace.Create(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.String)">
            <summary>
            Creates DiffItemLocalWorkspace object for a given file in a specified local workspace.
            Returns null if workspace is not local or file does not have baseline content stored.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.Difference">
            <summary>
            Utility class to provide an easy mechanism for performing a difference
            on two files.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Difference.VisualDiffFiles(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Provides an entry point to diff two files without the need to pass in a version control server 
            object
            </summary>
            <param name="sourceFile">Source file</param>
            <param name="targetFile">Target file</param>
            <param name="sourceFileTag">Source file tag</param>
            <param name="targetFileTag">Target file tag</param>
            <param name="sourceFileLabel">Source file label</param>
            <param name="targetFileLabel">Target file label</param>
            <param name="isSourceReadOnly">Whether the source is read-only</param>
            <param name="isTargetReadOnly">Whether the target is read-only</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Difference.VisualDiffItems(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,Microsoft.TeamFoundation.VersionControl.Client.IDiffItem,Microsoft.TeamFoundation.VersionControl.Client.IDiffItem)">
            <summary>
            Compare two DiffItems using an external diff tool.
            </summary>
            <param name="versionControl">The version control server</param>
            <param name="source">The source item to compare to the target</param>
            <param name="target">The target item</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Difference.VisualDiffItems(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,Microsoft.TeamFoundation.VersionControl.Client.IDiffItem,Microsoft.TeamFoundation.VersionControl.Client.IDiffItem,System.Boolean)">
            <summary>
            Compare two DiffItems using an external diff tool.
            </summary>
            <param name="versionControl">The version control server</param>
            <param name="source">The source item to compare to the target</param>
            <param name="target">The target item</param>
            <param name="modalExperience">Whether the diff should come up in a modal experience</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Difference.IsEncodingSupported(System.Int32)">
            <summary>
            Returns true if the internal diff/merge engine supports the specified
            encoding.
            </summary>
            <param name="codePage">The code page for the encoding to check</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Difference.IsEncodingSupported(System.Text.Encoding)">
            <summary>
            Returns true if the internal diff/merge engine supports the specified
            encoding.
            </summary>
            <param name="encoding">The encoding to check</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Difference.DiffFiles(System.String,System.Int32,System.String,System.Int32,Microsoft.TeamFoundation.VersionControl.Common.DiffOptions)">
            <summary>
            Compare two files using the internal diff engine, and return the
            linked list of DiffSegments. Note, that sourceCodePage MUST equal
            targetCodePage. If the files have differing code pages then the
            caller must convert them to a common code page or issue an error
            to the user.
            </summary>
            <param name="source">The local path to the source file</param>
            <param name="target">The local path to the target file</param>
            <param name="sourceCodePage">The code page the source file is in.</param>
            <param name="targetCodePage">The code page the target file is in.</param>
            <param name="diffOpts">The DiffOptions to use while running the algorithm.</param>
            <returns>The linked list of DiffSegments.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Difference.CreateTargetDiffItem(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,Microsoft.TeamFoundation.VersionControl.Client.PendingChange,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            Create a DiffItem for the target version of the given item. This method
            is used to create a DiffItem for a version of an item for which the path
            is not known, based on a pending change on that item.
            </summary>
            This method calls an overload of CreateTargetDiffItem with the item id, version, and
            one of the paths from the pending change.  The path used is determined
            based on the type of change.
            <param name="versionControl">The version control server.</param>
            <param name="change">A pending change on the item</param>
            <param name="targetVersion">The version of the item for which the path is not known</param>
            <returns>A DiffItem for the targetVersion version of the item</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Difference.CreateTargetDiffItem(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.Int32,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            Create a DiffItem for the target version of the given item. This method
            is used to create a DiffItem for a version of an item for which the path
            is not known, based on the item id and the known path for a different version.
            </summary>
            <param name="versionControl">The version control server.</param>
            <param name="itemId">The item id of the item</param>
            <param name="path">A known local or server path for the item</param>
            <param name="itemVersion">The version corresponding to the local or server path</param>
            <param name="deletionId">Deletion id for the item or 0</param>
            <param name="targetVersion">The version of the item for which the path is not known</param>
            <returns>A DiffItem for the targetVersion version of the item</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Difference.CreateTargetDiffItem(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            Create a DiffItem for the target version of the given item. This method
            is used to create a DiffItem for a version of an item for which the path
            is not known, based on a known path for a different version.
            This method uses a call to QueryHistory to get a server Item for the
            target version.
            </summary>
            <param name="versionControl">The version control server.</param>
            <param name="path">A known local or server path for the item</param>
            <param name="itemVersion">The version corresponding to the local or server path</param>
            <param name="deletionId">Deletion id for the item or 0</param>
            <param name="targetVersion">The version of the item for which the path is not known</param>
            <returns>A DiffItem for the targetVersion version of the item</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Difference.DiffFilesOnDisk(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,Microsoft.TeamFoundation.VersionControl.Common.DiffOptions,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.EventHandler,System.Boolean,System.Boolean)">
            <summary>
            Perform the difference of the two files on disk.
            </summary>
            <param name="versionControl">VersionControlServer for non-fatal error messages</param>
            <param name="diffOpts">difference options</param>
            <param name="sourcePath">source file path (local)</param>
            <param name="sourceCodePage">source file encoding</param>
            <param name="targetPath">target file path (local)</param>
            <param name="targetCodePage">target file encoding</param>
            <param name="fileLabel">label to use with File: output line</param>
            <param name="exitedHandler">handler to attach to the Process Exited event</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.VersionControlException">
            <summary>
            The VersionControlException is the base class of all new Exception types in Source Control.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.RepositoryNotFoundException">
            <summary>
            Thrown to indicate that a repository at the specified URL was not found or accessible.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkItemUpdateException">
            <summary>
            Exception for work item update failure.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CheckinException">
            <summary>
            Thrown to indicate that there were conflicts preventing checkin.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CheckinException.#ctor(Microsoft.TeamFoundation.VersionControl.Client.CheckinConflict[],System.Boolean,System.String)">
            <summary>
            Creates a CheckinException from the provided parameters.
            </summary>
            <param name="conflicts">The conflicts from the checkin.</param>
            <param name="isResolvable">True if there are resolvable conflicts from the checkin.</param>
            <param name="message">The error message for the exception.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CheckinException.#ctor(Microsoft.TeamFoundation.VersionControl.Client.CheckinConflict[],System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a CheckinException from the provided parameters.
            </summary>
            <param name="conflicts">The conflicts from the checkin.</param>
            <param name="isResolvable">True if there are resolvable conflicts from the checkin.</param>
            <param name="allConflictsResolved">True if all resolvable conflicts have been auto resolved.</param>
            <param name="message">The error message for the exception.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinException.IsResolvable">
            <summary>
            This is true if all of the problems with the checkin are resolvable conflicts and false if
            at least problem is unresolvable (e.g., item is locked for checkin).
            </summary>
            <value>true if all of the problems are resolvable conflicts</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinException.AllResolvableConflictsWereAutoResolved">
            <summary>
            This is true if there were resolvable conflicts and they were all resolved.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinException.Conflicts">
            <summary>
            These are the checkin conflicts that occurred.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.GatedCheckinException">
            <summary>
            Thrown to indicate that a checkin was denied due to the gated checkin plugin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GatedCheckinException.AffectedBuildDefinitions">
            <summary>
            Gets a collection of (Name, Uri) pairs defining the build definitions which blocked the checkin attempt.
            This property is always valid.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GatedCheckinException.QueueId">
            <summary>
            Gets the ID of the queue entry for the build that was queued for checkin. This property is valid when
            the SubCode is 3.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GatedCheckinException.BuildUri">
            <summary>
            Gets the URI of the build which was queued for the checkin. This property is valid when SubCode is 3.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GatedCheckinException.OverridePermissionFailures">
            <summary>
            Gets a list of team projects for which the caller is missing the 'Override check-in validation by build' 
            permission. This property is valid when SubCode is 4.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GatedCheckinException.HasOverridePermission">
            <summary>
            Gets a value indicating whether or not the user that performed the checkin has the required permissions
            to override the gated checkin policy. This property is always valid.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GatedCheckinException.ShelvesetName">
            <summary>
            Gets the name of the shelveset that was created on behalf of the account making the checkin. If a shelveset
            could not be created for any reason this value will be null. This property is valid when SubCode is 1 or 3.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GatedCheckinException.CheckInTicket">
            <summary>
            Gets the check-in ticket provided by the server for submitting a CheckInShelveset build request. This 
            ticket should be used when requesting a build in response to this exception to ensure the ability to
            submit even if the caller does not have the normally required permissions.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GatedCheckinException.SubCode">
            <summary>
            Gets the sub code for this exception. The sub code indicates what action(s) were performed on the server 
            to aid the client in taking the appropriate corrective action.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GatedCheckinException.CheckInContainsLocks">
            <summary>
            Gets a value indicating whether or not the set of pending changes being checked in contains
            one or more pending changes with the Lock bit set. This value is not set for shelvesets.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ShelveException">
            <summary>
            Thrown to indicate that there were problems preventing a shelveset being committed.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.UnshelveException">
            <summary>
            Thrown to indicate that there were problems preventing unshelving a shelveset.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.OnlyOneWorkspaceException">
            <summary>
            Thrown to indicate that the files specified span more than one workspace.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.MappingConflictException">
            <summary>
            Thrown to indicate that the workspace contains conflicting or redundant working folders for
            a given client folder.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.InvalidFileTypeException">
            <summary>
            Thrown to indicate that the specified file type is invalid.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BaselineUnavailableException">
            <summary>
            Thrown by the client when an undo wanted to place content on disk, but could not
            because a baseline was not available offline.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.DepthOneMappingsNotSupportedException">
            <summary>
            Thrown to indicate that the server does not support 1 depth mappings. When a client
            tries to pass up 1 depth mappings to an older server. The mappings will get converted
            to depth 120 mappings
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ResourceAccessException">
            <summary>
            Thrown when an access check fails
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTableException">
            <summary>
            Thrown when the workspace version table file is corrupt or not able to be loaded
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ReconcileBlockedByProjectRenameException.OldProjectNames">
            <summary>
            The set of old project names.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ReconcileBlockedByProjectRenameException.NewProjectNames">
            <summary>
            The set of new project names.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ReconcileBlockedByProjectRenameException.NewProjectRevisionId">
            <summary>
            The new project revision ID.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyAssemblyToolException">
            <summary>
            Thrown when there is an error loading or executing a third party tool that is defined in a user
            specified assembly.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyAutomergeToolException">
            <summary>
            Thrown when an external automerge tool fails to execute or cannot complete the automerge due
            to conflicts.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ResolveRequiresOneResolutionException">
            <summary>
            Thrown when there is an error loading or executing a third party tool that is defined in a user
            specified assembly.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.UploadFileException">
            <summary>
            Thrown when an exception occurs on upload file.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.IsInWorkspace">
            <summary>
            Return true if the item is in the workspace's local version table.  
            </summary>
            <remarks>
            Returns false for pending deletes if the file was successfully deleted.
            </remarks>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.IsLatest">
            <summary>
            Return true if the item in the workspace's local version table is the latest.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.CheckinDate">
            <summary>
            Last modification timestamp of the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.DeletionId">
            <summary>
            Deletion ID of the latest version (tip) of the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.Encoding">
            <summary>
            The encoding of the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.HasOtherPendingChange">
            <summary>
            True if the items has a pending change in another workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.IsBranch">
            <summary>
            Where the item is defined as a branch object in the system.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.ItemId">
            <summary>
            The item's ID.  Used to retrieve file contents
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.ItemType">
            <summary>
            This tells the client the type of item being referenced.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.LocalItem">
            <summary>
            The path where the client has the item.  Null if the client
            does not have the item or it's an acknowleged pending delete.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.LockOwner">
            <summary>
            Name of the user who holds the lock on this item (if any).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.LockOwnerDisplayName">
            <summary>
            Display name of the user who holds the lock on this item (if any).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.LockStatus">
            <summary>
            Specifies the new lock level of the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.SourceServerItem">
            <summary>
            Repository path of this item (e.g. $/abc/efg.cs) at VersionLatest.
            If the item has a pending rename, this reflects the original name.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.TargetServerItem">
            <summary>
            Repository path of this item (e.g. $/abc/efg.cs) at VersionLatest except
            when the item has a pending rename, in which case this reflects the target name.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.VersionLatest">
            <summary>
            True if this is the tip version.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem.VersionLocal">
            <summary>
            The version number of this item as a changeset number.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.Failure">
            <summary>
            Represents a failure returned by the server.
            </summary>
            <summary>
            The Failure object contains much of the same information as
            an exception but is not derived from Exception and is now throwable.
            
            Commands that operate on a collection of items, each of which may
            succeed or fail independently of the others will return an array
            of Failure objects representing the items that had trouble.
            
            The Failure object also contains fields that describe the context
            in which the error occurred.  A smart client may use these to make
            decisions about how to handle the error.  Irrelevant info remains
            null and will not be sent as part of the soap reply.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Failure.GetFormattedMessage">
            <summary>
            Creates a message formatted for display for a failure returned by the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Failure.FormatWorkspaceName(Microsoft.TeamFoundation.VersionControl.Client.Warning)">
            <summary>
            Returns the workspace spec from the warning object.  Removes the domain name unless
            it differs from our user's.
            </summary>
            <param name="w">Warning object to extract from.</param>
            <returns>Workspace spec.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Failure.VersionControlServer">
            <summary>
            The source control object representing the repository from which the failure occurred.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Failure.Code">
            <summary>
            Short unique string describing the error.  Usually the classname
            of the exception.
            
            Synonymous with SoapException.Code
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Failure.ComputerName">
            <summary>
            Error context information.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Failure.IdentityName">
            <summary>
            Error context information.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Failure.ItemId">
            <summary>
            The item's ID.  Used to retrieve file contents
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Failure.LocalItem">
            <summary>
            Error context information.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Failure.Message">
            <summary>
            Human readable message describing the error.
            
            Synonymous with SoapException.Message
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Failure.RequestType">
            <summary>
            Type of change requested in the operation.  Only set when
            PendChanges() is called
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Failure.ResourceName">
            <summary>
            Error context information.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Failure.ServerItem">
            <summary>
            Error context information.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Failure.Severity">
            <summary>
            Indicates the failure "type"
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Failure.Warnings">
            <summary>
            Warning elements
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Failure.WorkspaceName">
            <summary>
            Error context information.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Failure.WorkspaceOwner">
            <summary>
            Error context information.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldDefinition">
            <summary>
            Represents a checkin note field definition.
            </summary>
            <summary>
            A field definition is used to define how a given named input is treated
            when applied to a given checkin note. These are not versioned and can
            change over time, allowing the definition and the data to become out of
            sync with each other. The definition is used at the time the checkin
            note is generated
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldDefinition.Consolidate(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldDefinition})">
            <summary>
            Given a set of CheckinNoteFieldDefinitions which may have been sourced from multiple team projects,
            return a set of CheckinNoteFieldDefinitions with distinct keys (Name). When a collision on name occurs,
            the collision is resolved using the following method:
            1. If some of the participants in a collision are required and others are not, the ones that are required
               are the only candidates for selection.
            2. The participant in the collision with the server path that is highest alphabetically will be selected.
            The CheckinNoteFieldDefinitions will be sorted by server path and then display order, and renumbered so
            that the display order values are also unique and monotonically increasing.
            </summary>
            <param name="definitions">Definitions to consolidate</param>
            <returns>Consolidated definitions</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldDefinition.NameComparer">
            <summary>
            Return a name-based comparer object for FieldDefintion objects for display purposes
            (culture sensitive and case insensitive).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldDefinition.DisplayOrderComparer">
            <summary>
            Return a display-order based comparer object for FieldDefintion objects for display
            purposes (culture sensitive and case insensitive).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldDefinition.DisplayOrder">
            <summary>
            The displayOrder property is used to give the client a hint in how
            an input or output form will be displayed. These are guidelines and
            are not fixed given a checkin not instance can have cross 
            definition values.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldDefinition.Name">
            <summary>
            This is the name of the field.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldDefinition.Required">
            <summary>
            Required tells the client whether or not the value is allowed to
            be left empty or a value must be supplied.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldDefinition.ServerItem">
            <summary>
            This is the Hatteras server item the field is associated with
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldValue">
            <summary>
            Represents a checkin note field value.
            </summary>
            <summary>
            The CheckinNoteFieldValue is an inatance of a field with its value within a single
            checkin note instance. A checkin note uses a series of field values to
            represent its data.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldValue.Name">
            <summary>
            This is the name of the field this value is bound to.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldValue.Value">
            <summary>
            The value is a string that is recorded for this field when the
            checkin note is saved.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.FileSystemWalker">
            <summary>
            Walks the file system finding files that match a filter criterion and are actively
            mapped into the user's workspace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileSystemWalker.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.String[],System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates a new file system walker.  Repeated calls to Walk() return the matching files.
            </summary>
            <param name="workspace">the workspace in which files are being added</param>
            <param name="fileSpecs">the file spec filter(s)</param>
            <param name="isRecursive">if false, process only the directory specified by fileSpec;
            if true, walk the file system recursively starting at fileSpec </param>
            <param name="includeDirectories">if true, include directories in the results; if false,
            include only files</param>
            <param name="treatMissingItemsAsFiles">if false, treats missing files as non fatal errors</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileSystemWalker.GetEnumerator">
            <summary>
            Walks the file system finding the files that match the specified file name pattern.  Only
            files that are actively mapped in the user's workspace (determined by the directory being
            processed) are included in the results.  Non-fatal error events are generated for cases where
            file attributes are not accessible due to security restrictions.  Any directories without
            working folder mappings are skipped with non-fatal error events generated.
            </summary>
            <returns>yields each file or directory</returns>
            <exception cref="T:Microsoft.TeamFoundation.VersionControl.Client.OnlyOneWorkspaceException">thrown if more than one workspace is encountered</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileSystemWalker.GetFileSystemEntries(System.String,System.String)">
            <summary>
            In the common case, this is substantially faster than calling Directory.GetFileSystemEntries.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.FileSystemWalker.HasNoFileMatches">
            <summary>
            Gets a flag indicating the existence on a no match found condition.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileSystemWalker.CheckNoFileMatches">
            <summary>
            Checks to see if no file matched the current file spec.  If no file matched, this method
            generates a non-fatal error event.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileSystemWalker.NextFileSpec">
            <summary>
            Moves to the next file spec in the file spec queue (dequeue) and enqueues the starting
            directory for the file spec.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.FileType">
            <summary>
            This class is used to configure per-file extension settings in the
            version control system.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileType.#ctor(System.String,System.String[])">
            <summary>
             Creates a file type definition
            </summary>
            <param name="name">Unique, descriptive name of file type</param>
            <param name="extensions">Array of valid extensions (without dots)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileType.Clone">
            <summary>
            Clones a FileType object.
            </summary>
            <returns>a clone of the original</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileType.GetSupportedEncodingDescriptions">
            <summary>
            Gets a list of supported encoding descriptions sorted by DisplayName.
            </summary>
            <returns>the supported encoding descriptions</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileType.GetEncodingName(System.Int32)">
            <summary>
            Get the displayable name of the encoding for an integer representing an encoding.
            </summary>
            <param name="encoding">the encoding as an integer</param>
            <returns>the name of the encoding</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileType.GetDisplayName(System.Text.Encoding)">
            <summary>
            Gets the name displayed and valid as an encoding identifier.
            </summary>
            <param name="encoding">the encoding</param>
            <returns>the display name</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileType.GetDescription(System.Text.Encoding)">
            <summary>
            Gets the encoding description.
            </summary>
            <param name="encoding">the encoding</param>
            <returns>the description</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileType.GetEncodingCodePage(System.String)">
            <summary>
            Gets the code page representing the encoding.  Throws InvalidFileTypeException if the encoding
            is not recognized.
            </summary>
            <param name="encoding">the encoding to convert</param>
            <returns>the code page</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileType.GetEncodingFromCodePage(System.Int32)">
            <summary>
            Gets the Encoding object for an encoding.  Throws InvalidFileTypeException if the encoding
            is not recognized.
            NOTE: This method does not support binary since that cannot be represented by an Encoding object.
            </summary>
            <param name="codePage">the codePage to convert</param>
            <returns>the encoding object</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileType.Detect(System.String,System.String)">
            <summary>
            Determines the file encoding by either using what the caller specifies or auto-detecting the
            file type.  Setting encoding to null or using an encoding of "auto" forces auto-detection.
            </summary>
            <param name="path">local file to consider</param>
            <param name="encoding">if non-null, the encoding to use rather than auto detection</param>
            <returns>the encoding for the file as determined by this method</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileType.Detect(System.String,System.String,System.Boolean)">
            <summary>
            Determines the file encoding by either using what the caller specifies or auto-detecting the
            file type.  Setting encoding to null or using an encoding of "auto" forces auto-detection.
            </summary>
            <param name="path">local file to consider</param>
            <param name="encoding">if non-null, the encoding to use rather than auto detection</param>
            <param name="treatMissingFileAsBinary">if true, treats missing file as binary</param>
            <returns>the encoding for the file as determined by this method</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileType.Detect(System.String,System.String,System.Boolean,Microsoft.TeamFoundation.VersionControl.Client.Failure[]@)">
            <summary>
            Determines the file encoding by either using what the caller specifies or auto-detecting the
            file type.  Setting encoding to null or using an encoding of "auto" forces auto-detection.
            </summary>
            <param name="path">local file to consider</param>
            <param name="encoding">if non-null, the encoding to use rather than auto detection</param>
            <param name="treatMissingFileAsBinary">if true, treats missing file as binary</param>
            <returns>the encoding for the file as determined by this method</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileType.DetermineEncoding(System.String,System.Boolean,System.Boolean,Microsoft.TeamFoundation.VersionControl.Client.Failure[]@)">
            <summary>
            Determines the encoding for a file by first checking for the Unicode byte order mark.  If
            it is Unicode, the particular encoding is returned.  If it does not contain the Unicode
            BOM and checkForBinary is false, the current encoding is returned (aka the OEM code page).
            When checkForBinary is true and the file does not contain the BOM, the encoding returned is
            null if there are NUL bytes in the first 1K of the file or is the current encoding if there 
            are no NUL bytes.
            </summary>
            <param name="path">the path to the file to check</param>
            <param name="checkForBinary">if true, check the file for null bytes</param>
            <param name="treatMissingFileAsBinary">if true, treats missing file as binary</param>
            <param name="failures">returns array of failures</param>
            <returns>the encoding for the file or null if checkForBinary is true and NUL characters are
              present in the file</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.FileType.AllowMultipleCheckout">
            <summary>
            If false, all "edit" checkouts will require exclusive locks
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.FileType.Extensions">
            <summary>
            List of extensions these settings apply to.  Do not include the * or .
            (example: txt)
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.FileType.Name">
            <summary>
            Name of the filetype.  Designed to be user-readable, but must be
            unique.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.AsyncGetOperation.QueueLocalVersionUpdate(Microsoft.TeamFoundation.VersionControl.Client.GetOperation,System.String,System.Int32)">
            <summary>
            Intelligently queue an update to tell the server the local and version of the local file.
            </summary>
            <param name="action">This is the get op so that the new path and version can be compared
              to the original path and version.</param>
            <param name="targetLocalPath">The local path where the item now resides; null if deleted.
              </param>
            <param name="version">The version of the local file.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.AsyncGetOperation.QueueLocalVersionUpdate(Microsoft.TeamFoundation.VersionControl.Client.GetOperation,System.String,System.Int32,System.Boolean)">
            <summary>
            Intelligently queue an update to tell the server the local and version of the local file.
            </summary>
            <param name="action">This is the get op so that the new path and version can be compared
              to the original path and version.</param>
            <param name="targetLocalPath">The local path where the item now resides; null if deleted.
              </param>
            <param name="version">The version of the local file.</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.OperationStatus">
            <summary>
            The resulting status of a Get operation
            </summary>
            <remarks>
            Note that these are used as the reason column in tbl_Conflict, and their
            values cannot change without being a breaking change.
            </remarks>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.GettingEventHandler">
            <summary>
            Delegate for handling the Getting event raised during a Get operation
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs">
            <summary>
            Event arguments for the Getting event
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.GetMessage(System.String,System.String@)">
            <summary>
            Converts this event into a displayable message.
            </summary>
            <param name="targetName">the path to the target, perhaps relative to another directory</param>
            <param name="error">the error message, if any, that is also a result of this event</param>
            <returns>the displayable message for a successful action, if any</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.Workspace">
            <summary>
            The workspace that was updated.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.Status">
            <summary>
            The result of the Get operation
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.IsLatest">
            <summary>
            Returns true if this operation is getting the latest version of the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.SourceLocalItem">
            <summary>
            The source local path for the item
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.TargetLocalItem">
            <summary>
            The target local path for the item
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.Version">
            <summary>
            The version of the item in the Get action
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.DeletionId">
            <summary>
            The deletion id of the Get action
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.ServerItem">
            <summary>
            The server item being operated on.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.SourceServerItem">
            <summary>
            The source server item being operated on.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.ItemId">
            <summary>
            The item id being operated on.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.ItemType">
            <summary>
            The item type being operated on.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.IsDelete">
            <summary>
            Whether the get operation will do a delete action
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.ChangeType">
            <summary>
            The change type for the operation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.DiskUpdateAttempted">
            <summary>
            True if the disk update was attempted (i.e., this was not a preview).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.Current">
            <summary>
            This is the number of operations processed thus far, including this one.
            This number may not equal the total at completion.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GettingEventArgs.Total">
            <summary>
            This is the total number of operations to be processed.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.GetOptions">
            <summary>
            The GetOptions specify how get should behave.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.GetOptions.None">
            <summary>
            No options specified.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.GetOptions.Overwrite">
            <summary>
            Overwrite writable files that are in the way of versioned items.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.GetOptions.GetAll">
            <summary>
            Get all files, not just those that are out of date.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.GetOptions.Preview">
            <summary>
            Execute get without modifying the disk.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.GetOptions.Remap">
            <summary>
            Remap existing items on disk to the server items where the content
            and disk location are not changing.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.GetOptions.NoAutoResolve">
            <summary>
            Used only on the client. Instructs the client not to try to auto resolve conflicts
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.GetStatus">
            <summary>
            The GetStatus class contains the information about what get did.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.GetStatus.Combine(Microsoft.TeamFoundation.VersionControl.Client.GetStatus)">
            <summary>
            Combining the status from 2 Get calls.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.GetStatus.GetFailures">
            <summary>
            Get the failures generated by this invocation of get.
            </summary>
            <returns>the set of failures</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetStatus.NumFailures">
            <summary>
            Normally this is the number of failures returned by the server.  If Get() is called with
            one or more items specified and they all fail to be valid local paths in the same workspace,
            this will be set to the number of items passed in (in that case, the server was never
            called).
            </summary>
            <value>Number of failures.</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetStatus.NumOperations">
            <summary>
            The number of operations returned by the server.  If the server returned no
            operations and no failures, everything was already up to date.
            </summary>
            <value>Number of get operations.</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetStatus.NumFiles">
            <summary>
            The number of files downloaded from the server. If the server returned no
            operations and no failures, everything was already up to date.
            </summary>
            <value>Number of downloaded files.</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetStatus.NumBytes">
            <summary>
            The number of bytes in all the files downloaded from the server. If the server returned no
            operations and no failures, everything was already up to date.
            </summary>
            <value>Number of downloaded bytes.</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetStatus.NumConflicts">
            <summary>
            The number of conflicts encountered by get.
            </summary>
            <value>Number of conflicts.</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetStatus.NumResolvedConflicts">
            <summary>
            The number of conflicts resolved.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetStatus.NumUpdated">
            <summary>
            The number of operations which updated the workspace.
            </summary>
            <value>Number of workspace updated.</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetStatus.NumWarnings">
            <summary>
            The number of warnings encountered by get.
            </summary>
            <value>Number of warnings.</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetStatus.NoActionNeeded">
            <summary>
            When true, Get() had nothing to do (server returned no operations and no failures).
            </summary>
            <value>True when nothing needed to be done.</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetStatus.HaveResolvableWarnings">
            <summary>
            Set to true when at least one warning is resolvable.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WritableConflictOnSourcePathListener">
            <summary>
            Listener collecting information about files causing SourceWritable or TargetWritable conflicts.
            Records SourceLocalItem when it's different than TargetLocalItem.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WritableConflictOnSourcePathListener.MovedPaths">
            <summary>
            Source paths of files that are causing SourceWritable or TargetWritable conflicts and were moved
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.GetOperation">
            <summary>
            An entry in the "to do" list that Get returns to the client.
            Each instance of this class represents an item that needs something
            done on the client.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.CurrentLocalItem">
            <summary>
            The current local item is the source local item,
            unless ClearLocalItem() has been called, in which case it is null.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.Microsoft#TeamFoundation#VersionControl#Client#ILocalUpdateOperation#ChangeType">
            <summary>
            This code is used for the GetFilterCallback mechanism.
            The type passed to GetFilterCallback is not GetOperation but rather ILocalUpdateOperation,
            and the behavior of the ChangeType property of an ILocalUpdateOperation is special. When
            you call the ChangeType property of an ILocalUpdateOperation, you get routed here instead
            of to the 'normal' ChangeType property.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.Ignore">
            <summary>
            True if this GetOperation should be ignored by the client-side Get logic.
            When a filtered Get is performed, the provided callback may set Ignore to true
            on the ILocalUpdateOperation objects it receives. That is this property.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.HasPendingChange">
            <summary>
            True if associated pending change is not caused just by pending change on the parent.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.AfterDeserialize">
            <summary>
            Called after a GetOperation is created from XML.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.DownloadUrl">
            <summary>
            The download URL for this GetOperation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.SourceServerItem">
            <summary>
             Name of the file or folder in the server's repository path space.
             If null this means that this is a pre-Dev11 server which 
             doesn't support sending it back
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.BaselineFileGuid">
            <summary>
            Byte representation of the guid that is used to locate original file content in the baseline folder.
            This is populated only when new content was / will be downloaded using this GetOperation object.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.LocalVersionEntry">
            <summary>
            Before looping through the GetOperations and calling ProcessOperation on each one, a pass is made
            to tag GetOperations meeting certain criteria with their local version entries. This data is needed
            at ProcessOperation time to determine whether or not to file a writable file conflict.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.IsSourceLocalCleared">
            <summary>
            Set to true if the Get client-side logic has stomped on the source local item
            of this GetOperation before processing it. If true, while the object sent from
            the server has a source local item, by the time this GetOperation is processed,
            it effectively no longer does.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.OkayToOverwriteExistingLocal">
            <summary>
            This flag indicates that writable file conflicts should be suppressed for this
            GetOperation, if the target local item is equal to the source local item.
            This flag is set when undoing an edit and when performing certain types of resolves
            (AcceptTheirs on an edit, for example).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.ConflictingItemId">
            <summary>
            The ItemId of the conflicting pending change. This is useful for
            detecting namespace conflicts on the client.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.DeletionId">
            <summary>
            This is the deletion id for the item, non-zero means its deleted
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.Encoding">
            <summary>
            The committed encoding of the item.
            If it is a pending add or branch, this is the encoding of that.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.HashValue">
            <summary>
            This is the MD5 Hash Value of the contents of the version of the file
            that you are being told to get.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.InternalPropertyValues">
            <summary>
            Properties
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.IsLatest">
            <summary>
            This is set to true when this getoperation is telling the caller
            that they are acting on the latest version of this item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.LockLevel">
            <summary>
            The lock level represents locks applied directly to this item.
            If the item is a folder it implies a lock to all subitems.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.PendingChangeId">
            <summary>
            This Idenitifier represents a unique value attached to the change.
            It may be used to match up pending changes between calls.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.SourceLocalItem">
            <summary>
            This is the current location/name of the file or folder if the client
            has an existing version of this item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.TargetLocalItem">
            <summary>
            This is the target location/name of the file or folder.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.TargetServerItem">
            <summary>
            Name of the file or folder in pending space
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.VersionLocal">
            <summary>
            The version (changeset number) that you currently have in your workspace
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.VersionRevertTo">
            <summary>
            Version number that should be reverted to for this committed item if the change
            where to be undone.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.VersionServer">
            <summary>
            Version number of the item that the client should have in its workspace
            (changeset number)
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetOperation.VersionServerDate">
            <summary>
            The date / time the server version was committed.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.GetOperationComparer">
            This is a utility class to serve as a comparer for file specs.
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.GetRequest">
            <summary>
            Represents a request to get an item or items.
            </summary>
            <summary>
            Object passed by the client to request a "Get" operation
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.GetRequest.#ctor(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            Gets the specified items to the version specified.
            </summary>
            <param name="item">the items to get (wildcards allowed)</param>
            <param name="recursion">recursion level</param>
            <param name="version">the version to get</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.GetRequest.#ctor(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            Gets the specified items or the entire workspace to the version specified.
            </summary>
            <param name="itemSpec">the item or null (null indicates a full workspace get)</param>
            <param name="version">the version to get</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.GetRequest.#ctor(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,System.Int32)">
            <summary>
            Gets the specified items or the entire workspace to the changeset specified.
            </summary>
            <param name="itemSpec">the item or null (null indicates a full workspace get)</param>
            <param name="changeset">the changeset</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.GetRequest.FromStrings(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            Creates an array of GetRequests given a list of local or server paths, recursion, and version.
            </summary>
            <param name="paths">an array of local or server paths</param>
            <param name="recursion">the recursion level</param>
            <param name="version">the version to request</param>
            <returns>an array of GetRequests</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetRequest.ItemSpec">
            <summary>
            Item to get plus recursion flag.  Null means get whole workspace
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GetRequest.VersionSpec">
            <summary>
            Version of item to get.  Required.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ILocalUpdateOperation">
            <summary>
            Represents an operation returned by the server to be used by the client to update the local
            disk. The primary use of this interface is for the GetFilterCallback delegate mechanism,
            which receives an ILocalUpdateOperation[] to evaluate, for the purpose of setting the Ignore
            flag on some or all of the ILocalUpdateOperation objects it receives.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalUpdateOperation.ItemType">
            <summary>
            Indicates whether this item is a file or a folder.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalUpdateOperation.ItemId">
            <summary>
            The unique item ID for this item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalUpdateOperation.DeletionId">
            <summary>
            If this item is deleted, this is its unique deletion ID.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalUpdateOperation.ChangeType">
            <summary>
            If this item has a pending change or is affected by a parent recursive pending change
            (delete, rename) this is the changetype affecting the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalUpdateOperation.PendingChangeId">
            <summary>
            If this item has a pending change, the unique pending change ID for that pending change.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalUpdateOperation.TargetLocalItem">
            <summary>
            The local destination for the item.  It is null for deletes as well as for items move to
            cloaked or unmapped locations.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalUpdateOperation.SourceLocalItem">
            <summary>
            The local path where the item currently exists.  It is null if the workspace does not have
            the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalUpdateOperation.TargetServerItem">
            <summary>
            The server path of the item. While this is not normally null, there are cases where this
            path is null, such as when the operation is an update to clean up an unfinished undo of an
            add or branch.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalUpdateOperation.VersionServer">
            <summary>
            This is the version that the workspace should have based on the request. It may be zero
            for cases such as cloaked or unmapped items.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalUpdateOperation.VersionLocal">
            <summary>
            This is the version the workspace has. It is zero if the workspace doesn't have the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalUpdateOperation.IsDelete">
            <summary>
            True if this operation will result in the item being deleted from the local disk.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalUpdateOperation.IsConflict">
            <summary>
            True if this operation is detected by the server as being in conflict.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalUpdateOperation.Ignore">
            <summary>
            When set to true by a GetFilterCallback, this operation will be ignored.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.InheritanceChange">
            <summary>
            Represents a permission inheritance change request.
            </summary>
            <summary>
            Represents a change to an item's inheritance flag
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.InheritanceChange.Inherit">
            <summary>
            New value of inheritance flag
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.Item">
            <summary>
            The Item class represents a committed version of a file or folder in the version control
            server.  It is returned by GetItems(), GetItem(), and several other calls.
            </summary>
            <summary>
            Represents an item as returned by the QueryItems command.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Item.#ctor(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.String,System.Int32)">
            <summary>
            Creates an item representing the specified server item.
            </summary>
            <param name="itemType">the type of the item (file or folder)</param>
            <param name="serverItem">the server path for the item</param>
            <param name="encoding">the encoding for the item (only used for a file)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Item.DownloadFile">
            <summary>
            Downloads the content for this version of the item.
            </summary>
            <returns>A stream that contains the contents of the item.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.VersionControl.Client.Item.DownloadFile(System.String)" -->
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.ArtifactUri">
            <summary>
            Artifact Uri -- Versioned Item
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.ArtifactUriLatestItemVersion">
            <summary>
            Artifact Uri -- Latest Item Version (tip)
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.VersionControlServer">
            <summary>
            The source control repository containing this Item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.IsContentDestroyed">
            <summary>
            Returns true if the content for this file has been destroyed.
            Returns false if the content exists, or if the item is a directory.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Item.PrepareForDownload">
            <summary>
            Makes sure we have all the information needed to download the file and this item
            can be downloaded.
            </summary>
            <param name="localFileName">where to save the downloaded file contents</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.Comparer">
            <summary>
            Return a Comparer object for Version Control server paths.
            Comparer is for display purposes (culture sensitive and case insensitive).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Item.AfterDeserialize">
            <summary>
            Called after an Item object is created from XML.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.DownloadUrl">
            <summary>
            The download URL for this Item object.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Item.CloneDownloadUrlFromItem(Microsoft.TeamFoundation.VersionControl.Client.Item)">
            <summary>
            Given another Item object, obtains the download URL information
            from it and stuffs it in this object.
            </summary>
            <param name="item">Source instance for download URL data</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.Properties">
            <summary>
            Returns a read-only collection of properties associated with the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.ChangesetId">
            <summary>
            The version number of this item as a changeset number.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.CheckinDate">
            <summary>
            Last modification timestamp of the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.ContentLength">
            <summary>
            Length of item, if applicable
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.DeletionId">
            <summary>
            Since more than one deleted item may exist with the same
            ServerItem name, this is used to uniquely identify deleted items.
            
            ServerItem + DeletionId is guaranteed to be unique for all items.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.HashValue">
            <summary>
            MD5 of item, if applicable
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.InternalAttributes">
            <summary>
            Attributes
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.InternalPropertyValues">
            <summary>
            Properties
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.IsBranch">
            <summary>
            Where the item is defined as a branch object in the system.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.ItemId">
            <summary>
            The item's ID.  Used to retrieve file contents
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.ItemType">
            <summary>
            This tells the client the type of item being referenced.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Item.ServerItem">
            <summary>
            Repository path of this item (e.g. $/abc/efg.cs)
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ItemComparer">
            This is a utility class to serve as a comparer for Hatteras items.
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ItemSecurity">
            <summary>
            Describes the security settings for an item.
            This structure is only used to return security
            info to the client.  It is not used internally.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ItemSecurity.Entries">
            <summary>
            The Access Control List
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ItemSecurity.Inherit">
            <summary>
            The item's inherit flag.  If true, this item's permissions
            are unioned with that of its parents.  If not, all of this item's
            permissions are explicitly set in Entries[].
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ItemSecurity.ServerItem">
            <summary>
            The repository path of the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ItemSecurity.Writable">
            <summary>
            True if the caller is allowed to modify this permission
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.AccessEntry">
            <summary>
            Publically facing description of an ACL entry (permission).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AccessEntry.Allow">
            <summary>
            Array of permission names this user or group is allowed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AccessEntry.AllowInherited">
            <summary>
            Array of allowed permission names that were inherited from the parent.
            Read-only.  Cannot be set by the client.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AccessEntry.Deny">
            <summary>
            Array of permission names this user or group is denied.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AccessEntry.DenyInherited">
            <summary>
            Array of denied permission names that were inherited from the parent.
            Read-only. Cannot be set by the client.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AccessEntry.IdentityName">
            <summary>
            Identity name of the user or group this permission gives access to.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.GlobalSecurity">
            <summary>
            Describes the global security settings.
            This structure is only used to return security
            info to the client.  It is not used internally.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.GlobalSecurity.Writable">
            <summary>
            True if the caller is allowed to modify permissions on this object
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ItemSpec">
            <summary>
            Represents an item.
            </summary>
            <summary>
            Represents a selector for versioned items
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ItemSpec.FromStrings(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Creates an array of ItemSpecs given a list of local or server paths and recursion.
            </summary>
            <param name="paths">an array of local or server paths</param>
            <param name="recursion">the recursion level</param>
            <returns>an array of ItemSpecs</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ItemSpec.ToStrings(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[])">
            <summary>
            Creates an array of strings from an array of ItemSpec objects.  Note that the recursion and
            deletion ID are not included in each string (i.e., it's just a path).
            </summary>
            <param name="itemSpecs">an array of ItemSpec objects</param>
            <returns>an array of strings</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ItemSpec.FromPendingChanges(Microsoft.TeamFoundation.VersionControl.Client.PendingChange[])">
            <summary>
            Creates an array of ItemSpecs given an array of PendingChanges.
            </summary>
            <param name="paths">an array of PendingChanges</param>
            <returns>an array of ItemSpecs</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ItemSpec.DeletionId">
            <summary>
            Deletion id of the item
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ItemSpec.Item">
            <summary>
            Full path to the item.  May be either a server or local path
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ItemSpec.RecursionType">
            <summary>
            Type of recursion to use to select items
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LabelItemSpec">
            <summary>
            Represents an item that is being labeled.
            </summary>
            <summary>
            The LabelItemSpec is used to define an item that is being labelled. This
            is the server path, version, recursion type and include/exclude.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LabelItemSpec.Exclude">
            <summary>
            This determines if the item(s) are included in the label or excluded.
            When a set of label specs are used this can be used to exclude specific
            items from a recursive list.
            Note: Exclusions must be posted as ServerItem specifications.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LabelItemSpec.ItemSpec">
            <summary>
            This is the path to the server item being labelled
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LabelItemSpec.Version">
            <summary>
            This is the version of the item(s) that are being included in the 
            label. If this is an exclusion the version should not be specified.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionCache.CacheFileName">
            <summary>
            The name of the cache file (without path).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionCache.CacheFilePath">
            <summary>
            Constructs and returns the configuration file path for the current user.
            NOTE: This value is null when the directory cannot be determined.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionCache.RemoveExclusion(Microsoft.TeamFoundation.VersionControl.Client.InternalServerInfo,System.String)">
            <summary>
            Removes the provided exclusion from both the default and user
            exclusion lists.
            </summary>
            <param name="exclusion">The exclusion to remove.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionCache.SetDefaultExclusions(Microsoft.TeamFoundation.VersionControl.Client.InternalServerInfo,System.String[])">
            <summary>
            Overwrites the existing default exclusions with the provided
            default exclusion list.
            </summary>
            <param name="serverInfo"></param>
            <param name="exclusions">The list of default exclusions.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionCache.SetDefaultExclusions(Microsoft.TeamFoundation.VersionControl.Client.InternalServerInfo,Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionSet)">
            <summary>
            Overwrites the existing default exclusions with the provided
            default exclusion list.
            </summary>
            <param name="exclusions">The list of default exclusions.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionCache.GetExclusions(Microsoft.TeamFoundation.VersionControl.Client.InternalServerInfo)">
            <summary>
            Returns the set of all default and user exclusions.
            </summary>
            <returns>The set of all default and user exclusions.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionCache.GetLastDefaultExclusionUpdate(Microsoft.TeamFoundation.VersionControl.Client.InternalServerInfo)">
            <summary>
            Returns the last time we called the server to determine the 
            default exclusions.
            </summary>
            <param name="collectionId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionCache.EnsureDiskCacheLoaded">
            <summary>
            Make sure our caches have been loaded.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionCache.Reload">
            <summary>
            Reloads the local item exclusion cache from disk.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionCache.Load(System.Xml.XmlNode)">
            <summary>
            Load all of the exclusion given the root exclusion node.
            </summary>
            <param name="rootExclusionNode">The root exclusion node in the XmlDocument</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionCache.Save(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Save the exclusion data under the specified node in the specified document.  We don't
            clear the dirty flag here because the caller could fail to write the data to disk.  The
            caller should clear the dirty flag once the save has been successful.
            See Load for some sample XML.
            </summary>
            <param name="inputXml">the XML exclusion root node for the existing cache file</param>
            <param name="outputXml">the root node for the local cache</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionCache.Merge(System.Xml.XmlNode)">
            <summary>
            Intelligently merges an existing cache file's contents (input) with the current in-memory
            cache.
            </summary>
            <param name="xmlOnDisk">the contents of the cache file on disk</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ExclusionSet.MarkClean">
            <summary>
            Should be called when the cache is written out to disk.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionEvaluator">
            <summary>
            An LocalItemExclusionEvaluator is an evaluator for local item exclusions.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionEvaluator.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.String)">
            <summary>
            Create an LocalItemExclusionEvaluator object to evaluate local item exclusions for the provided Workspace.
            Path parts at or above the start local item will not be checked for exclusions.
            </summary>
            <param name="workspace">Workspace to check</param>
            <param name="startLocalItem">Start local item</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionEvaluator.UseOnlyStartLocalItemExclusions">
            <summary>
            If true, ignore files below the start local item will not be processed when evaluating
            exclusions.
            
            The default value for this flag is false.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionEvaluator.StartLocalItem">
            <summary>
            The value for StartLocalItem passed in at construction.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionEvaluator.IsExcluded(System.String)">
            <summary>
            Check the provided local item against the LocalItemExclusionEvaluator to see if it should
            be excluded from addition to version control.
            </summary>
            <param name="localItem">The local item to check</param>
            <returns>True if the item is excluded; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionEvaluator.IsExcluded(System.String,System.Boolean)">
            <summary>
            Check the provided local item against the LocalItemExclusionEvaluator to see if it should
            be excluded from addition to version control.
            </summary>
            <param name="localItem">The local item to check</param>
            <param name="isFolder">True if the local item to check is a folder; false otherwise</param>
            <returns>True if the item is excluded; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionEvaluator.IsExcluded(System.String,System.Boolean,System.String@,System.String@)">
            <summary>
            Check the provided local item against the LocalItemExclusionEvaluator to see if it should
            be excluded from addition to version control. If the item is excluded, the
            appliedExclusion and ignoreFilePath out parameters will be set to provide
            additional information about why the item was excluded.
            </summary>
            <param name="localItem">The local item to check</param>
            <param name="isFolder">True if the local item to check is a folder; false otherwise</param>
            <param name="appliedExclusion">[out] If the item is excluded, the exclusion which was applied</param>
            <param name="ignoreFilePath">[out] If the item is excluded, the name of the ignore file on disk which
            contains the applied exclusion. If the applied exclusion came from the global exclusion list for 
            the Team Project Collection, the value is the empty string.</param>
            <returns>True if the item is excluded; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionEvaluator.PrepareStackForLocalItem(System.String)">
            <summary>
            Alters the stack of .tfignore files
            </summary>
            <param name="localItemToCheck"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionEvaluator.IgnoreFile.IsExcluded(System.String,System.Boolean,System.String,System.String@)">
            <summary>
            Iterates through this IgnoreFile's list of exclusions to determine if the item should be
            included, excluded, or if there is no result either way from this IgnoreFile.
            </summary>
            <param name="path">The path to check</param>
            <param name="startPath">A local item which parents path. Only the path parts after startPath are checked.</param>
            <param name="exclusion">[out] If the return value is non-null, the </param>
            <returns>Null if no result, true if the item is excluded, false if the item is included</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionEvaluator.IgnoreEntry.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            For .tfignore entries.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionEvaluator.IgnoreEntry.#ctor(System.String)">
            <summary>
            For global exclusion list entries.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemExclusionEvaluator.IgnoreEntry.AcceptPattern(System.String,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Helper method for the constructor.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LocalVersion">
            <summary>
            Contains the local version information of an item in a users workspace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalVersion.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a LocalVersion object using the specified item and version.
            </summary>
            <param name="item">The local version item.</param>
            <param name="version">The local version item's version.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalVersion.Item">
            <summary>
            The local path of the item
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalVersion.Version">
            <summary>
            The version which the user has locally.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ServerItemLocalVersionUpdate">
            <summary>
            On-the-wire object for local version updates for Dev11 forward
            </summary>
            <summary>
            Class representing a single UpdateLocalVersion request.
            Allows UpdateLocalVersion() to take an array of requests.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ServerItemLocalVersionUpdate.ItemId">
            <summary>
            ItemID of the item being updated. This is sent from the server to
            the client when Reconcile is called. It is not used for calling
            UpdateLocalVersion.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ServerItemLocalVersionUpdate.SourceServerItem">
            <summary>
            For a committed item, this is the item in committed space
            else in pending space;
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LocalVersionUpdate">
            <summary>
            On-the-wire object for local version updates for Whidbey -> Dev10
            </summary>    
            <summary>
            Class representing a single UpdateLocalVersion request.
            Allows UpdateLocalVersion() to take an array of requests.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalVersionUpdate.ItemId">
            <summary>
            ItemID of the item being updated.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalVersionUpdate.SendToServer">
            <summary>
            Indicates whether or not this ILocalVersionUpdate is eligible to be transformed
            into a LocalVersionUpdate/ServerItemLocalVersionUpdate object for use in a webmethod
            call to UpdateLocalVersion. If false, the object is intended to be consumed only
            by the local workspaces implementation of UpdateLocalVersion.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalVersionUpdate.SourceServerItem">
            <summary>
            Committed server item of the item whose local version row should be updated,
            or the target server item if the item is uncommitted (VersionLocal == 0)
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalVersionUpdate.ItemId">
            <summary>
            Item ID corresponding to SourceServerItem (optional; but your calls to
            UpdateLocalVersion on a pre-Dev11 server will fail if this is not provided).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalVersionUpdate.TargetLocalItem">
            <summary>
            The path on the local disk where this item is currently located, or null
            to remove it from the workspace (delete the local version row).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalVersionUpdate.VersionLocal">
            <summary>
            The version of the item in the workspace. If zero, the item is uncommitted
            (a pending add or branch).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ILocalVersionUpdate.IsCommitted">
            <summary>
            Shorthand property for VersionLocal != 0
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPopulatableLocalVersionUpdate.BaselineFileGuid">
            <summary>
            The baseline file GUID for the baseline for this update
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPopulatableLocalVersionUpdate.BaselineHashValue">
            <summary>
            The MD5 hash value of the baseline for this update
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPopulatableLocalVersionUpdate.DownloadUrl">
            <summary>
            The URL where the baseline for this local version entry can be retrieved
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPopulatableLocalVersionUpdate.PendingChangeTargetServerItem">
            <summary>
            If non-null, EnsureUpdatesFullyPopulated may use QueryPendingChanges as a 
            preferred data source for populating missing baseline information. The
            pending change to be queried will be the one on this target server item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPopulatableLocalVersionUpdate.QueryItemsFetchRequest">
            <summary>
            If set, then if this IPopulatableLocalVersionUpdate falls back to QueryItems
            for populating missing baseline information, then this request will be used
            instead of the default (SourceServerItem, VersionLocal) pair for the query.
            
            This is for pending branches.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IPopulatableLocalVersionUpdate.IsFullyPopulated(System.Boolean)">
            <summary>
            Indicates whether this IPopulatableLocalVersionUpdate has all the fields
            populated that are necessary to call UpdateLocalVersion for a local workspace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IPopulatableLocalVersionUpdate.UpdateFrom(Microsoft.TeamFoundation.VersionControl.Client.Item)">
            <summary>
            Updates the populatable fields of this IPopulatableLocalVersionUpdate from
            the data in the provided Item object.
            </summary>
            <param name="item">Data source to update from</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IPopulatableLocalVersionUpdate.UpdateFrom(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem)">
            <summary>
            Updates the populatable fields of this IPopulatableLocalVersionUpdate from
            the data in the provided WorkspaceLocalItem object.
            </summary>
            <param name="lvExisting">Data source to update from</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IPopulatableLocalVersionUpdate.UpdateFrom(Microsoft.TeamFoundation.VersionControl.Client.PendingChange)">
            <summary>
            Updates the populatable fields of this IPopulatableLocalVersionUpdate from
            the data in the provided PendingChange object.
            </summary>
            <param name="pendingChange">Data source to update from</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IPopulatableLocalVersionUpdate.UpdateFromPendingAdd(Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange)">
            <summary>
            Updates the populatable fields of this IPopulatableLocalVersionUpdate from
            the data in the provided LocalPendingChange object, which must be a pending add.
            </summary>
            <param name="pendingAdd">Pending add</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ClientLocalVersionUpdate.IsFullyPopulated(System.Boolean)">
            <summary>
            Indicates whether this ClientLocalVersionUpdate has all the fields
            populated that are necessary to call UpdateLocalVersion for a local workspace.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceCache">
            <summary>
            Represents the local workspace cache in memory.
            The local workspace cache is a persistent store of WorkspaceInfo objects.
            
            The LocalWorkspaceCache can be serialized and deserialized from disk.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceCache.LoadFromDirectory(System.String)">
            <summary>
            New path for loading from a partitioned set of VersionControl.config files.
            Uses a Win32 mutex to coordinate access.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceCache.LoadFromFile(System.String)">
            <summary>
            Legacy path for loading a single VersionControl.config file.
            Does not need to use a Win32 mutex to coordinate access.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceCache.SaveToFile(System.String)">
            <summary>
            Legacy path for saving to a single VersionControl.config.
            Does not need to use a Win32 mutex to coordinate access.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceCache.SaveToDirectory(System.String)">
            <summary>
            New path for saving to a partitioned set of VersionControl.config files.
            Uses a Win32 mutex to coordinate access.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceCache.EnsureSuccess(System.Boolean)">
            <summary>
            Helper method which is a no-op in retail code, but verifies success in debug builds.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceCache.GetMapping(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo,System.String)">
            <summary>
            Gets the mapping for the given path.  The mapping returned is the actual mapping, which
            may be for an ancestor of the path.  For example, if c:\x is mapped, 
            GetMapping("c:\x\y\z\a.txt") will return c:\x.
            </summary>
            <param name="path">the path</param>
            <returns>the mapping for the path</returns>        
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceCache.m_wsInfos">
            <summary>
            This dictionary contains each WorkspaceInfo exactly once and allows fast lookup by our primary key: (RepositoryId, WorkspaceName, WorkspaceOwner).
            Each WorkspaceInfo is annotated with a dirty bit.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceCache.m_uriMap">
            <summary>
            This dictionary is used to enforce the uniqueness constraint on ServerUri -> ServerGuid.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceCache.m_removedWsInfos">
            <summary>
            This hash set contains the cache keys of those WorkspaceInfo objects which were removed from m_wsInfos.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder">
            <summary>
            Represents a $tf folder on disk. In the steady-state, the workspace has one $tf folder per volume
            that has a folder mapping.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder.Create(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.String)">
            <summary>
            Given the location at which a baseline folder should be created, creates
            a baseline folder on disk and returns it.
            </summary>
            <param name="localFolder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder.CreateBaselineFolderStructure(System.String)">
            <summary>
            Given a path, creates a baseline folder structure at that path.
            Example paths:
            @"D:\workspace\$tf"
            @"C:\ProgramData\TFS\Offline\11c92875-fac4-4277-afba-d16f6eeb2189\ws1;NORTHAMERICA;phkelley"
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder.EnsureLocalMetadataDirectoryExists(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Ensures that the local metadata directory for the given local workspace exists.
            The path looks like:
            @"C:\ProgramData\TFS\Offline\11c92875-fac4-4277-afba-d16f6eeb2189\ws1;NORTHAMERICA;phkelley"
            
            The method has special logic to place an access control entry on the folder for the
            owner, and to take ownership from BUILTIN\Administrators. (This logic only runs if the
            directory is actually created by this method.)
            </summary>
            <param name="workspace">Workspace whose local metadata directory's existence should be ensured</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder.EnsureLocalMetadataDirectoryExists(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.String)">
            <summary>
            Ensures that the local metadata directory for the given local workspace exists.
            The path looks like:
            @"C:\ProgramData\TFS\Offline\11c92875-fac4-4277-afba-d16f6eeb2189\ws1;NORTHAMERICA;phkelley"
            
            The method has special logic to place an access control entry on the folder for the
            owner, and to take ownership from BUILTIN\Administrators. (This logic only runs if the
            directory is actually created by this method.)
            
            The method will also clone any additional access control entries from the provided
            sourceDirectoryForAcl directory.
            </summary>
            <param name="workspace">Workspace whose local metadata directory's existence should be ensured</param>
            <param name="sourceDirectoryForAcl">Source directory for the access control list</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder.GetPathFromGuid(System.Byte[])">
            <summary>
            Given a baseline file GUID, calculates the path that this baseline file GUID would have
            in this baseline folder, without the extension (.rw or .gz).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder.GetPathFromGuid(System.String,System.Byte[])">
            <summary>
            Given the root baseline folder and a baseline file GUID, calculates the path
            that this baseline file GUID would have in that root folder, without the extension (.rw or .gz).
            
            Example values for baselineFolderRootPath:
            @"D:\workspace\$tf" -- from the instance method GetPathFromGuid immediately above
            @"C:\ProgramData\TFS\Offline\11c92875-fac4-4277-afba-d16f6eeb2189\ws1;NORTHAMERICA;phkelley"
            </summary>
            <param name="baselineFolderRootPath">Root folder of the baseline folder structure</param>
            <param name="baselineFileGuid">Baseline file GUID whose path should be computed</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder.GetPathFromGuid(System.String,System.Byte[],System.String@)">
            <summary>
            Given the root baseline folder and a baseline file GUID, calculates the path
            that this baseline file GUID would have in that root folder, without the extension (.rw or .gz).
            
            Example values for baselineFolderRootPath:
            @"D:\workspace\$tf" -- from the instance method GetPathFromGuid immediately above
            @"C:\ProgramData\TFS\Offline\11c92875-fac4-4277-afba-d16f6eeb2189\ws1;NORTHAMERICA;phkelley"
            </summary>
            <param name="baselineFolderRootPath">Root folder of the baseline folder structure</param>
            <param name="baselineFileGuid">Baseline file GUID whose path should be computed</param>
            <param name="individualBaselineFolder">[out] A value equal to Path.GetDirectoryName(retval)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder.CheckForValidBaselineFileGuid(System.Byte[])">
            <summary>
            Throws an ArgumentException if the baseline file GUID provided is null
            or has a length != 16 bytes.
            </summary>
            <param name="baselineFileGuid">Baseline file GUID to check</param>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder.c_gzExtension">
            <summary>
            Extension for gzipped baselines.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder.c_rwExtension">
            <summary>
            Extension for raw (uncompressed) baselines.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.LockForRead">
            <summary>
            Takes a read lock on the BaselineFolderCollection. Writes to the
            BaselineFolderCollection are blocked until you unlock.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.UnlockForRead(System.Int32)">
            <summary>
            Releases a read lock previously obtained on the BaselineFolderCollection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.LockForWrite">
            <summary>
            Takes a write lock on the BaselineFolderCollection. Your thread will
            block until all readers have drained.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.UnlockForWrite(System.Int32)">
            <summary>
            Releases a write lock previously obtained on the BaselineFolderCollection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.UpdateFrom(Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties)">
            <summary>
            Given a workspace properties table, update the set of baseline folders
            and working folders held by this BaselineFolderCollection.
            
            The caller must be holding a write lock.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.GetNewBaselineLocation(System.Byte[],System.String,System.Int32)">
            <summary>
            Given a baseline file GUID, and the target local path where the item will be placed
            in the workspace, returns the path (without file extension) where the baseline file
            should be created on disk. This method is used to place new baselines on disk.
            
            Do not use this method to look up the location of a baseline that already exists.
            Instead, call GetBaselineLocation().
            
            This overload of GetNewBaselineLocation is intended to be used by those callers who are
            already holding a read lock on the BaselineFolderCollection. Pass the read lock token
            you received from LockForRead() as the readLockToken parameter to this method.
            </summary>
            <param name="baselineFileGuid">Baseline file GUID for the baseline</param>
            <param name="targetLocalItem">The location on disk of the file</param>
            <returns>The filename on disk where the baseline should be placed (except for file extension)</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.IsImmediateParentOfBaselineFolder(System.String)">
            <summary>
            Called by the client-side Get logic when it is about to delete a folder from the local disk. This routine checks
            to see if that folder parents a baseline folder.
            </summary>
            <param name="sourceLocalItem">Folder which is about to be deleted by the client-side Get logic</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.CopyBaselineToTarget(System.Byte[],System.String,System.Int64,System.Byte[])">
            <summary>
            Given a baseline file GUID and a target location on disk, copies the baseline from
            the baseline store to the target location. (The target location always receives a
            decompressed copy of the baseline, even if it is stored compressed in the baseline
            folder.)
            </summary>
            <param name="baselineFileGuid">Baseline file GUID to copy</param>
            <param name="targetLocalItem">Target location for the baseline file</param>
            <param name="baselineFileLength">(optional) If provided, the uncompressed baseline length will be compared
            against this value and checked after decompression. If the values do not match, an exception will be thrown.</param>
            <param name="baselineHashValue">(optional) If provided, the uncompressed baseline will be hashed and its
            hash compared to this value after decompression. If the values to not match, an exception will be thrown.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.DeleteBaseline(System.Byte[])">
            <summary>
            Given a baseline file GUID, removes it from the baseline folder in which it resides.
            </summary>
            <param name="baselineFileGuid">Baseline file GUID to remove</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.GetNewBaselineLocation(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.Collections.Generic.IList{Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder},System.Byte[],System.String)">
            <summary>
            Given a baseline file GUID, and the target local path where the item will be placed
            in the workspace, returns the path (without file extension) where the baseline file
            should be created on disk. This method is used to place new baselines on disk.
            
            Do not use this method to look up the location of a baseline that already exists.
            Instead, call GetBaselineLocation().
            </summary>
            <param name="baselineFileGuid">Baseline file GUID for the baseline</param>
            <param name="targetLocalItem">The location on disk of the file</param>
            <returns>The filename on disk where the baseline should be placed (except for file extension)</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.GetBaselineLocation(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.Collections.Generic.IList{Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder},System.Byte[])">
            <summary>
            Given a baseline file GUID, returns the full path to the baseline file in a baseline folder.
            The baseline file may be compressed or uncompressed.
            </summary>
            <param name="baselineFileGuid">Baseline GUID to look up</param>
            <returns>The full path of the baseline file, if found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.GetBaselineLocation(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.Collections.Generic.IList{Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder},System.Byte[],System.Boolean@)">
            <summary>
            Given a baseline file GUID, returns the full path to the baseline file in a baseline folder.
            From the path that's returned, you can tell whether or not it is compressed (compressed
            baselines will end in ".gz", uncompressed in ".rw"), but for convenience it is also returned
            as an out parameter.
            </summary>
            <param name="baselineFileGuid">Baseline GUID to look up</param>
            <param name="isBaselineCompressed">True if the baseline is compressed, false otherwise</param>
            <returns>The full path of the baseline file, if found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.CopyBaselineToTarget(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.Collections.Generic.IList{Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder},System.Byte[],System.String,System.Int64,System.Byte[])">
            <summary>
            Given a baseline file GUID and a target location on disk, copies the baseline from
            the baseline store to the target location. (The target location always receives a
            decompressed copy of the baseline, even if it is stored compressed in the baseline
            folder.)
            </summary>
            <param name="baselineFileGuid">Baseline file GUID to copy</param>
            <param name="targetLocalItem">Target location for the baseline file</param>
            <param name="baselineFileLength">(optional) If provided, the uncompressed baseline length will be compared
            against this value and checked after decompression. If the values do not match, an exception will be thrown.</param>
            <param name="baselineHashValue">(optional) If provided, the uncompressed baseline will be hashed and its
            hash compared to this value after decompression. If the values to not match, an exception will be thrown.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.DeleteBaseline(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.Collections.Generic.IList{Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder},System.Byte[])">
            <summary>
            Given a baseline file GUID, removes it from the baseline folder in which it resides.
            </summary>
            <param name="baselineFileGuid">Baseline file GUID to remove</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.UpdateBaselineLocation(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.Collections.Generic.IList{Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder},System.Byte[],System.String)">
            <summary>
            Given a local path on disk and the baseline file GUID corresponding to that item, ensures
            that the baseline file for that item is in the correct BaselineFolder.
            </summary>
            <param name="baselineFileGuid">Baseline file GUID of the item</param>
            <param name="currentLocalItem">Current local path of the item</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.GetBaselineFolderForPartition(System.Collections.Generic.IList{Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder},System.String)">
            <summary>
            Given a partition (i.e. "E:\" or "\\vscsstor\share"), return the BaselineFolder object
            for the valid baseline folder for this workspace on that partition, if it exists.
            </summary>
            <param name="partition">Partition to look up</param>
            <returns>A BaselineFolder object with state Valid, or null if not found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.CreateFile(System.String)">
            <summary>
            Creates and opens a file with the specified path.
            If the parent folder does not exist, we create it and mark it and its parent as hidden -
            - we assume that file reside in $tf\10\ and we need to mark both $tf and 10 as hidden.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.CreateFile(System.String@,System.Boolean,System.String,System.Boolean@)">
            <summary>
            Creates and opens a file with the specified path.
            If the parent folder does not exist, we create it and mark it and its parent as hidden -
            - we assume that file reside in $tf\10\ and we need to mark both $tf and 10 as hidden.
            If filePath was not specified or its creation failed, and createTempOnFailure=true
            we will create a new temporary file, using tempUniqueString.
            </summary>
            <param name="filePath"></param>
            <param name="createTempOnFailure"></param>
            <param name="tempUniqueString"></param>
            <param name="tempCreated"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.WorkingFolders">
            <summary>
            The working folders for the workspace.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.c_tmpExtension">
            <summary>
            Extension for temporary files in the baseline directory.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.c_decompressionBufferSize">
            <summary>
            When decompressing a gzipped baseline, the size of the buffer to use
            while streaming the decompressed content to disk.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BaselineFolderCollection.TokenReaderWriterLock">
            <summary>
            A reader-writer lock that does not use thread affinity.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BaselineRequest">
            <summary>
            Represents a request to fetch a baseline and store it. The source can either be a local item
            or a download URL or both.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.BaselineRequest.BaselineFileGuid">
            <summary>
            The baseline file GUID which was generated and already persisted in the local version table
            with the entry.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.BaselineRequest.BaselinePartitionLocalItem">
            <summary>
            This is only used in combination with the baseline file GUID to figure out what baseline
            directory to put the file into. (There is one per partition.) If you don't know what partition
            the baseline file should live on, it's OK for this value to be null. The baseline will
            be stored in an arbitrarily chosen partition's baseline folder.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.BaselineRequest.SourceLocalItem">
            <summary>
            If set, then this path will be used as the baseline content. As the content
            is gzipped, it will be hashed and that hash will be compared at completion with the value
            stored in HashValue. If they differ, then the baseline request will try to fall back to
            the DownloadUrl, if available.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.BaselineRequest.DownloadUrl">
            <summary>
            The download URL to use to fetch the baseline content. Used if LocalItem is null or if
            the local item's hash value does not match our own HashValue.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.BaselineRequest.HashValue">
            <summary>
            The hash value of the baseline content. (Optional.)
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LocalBaselineAsyncOperation">
            <summary>
            The AsyncOperation object which coordinates running LocalBaselineRequestState objects.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LocalBaselineRequestProgressEventArgs">
            <summary>
            Raised after each LocalBaselineRequestState finishes execution.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LocalBaselineRequestState">
            <summary>
            Represents a currently executing BaselineRequest that has a SourceLocalItem.
            BaselineRequests are executed on the threadpool by BaselineFolderCollection.ProcessBaselineRequests.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.AsyncBaselineDownloadOperation">
            <summary>
            The AsyncOperation object which coordinates running AsyncBaselineDownloadState objects.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.AsyncBaselineDownloadState">
            <summary>
            State class allowing us to synchronize multiple threads downloading baselines.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.ExpandRootsFrom(Microsoft.TeamFoundation.VersionControl.Client.ParsedItemSpec,Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable,Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable,System.Collections.Generic.ICollection{Microsoft.TeamFoundation.VersionControl.Client.Failure})">
            <summary>
            Given a ParsedItemSpec, enumerates the set of matching local version entries which have no parent that
            also matches the ParsedItemSpec. Parenting is checked by target server item.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.TryGetServerItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties,Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable,Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable)">
            <summary>
            Provides server item for specified item.
            If item is server item, just returns it.
            If item is found in local version table, returns server item from there, with parent renames applied.
            Otherwise uses workspace to translate local path to server path.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.CalculateTargetServerItem(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Calculates target server item based on the source and target roots of the rename, source path and whether targetServerRoot is existing folder or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.IsDirectory(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable,Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable,System.String)">
            <summary>
            Returns true if item exists in the WorkspaceVersionTable and is a folder.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.IsMove(System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemType,Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.QueryPendingChanges(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.Failure[]@,System.Boolean,System.String,System.Int32)">
            <summary>
            Return the pending changes from the workspace specified that match the provided itemspecs.
            If the itemspecs provided match no pending changes, an empty array of PendingSet is returned.
            If one or more pending changes are matched, an array containing exactly one PendingSet is returned.
            This PendingSet object contains the distinct set of pending changes matched by the itemspecs.
            </summary>
            <param name="workspace">Workspace to query pending changes in</param>
            <param name="itemSpecs">Itemspecs to match</param>
            <param name="failures">Any non-critical failures encountered during the operation</param>
            <param name="includeCandidates">Whether to return candidate changes in the PendingSet object
            if true, a pending set object will be returned if the workspace either has pending changes
            or candidates</param>
            <param name="lastChange">If not null or empty, only items > last change will be returned.</param>
            <param name="pageSize">If not zero, only the page size number of pending changes will be returned.</param>
            <returns>An array of PendingSet objects of either length 0 or 1</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.QueryPendingChanges(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties,Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable,Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Collections.Generic.ICollection{Microsoft.TeamFoundation.VersionControl.Client.Failure},System.Boolean)">
            <summary>
            Return the distinct set of pending changes from the workspace specified that match the
            provided itemspecs.
            </summary>
            <param name="workspace">Workspace to query pending changes in</param>
            <param name="lv">Local version table for the workspace</param>
            <param name="pc">Pending changes table for the workspace</param>
            <param name="itemSpecs">Itemspecs to match</param>
            <param name="includeCandidates">Whether to include candidate pending changes</param>
            <returns>The set of distinct matching pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.MarkReadOnlyBit(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.Boolean)">
            <summary>
            Given a local workspace, either sets all items without pending changes on them to +R, or
            sets all items in the workspace to -R.
            </summary>
            <param name="workspace">The local workspace whose local items should have their +R status changed</param>
            <param name="setReadOnly">True to set items to +R, false to set items to -R</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.GetBaselineFolders(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Returns the set of baseline folders ($tf directories) for the given local workspace.
            </summary>
            <param name="workspace">The local workspace</param>
            <returns>The set of baseline folders for the local workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.PopulateLocalVersionTable(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.WorkspaceItem})">
            <summary>
            Given a local workspace with an empty version table and a set of WorkspaceItem objects
            (from QueryWorkspaceItems), constructs the local version table for the workspace and returns
            a set of baseline requests which must be executed to populate the baseline folders.
            </summary>
            <param name="workspace">The local workspace</param>
            <param name="workspaceItems">The set of WorkspaceItem objects for this workspace</param>
            <returns>The set of baseline requests which must be executed</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.UndoneChange.UndoingAdd">
            <summary>
            Returns true if this is a pending add
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.UndoneChange.UndoingRename">
            <summary>
            Returns true if this is a pending rename
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.UndoneChange.UndoingBranch">
            <summary>
            Returns true if this is a pending branch
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.UndoneChange.UndoingLock">
            <summary>
            Returns true if this pending change has a lock
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.UndoneChange.UndoingRecursiveChange">
            <summary>
            Renames and deletes on folders are recursive changes.
            True if this change is a recursive change.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.UndoneChange.RemainingChangeType">
            <summary>
            The changetype of the pending change, minus the bits that are being undone.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.UpdateLocalVersion(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties,Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable,Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable,Microsoft.TeamFoundation.VersionControl.Client.ILocalVersionUpdate[],System.Collections.Generic.HashSet{System.Byte[]},Microsoft.TeamFoundation.VersionControl.Client.IPopulatableLocalVersionUpdate[]@)">
            <summary>
            Updates the local copy of the local version table for this workspace in accordance with the
            update requests provided by the localVersionUpdates parameter.
            </summary>
            <param name="workspace">Workspace whose local version table is being updated</param>
            <param name="wp">Workspace properties table</param>
            <param name="lv">Local version table</param>
            <param name="pc">Pending changes table (const)</param>
            <param name="localVersionUpdates">Update requests for the local version table</param>
            <param name="persistedDisplacedBaselines">(optional) A HashSet instance for persisting the set
            of displaced baselines across multiple calls to UpdateLocalVersion. Used for circular renames
            which may cross calls to UpdateLocalVersion</param>
            <param name="updatesMissingBaselines">[out] The set of ClientLocalVersionUpdate objects which were processed successfully
            but which had no baseline file GUID when one was needed. A baseline file GUID was generated
            for these items and the caller should download the required baselines to ensure
            offline content is available.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.AcknowledgeUpdateLocalVersion(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.ILocalVersionUpdate})">
            <summary>
            Called during an UpdateLocalVersionQueue flush that writes both to the local local version table
            and the server local version table. The local local version table entries are initially marked
            PendingReconcile by LocalDataAccessLayer.UpdateLocalVersion, above. After the server flush
            successfully completes, the entries which were flushed have their PendingReconcile flag cleared
            by a call to this method.
            </summary>
            <param name="lv">Local version table</param>
            <param name="updates">Updates which were successfully flushed to the server</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.QueryWorkingFolders(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Retrieves the authoritative copy of the working folders for a local workspace.
            </summary>
            <param name="workspace">The local workspace whose working folders should be fetched</param>
            <returns>The working folders for the local workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalDataAccessLayer.SetWorkingFolders(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[])">
            <summary>
            Sets the authoritative copy of the working folders for a local workspace to the provided
            values. The values provided should always be sourced from the server to ensure they have
            been properly "reduced" (no redundant mappings, etc.) as most code that does any kind of
            complex operation on the working folders makes this assumption.
            </summary>
            <param name="workspace">The local workspace whose working folders should be set</param>
            <param name="workingFolders">The new working folders for the workspace</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceSuppressAsynchronousScanner">
            <summary>
            Disposable object which suppresses the asynchronous scanner on the attached
            workspace, if the attached workspace is a local workspace (WorkspaceLocation.Local).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceSuppressAsynchronousScanner.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Until this object is disposed, the asynchronous scanner on the attached workspace
            will be suppressed, if it is active. See Workspace.IsAsynchronous for more details.
            </summary>
            <param name="toSuppress">Workspace whose asynchronous scanner should be suppressed</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspacePersistedMetadataTables">
            <summary>
            Disposable object which causes the cached copies of the local metadata tables to be
            strongly rooted in the garbage collector's object graph, if the attached workspace is
            a local workspace (WorkspaceLocation.Local).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspacePersistedMetadataTables.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Until this object is disposed, the cached copies of the local metadata tables on the
            attached workspace will be strongly rooted in the garbage collector's object graph.
            </summary>
            <param name="toPersist">Workspace whose metadata tables should be persisted</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LocalItemEnumerator">
            <summary>
            Given the full path to a directory, enumerates that directory's contents, breadth-first.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemEnumerator.#cctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalItemEnumerator.GetEnumeratorsForWorkingFolders(Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[],System.Boolean)">
            <summary>
            Returns a set of LocalItemEnumerator objects which if enumerated over, cover the entire mapped local
            space of the provided working folder set.
            </summary>
            <param name="folders">The WorkingFolder set for the workspace whose mapped local space should be traversed</param>
            <param name="enumerateHiddenAndSystem">Controls whether the LocalItemEnumerator enumerates local hidden and system items</param>
            <returns>The set of LocalItemEnumerator objects needed to traverse the workspace</returns>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.EnumeratedLocalItem.ParentPathChildItem">
            <summary>
            The path of the item. It is preferable to use this field over the FullPath property, which is computed.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.EnumeratedLocalItem.ServerItem">
            <summary>
            Only populated for candidate adds.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange.#ctor(System.String,System.String,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.Int32,System.Byte[],System.Int32,Microsoft.TeamFoundation.VersionControl.Client.ChangeType)">
            <summary>
            Used for a candidate add
            </summary>
            <param name="targetServerItem"></param>
            <param name="itemType"></param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange.IsAdd">
            <summary>
            Returns true if this is a pending add
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange.IsEdit">
            <summary>
            Returns true if this is a pending edit
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange.IsRename">
            <summary>
            Returns true if this is a pending rename
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange.IsEncoding">
            <summary>
            Returns true if this is a pending file type change
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange.IsDelete">
            <summary>
            Returns true if this is a pending delete
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange.IsUndelete">
            <summary>
            Returns true if this is a pending undelete
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange.IsBranch">
            <summary>
            Returns true if this is a pending branch
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange.IsMerge">
            <summary>
            Returns true if this is a pending merge
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange.IsRollback">
            <summary>
            Returns true if there is a pending rollback
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange.IsLock">
            <summary>
            Returns true if this pending change has a lock
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange.IsRecursiveChange">
            <summary>
            Renames and deletes on folders are recursive changes.
            True if this change is a recursive change.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange.ToPendingChange(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String)">
            <summary>
            Materializes a LocalPendingChange object as a PendingChange to be returned
            via the public client object model.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange.FromPendingChange(Microsoft.TeamFoundation.VersionControl.Client.PendingChange)">
            <summary>
            Creates a LocalPendingChange object from a PendingChange that has come down from the server.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTableHeader">
            <summary>
            Loads just the header from the pending changes table --
            for use when you just want to check the # of pending changes in the table,
            or read the pending change signature.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.HasSubItemOfLocalVersion(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem)">
            <summary>
            Returns true if the local version entry provided has a pending change on it,
            or if a pending change exists on a child item.
            </summary>
            <param name="lvEntry">Local version entry to check</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.HasSubItemOfTargetServerItem(System.String)">
            <summary>
            Returns true if the target server item provided has a pending change on it,
            or if a pending change exists on a child item.
            </summary>
            <param name="serverItem">Target server item to check</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.HasSubItemCallback(System.String,Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange,Microsoft.TeamFoundation.Framework.Common.SparseTreeAdditionalData,System.Object)">
            <summary>
            SparseTree callback for HasSubItemOf family of methods.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.GetByTargetServerItem(System.String)">
            <summary>
            Given a target server item, returns the pending change associated with the item.
            If the item does not have a pending change, null is returned.
            </summary>
            <param name="serverItem">The target server item to look up</param>
            <returns>The pending change associated with the target server item provided</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.GetByCommittedServerItem(System.String)">
            <summary>
            Given a committed server item, returns the pending change associated with the item.
            If the item does not have a pending change, null is returned.
            </summary>
            <param name="serverItem">The committed server item to look up</param>
            <returns>The pending change associated with the committed server item provided</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.GetByLocalVersion(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem)">
            <summary>
            Given a local version entry, returns the pending change associated with the item.
            If the item does not have a pending change, null is returned.
            </summary>
            <param name="lvEntry">The local version entry to look up</param>
            <returns>The pending change associated with the local version entry provided</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.GetCommittedServerItemForTargetServerItem(System.String)">
            <summary>
            Given a target server item, reverses the server item back through the 
            workspace's pending renames to give the committed server item.
            </summary>
            <param name="serverItem">Target server item to translate</param>
            <returns>Corresponding committed server item</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.GetTargetServerItemForCommittedServerItem(System.String)">
            <summary>
            Given a committed server item, forwards the server item through the 
            workspace's pending renames to give the target server item.
            </summary>
            <param name="serverItem">Committed server item to translate</param>
            <returns>Corresponding target server item</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.GetTargetServerItemForLocalVersion(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem)">
            <summary>
            Given a local version, returns the target server item.
            </summary>
            <param name="lvEntry">Local version</param>
            <returns>Target server item for the local version</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.GetRecursiveChangeTypeForLocalVersion(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem)">
            <summary>
            Given a local version entry, return the union of:
            1. The full ChangeType on the item specified.
            2. The union of all the recursive ChangeTypes on parents of the item specified, up to $/.
            Recursive changetypes are rename and delete.
            </summary>
            <param name="lvEntry">Local version entry</param>
            <returns>The recursive ChangeType for the local version entry specified</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.GetRecursiveChangeTypeForTargetServerItem(System.String)">
            <summary>
            Given a target server item, return the union of:
            1. The full ChangeType on the item specified.
            2. The union of all the recursive ChangeTypes on parents of the item specified, up to $/.
            Recursive changetypes are rename and delete.
            </summary>
            <param name="targetServerItem">Target server item</param>
            <returns>The recursive ChangeType for the target server item specified</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.GetInheritedChangeTypeForTargetServerItem(System.String)">
            <summary>
            Given a target server item, return the union of all the recursive ChangeTypes on parents of the item specified, up to $/.
            Recursive changetypes are rename and delete.
            The changetype of the target server item specified is not returned.
            </summary>
            <param name="targetServerItem">Target server item</param>
            <returns>The recursive ChangeType for the target server item specified</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.QueryParentsOfTargetServerItem(System.String)">
            <summary>
            Given a target server item, returns the parents of that target server item which have pending changes.
            If the target server item itself has a pending change, that pending change is not returned as part of
            the result set. The result set is ordered, with the closest pending change to the target server item
            being returned first.
            </summary>
            <param name="targetServerItem">Target server item for which parent pending changes should be queried</param>
            <returns>The set of pending changes on items which parent the target server item</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.QueryByTargetServerItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String)">
            <summary>
            Given a target server item, a recursion type, and a pattern (can be null), return the set of
            matching pending changes.
            </summary>
            <param name="targetServerItem">Target server item at which to start the query</param>
            <param name="recursion">Recursion level to use for the query</param>
            <param name="pattern">A pattern to require for matching (optional)</param>
            <returns>The set of matching pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.QueryByCommittedServerItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String)">
            <summary>
            Given a committed server item, a recursion type, and a pattern (can be null), return the set of
            matching pending changes.
            </summary>
            <param name="committedServerItem">Committed server item at which to start the query</param>
            <param name="recursion">Recursion level to use for the query</param>
            <param name="pattern">A pattern to require for matching (optional)</param>
            <returns>The set of matching pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.PendChange(Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange)">
            <summary>
            Adds pending change to the table. Does not modify any other existing pending changes (e.g. sub items);
            </summary>
            <param name="change"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.Remove(Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange)">
            <summary>
            Removes pending change from the table. Does not modify any other existing pending changes (e.g. sub items);
            </summary>
            <param name="change"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.RemoveByTargetServerItem(System.String)">
            <summary>
            Given a target server item, removes the pending change on the item, if
            one exists.
            </summary>
            <param name="targetServerItem">Target server item to remove</param>
            <returns>True if a pending change was removed</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.ReplacePendingChanges(Microsoft.TeamFoundation.Framework.Common.PathTable{Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange})">
            <summary>
            Special ReplacePendingChanges call for LocalDataAccessLayer.SyncPendingChanges().
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.QueryCandidatesByTargetServerItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String)">
            <summary>
            Given a target server item, a recursion type, and a pattern (can be null), return the set of
            candidate matching pending changes.
            </summary>
            <param name="targetServerItem">Target server item at which to start the query</param>
            <param name="recursion">Recursion level to use for the query</param>
            <param name="pattern">A pattern to require for matching (optional)</param>
            <returns>The set of matching pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.RemoveCandidateByTargetServerItem(System.String)">
            <summary>
            Given a target server item, removes the candidate pending change on the item, if
            one exists.
            </summary>
            <param name="targetServerItem">Target server item to remove</param>
            <returns>True if a pending change was removed</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.RemoveCandidateByTargetServerItem(System.String,System.Boolean)">
            <summary>
            Given a target server item, removes the candidate pending change on the item, if
            one exists.
            </summary>
            <param name="targetServerItem">Target server item to remove</param>
            <param name="recursive">True to remove all child candidate pending changes, too</param>
            <returns>True if a pending change was removed</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.KnownServerItems">
            <summary>
            Returns every server item held by this LocalPendingChangesTable.
            The set may contain duplicates.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.RenameTeamProjects(System.Func{System.String,System.String})">
            <summary>
            Performs a team project rename on this WorkspaceVersionTable,
            using the provided server item mapping function.
            </summary>
            <param name="serverItemMapper">A function which maps old server paths to new server paths</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.HasRenames">
            <summary>
            Returns true if the pending changes table has one or more renames.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.Count">
            <summary>
            Returns the number of pending changes in the workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.ClientSignature">
            <summary>
            Returns the GUID signature of the pending changes that the client has.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable.UpdateClientSignatureIfNecessary">
            <summary>
            Generates a new client signature if the table is dirty.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.GetMetadataTableLocation(System.String)">
            <summary>
            Returns the full path of the directory containing the metadata table provided.
            Does not return null.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.DeleteBaseline(System.Byte[])">
            <summary>
            Given a baseline file GUID, removes it from the baseline folder in which it resides.
            </summary>
            <param name="baselineFileGuid">Baseline file GUID to remove</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.UpdateBaselineLocation(System.Byte[],System.String)">
            <summary>
            Given a local path on disk and the baseline file GUID corresponding to that item, ensures
            that the baseline file for that item is in the correct BaselineFolder.
            </summary>
            <param name="baselineFileGuid">Baseline file GUID of the item</param>
            <param name="currentLocalItem">Current local path of the item</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.CopyBaselineToTarget(System.Byte[],System.String,System.Int64,System.Byte[])">
            <summary>
            Given a baseline file GUID and a target location on disk, copies the baseline from
            the baseline store to the target location. (The target location always receives a
            decompressed copy of the baseline, even if it is stored compressed in the baseline
            folder.)
            </summary>
            <param name="baselineFileGuid">Baseline file GUID to copy</param>
            <param name="targetLocalItem">Target location for the baseline file</param>
            <param name="baselineFileLength">(optional) If provided, the uncompressed baseline length will be compared
            against this value and checked after decompression. If the values do not match, an exception will be thrown.</param>
            <param name="baselineHashValue">(optional) If provided, the uncompressed baseline will be hashed and its
            hash compared to this value after decompression. If the values to not match, an exception will be thrown.</param>
            <returns>True if the operation succeeded; false if the baseline could not be located</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.RemoveBaselineFolder(Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder)">
            <summary>
            Given a BaselineFolder object, moves its contents to another BaselineFolder, if one
            can be located; if not, to the ProgramData location. The BaselineFolder specified is
            then deleted from disk and removed from the baseline folders list for this workspace.
            </summary>
            <param name="baselineFolder">BaselineFolder to remove</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.MoveBaselineFolderStructure(System.String,Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder)">
            <summary>
            Moves anything of value (baselines, metadata tables) from the specified source baseline folder
            to the specified target baseline folder.
            </summary>
            <param name="rootBaselineFolderPath">Source baseline folder to empty</param>
            <param name="targetBaselineFolder">Target baseline folder (null if
            targetBaselineFolderPath is the ProgramData location)</param>
            <returns>True if the folder rootBaselineFolderPath was successfully cleared</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.MoveMetadataTable(System.String,Microsoft.TeamFoundation.VersionControl.Client.BaselineFolder)">
            <summary>
            Given the path to a metadata table (without the extension), i.e.
            @"D:\workspace\$tf\pendingchanges", moves the metadata table to the specified
            target baseline folder. If the target baseline folder is null, the metadata table
            is moved to the ProgramData location for this workspace.
            </summary>
            <param name="metadataTablePath">Metadata table to move</param>
            <param name="targetBaselineFolder">BaselineFolder to move the metadata table to</param>
            <returns>True if the metadata table was successfully moved</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.DoBaselineFolderMaintenance">
            <summary>
            Invoked by the client object model at various times to perform maintenance on the baseline
            folders. Maintenance actions include:
            1. Creating baseline folders on partitions which previously did not have a folder which
               could parent a baseline folder.
            2. Trying to empty and remove stale baseline folders (into valid ones).
            3. Trying to empty the ProgramData location into a baseline folder, which is always preferred.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.IsMetadataTablePresentAtLocation(System.String)">
            <summary>
            Given the file name for a metadata table (full path minus the .tf* extension), returns true
            if the metadata table is present and false if it is missing.
            </summary>
            <param name="fileName">The potential location for the metadata table on disk</param>
            <returns>True if the metadata table is present on disk at the location specified</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.NewProjectRevisionId">
            <summary>
            If non-zero, the new project revision ID to be acknowledged to the server prior to reconciling.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.BaselineFolders">
            <summary>
            The baseline folders held by this LocalWorkspaceProperties table.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.WorkingFolders">
            <summary>
            The authoritative set of working folders for this local workspace.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.m_metadataTableLocations">
            <summary>
            A map from the name of the metadata table (i.e. "localversion" or "pendingchanges") to the
            BaselineFolder object where that table is currently located. If the string maps to null or
            is not found in the dictionary, then we expect to find the table in the same location as this
            table (the C:\ProgramData location, which is a function of the collection GUID, workspace name,
            and workspace owner).
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.m_baselineFolders">
            <summary>
            The list of baseline folders ($tf folders) for this workspace.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.m_workingFolders">
            <summary>
            The authoritative set of working folders (mappings) for this workspace.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.m_newProjectRevisionId">
            <summary>
            If team project renames have been received and applied, this member contains the
            new project revision ID which needs to be acknowledged by the client.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.m_workspace">
            <summary>
            The workspace which we are operating on
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.m_baselineFoldersWriteLockToken">
            <summary>
            If non-zero, a (potential) write operation on this table resulted in a BaselineFolderCollection
            associated with this transaction's lock being locked for update. The write lock token
            is in this member. The write lock must be released once the table is saved to disk.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties.c_oneLevelMapping">
            <summary>
            The string postfixed to the server path of a mapping with one-level recursion.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceTransaction">
            <summary>
            Helper class for locking metadata tables with the proper lock order,
            and aborting the transactions as necessary.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceTransaction.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLock,System.Boolean)">
            <summary>
            Constructor which takes a WorkspaceLock instance. If you already have the workspace
            locked, and are on a different thread from the one where you locked it (or don't know
            whether you are), then pass in that workspace lock here, and LocalWorkspaceTransaction
            will skip acquisition of the workspace lock (since you provided it yourself). In this
            case, LocalWorkspaceTransaction will not dispose the lock when you dispose it.
            </summary>
            <param name="workspace">Local workspace on which to perform a transaction</param>
            <param name="workspaceLock">WorkspaceLock instance which locks the local workspace (or null)</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceTransaction.RaisePendingChangesChanged">
            <summary>
            Set this flag to true to raise the PendingChangesChanged event after closing all
            tables, if the pending changes table was saved to disk.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceTransaction.RaisePendingChangeCandidatesChanged">
            <summary>
            Set this flag to true to raise the PendingChangeCandidatesChanged event after closing all
            tables, if the pending changes table was saved to disk.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceTransaction.Workspace">
            <summary>
            The local workspace on which this transaction is being performed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceTransaction.Current">
            <summary>
            The local workspace transaction currently running on this thread
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceTransaction.OpenedTables">
            <summary>
            The tables opened by this transaction
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceTransaction.OwnsWorkspaceLock">
            <summary>
            Indicates whether or not the local workspace transaction owns its workspace lock
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceTransaction.WorkspaceLock">
            <summary>
            The workspace lock protecting this transaction
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceTransaction.PrepareToLoadFromBackup">
            <summary>
            An error occurred while loading one of the tables from disk. We're about to retry, loading from 
            our backup copy of the tables. Some of the tables might have already successfully loaded -- such
            as if we loaded WP and LV already, but the error occurred while trying to load PC. We want to load
            a consistent view of the tables, so we'll unload the tables we already opened and load them *all*
            from backup. This method just disposes all of our tables so we can start fresh again.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceTransaction.DoAutoRecover(System.String)">
            <summary>
            Given the presumed path for the local workspace properties table (WP),
            ensures that either the slot one or slot two (.tf1 or .tf2) path exists.
            If not, attempts to use the MappedPaths data from the WorkspaceInfo for this
            Workspace to locate a backup copy of the properties.tf1 file and restore
            it to the LocalMetadataDirectory for this workspace.
            </summary>
            <param name="wpPathWithoutExtension">The presumed path for the local workspace properties table (WP)</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.OfflineCacheData.PendingChangesChangedLimiter">
            <summary>
            Rate limiter for OnPendingChangesChanged notifications (ExternalScanned)
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.OfflineCacheData.PendingChangeCandidatesChangedLimiter">
            <summary>
            Rate limiter for OnPendingChangeCandidatesChanged notifications (ExternalScanned)
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.OfflineCacheData.LastServerPendingChangeSignature">
            <summary>
            The last pending changes signature for this workspace that we have seen from the server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.OfflineCacheData.LastPendingChangesAttributes">
            <summary>
            The last pending changes table file attributes for this workspace that we have seen on the client.
            This is for the case where two instances of the object model are running. An event on disk occurs,
            and both instances scan; the first
            one there creates a new pending change (or candidate) and raises an event. The second one to
            scan finds no work to do and would ordinarily not raise an event; but he sees that another
            process has modified the pending changes since he last closed the table, and raises an event
            (PendingChangesChanged) anyway.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.OfflineCacheData.LastReconcileTime">
            <summary>
            The last time (in UTC) that we reconciled with the server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.OfflineCacheData.CurrentWorkspaceLock">
            <summary>
            If a thread holds the workspace lock, then you can get to it from another thread
            from here.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.OfflineCacheData.RaisedLocalWorkspaceTooLarge">
            <summary>
            True if the "workspace has too many items" non-fatal error has been raised
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.OfflineCacheData.RequestStronglyRootedMetadataTables">
            <summary>
            Requests that cached metadata tables be strongly rooted by the GC.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.OfflineCacheData.UnrequestStronglyRootedMetadataTables">
            <summary>
            Releases a request that cached metadata table be strongly rooted by the GC.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ParsedItemSpec">
            <summary>
            Class for expanding user specified item spec into all local versions matching it.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ParsedItemSpec.UnparsedItem">
            <summary>
            Gets you back the original ItemSpec.Item that was used to create
            this ParsedItemSpec.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ParsedItemSpec.MatchItemType(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem,Microsoft.TeamFoundation.VersionControl.Client.ItemType)">
            <summary>
            Validates if given local item matches itemType.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ParsedItemSpec.QueryLocalVersionsByTargetServerItem(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable,Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable,System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemType,Microsoft.TeamFoundation.VersionControl.Client.ParsedItemSpecOptions)">
            <summary>
            Query the local version table starting from the provided target server item, using the recursion type
            and pattern specified. This is an expensive query because there is no index by target server item on
            the local version table. Rename map-in and map-outs must be calculated to return accurate results.
            </summary>
            <param name="lv">Local version table</param>
            <param name="pc">Pending changes table</param>
            <param name="targetServerItem">Target server item to query</param>
            <param name="recursion">Recursion level for the query</param>
            <param name="pattern">Pattern to match, if any (null to match all items)</param>
            <param name="options">Options for the query (such as IncludeDeleted)</param>
            <returns>The matching local version rows</returns>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.ParsedItemSpec.CommittedServerItemQuery.ExcludedItems">
            <summary>
            The *sorted* list of subtraction points for this additive point. May be empty.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.ParsedItemSpecOptions.IncludeDeleted">
            <summary>
            Creates ParsedItemSpec even if specified item(s) are deleted on disk
            </summary> 
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.IPathChangedSink">
            <summary>
            An interface to be implemented by objects which want to own a PathWatcher. This is essentially
            an event delivery mechanism, but since PathWatcher objects are all statically rooted, we cannot
            use the standard .NET eventing mechanism, lest it root the owning objects also. PathWatcher keeps
            a weak reference to its owning object and will attempt to cast it to IPathChangedSink in order to
            deliver notifications.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IPathChangedSink.PathChanged(Microsoft.TeamFoundation.VersionControl.Client.PathWatcher)">
            <summary>
            The owning object is notified when something has changed on disk at or underneath the path
            being monitored. The method is called on a threadpool thread, and is only called every
            N seconds (configurable).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PathWatcher.Poll">
            <summary>
            Retrieves a report of the paths which have changed under this PathWatcher's
            observations since the last time Poll() was invoked.
            </summary>
            <returns>A PathWatcherReport object which is now the property of the caller.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PathWatcher.PathWatcherManager">
            <summary>
            Manages the number of PathWatchers that are active in this appdomain.
            This class is necessary for two reasons.
            
            - Objects which own PathWatchers (such as Workspace, indirectly through LocalWorkspaceScanner)
              may not be IDisposable, but PathWatcher is -- and PathWatcher has a native handle. Rather than
              let the finalizer take care of closing the handle, this class is responsible for disposing
              PathWatchers whose owners have been collected.
              
            - PathWatchers have native handles whose number should be tightly bounded to avoid running away
              with native resources in pathological situations, such as a user working with 50 local Workspace
              objects simultaneously or in succession.
              
            Active "management" of PathWatchers happens either on a calling thread which we hijack for a
            moment, or on a threadpool thread when a long-running timer fires.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PathWatcher.PathWatcherManager.#ctor">
            <summary>
            Constructs the singleton instance of PathWatcherManager for the appdomain.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PathWatcher.PathWatcherManager.Instance">
            <summary>
            Singleton instance of PathWatcherManager for the appdomain.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PathWatcher.PathWatcherManager.IncrementLivePathWatchers">
            <summary>
            Called by PathWatcher objects to indicate that they have opened a directory handle.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PathWatcher.PathWatcherManager.DecrementLivePathWatchers">
            <summary>
            Called by PathWatcher objects to indicate that they have released a directory handle.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PathWatcher.PathWatcherManager.TrimPathWatchers">
            <summary>
            Helper function to manage PathWatcher count in this appdomain.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PathWatcher.PathWatcherManager.Register(Microsoft.TeamFoundation.VersionControl.Client.PathWatcher)">
            <summary>
            Called by the PathWatcher class when it is about to start watching for the first time.
            Each PathWatcher calls Register at most once.
            </summary>
            <param name="pathWatcher">PathWatcher to register with the PathWatcherManager</param>
            <returns>True if the registration was successful, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PathWatcher.PathWatcherManager.TimerCallback(System.Object)">
            <summary>
            This callback function is invoked on the threadpool whenever the timer goes off. The timer
            is recurring.
            </summary>
            <param name="state">Not used</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PathWatcherReport.FullyInvalidated">
            <summary>
            True if the values in ChangedPaths should be ignored, because a full invalidation has occurred.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PathWatcherReport.NothingChanged">
            <summary>
            Returns true if FullyInvalidated is false, and the ChangedPaths list is also empty.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PathWatcherReport.ChangedPaths">
            <summary>
            If FullyInvalidated is false, then this contains the list of paths which have changed since the
            last time this PathWatcher was polled.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.QueuedActionLimiter.IsWorkQueued">
            <summary>
            Indicates whether or not there is work queued on this instance of QueuedActionLimiter
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.QueuedActionLimiter.IsAnyWorkQueued">
            <summary>
            Indicates whether or not there is work queued on any QueuedActionLimiter instance in this appdomain
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.RegisteredWaitWatcher.Changed">
            <summary>
            Raised when a file or folder on disk is changed.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.RegisteredWaitWatcher.Created">
            <summary>
            Raised when a file or folder on disk is created.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.RegisteredWaitWatcher.Deleted">
            <summary>
            Raised when a file or folder on disk is deleted.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.RegisteredWaitWatcher.Renamed">
            <summary>
            Raised when a file or folder on disk is renamed.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.RegisteredWaitWatcher.Error">
            <summary>
            Raised when an error occurs in the watcher, or if the buffer overflows.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceScanner.PendAndUndoEdits">
            <summary>
            If true, any scans executed by this LocalWorkspaceScanner object will pend and undo edits
            based on the state of files on disk. The default value is true.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.SaveToVersion2(System.IO.BinaryWriter)">
            <summary>
            Saves the current item to the specified BinaryWriter
            </summary>
            <param name="writer">The writer to save the current item to.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.FromVersion1(System.IO.BinaryReader)">
            <summary>
            Deserializes a WorkspaceLocalItem instance from version 1 of the
            WorkspaceVersionTable schema.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.FromVersion2(System.IO.BinaryReader)">
            <summary>
            Deserializes a WorkspaceLocalItem instance from version 2 of the
            WorkspaceVersionTable schema. Version 2 adds the CheckinDate column.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.Flags">
            <summary>
            Flags for this item.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.ServerItem">
            <summary>
            For a committed (Version != 0) item, the committed server item.
            For an uncommitted (Version == 0) item, the target server item.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.LocalItem">
            <summary>
            The current local path of the item. Should be non-null unless this
            WorkspaceLocalItem is in the deleted state.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.Version">
            <summary>
            The version of the item in the workspace. Also indicates whether
            or not the item is committed.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.ItemId">
            <summary>
            The item id corresponding to ServerItem (zero if unknown).
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.LastModifiedTime">
            <summary>
            The FILETIME, in UTC, that was recorded by the scanner on its last pass over this item.
            If not present, this value is -1.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.Encoding">
            <summary>
            The committed encoding of the item
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.CheckinDate">
            <summary>
            The FILETIME, in UTC, when the changeset Version was committed to version control.
            If not present, this value is -1.
            This value will not be available unless WorkspaceOptions.SetFileTimeToCheckin is set
            on the Workspace object.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.Length">
            <summary>
            The size of the item's committed content.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.HashValue">
            <summary>
            The 16-byte MD5 hash value of the item's committed content.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.BaselineFileGuid">
            <summary>
            The GUID, from the baseline file service, of the committed content
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.IsCommitted">
            <summary>
            True if the item is committed on the server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.PendingReconcile">
            <summary>
            Indicates if on the next reconcile operation, the data in this row should be
            reconciled to the server because it changed offline.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.MissingOnDisk">
            <summary>
            Indicates whether the most recent scan of the disk identified this item as missing.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.IsDeleted">
            <summary>
            If true, this item has no local path (null == LocalItem) and in a server workspace
            would not exist in the local version table. It is preserved in the local workspace's
            local copy of local version table for the purposes of undo.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.IsEditPushed">
            <summary>
            If this bit is true, when creating ServerItemLocalVersionUpdate objects at
            reconcile time, the version number in the update object will be -1 instead
            of lvEntry.Version.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.HasHashValue">
            <summary>
            Indicates whether or not there is a valid value for the hash value in
            the HashValue field.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.HasBaselineFileGuid">
            <summary>
            Indicates whether or not there is a valid value for the baseline file GUID
            in the BaselineFileGuid field.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.IsScanned">
            <summary>
            Ephemeral bit. Used as temporary state during the execution of the scanner.
            
            Indicates whether the first pass (mapped local space) over the workspace
            hit this item or not. If not, the second pass (local version table) needs
            to pick it up.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.WorkspaceLocalItemStates.Deleted">
            <summary>
            Indicates whether this WorkspaceLocalItem is in the deleted state. Such
            items have no local item.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.WorkspaceLocalItemStates.PendingReconcile">
            <summary>
            Indicates whether the data in this entry should be reconciled to the server
            at the next reconcile.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.WorkspaceLocalItemStates.LocalItemMissing">
            <summary>
            Bit which is set by the scanner. Indicates whether the local item
            for this entry exists on disk. Certain Reconcile operations (currently
            only the reconcile for Get) will delete all LocalItemMissing rows
            from the table. This allows Get to generate GetOperations for these items
            so they can be re-downloaded.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.WorkspaceLocalItemStates.Scanned">
            <summary>
            Ephemeral bit. Used as temporary state during the execution of the scanner.
            
            Indicates whether the first pass (mapped local space) over the workspace
            hit this item or not. If not, the second pass (local version table) needs
            to pick it up.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.WorkspaceLocalItemStates.Executable">
            <summary>
            Bit used by Team Explorer Everywhere to indicate that this 
            WorkspaceLocalItem has the "Microsoft.TeamFoundation.VersionControl.Executable" 
            property set on it.
            
            On Unix platforms, Team Explorer Everywhere makes the local item executable
            when this bit is set.  On Windows platforms this bit is not used.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem.WorkspaceLocalItemStates.EditPushed">
            <summary>
            If this bit is true, when creating ServerItemLocalVersionUpdate objects at
            reconcile time, the version number in the update object will be -1 instead
            of lvEntry.Version.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLock.Yield">
            <summary>
            If another thread in the system is contending for the WorkspaceLock, then this method
            waits for any transactions running under the protection of this WorkspaceLock to complete,
            then yields the WorkspaceLock and re-acquires it.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLock.StartTransaction(System.Func{System.Boolean})">
            <summary>
            Starts a transaction under the protection of this WorkspaceLock.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLock.EndTransaction">
            <summary>
            Ends a transaction under the protection of this WorkspaceLock.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLock.Current">
            <summary>
            The WorkspaceLock currently on this thread (there can be at most one).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLock.BaselineFolders">
            <summary>
            Since BaselineFolderCollection objects, when used, are used within a workspace lock (our lifetime is their lifetime),
            this object is a convenient place to stash a reference to the BaselineFolderCollection for this lock's scope,
            so we only have to pass one object around. See ProcessGetOperations() in get.cs.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLock.Workspace">
            <summary>
            The workspace locked by this WorkspaceLock.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLock.ReportStackTrace">
            <summary>
            An instance of WorkspaceLock that fails to acquire will search for the instance of WorkspaceLock
            that currently has the lock (if it's in this appdomain) and set this flag to true. A WorkspaceLock with
            this flag set to true should write out its stack trace at Dispose time to a special file.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTableHeader">
            <summary>
            Loads just the header from the local version table.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable">
            <summary>
            The local version table for a local workspace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.#ctor(System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable)">
            <summary>
            Creates or opens a workspace metadata table with the specified base
            file name and location.
            </summary>
            <param name="tableLocation">The fully qualified path that will be used to construct the actual metadata file name.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.Initialize(System.Object)">
            <summary>
            Called unconditionlly during the base class ctor to allow this class a chance to initialize 
            prior to Load being called.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.Load(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Called by the base class to load the table from disk.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.Save(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Called by the base class to save the table to disk.
            Only called if we return true for IsDirty.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.Add(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLocalItem)">
            <summary>
            Adds an item to the workspace local item table.
            </summary>
            <param name="WorkspaceLocalItem">The item to add to the table.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.GetByLocalItem(System.String)">
            <summary>
            Given a local item, returns the associated local version entry.
            </summary>
            <param name="localItem"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.GetByLocalItemWithIndex(System.String,System.Int32@)">
            <summary>
            Given a local item, returns the associated local version entry,
            and its position in the local items index.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.GetByLocalItemIndex(System.Int32)">
            <summary>
            Given an ordinal index in the index by local items, returns
            the associated local version entry.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.GetByServerItem(System.String,System.Boolean)">
            <summary>
            Given a (ServerItem, IsCommitted) tuple, returns the associated
            local version entry.
            </summary>
            <param name="serverItem">Server item part</param>
            <param name="isCommitted">IsCommitted part</param>
            <returns>Local version entry for the given tuple</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.GetByPendingChange(Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChange)">
            <summary>
            Given a pending change, returns the associated local version entry.
            </summary>
            <param name="pcEntry">Pending change to look up</param>
            <returns>Local version entry for the given pending change</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.GetByPendingChange(Microsoft.TeamFoundation.VersionControl.Client.PendingChange)">
            <summary>
            Given a pending change, returns the associated local version entry.
            </summary>
            <param name="pcEntry">Pending change to look up</param>
            <returns>Local version entry for the given pending change</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.GetByGetOperation(Microsoft.TeamFoundation.VersionControl.Client.GetOperation)">
            <summary>
            Given a GetOperation, returns the associated local version entry.
            </summary>
            <returns>Local version entry for the given GetOperation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.QueryLocalItemRoots">
            <summary>
            Returns those items in the local version table which have a local item but have no parent
            in the local item tree.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.QueryByLocalItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String)">
            <summary>
            Given a local item, a recursion type, and a pattern (can be null), return the set of
            matching local version entries. All deleted items are removed from the result.
            </summary>
            <param name="localItem">Local item at which to start the query</param>
            <param name="recursion">Recursion level to use for the query</param>
            <param name="pattern">A pattern to require for matching (optional)</param>
            <returns>The set of matching local version entries</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.QueryByLocalItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.Boolean)">
            <summary>
            Given a local item, a recursion type, and a pattern (can be null), return the set of
            matching local version entries.
            
            If localItem is null, all local version entries which have a local path will be enumerated.
            </summary>
            <param name="localItem">Local item at which to start the query</param>
            <param name="recursion">Recursion level to use for the query</param>
            <param name="pattern">A pattern to require for matching (optional)</param>
            <param name="itemType">ItemType filter to apply (ItemType.Any to apply no filter)</param>
            <param name="includeDeleted">If true, result will include items removed from disk dues to pending change operation</param>
            <returns>The set of matching local version entries</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.QueryByServerItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Given a server item, a recursion type, and a pattern (can be null), return the set of
            matching local version entries. The local version entries returned include both
            committed and uncommitted items. All deleted items are removed from the result.
            </summary>
            <param name="serverItem">Server item at which to start the query</param>
            <param name="recursion">Recursion level to use for the query</param>
            <param name="pattern">A pattern to require for matching (optional)</param>
            <returns>The set of matching local version entries</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.QueryByServerItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Given a server item, a recursion type, and a pattern (can be null), return the set of
            matching local version entries. The local version entries returned include both
            committed and uncommitted items.
            </summary>
            <param name="serverItem">Server item at which to start the query</param>
            <param name="recursion">Recursion level to use for the query</param>
            <param name="pattern">A pattern to require for matching (optional)</param>
            <param name="includeDeleted">If true, result will include items removed from disk dues to pending change operation</param>
            <returns>The set of matching local version entries</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.QueryByServerItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.TeamFoundation.VersionControl.Client.ItemType,Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.CommittedState,System.Boolean)">
            <summary>
            Given a server item, a recursion type, and a pattern (can be null), return the set of
            matching local version entries. You specify whether to return uncommitted items only,
            committed items only, or both.
            </summary>
            <param name="serverItem">Server item at which to start the query</param>
            <param name="recursion">Recursion level to use for the query</param>
            <param name="pattern">A pattern to require for matching (optional)</param>
            <param name="includeDeleted">If true, result will include items removed from disk dues to pending change operation</param>
            <returns>The set of matching local version entries</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.DepthFromRecursionType(Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Given a RecursionType, return the depth to use for a SparseTree EnumSubTree call.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.RemoveByLocalItem(System.String,System.Boolean)">
            <summary>
            Removes the item with the specified local item from the table.
            </summary>
            <param name="localItem">The local item to remove from the table.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.RemoveByServerItem(System.String,System.Boolean,System.Boolean)">
            <summary>
            Removes the item with the specified (ServerItem, IsCommitted) pair from the table.
            </summary>
            <param name="serverItem">Server item to remove from the table</param>
            <param name="isCommitted">IsCommitted bit for the server item to remove from the table</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.RemoveFromServerIndex(System.String,System.Boolean)">
            <summary>
            Given a (ServerItem, IsCommitted) pair, removes the entry from the
            primary key only.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.MarkAsDeleted(System.String,System.Boolean,System.Boolean)">
            <summary>
            Locates a WorkspaceLocalItem by (ServerItem, IsCommitted) and marks it as deleted.
            Deleted items have no local item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.KnownServerItems">
            <summary>
            Returns every server item held by this WorkspaceVersionTable.
            The set may contain duplicates.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.RenameTeamProjects(System.Func{System.String,System.String})">
            <summary>
            Performs a team project rename on this WorkspaceVersionTable,
            using the provided server item mapping function.
            </summary>
            <param name="serverItemMapper">A function which maps old server paths to new server paths</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable.LocalItemsCount">
            <summary>
            The number of entries in the local items tree.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceWatcher.IsAsynchronous">
            <summary>
            True if the WorkspaceWatcher should, in the background, scan the workspace for changes in response
            to local disk events noticed by the PathWatchers. The scan of the workspace may detect new pending changes and alert
            subscribers to the PendingChangesChanged and PendingChangeCandidatesChanged events on VersionControlServer.
            
            The background scans are rate-limited by the QueuedActionLimiter.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceWatcher.SuppressAsynchronous">
            <summary>
            Call to increment the suppression count for the asynchronous scanner. If the suppression count
            is greater than zero, the scanner will not run in the background in response to disk events.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceWatcher.UnsuppressAsynchronous">
            <summary>
            Call to decrement the suppression count for the asynchronous scanner. If the suppression count
            reaches zero and there is a pending background scan waiting, it will resume.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceWatcher.LocationChanged">
            <summary>
            When the location of the workspace (local or server) changes, the Workspace object
            should inform the WorkspaceWatcher by calling this method. The WorkspaceWatcher will
            respond by either spinning up PathWatchers or spinning them down, as appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceWatcher.EnsureWatching">
            <summary>
            If a PathWatcher is created but the path to watch on disk does not exist, then the PathWatcher will not
            start asynchronously watching for changes on disk. (It will still be invalidated, and our polling architecture
            will work fine.)
            
            Call EnsureWatching to try and start each PathWatcher again. This is called every time we perform baseline
            maintenance on the local workspace properties table, for example.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceWatcher.Shutdown">
            <summary>
            Shuts down all PathWatchers owned by this WorkspaceWatcher.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceWatcher.WorkingFoldersChanged(Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[])">
            <summary>
            Call this to inform the WorkspaceWatcher that the working folders for the Workspace have
            changed. The WorkspaceWatcher will ensure that it is watching the new working folders,
            in addition to whatever it was already watching.
            </summary>
            <param name="workingFolders"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceWatcher.MarkPathChanged(System.String)">
            <summary>
            Allows callers to explicitly add a path to the changed paths list for partial scans.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceWatcher.Scan(Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties,Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable,Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable)">
            <summary>
            Performs a scan of the workspace if necessary.
            </summary>
            <param name="wp"></param>
            <param name="lv"></param>
            <param name="pc"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceWatcher.Scan(Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties,Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable,Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable,System.Boolean)">
            <summary>
            Performs a scan of the workspace if necessary. If the
            interruptible parameter is true, then the scan may stop
            in response to another thread requesting the workspace lock.
            If this occurs, the method will return false to indicate
            the scan was unsuccessful.
            </summary>
            <param name="wp"></param>
            <param name="lv"></param>
            <param name="pc"></param>
            <param name="interruptible"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceWatcher.EndTransactionScan(Microsoft.TeamFoundation.VersionControl.Client.LocalWorkspaceProperties,Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionTable,Microsoft.TeamFoundation.VersionControl.Client.LocalPendingChangesTable)">
            <summary>
            Called by the Dispose() of a LocalWorkspaceTransaction that has all three tables
            (WP, LV, PC) open, and PC is already dirty. The purpose of the call is to front-load
            any changes to the candidates table into the upcoming write of PC. The call is
            not necessary for correctness.
            </summary>
            <param name="wp">Workspace properties table</param>
            <param name="lv">Local version table</param>
            <param name="pc">Pending changes table</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceWatcher.IsScanNecessary">
            <summary>
            Returns true if a scan is necessary on this workspace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceWatcher.Poll">
            <summary>
            Destructively retrieves each PathWatcher's report and aggregates them together to form a workspace report.
            The caller must have already entered the m_lock monitor.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceWatcher.Microsoft#TeamFoundation#VersionControl#Client#IPathChangedSink#PathChanged(Microsoft.TeamFoundation.VersionControl.Client.PathWatcher)">
            <summary>
            Invoked by the PathWatchers owned by this WorkspaceWatcher. This is delivered via an interface
            for garbage collection purposes. The PathWatchers are statically rooted, so if we signed up
            to an event from them, we'd be rooted forever too and so would the Workspace.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceWatcher.QueueAsynchronousScan">
            <summary>
            If IsAsynchronous is true, queues a scan to run on the threadpool as soon as possible.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceWatcher.AsyncScanCallback(System.Object)">
            <summary>
            Invoked by the QueuedActionLimiter on the threadpool when an asynchronous scan is to be performed.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PendingChange">
            <summary>
            Represents a pending change that is part of a changeset.
            </summary>
            <summary>
            Object representing an item that has changes pending.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.GetOperation,Microsoft.TeamFoundation.VersionControl.Client.ProcessType)">
            <summary>
            This constructor is used to build a pending change event.
            NOTE: This should not be used outside of the Client dll!
            </summary>
            <param name="sourceControl">the VersionControlServer instance</param>
            <param name="getOp">the GetOperation representing the pending or undone change</param>
            <param name="processType">the type of processing (get, pend, undo, merge, unshelve)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Change)">
            <summary>
            This is an internal copy constructor for DialogChangesetDetails to reuse the checkin
            control.
            NOTE: Do not use this for anything else.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.#ctor(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.ChangeType)">
            <summary>
            This is an internal copy constructor for DialogOnline to reuse the pending changes listview.
            This constructor is also used in SolutionManager to build fake pending changes from Getting
            events to help synchronize renames.
            NOTE: Do not use this for anything else.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.DownloadShelvedFile(System.String)">
            <summary>
            Downloads the shelved content for this pending change.  Throws if this is not a shelved
            pending change.
            </summary>
            <param name="localFileName">where to save the downloaded file contents</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.DownloadShelvedFile">
            <summary>
            Downloads the shelved content for this pending change.  Throws if this is not a shelved
            pending change.
            </summary>
            <returns>A stream containing the shelved file contents</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.DownloadBaseFile(System.String)">
            <summary>
            Downloads the content of the version of the file against which the change was pended.
            </summary>
            <param name="localFileName">where to save the downloaded file contents</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.DownloadBaseFile">
            <summary>
            Downloads the content of the version of the file against which the change was pended.
            </summary>
            <returns>A stream containing the base file contents</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.RestoreCandidateDelete">
            <summary>
            Restores a candidate delete on disk, if it's a folder, walks children recursively and restores them as well.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.UpdateMissingProperties">
            <summary>
            Queries server for full PendingChange object (including download URL) and populates
            downloadUrl, shelvedDownloadUrl, SourceServerItem and SourceLocalItem of this object.
            SourceLocalItem is null most of the time for real PendingChange objects.
            After this method finishes download URLS can be still empty, if the workspace or shelveset were deleted
            or we didn't serialize properly all required properties (PendingSetName, PendingSetOwner, IsInShelveset).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.CopyLocalBaseline(System.String)">
            <summary>
            Acquires base content if the pending change is in local workspace.
            If file is in the baseline folder, copies it from there. If not, downloads it from the server.
            Returns true if this pending change is in local workspace.
            Returns false if this is server workspace.
            Throws exception if this is local workspace but we failed to acquire content (e.g. baseline is deleted and connection to the server failed).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.GetLocalizedStringForChangeType(Microsoft.TeamFoundation.VersionControl.Client.ChangeType)">
            <summary>
            Creates for the ChangeType a localized string suitable for displaying to the user.
            </summary>
            <param name="type">the change type to convert to a localized string</param>
            <returns>the localized string (may be empty string if ChangeType.None)</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.GetLocalizedStringForChangeType(Microsoft.TeamFoundation.VersionControl.Client.ChangeType,System.Boolean)">
            <summary>
            Creates for the ChangeType a localized string suitable for displaying to the user.
            </summary>
            <param name="type">the change type to convert to a localized string</param>
            <param name="showLock">Put lock change type in string</param>
            <returns>the localized string (may be empty string if ChangeType.None)</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.GetLocalizedStringForLockLevel(Microsoft.TeamFoundation.VersionControl.Client.LockLevel)">
            <summary>
            This returns the localized string for the lock level.
            </summary>
            <param name="lockLevel">the lock level to convert to a localized string</param>
            <returns>the localized string (may be empty string if LockLevel.None)</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.GetLocalizedStringForItemType(Microsoft.TeamFoundation.VersionControl.Client.ItemType)">
            <summary>
            This returns the localized string for the item type.
            </summary>
            <param name="type">the item type to convert to a localized string</param>
            <returns>the localized string (may be empty string if ItemType.Any)</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.ToLocalItems(Microsoft.TeamFoundation.VersionControl.Client.PendingChange[])">
            <summary>
            Get an array of local item path strings from an array of pending changes.
            </summary>
            <remarks>Skips any PendingChanges where LocalItem is null</remarks>
            <param name="changes">PendingChange array to fetch local items from</param>
            <returns>string array of local items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.ToServerItems(Microsoft.TeamFoundation.VersionControl.Client.PendingChange[])">
            <summary>
            Get an array of server item path strings from an array of pending changes.
            </summary>
            <remarks>Skips any PendingChanges where ServerItem is null</remarks>
            <param name="pendingChanges">PendingChange array to fetch server items from</param>
            <returns>string array of server items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.UpdateUploadHashValue(System.Byte[])">
            <summary>
            Updates the upload hash value.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.UpdateSourceItems(System.String,System.String)">
            <summary>
            Updates SourceLocalItem and SourceServerIte,.
            This is for surgical updates,
            when PendingChange created from GetOps has incorrect value. Bug 597782
            </summary>
            <param name="sourceLocalItem"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.RemoveNoneFlagIfNecessary(Microsoft.TeamFoundation.VersionControl.Client.ChangeType)">
            <summary>
            If ChangeType flags include the None flag in addition to other flags,
            remove ChangeType.None flag.
            </summary>
            <param name="changeType"></param>
            <returns>Normalized change type</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.LocalOrServerItem">
            <summary>
            Local path if it's available, server path otherwise
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.LocalOrServerFolder">
            <summary>
            Local folder if it's available, server folder otherwise
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.FileName">
            <summary>
            The file name (i.e. last path element) from the local path if it's available or from the
            server path otherwise
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.DownloadUrl">
            <summary>
            Gets the download URL for this pending change.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.Undone">
            <summary>
            True if the change has been undone.  When this is true and the change being undone
            is a rename and not an undelete (because undoing an undelete deletes the file on disk), the
            source and target have been swapped relative to the original pending change.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsLocalItemDelete">
            <summary>
            Returns true if this pending or undone change is deleting the local file or folder.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsAdd">
            <summary>
            Returns true if this is a pending add
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsEdit">
            <summary>
            Returns true if this is a pending edit
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsRename">
            <summary>
            Returns true if this is a pending rename
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsEncoding">
            <summary>
            Returns true if this is a pending file type change
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsDelete">
            <summary>
            Returns true if this is a pending delete
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsUndelete">
            <summary>
            Returns true if this is a pending undelete
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsBranch">
            <summary>
            Returns true if this is a pending branch
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsMerge">
            <summary>
            Returns true if this is a pending merge
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsRollback">
            <summary>
            Returns true if there is a pending rollback
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsLock">
            <summary>
            Returns true if this pending change has a lock
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsUnshelvedChange">
            <summary>
            Returns true if this is a pending change from unshelving a shelveset
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsImplicit">
            <summary>
            True if this pending change represents change on the child item
            caused solely by the parent change.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.ChangeTypeName">
            <summary>
            This is the localized string for the change type.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.LockLevelName">
            <summary>
            This is the localized string for the lock level.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.LockLevelShortName">
            <summary>
            This is the localized string for the lock level.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.EncodingName">
            <summary>
            This is the name of the encoding.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.PropertyValues">
            <summary>
            The properties for this pending change.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.VersionControlServer">
            <summary>
            The source control repository containing this pending change.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.ToolTipText">
            <summary>
            Build and return the tooltip text for this pending change.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.ServerItemComparer">
            <summary>
            Comparer that compares server items.
            Comparer is for display purposes (culture sensitive and case insensitive).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.LocalItemComparer">
            <summary>
            Comparer that compares local items.
            Comparer is for display purposes (culture sensitive and case insensitive).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsCandidate">
            <summary>
            If false, the change is actually pended otherwise
            this is a candidate change, which we have detected which the user might choose to accept
            or discard.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.PendingSetName">
            <summary>
            Name of the PendingSet that this PendingChange is part of.
            This denormalization is needed to download content of the base or shelved file.
            The setter should be used only by the code that creates object.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.PendingSetOwner">
            <summary>
            Owner of the PendingSet that this PendingChange is part of.
            This denormalization is needed to download content of the base or shelved file.
            The setter should be used only by the code that creates object.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.PendingSetOwnerDisplay">
            <summary>
            Unique Owner of the PendingSet that this PendingChange is part of.
            This denormalization is needed to download content of the base or shelved file.
            The setter should be used only by the code that creates object.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsInShelveset">
            <summary>
            Flag indicating if this pending change is part of shelveset or workspace.
            This denormalization is needed to download content of the base or shelved file.
            The setter should be used only by the code that creates object.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.ConvertToChangeType(System.Int32)">
            <summary>
            Used to convert the integer bitmap value returned from the server (for the changetype)
            into a ChangeType enum. We need to use this function since the server / client values
            for the enum are different.
            </summary>
            <param name="ChangeType"></param>
            <returns>ChangeType</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.ConvertToInt(Microsoft.TeamFoundation.VersionControl.Client.ChangeType)">
            <summary>
            Used to convert a changetype client enum to the integer value used by the server
            this will be marshalled to the server.
            </summary>
            <param name="changeType"></param>
            <returns></returns>
            
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.MergeSources">
            <summary>
            Source information of pending merges in the workspace
            This will always return a new instance of the collection, so avoid referring to the property
            a # 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.ConflictType">
            <summary>
            The type of conflict against this change - this is only populated
            for queries against local workspaces
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.HasUploadHashValue">
            <summary>
            True if this PendingChange object has a valid upload hash value; false otherwise
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsSourceRename(Microsoft.TeamFoundation.VersionControl.Client.ChangeType)">
            <summary>
            Returns true when the change type is a source rename and doesn't contain an add, branch or rename
            </summary>
            <param name="changeType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.MaterializeIEnumerable(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.PendingChange})">
            <summary>
            Given an IEnumerable of PendingChanges, returns a PendingChange[] containing all the PendingChanges
            in the IEnumerable.
            </summary>
            <param name="enumerable">PendingChanges to materialize into an array</param>
            <returns>Array of PendingChange</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.MaterializeIEnumerable(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.PendingChange},System.Int32)">
            <summary>
            Given an IEnumerable of PendingChanges, returns a PendingChange[] containing all the PendingChanges
            in the IEnumerable.
            </summary>
            <param name="enumerable">PendingChanges to materialize into an array</param>
            <param name="materializationCap">Overflow point past which the result is instead an empty array</param>
            <returns>Array of PendingChange</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.MaterializeIEnumerable(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.PendingChange},System.Int32,System.Boolean)">
            <summary>
            Given an IEnumerable of PendingChanges, returns a PendingChange[] containing all the PendingChanges
            in the IEnumerable.
            </summary>
            <param name="enumerable">PendingChanges to materialize into an array</param>
            <param name="materializationCap">Overflow point past which the result depends on the nullOnOverflow parameter</param>
            <param name="nullOnOverflow">If the materialization cap is reached and this value is true, null is returned. If false, a PendingChange[0] is returned.</param>
            <returns>Array of PendingChange</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.MaterializeIEnumerableServerItems(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.PendingChange})">
            <summary>
            Given an IEnumerable of PendingChanges, returns a PendingChange[] containing all the PendingChanges
            in the IEnumerable.
            </summary>
            <param name="enumerable">PendingChanges to materialize into an array</param>
            <param name="materializationCap">Cutoff point past which an empty array will be returned instead
            of materializing the entire IEnumerable</param>
            <returns>Array of PendingChange</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.IsIEnumerableEmpty(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.PendingChange})">
            <summary>
            Given an IEnumerable of PendingChanges, return true if the IEnumerable is empty.
            </summary>
            <param name="enumerable">IEnumerable to check</param>
            <returns>True if the IEnumerable is empty</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.EmptyIEnumerable">
            <summary>
            An empty IEnumerable of PendingChanges
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.s_localizedChangeTypeStringCache">
            <summary>
            The PendingChange.GetLocalizedStringForChangeType method is slow. We cache its results.
            The key is ChangeType int representation.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.s_localizedChangeTypeStringCacheLock">
            <summary>
            We need a lock to protect the localized changetype string cache.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.CreationDate">
            <summary>
            This date is the time the change was initially created or pended.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.DeletionId">
            <summary>
            If ChangeType is Undelete and there is more than one deleted item
            with the same repository path, this ID is used to disambiguate them.
            Otherwise, it should be 0
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.Encoding">
            <summary>
            This is the enoding of the file, if it is 0 thant the encoding
            is not being changed. If the encoding is 0 than the encoding is
            not being set in this change operation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.HashValue">
            <summary>
            This is the MD5 HashValue for the contents of the version of the
            file the change is pended against.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.ItemId">
            <summary>
            ID to use to download file contents.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.ItemType">
            <summary>
            This is the type of the item being changed. If this is an Add this
            is the type of the item that will become.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.Length">
            <summary>
            This is the length of the committed content (the version of the file the change
            is pended against).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.LocalItem">
            <summary>
            The path to the item on the client's local file system.
            This is mostly for the client's benefit, but must be specified
            on adds if the new item is to be added to the workspace's
            LocalVersion table
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.LockLevel">
            <summary>
            Specifies the new lock level of the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.PendingChangeId">
            <summary>
            This Idenitifier represents a unique value attached to the change.
            It may be used to match up pending changes between calls.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.ServerItem">
            <summary>
            The repository path of the item being changed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.SourceDeletionId">
            <summary>
            If ChangeType is branch, then this contains the source deletionId
            of the branch, otherwise 0.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.SourceLocalItem">
            <summary>
            If ChangeType is Rename, this specifies the old local
            path of the item being changed.  Null otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.SourceServerItem">
            <summary>
            If ChangeType is Rename this is the source of the rename
            If ChangeType is branch this is the source of the branch
            Otherwise this is the same as ServerItem
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.SourceVersionFrom">
            <summary>
            If ChangeType is branch, then this contains the source version
            of the branch, otherwise 0.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.UploadHashValue">
            <summary>
            This is the MD5 HashValue for the file that is currently associated
            with this pending change.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChange.Version">
            <summary>
            When the version is zero the pending change is not made against
            an existing item version. If the version is non-zero the pending
            change was made to the specified version of the item.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection">
            <summary>
            A collection of pending changes.
            
            This object has two states -- the open state, where
            pending changes can be added with AddPendingChange(), and the closed state, where the
            pending changes in the collection can be enumerated. The object is created in the open
            state, and transitioned to the closed state by calling Close(). The object cannot
            transition from the closed state to the open state.
            
            All PendingChange objects in a FileBackedPendingChangeCollection must be PendingChanges
            from the same VersionControlServer. The VersionControlServer is provided at
            construction.
            
            This class stores the provided pending changes as compressed, serialized XML on the
            local disk.
            
            This class is thread-safe only after Close() has been called.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.#ctor">
            <summary>
            Creates a FileBackedPendingChangeCollection in the open state.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.#ctor(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer)">
            <summary>
            Creates a FileBackedPendingChangeCollection in the open state. All of the PendingChange
            objects added to this FileBackedPendingChangeCollection must be obtained from the provided
            VersionControlServer.
            </summary>
            <param name="versionControlServer">VersionControlServer for the PendingChange objects in this collection</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.#ctor(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeInitializer,System.Object)">
            <summary>
            Creates a FileBackedPendingChangeCollection in the open state. All of the PendingChange
            objects added to this FileBackedPendingChangeCollection must be obtained from the provided
            VersionControlServer.
            
            The FileBackedPendingChangeCollection is marked for lazy initialization. When certain
            methods are invoked or properties are accessed, the provided delegate will be invoked, whose
            responsibility is to populate the FileBackedPendingChangeCollection. On invocation, the
            lazy initializer will be passed the lazyInitializerParameter as a parameter.
            
            The FileBackedPendingChangesCollection will be set to the closed state after invoking your
            delegate, so calling Close() in the delegate is not necessary.
            </summary>
            <param name="versionControlServer">VersionControlServer for the PendingChange objects in this collection</param>
            <param name="lazyInitializer">A FileBackedPendingChangeInitializer delegate to be called to populate the collection</param>
            <param name="lazyInitializerParameter">An object to pass to the lazyInitializer when it is invoked</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.EnsureLazyInitialized">
            <summary>
            If we have a lazy initialization delegate and have not executed it yet,
            then execute it.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.IsOpen">
            <summary>
            True if this FileBackedPendingChangeCollection is still open for
            AddPendingChange calls; false if the FileBackedPendingChangeCollection
            is closed, and its contents can be enumerated.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.IsOpenInternal">
            <summary>
            To avoid recursion
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.Close">
            <summary>
            Close the FileBackedPendingChangeCollection and enable the ability to
            enumerate the PendingChange objects contained within.
            
            This method is safe to call whether the collection is open or closed.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.AddPendingChange(Microsoft.TeamFoundation.VersionControl.Client.PendingChange)">
            <summary>
            Add the given pending change to the collection.
            
            Throws InvalidOperationException if the collection is already closed (has IsOpen = false).
            
            Throws ArgumentException if the provided PendingChange's VersionControlServer does not
            match the VersionControlServer provided when this collection was created.
            </summary>
            <param name="change">The PendingChange to add to the collection.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.Length">
            <summary>
            The number of pending changes currently in the FileBackedPendingChangesCollection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate the PendingChanges in the collection.
            Throws InvalidOperationException if the collection is not in the closed state.
            </summary>
            <returns>An IEnumerator of PendingChange objects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate the PendingChanges in the collection.
            Throws InvalidOperationException if the collection is not in the closed state.
            </summary>
            <returns>An IEnumerator of PendingChange objects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.Materialize">
            <summary>
            Materializes this FileBackedPendingChangeCollection into an array of PendingChange
            objects (all in memory). If the FileBackedPendingChangeCollection has a large
            number of pending changes in it, this may cause the application to run out of
            memory.
            </summary>
            <returns>A PendingChange[] containing all the PendingChanges in the collection.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.FromWorkspace(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Returns a new FileBackedPendingChangeCollection containing all the pending changes from the 
            provided workspace.
            </summary>
            <param name="workspace">Workspace whose pending changes will be retrieved</param>
            <returns>A new FileBackedPendingChangeCollection containing the pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.FromWorkspace(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[])">
            <summary>
            Returns a new FileBackedPendingChangeCollection containing the matching pending changes from the 
            provided workspace.
            </summary>
            <param name="workspace">Workspace whose pending changes will be retrieved</param>
            <param name="itemSpecs">ItemSpecs to match pending changes</param>
            <returns>A new FileBackedPendingChangeCollection containing the pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.FromWorkspace(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Int32)">
            <summary>
            Returns a new FileBackedPendingChangeCollection containing the matching pending changes from the 
            provided workspace.
            </summary>
            <param name="workspace">Workspace whose pending changes will be retrieved</param>
            <param name="itemSpecs">ItemSpecs to match pending changes</param>
            <param name="stopAfterCount">Maximum number of pending changes to return</param>
            <returns>A new FileBackedPendingChangeCollection containing the pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.FromWorkspaceLazyInitializer(Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection,System.Object)">
            <summary>
            Populates a FileBackedPendingChangeCollection with pending changes from a workspace.
            </summary>
            <param name="collection">FileBackedPendingChangeCollection to populate</param>
            <param name="parameter">Lazy initialization parameter</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.FromWorkspaceInitializationParameter">
            <summary>
            Lazy initialization parameter for FromWorkspace family of methods
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.FromShelveset(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String,System.String)">
            <summary>
            Returns a new FileBackedPendingChangeCollection containing all the pending changes from the 
            provided shelveset.
            </summary>
            <param name="versionControlServer">VersionControlServer on which the shelveset exists</param>
            <param name="shelvesetName">Name of the shelveset whose pending changes should be retrieved</param>
            <param name="shelvesetOwner">Owner of the shelveset whose pending changes should be retrieved</param>
            <returns>A new FileBackedPendingChangeCollection containing the pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.FromShelveset(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[])">
            <summary>
            Returns a new FileBackedPendingChangeCollection containing all the matching pending changes from the 
            provided shelveset.
            </summary>
            <param name="versionControlServer">VersionControlServer on which the shelveset exists</param>
            <param name="shelvesetName">Name of the shelveset whose pending changes should be retrieved</param>
            <param name="shelvesetOwner">Owner of the shelveset whose pending changes should be retrieved</param>
            <param name="itemSpecs">ItemSpecs to match pending changes</param>
            <returns>A new FileBackedPendingChangeCollection containing the pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.FromShelveset(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Int32)">
            <summary>
            Returns a new FileBackedPendingChangeCollection containing all the matching pending changes from the 
            provided shelveset.
            </summary>
            <param name="versionControlServer">VersionControlServer on which the shelveset exists</param>
            <param name="shelvesetName">Name of the shelveset whose pending changes should be retrieved</param>
            <param name="shelvesetOwner">Owner of the shelveset whose pending changes should be retrieved</param>
            <param name="itemSpecs">ItemSpecs to match pending changes</param>
            <param name="stopAfterCount">Maximum number of pending changes to return</param>
            <returns>A new FileBackedPendingChangeCollection containing the pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.FromShelvesetLazyInitializer(Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection,System.Object)">
            <summary>
            Populates a FileBackedPendingChangeCollection with pending changes from a shelveset.
            </summary>
            <param name="collection">FileBackedPendingChangeCollection to populate</param>
            <param name="parameter">Lazy initialization parameter</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.FromShelvesetInitializationParameter">
            <summary>
            Lazy initialization parameter for FromShelveset family of methods
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.FileBackedPendingChangeEnumerator">
            <summary>
            An IEnumerator of PendingChange objects for a FileBackPendingChangeCollection
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.FileBackedPendingChangeEnumerator.#ctor(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection)">
            <summary>
            Creates a new FileBackedPendingChangeEnumerator to enumerate PendingChange objects from the
            given temporary file.
            </summary>
            <param name="versionControlServer">VersionControlServer to tag PendingChanges with when deserializing</param>
            <param name="collection">FileBackedPendingChangeCollection to enumerate</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.FileBackedPendingChangeEnumerator.Current">
            <summary>
            Returns the current item in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.FileBackedPendingChangeEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current item in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.FileBackedPendingChangeEnumerator.MoveNext">
            <summary>
            Moves the enumerator to the next item in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FileBackedPendingChangeCollection.FileBackedPendingChangeEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning of the collection.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PendingChangeComparer">
            A comparer used to compare pending changes.  See the Compare enum for the orders.
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PendingChangeComparer.Compare">
            <summary>
            The options for comparing pending changes.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChangeComparer.#ctor(Microsoft.TeamFoundation.VersionControl.Client.PendingChangeComparer.Compare)">
            <summary>
            Constructs the pending change comparer object with the specified setting.
            </summary>
            <param name="compare">what to compare</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChangeComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two pending changes according to the m_compare setting for display purposes 
            (culture sensitive and case insensitive).
            </summary>
            <param name="x">PendingChange object</param>
            <param name="y">PendingChange object</param>
            <returns>result of the comparison (integer indicating lexical relationship)</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChangeComparer.CompareLocal(Microsoft.TeamFoundation.VersionControl.Client.PendingChange,Microsoft.TeamFoundation.VersionControl.Client.PendingChange,Microsoft.TeamFoundation.VersionControl.Client.PendingChangeComparer.Compare)">
            <summary>
            Compares two pending changes according to the order requested.
            </summary>
            <param name="x">PendingChange object</param>
            <param name="y">PendingChange object</param>
            <param name="order">The ordering to use</param>
            <returns>result of the comparison (integer indicating lexical relationship)</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin">
            <summary>
            Class used to evaluate checkin notes and policies.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.GetService(System.Type)">
            <summary>
            GetService allows callers to get access to other services provided by the host.  This
            will either return null or an instance compatible with the specified type.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.ServiceProvider">
            <summary>
            Service provider to be used by this object's GetService method
            This is settable because sometimes the host needs to set this to a 
            host specific service provider
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.PendingChanges">
            <summary>
            Get an interface representing the pending changes portion of the pending checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.WorkItems">
            <summary>
            Get an interface representing the work items portion of the pending checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.CheckinNotes">
            <summary>
            Get an interface representing the checkin notes portion of the pending checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.Policies">
            <summary>
            Get an interface representing the policies portion of the pending checkin.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.PendingCheckinPendingChanges.CheckedPendingChangesChanged">
            <summary>
            An event that is fired any time the list of checked items has changed.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.PendingCheckinPendingChanges.AffectedTeamProjectsChanged">
            <summary>
            An event that is fired any time the list of checked pending changes changes such that the
            list of affected team projects also changes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.PendingCheckinPendingChanges.Workspace">
            <summary>
            Get the workspace in which this checkin is occurring.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.PendingCheckinPendingChanges.Comment">
            <summary>
            The comment that has been entered by the user.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.PendingCheckinPendingChanges.CheckedPendingChanges">
            <summary>
            Get the list of checked pending changes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.PendingCheckinPendingChanges.AllPendingChanges">
            <summary>
            Get the list of all pending changes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.PendingCheckinPendingChanges.AffectedTeamProjectPaths">
            <summary>
            Get the list of team projects affected by the current set of checked pending changes.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.PendingCheckinWorkItems.CheckedWorkItemsChanged">
            <summary>
            An event that is fired any time the list of checked work items has changed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.PendingCheckinWorkItems.CheckedWorkItems">
            <summary>
            Get the list of checked work items.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.PendingCheckinNotes.CheckinNotes">
            <summary>
            Get this controls checkin note data
            Can be null if no checkin note was defined for this repository.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.PendingCheckinNotes.FieldDefinitions">
            <summary>
            Get the checkin note field definitions.
            </summary>
            <value>checkin note field definitions</value>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.PendingCheckinNotes.Evaluate">
            <summary>
            Verify that the required checkin notes have content.
            </summary>
            <returns>list of failures</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.PendingCheckinPolicies.Evaluate">
            <summary>
            Evaluate all of the policies and update the UI to indicate the current state.  Throws
            an exception if unable to get the policy list from the server.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.PendingCheckinPolicies.EvaluationState">
            <summary>
            Return the current evaluation state of the policies.  This must be checked to see if
            there was a policy load error.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingCheckin.PendingCheckinPolicies.PolicyList">
            <summary>
            Return the list of policies to be evaluated.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PendingSet">
            <summary>
            Encapsulates a set of pending changes.
            </summary>
            <summary>
            Object representing a series of pending changes grouped into a set.
            For instance each workspace contains a pending set.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingSet.Ownership">
            <summary>
            Returns the ownership state for this object with respect to the current caller. This will have a 
            value of Unknown if we are talking to a Dev10 or earlier server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingSet.SetPendingSetDetails">
            <summary>
            Sets the pending set name, owner and type on each of the pending changes
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingSet.Computer">
            <summary>
            This is the computer the pending changes reside on
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingSet.Name">
            <summary>
            This is the workspace or shelveset the pending changes belong to
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingSet.OwnerDisplayName">
            <summary>
            This is the display name of the owner of the pending changes and the containing workspace
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingSet.OwnerName">
            <summary>
            This is the owner of the pending changes and the containing workspace
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingSet.PendingChangeSignature">
            <summary>
            For a local workspace, indicates the pending change signature for the pending set.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingSet.PendingChanges">
            <summary>
            This is the list of changes associated with this pending set.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingSet.Type">
            <summary>
            Indicates whether this is a shelveset or a workspace.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PendingSetComparer">
            A comparer used to compare pending sets.
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingSetComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two pending sets for display purposes (culture sensitive and case insensitive).
            </summary>
            <param name="x">PendingSet object</param>
            <param name="y">PendingSet object</param>
            <returns>result of String.Compare() (integer indicating lexical relationship)</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PermissionChange">
            <summary>
            Represents a permission change for an item.
            </summary>
            <summary>
            Represents a change to an item's permissions.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PermissionChange.#ctor(System.String,System.String,System.String[],System.String[],System.String[])">
            <summary>
            Create a new permission change.
            </summary>
            <param name="item"></param>
            <param name="identity"></param>
            <param name="allows"></param>
            <param name="denies"></param>
            <param name="removes"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PermissionChange.DetermineCorrectIdentityName">
            <summary>
            This is called on Deserialization from the web service.  If we are talking to a Dev11 or
            later server then this will set m_identityName = m_displayName.  m_displayName will be
            null or empty in the case that we are talking to a Dev10 or earlier server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PermissionChange.Allow">
            <summary>
            Permissions to add to the allow list
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PermissionChange.Deny">
            <summary>
            Permissions to add to the deny list
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PermissionChange.IdentityName">
            <summary>
            Name of user or group to change permissions of
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PermissionChange.Remove">
            <summary>
            Permissions to remove from both the allow and deny lists
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.IPolicyEditArgs">
            <summary>
            An interface for specifying the policy edit context
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPolicyEditArgs.IsNew">
            <summary>
            True if the user editing a new instance of this policy, false if
            modifying an existing instance
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPolicyEditArgs.TeamProject">
            <summary>
            Team project where this policy is being applied
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPolicyEditArgs.Parent">
            <summary>
            Parent window for policies dialogs
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.IPolicyDefinition">
            <summary>
            An interface for interacting with the design time behavior of a policy.  It is designed
            to allow lists of policy instances to be displayed and edited.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPolicyDefinition.Type">
            <summary>
            A string representing the type of the policy.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPolicyDefinition.TypeDescription">
            <summary>
            A string describing what this type of policy does.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPolicyDefinition.Description">
            <summary>
            A string describing the behavior of this instance of a policy.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPolicyDefinition.InstallationInstructions">
            <summary>
            A message that is displayed if the policy appears to not be installed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPolicyDefinition.CanEdit">
            <summary>
            A property that indicates whether or not this policy includes configuration UI.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IPolicyDefinition.Edit(Microsoft.TeamFoundation.VersionControl.Client.IPolicyEditArgs)">
            <summary>
            Display UI to allow the user to configure the properties of this policy.
            </summary>
            <param name="policyEditArgs">Edit context for the policy</param>
            <returns>true if the policy was updated.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.IPolicyCompatibility">
            <summary>
            This interface is used for backwards compatibility for checkin policies that have been moved
            to new types or assemblies.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IPolicyCompatibility.GetBinaryFormatter">
            <summary>
            This is necessary if you need to create a new BinaryFormatter and hook into the
            serialization process for backwards compatibility (e.g., you need to set the
            Binder property on the formatter to handle compat for a checkin policy that has
            been moved to another assembly).
            
            If you do not need to hook into the serialization process, just return 
            new BinaryFormatter().
            </summary>
            <returns>the BinaryFormatter to use for serializing the policy</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IPolicyCompatibility.GetAssemblyName">
            <summary>
            Used for backwards compatibility where you need to specify a different assembly
            name for the checkin policy in order to maintain backwards compatibility with
            a previously released version of the checkin policy.
            </summary>
            <returns>The assembly name that should be stored in the metadata.</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.IPolicyEvaluation">
            <summary>
            An interface to interact with the run time behavior of policies (evaluating them, etc).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IPolicyEvaluation.Initialize(Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckin)">
            <summary>
            Initialize the policy instance so that it can perform evaluations.
            </summary>
            <param name="pendingCheckin">An object that allows the policy to gather information about the
            checkin for evaluation.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IPolicyEvaluation.Evaluate">
            <summary>
            Evaluate the policy and return a list of failures if there are any.  If there are none,
            return an empty list.
            </summary>
            <returns>List of failures for this policy.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IPolicyEvaluation.Activate(Microsoft.TeamFoundation.VersionControl.Client.PolicyFailure)">
            <summary>
            Display UI to allow a user to get more information on a particular policy failure.
            </summary>
            <param name="failure">The failure on which the user wants more info.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IPolicyEvaluation.DisplayHelp(Microsoft.TeamFoundation.VersionControl.Client.PolicyFailure)">
            <summary>
            Display UI to give help on what this failure means and what the user can do to resolve it.
            </summary>
            <param name="failure">The failure on which the user wants help.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.IPolicyEvaluation.PolicyStateChanged">
            <summary>
            An event the policy can raise to notify the host of an asynchronous change in the
            list of policy failures.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckin">
            <summary>
            Interface implemented by the pending checkin window provides data for policies.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckin.PendingChanges">
            <summary>
            Get an interface representing the pending changes portion of the pending checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckin.WorkItems">
            <summary>
            Get an interface representing the work items portion of the pending checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckin.CheckinNotes">
            <summary>
            Get an interface representing the checkin notes portion of the pending checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckin.Policies">
            <summary>
            Get an interface representing the policies portion of the pending checkin.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinPendingChanges">
            <summary>
            Information about the pending changes component of the pending check in.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinPendingChanges.CheckedPendingChangesChanged">
            <summary>
            An event that is fired any time the list of checked items has changed.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinPendingChanges.AffectedTeamProjectsChanged">
            <summary>
            An event that is fired any time the list of checked pending changes changes such that the
            list of affected team projects also changes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinPendingChanges.Workspace">
            <summary>
            Get the workspace in which the checkin is occurring.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinPendingChanges.Comment">
            <summary>
            The comment that has been entered by the user.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinPendingChanges.CheckedPendingChanges">
            <summary>
            Get the list of checked pending changes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinPendingChanges.AllPendingChanges">
            <summary>
            Get the list of all pending changes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinPendingChanges.AffectedTeamProjectPaths">
            <summary>
            Get the list of team projects affected by the current set of checked pending changes.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinWorkItems">
            <summary>
            Information about the workitems portion of the pending check in.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinWorkItems.CheckedWorkItemsChanged">
            <summary>
            An event that is fired any time the list of checked work items has changed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinWorkItems.CheckedWorkItems">
            <summary>
            Get the list of checked work items.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinNotes">
            <summary>
            Information about the checkin notes portion of the pending check in.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinNotes.Evaluate">
            <summary>
            Verify that the required checkin notes have content.
            </summary>
            <returns>list of failures</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinNotes.CheckinNotes">
            <summary>
            Get the checkin note data
            Can be null if no checkin note was defined for the paths involved in the checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinNotes.FieldDefinitions">
            <summary>
            Get the checkin note field definitions
            Can be null if no checkin note was defined for the paths involved in the checkin.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFailure">
            <summary>
            A class that describes a failure in checkin note evaluation.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFailure.#ctor(Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldDefinition,System.String)">
            <summary>
            Initialize the checkin note failure.
            </summary>
            <param name="definition">field definition</param>
            <param name="message">Message to be displayed for the failure</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFailure.Definition">
            <summary>
            The definition of the checkin note that failed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFailure.Message">
            <summary>
            Description of the checkin note failure.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinPolicies">
            <summary>
            Information about the policies portion of the pending check in.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinPolicies.Evaluate">
            <summary>
            Evaluate all of the policies and update the UI to indicate the current state.  Throws
            an exception if unable to get the policy list from the server.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckinPolicies.EvaluationState">
            <summary>
            Return the current evaluation state of the policies.  This must be checked to see if
            there was a policy load error.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.AffectedTeamProjectsEventHandler">
            <summary>
            Event describing a list of team projects.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.AffectedTeamProjectsEventArgs">
            <summary>
            Event describing a list of team projects.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.AffectedTeamProjectsEventArgs.#ctor(System.String[])">
            <summary>
            Initialize the event arguments to contain the specified list of team projects.
            </summary>
            <param name="teamProjects">The list of team projects.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AffectedTeamProjectsEventArgs.TeamProjectPaths">
            <summary>
            The list of team projects affected by this event.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PolicyFailure">
            <summary>
            A class that describes a failure in policy evaluation.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyFailure.#ctor(System.String,Microsoft.TeamFoundation.VersionControl.Client.IPolicyEvaluation)">
            <summary>
            Initialize the policy failure.
            </summary>
            <param name="message">Message to be displayed for the failure.</param>
            <param name="policy">Policy that generated this failure</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyFailure.#ctor(System.String)">
            <summary>
            Initialize the policy failure when a policy failed to load.  This is only used internally.
            </summary>
            <param name="message">Message to be displayed for the failure.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyFailure.Message">
            <summary>
            Description of the policy failure.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyFailure.Policy">
            <summary>
            The policy this failure is associated with.  May be null if the policy failed to load.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyFailure.Activate">
            <summary>
            Present UI to provide details on the policy failure.  The caller is responsible for
            handling exceptions thrown by the policy.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyFailure.DisplayHelp">
            <summary>
            Display help to explain what this policy failure means and what to do to resolve it.  The
            caller is responsible for handling exceptions thrown by the policy.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PolicyStateChangedHandler">
            <summary>
            Event handler for asynchronous changes in policy state.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PolicyStateChangedEventArgs">
            <summary>
            The policy and list of failures associated with a PolicyStateChanged event.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyStateChangedEventArgs.#ctor(Microsoft.TeamFoundation.VersionControl.Client.PolicyFailure[],Microsoft.TeamFoundation.VersionControl.Client.IPolicyEvaluation)">
            <summary>
            Initialize the event arguments.
            </summary>
            <param name="failures">The list of failures from evaluating the policy.</param>
            <param name="policy">The policy that was evaluated.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyStateChangedEventArgs.Failures">
            <summary>
            The list of failures resulting from the policy evaluation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyStateChangedEventArgs.Policy">
            <summary>
            The policy that was evaluated resulting in the associated list of failures.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PolicyType">
            <summary>
            A class that represents a type of policy and allows new instances to be created.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyType.Name">
            <summary>
            The name of the policy type.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyType.Description">
            <summary>
            A description of this policy type.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyType.New">
            <summary>
            Create a new policy instance of this type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LoadFailurePolicyType">
            <summary>
            This is a class derived from PolicyType and included in lists of policies to indicate the
            inability of a policy assembly to be found/loaded.  The name is the name of the assembly
            and the description is the error message.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LoadFailurePolicyType.New">
            <summary>
            Since the load failed, we can't create an instance of it.  This method just throws 
            VersionControlException.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PolicyEnvelope">
            <summary>
            A container class that holds a policy instance and some additional properties (like whether
            it is enabled or not).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyEnvelope.#ctor(Microsoft.TeamFoundation.VersionControl.Client.IPolicyDefinition,Microsoft.TeamFoundation.VersionControl.Client.PolicyType)">
            <summary>
            Create an envelope for the specified policy.
            </summary>
            <param name="policy">The policy to create the envelope for.</param>
            <param name="policyType">The type of policy</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyEnvelope.Equals(System.Object)">
            <summary>
            Compare two PolicyEnvelopes for equality.  This doesn't compare the assemlyFile because
            that is filled on demand and should be constant (absent a registration change).
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>true if equal, false if not.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyEnvelope.GetHashCode">
            <summary>
            Return the hash code for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyEnvelope.Type">
            <summary>
            A cached copy of the policy type.  This can be used to get the type of the policy in the
            event that the policy itself fails to load.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyEnvelope.Enabled">
            <summary>
            A property that indicates whether evaluation of this policy is enabled or disabled.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyEnvelope.Policy">
            <summary>
            A property that contains the underlying policy instance stored in this PolicyEnvelope.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyStatus.Dispose">
            <summary>
            Clean up the contained policy instance.  This works regardless of whether or not
            the instance has been initialized and ignores failures.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PolicyStatusComparer">
            This is a utility class to serve as a comparer for Policy statuses.
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PolicyEvaluationState">
            <summary>
            Possible states for policy evaluation
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PolicyList">
            <summary>
            PolicyList manages a list of loaded policies for a set of pending changes.  It can evaluate
            the policies on demand, provide a list of failures and an overall evaluate state summary.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyList.#ctor(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer)">
            <summary>
            Initialize the policy list so that it can access the policy information on the server.
            </summary>
            <param name="sourceControl">source control object model</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyList.PendingCheckin">
            <summary>
            Set the pending checkin object that this policy list is associated with.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.PolicyList.PolicyStateChanged">
            <summary>
            An event that is fired when the policy failure list is updated asynchronously.  It is not
            fired when the Evaluate method is called.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.PolicyList.PolicyEvaluationStateChanged">
            <summary>
            An event that is fired when the policy failure list is updated asynchronously.  It is not
            fired when the Evaluate method is called.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyList.EvaluationState">
            <summary>
            Summary of the overall state of the policy list.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyList.Evaluate">
            <summary>
            Evaluate all of the necessary policies for the current list of pending changes and
            return the list of failures that result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyList.ReloadAndEvaluate">
            <summary>
            Reload the policies and re-evaluate all of the necessary policies
            for the current list of pending changes and return the list of
            failures that result.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyList.Failures">
            <summary>
            Return the current list of policy failures.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyList.PolicyCount">
            <summary>
            Return the number of policies.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyList.LoadPolicies">
            <summary>
            Determine the currently applicable policies, load them and initialize them.  If the
            policy is already loaded and active, don't reload it.  This throws if it can't load
            the policy list.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase">
            <summary>
            This class is helper that provides some of the basic functions of a checkin policy.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase.Type">
            <summary>
            A string representing the type of the policy.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase.TypeDescription">
            <summary>
            A string describing what this type of policy does.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase.Description">
            <summary>
            A string describing the behavior of this instance of a policy.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase.InstallationInstructions">
            <summary>
            A message that is displayed if the policy appears to not be installed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase.CanEdit">
            <summary>
            A property that indicates whether or not this policy includes configuration UI.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase.Edit(Microsoft.TeamFoundation.VersionControl.Client.IPolicyEditArgs)">
            <summary>
            Display UI to allow the user to configure the properties of this policy.
            </summary>
            <param name="policyEditArgs">Edit context for the policy</param>
            <returns>true if the policy was updated.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase.Initialize(Microsoft.TeamFoundation.VersionControl.Client.IPendingCheckin)">
            <summary>
            Initialize the policy instance so that it can perform evaluations.
            </summary>
            <param name="pendingCheckin">An object that allows the policy to gather information about the
            checkin for evaluation.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase.Evaluate">
            <summary>
            Evaluate the policy and return a list of failures if there are any.  If there are none,
            return an empty list.
            </summary>
            <returns>List of failures for this policy.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase.Activate(Microsoft.TeamFoundation.VersionControl.Client.PolicyFailure)">
            <summary>
            Display UI to allow a user to get more information on a particular policy failure.
            </summary>
            <param name="failure">The failure on which the user wants more info.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase.DisplayHelp(Microsoft.TeamFoundation.VersionControl.Client.PolicyFailure)">
            <summary>
            Display UI to give help on what this failure means and what the user can do to resolve it.
            </summary>
            <param name="failure">The failure on which the user wants help.</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase.PolicyStateChanged">
            <summary>
            An event the policy can raise to notify the host of an asynchronous change in the
            list of policy failures.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase.OnPolicyStateChanged(Microsoft.TeamFoundation.VersionControl.Client.PolicyFailure[])">
            <summary>
            Fire the event to notify of a change in policy state.
            </summary>
            <param name="failures"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase.GetBinaryFormatter">
            <summary>
            Only override this if you need to create a new BinaryFormatter and hook into the
            serialization process for backwards compatibility (e.g., you need to set the
            Binder property on the formatter to handle compat for a checkin policy that has
            been moved to another assembly).
            </summary>
            <returns>the BinaryFormatter to use for serializing the policy</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase.GetAssemblyName">
            <summary>
            Only override this for backwards compatibility where you need to specify a different assembly
            name for the checkin policy in order to maintain backwards compatibility with
            a previously released version of the checkin policy.
            </summary>
            <returns>The assembly name that should be stored in the metadata.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase.PendingCheckin">
            <summary>
            Get an object representing the pending changes portion of the pending checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyBase.Disposed">
            <summary>
            Returns true if this object has been disposed.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PolicyOverrideInfo">
            <summary>
            The PolicyOverrideInfo is associated with a changeset. It describes a
            set of failures that occurred for policies associated with the checkin.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyOverrideInfo.#ctor(System.String,Microsoft.TeamFoundation.VersionControl.Client.PolicyFailure[])">
            <summary>
            Construct an object representing an override of policy failures.
            </summary>
            <param name="overrideComment">override comment</param>
            <param name="policyFailures">list of failures</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyOverrideInfo.Comment">
            <summary>
            Comment about why the client overrode the checkin policies.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyOverrideInfo.PolicyFailures">
            <summary>
            Set of policy and their information that failed and are associated
            with this changeset.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PolicyFailureInfo">
            <summary>
            The PolicyFailureInfo is the information used to describe a policy
            failure that was overriden during a checkin. There may be one or more
            with any given changeset.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PolicyFailureInfo.#ctor(System.String,System.String)">
            <summary>
            Constructs a policy failure description for a policy override on a checkin.
            </summary>
            <param name="policyName">The name of the policy that failed.</param>
            <param name="message">The failure message from the policy.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyFailureInfo.Message">
            <summary>
            Message about the failure for this policy.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PolicyFailureInfo.PolicyName">
            <summary>
            Name of the policy that failed for this changeset.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PropertiesMergeSummary.TotalYourChanges">
            <summary>
            Total changes in your properties when compared to base.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PropertiesMergeSummary.TotalTheirChanges">
            <summary>
            Total changes in their properties when compared to base.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PropertiesMergeSummary.TotalConflicts">
            <summary>
            Total number of conflicts.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PropertiesMergeSummary.IsRedundant">
            <summary>
            True if your properties are equal to their properties.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PropertiesMergeSummary.MergedProperties">
            <summary>
            Null if there were conflicts
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PropertiesMergeSummary.CalculateSummary(System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.TeamFoundation.Framework.Client.PropertyValue},System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.TeamFoundation.Framework.Client.PropertyValue},System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.TeamFoundation.Framework.Client.PropertyValue})">
            <summary>
            Calculates the merge summary based on the provided properties.
            </summary>
            <param name="baseProperties"></param>
            <param name="yourProperties"></param>
            <param name="theirProperties"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PropertiesMergeSummary.MergedProperty">
            <summary>
            Helper class to represent a merged property.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PropertiesMergeSummary.MergedProperty.IsYoursChanged">
            <summary>
            Returns true if your property has changed when compared to the base.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PropertiesMergeSummary.MergedProperty.IsTheirsChanged">
            <summary>
            Returns true if their property has changed when compared to the base.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PropertiesMergeSummary.MergedProperty.IsConflicting">
            <summary>
            Returns true if the three-way merge has resulted in a conflict.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PropertiesMergeSummary.MergedProperty.IsRedundant">
            <summary>
            Returns true if the properties are redundant.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PropertiesMergeSummary.MergedProperty.MergeResult">
            <summary>
            The merged result if there is no conflict, null otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PropertiesMergeSummary.MergedProperty.PropertiesAreEqual(Microsoft.TeamFoundation.Framework.Client.PropertyValue,Microsoft.TeamFoundation.Framework.Client.PropertyValue)">
            <summary>
            Returns true if both properties are both null or if they are otherwise equal.
            </summary>
            <param name="property1"></param>
            <param name="property2"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ProxyInfo">
            <summary>
            The ProxyInfo class represents information about a TFS proxy server
            It is returned by GetProxy(), QueryProxies(), etc.
            </summary>
            <summary>
            Represents information about a TFS proxy server
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ProxyInfo.#ctor(System.String,System.String,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Common.ProxyFlags)">
            <summary>
            Creates a ProxyInfo instance used to contain information about a TFS proxy server
            </summary>
            <param name="url">the url of the proxy</param>
            <param name="friendlyName">the proxy's friendly name (may be blank)</param>
            <param name="site">The site of this proxy server (may be blank)</param>
            <param name="description">A description of the proxy server</param>
            <param name="flags">The flags for the proxy</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ProxyInfo.Flags">
            <summary>
            Gets the flags for the proxy record
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ProxyInfo.Equals(System.Object)">
            <summary>
            Determines whether the given ProxyInfo is equal to this instance.
            </summary>
            <param name="obj">The object to compare against</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ProxyInfo.GetHashCode">
            <summary>
            Gets the hash code for this object.
            </summary>
            <returns>Hash code for this object.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ProxyInfo.Description">
            <summary>
            This is a description string
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ProxyInfo.FriendlyName">
            <summary>
            The friendly name of the server
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ProxyInfo.Site">
            <summary>
            This is a string representation of the site
            that the proxy server is located in (e.g. "NA-WA-RED")
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ProxyInfo.Url">
            <summary>
            The URL of the proxy server
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.AdminRepositoryInfo">
            <summary>
            Data structure returned by the QueryRepositoryInformation method.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.Annotation">
            <summary>
            The Annotation class represents name/value pairs and couples that with
            optional resourceID, and versioning values. Annotations are used to
            store application defined name/value pairs -- that is, the application
            applies the semantic to the values. This class is created for each
            name/value pair that is read from the database.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Annotation.AnnotatedItem">
            <summary>
            This is the item the annotation is applied to. If the item is not
            supplied, it is a global annotation. You may only specify either
            a global annotation, or one attached to a versioned Item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Annotation.AnnotationName">
            <summary>
            This is the name of the annotation and is required, each annotation
            must have a name, though other annotations with the same name may
            be added to the same item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Annotation.AnnotationValue">
            <summary>
            This is the value of the annotation. An annotation is not required 
            to have a value. Its existance may be the value.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Annotation.Comment">
            <summary>
            This is an optional comment attached to the annotation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Annotation.LastModifiedDate">
            <summary>
            UTC DateTime of when this annotation was last modified
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Annotation.Version">
            <summary>
            This is the version of the item that has the annotation attached
            to it. This is not required and if it is not attached to a specific
            version, the annotation is valid for all versions.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BranchObjectOwnership">
            <summary>
            A summary class used to return branch root information from the server
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchObjectOwnership.RootItem">
            <summary>
            Root item of the branch object.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.BranchObjectOwnership.VersionedItemCount">
            <summary>
            Count of items at different versions
            e.g. if an item exists at 2 versions being tracked
            it will be counted twice
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ChangesetVersionSpec">
            <summary>
            Specifies a version based on a changeset number
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ChangesetVersionSpec.ChangesetId">
            <summary>
            Changeset number.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ChangesetVersionSpec.#ctor(System.String)">
            <summary>
            Construct a ChangesetVersionSpec object.
            </summary>
            <param name="changeset">the change set ID</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ChangesetVersionSpec.#ctor(System.Int32)">
            <summary>
            Construct a ChangesetVersionSpec object.
            </summary>
            <param name="changeset">the change set ID</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ChangesetVersionSpec.ParseChangesetNumber(System.String)">
            <summary>
            Parse the string as a changeset number.  Throws an exception if the changeset number is not
            a valid changeset integer.
            </summary>
            <param name="changeset">the change set ID</param>
            <returns>returns the changeset number</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ChangesetVersionSpec.Equals(System.Object)">
            <summary>
            Determine whether this instance is equal with the specified instance
            </summary>
            <param name="obj">other instance to compare with</param>
            <returns>true if the other instance matches this one</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ChangesetVersionSpec.GetHashCode">
            <summary>
            Generates a hash code for this instance.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.ChangesetVersionSpec.Identifier">
            <summary>
            Identifier for this version spec in command-line usage.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CheckinNotificationInfo">
            <summary>
            Information for the checkin notification service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinNotificationInfo.WorkItemInfo">
            <summary>
            The associated work item data
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CheckinNotificationWorkItemInfo">
            <summary>
            The information for each work item associated with the checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinNotificationWorkItemInfo.CheckinAction">
            <summary>
            Indicates the work item was (wasn't) marked as "resolve with checkin".
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinNotificationWorkItemInfo.Id">
            <summary>
            The ID of the work item
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CheckinResult">
            <summary>
            This represents the result of a call to the checkin method
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinResult.ChangesetId">
            <summary>
            This is the changeset number that was generated while checking in this
            changeset. It will have a positive value if the changeset was successfully
            checked in.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinResult.CheckInState">
            <summary>
            Represents the last known state of the checkin operation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinResult.CheckInTicket">
            <summary>
            The checkin ticket for this operation
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinResult.CreationDate">
            <summary>
            Timestamp when changeset was committed
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinResult.LocalVersionUpdates">
            <summary>
            For a local workspace, this contains the list of local version updates, made by checkin
            For server workspaces this is empty.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckinResult.UndoneServerItems">
            <summary>
            This is the set of files that did not change. These items were not
            committed to the changeset and the changes were undone. This can happen
            if you have an edit and don't change the file or only have a lock on
            the file.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ConflictInformation.ConflictType">
            <summary>
            This is the type of conflict represented.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ConflictInformation.PendingChangeId">
            <summary>
            The Id of the pendingchange this item is in conflict with.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ConflictInformation.Reason">
            <summary>
            The reason for the conflict. This is only used by Local
            conflicts.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ConflictInformation.SourceLocalItem">
            <summary>
            Where the item is currently on the local machine
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ConflictInformation.TargetLocalItem">
            <summary>
            Where the item is supposed to be on the local machine.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ConflictInformation.VersionFrom">
            <summary>
            The version that this item is in conflict with.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.DateVersionSpec">
            <summary>
            Specifies a version based on a date/time stamp
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.DateVersionSpec.#ctor(System.DateTime)">
            <summary>
            Construct a new VersionSpec based on the specified DateTime.
            </summary>
            <param name="date">DateTime for this version specifier</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.DateVersionSpec.#ctor(System.DateTime,System.String)">
            <summary>
            Construct a new VersionSpec based on the specified DateTime.  Keep track of the
            original text used in specifying the DateTime for error messages.
            </summary>
            <param name="date">DateTime for this version specifier</param>
            <param name="originalText">original text input by the user</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.DateVersionSpec.Equals(System.Object)">
            <summary>
            Determine whether this instance is equal with the specified instance
            </summary>
            <param name="obj">other instance to compare with</param>
            <returns>true if the other instance matches this one</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.DateVersionSpec.GetHashCode">
            <summary>
            Generates a hash code for this instance.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.DateVersionSpec.Identifier">
            <summary>
            Identifier for this version spec in command-line usage.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ChangeType">
            <summary>
            Valid change operations.  Used in the ChangeType property of PendingChange
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.CheckinOptions.SuppressEvent">
            <summary>
            Suppress events for this checkin
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.CheckinOptions.ValidateCheckinOwner">
            <summary>
            Make sure that the identity specified as the checkin owner refers to a valid user.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CheckinWorkItemAction">
            <summary>
            Capture the user's intent on work items accompanying the checkin.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ConflictType">
            <summary>
            Describes the possible conflict types.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.ConflictType.Unknown">
            <summary>
            Returned on a pending change, when we didn't lookup this info
            In case of server workspaces, destroy, etc.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.DeletedState">
            <summary>
            Parameters for QueryItems regarding deleted items
            (see prc_QueryItems)
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LabelChildOption">
            <summary>
            Enumeration for LabelItem to determine what is to be done with children
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LabelResultStatus">
            <summary>
            Returned from prc_LabelItem and prc_UnlabelItem to indicate what has been done to each child label.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LockLevel">
            <summary>
            Valid locking levels.  Used in the LockLevel property of PendingChange
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PendingSetType">
            <summary>
            Used to distinguish workspaces from pending sets in QueryPendingChanges calls.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.RecursionType">
            <summary>
            Possible values for the @recursion flag
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.Resolution">
            <summary>
            These are the different ways to resolve a conflict.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.SeverityType">
            <summary>
            Indicates contents of "failure" object.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WarningType">
            <summary>
            Possible values for the WarningType column returned by prc_PendXXX (see func_ComputePendingChangeWarnings)
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolderType">
            <summary>
            Used to describe working folder entries.  Each entry is either a map or a cloak
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ExtendedMerge">
            <summary>
            Class representing a merge of an item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedMerge.SourceChangeset">
            <summary>
            Info about the source changeset
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedMerge.SourceItem">
            <summary>
            Change object describing the source of the change
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedMerge.TargetChangeset">
            <summary>
            Information about the target changeset
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedMerge.TargetItem">
            <summary>
            ItemIdentifier of the target of the merge.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExtendedMerge.VersionedItemCount">
            <summary>
            Count of versioned items including in this merge
            e.g. if 2 versions of an item are included in this merge, the count
            will be 2.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ItemMerge">
            <summary>
            Represents the records returned by prc_QueryMerges.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LabelResult">
            <summary>
            Returned from LabelItem and UnlabelItem to indicate which labels were operated on and what
            was done to them.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LabelResult.Label">
            <summary>
            Name of label manipulated.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LabelResult.Scope">
            <summary>
            Server item representing the scope of the label manipulated.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LabelResult.Status">
            <summary>
            Action performed on label.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LabelVersionSpec">
            <summary>
            Specifies a version based on a label.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LabelVersionSpec.Label">
            <summary>
            Label name.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LabelVersionSpec.Scope">
            <summary>
            Label scope (path representing point of the tree where the label lives)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LabelVersionSpec.#ctor(System.String)">
            <summary>
            Constructs a new label.
            </summary>
            <param name="label">The name of the label.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LabelVersionSpec.#ctor(System.String,System.String)">
            <summary>
            Constructs a new label.
            </summary>
            <param name="label">The name of the label.</param>
            <param name="scope">The scope of the label (may be null).</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LabelVersionSpec.Equals(System.Object)">
            <summary>
            Determine whether this instance is equal with the specified instance
            </summary>
            <param name="obj">other instance to compare with</param>
            <returns>true if the other instance matches this one</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LabelVersionSpec.GetHashCode">
            <summary>
            Generates a hash code for this instance.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.LabelVersionSpec.Identifier">
            <summary>
            Identifier for this version spec in command-line usage.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LatestVersionSpec">
            <summary>
            Specifies the latest version.  No real parameters
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LatestVersionSpec.Equals(System.Object)">
            <summary>
            Determine whether this instance is equal with the specified instance
            </summary>
            <param name="obj">other instance to compare with</param>
            <returns>true if the other instance matches this one</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.LatestVersionSpec.GetHashCode">
            <summary>
            Generates a hash code for this instance.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.LatestVersionSpec.Instance">
            <summary>
            Singleton instance for the Latest version specifier.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.LatestVersionSpec.Identifier">
            <summary>
            Identifier for this version spec in command-line usage.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Mapping.ServerItem">
            <summary>
            The server folder this entry maps.
            Must always be non-null
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Mapping.Type">
            <summary>
            The type of mapping this is.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Mapping.GetDepthFromRecursion(Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Takes in a recursion type and returns a depth.
            </summary>
            <param name="type">Recursion Type</param>
            <returns>Depth which the recursion type represents.</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Mapping.DisplayServerItem">
            <summary>
            Gets the display string for a given ServerItem
            takes into account the depth 1 semantics
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Mapping.DoesMatchPattern(System.String)">
            <summary>
            Compares the depth of a given server item against 
            the depth of the mapping and returns true if the depth falls between
            the mapping depth range.
            </summary>
            <param name="serverItem">Server item to compare against</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Mapping.Depth">
            <summary>
            Gets the recursion type for the mapping
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Mapping.GetHashCode">
            <summary>
            Generates a hash code for this instance.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.MergeCandidate">
            <summary>
            Represents a changeset that needs to be merged.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.MergeCandidate.Changeset">
            <summary>
            Information about the changeset that has not been merged.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.MergeCandidate.Partial">
            <summary>
            True if some of the changes have been merged, but not all.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.MergeSource">
            <summary>
            Represents a source item and version range of a merge (or rename)
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.MergeSource.IsRename">
            <summary>
            Whether this is a rename source, when false it is a merge source
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.MergeSource.ServerItem">
            <summary>
            The server item of the source
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.MergeSource.VersionFrom">
            <summary>
            Start of the version range.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.MergeSource.VersionTo">
            <summary>
            End of the version range
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingState.ConflictInfo">
            <summary>
            Information about any conflict that may exist for this pending change.
            If this is specified a conflict is registered for this item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingState.ItemId">
            <summary>
            This ItemId for the item containg the conflict.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingState.RevertToVersion">
            <summary>
            The revert to version is specified to tell the server that it could
            not retrieve a file do to local changes and that if the changes are
            undone, this is the version that should be on the machine.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Repository.CreateDownloadRequest(System.String,Microsoft.TeamFoundation.Framework.Client.FileRepository.CredentialsType,System.Boolean@)">
            <summary>
            Create an HttpWebRequest object for downloading a file. 
            </summary>
            <param name="downloadUrl">Querystring attached to the download request</param>
            <param name="proxyCredentials">type of credentials to use with proxy</param>
            <param name="isProxyUrl">Indicates whether the URL set on the HttpWebRequest is a proxy URL</param>
            <returns>HttpWebRequest used for downloading files</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.RepositoryProperties">
            <summary>
            Describes the global properties of this repository.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.RepositoryProperties.DownloadKey">
            <summary>
            Download key for this repository
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.RepositoryProperties.Id">
            <summary>
            The instance ID of the Team Project Collection.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.RepositoryProperties.LatestChangesetId">
            <summary>
            The ID of the most recently committed changeset.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.RepositoryProperties.Name">
            <summary>
            This property is deprecated and always contains the empty string.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.RepositoryProperties.SupportedFeatures">
            <summary>
            The features supported by the server.
            Can be evaluated by doing a bitwise or against the SupportedFeatures enum
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.RepositoryProperties.Version">
            <summary>
            This property is deprecated and always contains the empty string.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.SecurityChange">
            <summary>
            Base class for security change requests
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ServerSettings.#ctor(Microsoft.TeamFoundation.VersionControl.Client.ServerSettings)">
            <summary>
            Copy constructor for a ServerSettings instance.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.Shelveset">
            <summary>
            The Shelveset represents the metadata for a set of shelved changes.
            </summary>
            <summary>
            A server-side collection of pending changes and associated metadata
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.ChangesExcluded">
            <summary>
            ChangesExcluded is set when some of the changes in the shelveset
            were not returned to the caller.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.CheckinNote">
            <summary>
            Checkin note associated with this shelveset.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.Comment">
            <summary>
            Comment describing the shelveset.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.CreationDate">
            <summary>
            Date/Time the changes were shelved
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.Name">
            <summary>
            Shelveset name.  Unique only for a given Owner.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.PolicyOverrideComment">
            <summary>
            User supplied comment describing why the policy failed.  May be null.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.#ctor(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String,System.String)">
            <summary>
            Create a Shelveset object for shelving changes.
            </summary>
            <param name="sourceControl">source control object representing the repository on which the
              shelveset will be created</param>
            <param name="name">name of the shelveset</param>
            <param name="owner">owner of the shelveset</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.#ctor(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.PropertyValue})">
            <summary>
            Create a Shelveset object for shelving changes.
            </summary>
            <param name="sourceControl">source control object representing the repository on which the
              shelveset will be created</param>
            <param name="name">name of the shelveset</param>
            <param name="owner">owner of the shelveset</param>
            <param name="properties">custom properties to be associated with the shelveset.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.WorkItemInfo">
            <summary>
            Work items and the actions on each included with the shelveset.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.BriefWorkItemInfo">
            <summary>
            Brief work item information including only the Ids and the actions on each included with the shelveset.
            Unlike WorkItemInfo, this property does not access the server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.ArtifactUri">
            <summary>
            Artifact Uri
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.AssociatedWorkItems">
            <summary>
            Returns a limited set of information about the associated work items with this changeset.
            This property does not spin up a WorkItemStore, so it is very quick.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.DisplayName">
            <summary>
            This is the formatted display name of the shelveset.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.QualifiedName">
            <summary>
            This is the formatted unique name of the shelveset.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.OwnerName">
            <summary>
            This is the owner of the shelveset in the unique format.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.OwnerDisplayName">
            <summary>
            This is the owner of the shelveset in the display format.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.NameComparer">
            <summary>
            Sorts the shelvesets first by name and then by owner.
            Comparer is for display purposes (culture sensitive and case insensitive).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.VersionControlServer">
            <summary>
            The source control object representing the repository on which the shelveset exists.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.Properties">
            <summary>
            Returns a read-only collection of properties associated with the shelveset.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.SetProperty(Microsoft.TeamFoundation.Framework.Client.PropertyValue)">
            <summary>
            Adds or updates the property value in the Properties bag.
            </summary>
            <param name="propertyValue">The new property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.RemoveProperty(System.String)">
            <summary>
            Removes the property from the Properties bag.
            </summary>
            <param name="propertyName">The property to remove.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Shelveset.ShelvesetUpdatedSuccessfully">
            <summary>
            Called by the VersionControlServer once the object has been successfully updated.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.TeamProjectFolderOptions">
            <summary>
            This class is used to describe the initial configuration of a newly
            created team project. This allows the creator to control the initial access,
            checkin notes, whether or not exclusive checkout is enforced or not and
            whether or not get latest on checkout is enforced.
            </summary>
            <summary>
            This class contains the options used to create a team project folder.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProjectFolderOptions.CheckinNoteDefinition">
            <summary>
            This is used to create a checkin note definition for the root of the
            team project.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProjectFolderOptions.Comment">
            <summary>
            This comment is used for the comment stored in the checkin associated
            with the creation of the Team Project. It is an optional comment.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProjectFolderOptions.ExclusiveCheckout">
            <summary>
            The ExclusiveCheckout option allows the creator to require all pending
            changes on items be exclusive, not allowing more than a single user to
            pend chanes at one time.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProjectFolderOptions.GetLatestOnCheckout">
            <summary>
            The GetLatestOnCheckout option allows the creator to require all attempts
            to pend edits on items to retrieve the latest version of those items as
            part of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProjectFolderOptions.Permissions">
            <summary>
            This is used to configure what the default set of permissions for a set
            of users and groups will be to the tree when the tree is created.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProjectFolderOptions.SourceProject">
            <summary>
            The branch source is used to denote the source location in the tree to
            branch the TeamProject from. The branches are always created by branching
            the latest version of the source tree. If the Source Project is not 
            specified then the team project folder is created as a new emtpy folder.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProjectFolderOptions.TeamProject">
            <summary>
            The team project folder is a required value and specifies the name of the
            folder created for the team project.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.TeamProjectFolderPermission">
            <summary>
            This is used to setup the intial permissions when creating a team project.
            Each permission supplied is a set of allow and denies for an identity.
            </summary>
            <summary>
            This class contains the permissions that are given to the root of the project folder
            when the folder is created.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProjectFolderPermission.AllowPermission">
            <summary>
            These are the permissions to allow for this identity upon creation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProjectFolderPermission.DenyPermission">
            <summary>
            These are the permissions to deny for this identity upon creation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProjectFolderPermission.IdentityName">
            <summary>
            This is the name of the Group or User that we are assigning the permissions.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.VersionControlLabel">
            <summary>
            Represents a label.  Called an "VersionControlLabel" so it doesn't conflict with
            System.Windows.Forms.Label
            </summary>
            <summary>
            Represents a source control label.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlLabel.Comment">
            <summary>
            The label's comment, or null to leave alone.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlLabel.Items">
            <summary>
            A list of items and their versions contained in the label.  Only used
            in the result of QueryLabels where includeItems = true.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlLabel.LabelId">
            <summary>
            The label's Id, as represented in the database. The label id is used to generate
            the artifact name
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlLabel.LastModifiedDate">
            <summary>
            Timestamp of last label modification
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlLabel.Name">
            <summary>
            Label's name.  Name + ServerItem must be unique.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlLabel.OwnerDisplayName">
            <summary>
            Display name of the user that owns this label.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlLabel.OwnerName">
            <summary>
            Identity name of the user that owns this label.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlLabel.Scope">
            <summary>
            Server item path representing the label's scope.  Name + Scope must be unique
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlLabel.#ctor(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String,System.String,System.String,System.String)" -->
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlLabel.ArtifactUri">
            <summary>
            Artifact Uri for a Label.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlLabel.VersionControlServer">
            <summary>
            The source control repository containing this Label.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.VersionControlLink">
            <summary>
            Represents a link between a version control entity and an
            external entity identified by a URL
            </summary>
            <summary>
            Represents a link stored in Hatteras.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlLink.LinkType">
            <summary>
            User-defined field to qualify URL type
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlLink.Url">
            <summary>
            User-defined URL field.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlLink.#ctor(System.Int32,System.String)">
            <summary>
            Creates a representation of a link to be sent to the server.
            </summary>
            <param name="linkType">type of link</param>
            <param name="url">the url for the link</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec">
            <summary>
            A base class for encapsulating version specifications.
            Allows a number of different types of versions
            </summary>
            <summary>
            VersionSpec is a utility class for parsing version specifications.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.ParseSingleSpec(System.String,System.String)">
            <summary>
            Given a version string (without a range specifier), convert it to a
            VersionSpec object.
            </summary>
            <param name="versionSpec">version specification to encapsulate</param>
            <param name="user">the current user (only used by workspace version specs)</param>
            <returns>The version specification encapsulated in an object.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.ParseSingleSpec(System.String,System.String,System.String)">
            <summary>
            Given a version string (without a range specifier), convert it to a
            VersionSpec object.
            </summary>
            <param name="versionSpec">version specification to encapsulate</param>
            <param name="user">the current user's unique name (only used by workspace version specs)</param>
            <param name="userDisplay">the current user's display name (only used by workspace version specs)</param>
            <returns>The version specification encapsulated in an object.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.Parse(System.String,System.String)">
            <summary>
            Given a version string convert it to an array VersionSpec objects.
            If the version specification did not contain a range specifier then
            this will return an array of size one, otherwise an array of size two.
            </summary>
            <param name="versionSpec">version specification to encapsulate</param>
            <param name="user">the current user (only used by workspace version specs)</param>
            <returns>The version specification(s) encapsulated in an array.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.Parse(System.String,System.String,System.String)">
            <summary>
            Given a version string convert it to an array VersionSpec objects.
            If the version specification did not contain a range specifier then
            this will return an array of size one, otherwise an array of size two.
            </summary>
            <param name="versionSpec">version specification to encapsulate</param>
            <param name="user">the current user (only used by workspace version specs)</param>
            <returns>The version specification(s) encapsulated in an array.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.ParseVersionedFileSpec(System.String,System.String,System.String@,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec[]@)">
            <summary>
            Parse a versioned file spec of the form filename;version
            </summary>
            <param name="spec">the versioned file spec to parse</param>
            <param name="user">the current user (only used by workspace version specs)</param>
            <param name="fileName">returned file name</param>
            <param name="versions">returned versionSpec array</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.ParseVersionedFileSpec(System.String,System.String,System.Int32@,System.String@,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec[]@)">
            <summary>
            Parse a versioned file spec of the form filename;version or filename;version;deletionID.
            </summary>
            <param name="spec">the versioned file spec to parse</param>
            <param name="user">the current user (only used by workspace version specs)</param>
            <param name="deletionId">returned deletion id (orphan id)</param>
            <param name="fileName">returned file name</param>
            <param name="versions">returned versionSpec array</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.ParseVersionedFileSpec(System.String,System.String,System.String,System.Int32@,System.String@,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec[]@)">
            <summary>
            Parse a versioned file spec of the form filename;version or filename;version;deletionID.
            </summary>
            <param name="spec">the versioned file spec to parse</param>
            <param name="user">the current user's unique name (only used by workspace version specs)</param>
            <param name="userDisplay">the current user's display name (only used by workspace version specs)</param>
            <param name="deletionId">returned deletion id (orphan id)</param>
            <param name="fileName">returned file name</param>
            <param name="versions">returned versionSpec array</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.IsDeletionSpecifier(System.String)">
            <summary>
            Checks whether the specification is a deletion id.
            </summary>
            <param name="spec">specification, separator (;) already removed</param>
            <returns>whether the specifier is a deletion id</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.IsWorkspaceSpecifier(System.String)">
            <summary>
            Checks whether the specification is a deletion id.
            </summary>
            <param name="spec">specification, separator (;) already removed</param>
            <returns>whether the specifier is a deletion id</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.ParseDeletionId(System.String)">
            <summary>
            Parse a deletion id from a specification.  This should be gated by the IsDeletionSpecifier.
            </summary>
            <param name="spec">specification, separator (;) already removed</param>
            <returns>the deletion id parsed out</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.Format(System.String)">
            <summary>
            Formats a server or local path with the version specifier.
            </summary>
            <param name="path">server or local path</param>
            <returns>a version string representing the path and version</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.FormatRange(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            Formats a server or local path with the version range specified.
            </summary>
            <param name="path">server or local path</param>
            <param name="from">beginning of the version range</param>
            <param name="to">end of the version range</param>
            <returns>a version string representing the path and version range</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.AddDeletionModifierIfNecessary(Microsoft.TeamFoundation.VersionControl.Client.Item)">
            <summary>
            Formats a path to include the deletion identifier if it's non-zero
            </summary>
            <param name="item">The item to format.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.AddDeletionModifierIfNecessary(System.String,System.Int32)">
            <summary>
            Formats a path to include the deletion identifier if it's non-zero
            </summary>
            <param name="path">the path (should not already include the ;X3)</param>
            <param name="deletionId">the deletion id</param>
            <returns>a string representing the original path, potentially with a formatted deletion modifier added</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.ReorderVersionSpecs(Microsoft.TeamFoundation.VersionControl.Client.VersionSpec@,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec@)">
            <summary>
            Potentially re-order (swap) the two VersionSpec instances if we can prove they're
            definitely out of order.  If we cannot tell for sure (labels, for instance), leave
            them alone.
            </summary>
            <param name="start">VersionSpec that will be before end</param>
            <param name="end">VersionSpec that will be after start</param>
            <returns>true if we reversed the VersionSpec instances</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.ComputeVersionString">
            <summary>
            Construct the string representation of the version specification as
            a version specification format.  
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.DisplayString">
            <summary>
            Return the string representation of the version specification as
            a version specification format.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.Latest">
            <summary>
            Latest is a VersionSpec that indicates the latest version is being requested from the 
            repository.
            </summary>
            <value>a VersionSpec instance indicating latest version</value>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.VersionSpecFactory">
            <summary>
            VersionSpecFactory instance used for creating client-side VersionSpec objects
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.RangeSeparator">
            <summary>
            Character used to separate the components of a version specification range
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.Separator">
            <summary>
            Character used to separate a filename from its version specification
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.DeletionModifier">
            <summary>
            Deletion identifier (it's not a version spec, rather a version modifier).
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.VersionSpec.ClientVersionSpecFactory">
            <summary>
            A VersionSpecFactory subclass for creating VersionSpec types from the MS.TF.VC.Client assembly.
            Part of a mechanism to share parsing code for versionspecs between the client and server object models.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.Warning">
            <summary>
            The warning object contains information that should be made available
            to a user. Warnings do not indicate an error condition; they indicate conditions
            about which a user should pay attention to.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Warning.ParentOrChildPath">
            <summary>
            The conflicting item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Warning.User">
            <summary>
            The user who has the conflicting change pended.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Warning.UserDisplayName">
            <summary>
            The user who has the conflicting change pended.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Warning.WarningType">
            <summary>
            The warning "type"
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Warning.Workspace">
            <summary>
            The workspace where the conflicting change is pended.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder">
            <summary>
            This class represents a working folder setting.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.LocalItem">
            <summary>
            The local folder this mapping maps to.
            Should be null if type is Cloak
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.#ctor(System.String,System.String)">
            <summary>
            Creates a working folder object representing a mapping of serverItem to
            localItem.
            </summary>
            <param name="serverItem">server item being mapped</param>
            <param name="localItem">local item for the server item</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.#ctor(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolderType)">
            <summary>
            Creates a working folder object.
            </summary>
            <param name="serverItem">server item being mapped</param>
            <param name="localItem">local item for server item; may be null if the server item
            is cloaked</param>
            <param name="type">Type of mapping to create</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.#ctor(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolderType,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Creates a working folder object.
            </summary>
            <param name="serverItem">server item being mapped</param>
            <param name="localItem">local item for server item; may be null if the server item
            is cloaked</param>
            <param name="type">Type of mapping to create</param>
            <param name="depth">Depth which mapping affects (1, 120).</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.GetHashCode">
            <summary>
            Generates a hash code for this instance.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.op_Equality(Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder)">
            <summary>
            Compare two WorkingFolder instances for equality
            </summary>
            <param name="wf1">the first one</param>
            <param name="wf2">the second one</param>
            <returns>whether the two WorkingFolder instances are equivalent</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.op_Inequality(Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder)">
            <summary>
            Compare two WorkingFolder instances for inequality
            </summary>
            <param name="wf1">the first one</param>
            <param name="wf2">the second one</param>
            <returns>whether the two WorkingFolder instances are not equivalent</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.Equals(System.Object)">
            <summary>
            Compare this instance to another WorkingFolder instance for equality
            </summary>
            <param name="obj">the other instance</param>
            <returns>whether the two instances are equivalent</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.IsCloaked">
            <summary>
            Whether this mapping is a cloak
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.LocalItemComparer">
            <summary>
            Comparer for sorting WorkingFolder instances based on local path
            (culture sensitive and case insensitive)
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.ServerItemComparer">
            <summary>
            Comparer for sorting WorkingFolder instances based on server path
            (culture sensitive and case insensitive)
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.AreSetsEqual(Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[],Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[])">
            <summary>
            Returns true if two sets of WorkingFolders are identical.
            </summary>
            <param name="set1">The first set of working folders</param>
            <param name="set2">The second set of working folders</param>
            <returns>True if the two sets are identical, false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.Clone">
            <summary>
            Creates a copy of this WorkingFolder instance.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.TranslateServerItemToLocalItem(System.String)">
            <summary>
            Uses this WorkingFolder object as the closest mapping to translate
            the provided server item to a local item.
            
            Do not call this method on WorkingFolders which are cloaks, as they have no local path. 
            Furthermore, this method does not respect the Depth property of a WorkingFolder.
            </summary>
            <param name="serverItem">The server item to translate. This must be a subitem of this
            WorkingFolder's server item.</param>
            <returns>The local item of the provided server item</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.TranslateLocalItemToServerItem(System.String)">
            <summary>
            Uses this WorkingFolder object as the closest mapping to translate
            the provided local item to a server item.
            
            Do not call this method on WorkingFolders which are cloaks, as they have no local path. 
            Furthermore, this method does not respect the Depth property of a WorkingFolder.
            </summary>
            <param name="localItem">The local item to translate. This must be a subitem of this
            WorkingFolder's local item.</param>
            <returns>The server item of the provided local item</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.TranslateLocalItemToServerItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[],System.Boolean@,Microsoft.TeamFoundation.VersionControl.Client.RecursionType@)">
            <summary>
            Helper method used by TryGetServerItemForLocalItem and TryGetWorkingFolderForLocalItem.
            If isCloaked is true, then the return value is the server item that the local item would have if it
            were not cloaked.
            If isCloaked is true, the value for depth is undefined.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.TranslateServerItemToLocalItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[],System.Boolean,System.Boolean@,Microsoft.TeamFoundation.VersionControl.Client.RecursionType@)">
            <summary>
            Static helper method for translating server paths to local paths.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.TryGetMatchingWorkingFolderForLocalItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType@)">
            <summary>
            Helper method that finds WorkingFolder closest matching specified local item.
            Local item should be already canonicalized.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder.DepthOneString">
            <summary>
            Returns the string which represents a one depth mapping.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.Workspace">
            <summary>
            Workspace encapsulates the information about a workspace (like name and comment).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.LastAccessDate">
            <summary>
            This is the date to the day resolution of the last time the workspace
            has been accessed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.OwnerIdentityType">
            <summary>
            This uses the Framework server class IdentityDescriptor to send back an IdentityDescriptor for use in the client.
            To not break Whidbey compatibility --- in relation to a Whidbey XML deserialization bug, this relies entirely on
            IdentityDescriptor not having any sub-elements and not having an end element (short form). Thus, it should be of the form:
            "<IdentityDescriptor identityType="Foo" identifier="Bar" />"
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.EvaluateCheckin(Microsoft.TeamFoundation.VersionControl.Client.CheckinEvaluationOptions,Microsoft.TeamFoundation.VersionControl.Client.PendingChange[],Microsoft.TeamFoundation.VersionControl.Client.PendingChange[],System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinNote,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo[])">
            <summary>
            Evaluate the pending changes to see if they are ready to check in.
            </summary>
            <param name="options">Bitmask indicating what to check (checkin notes, policies, conflicts)</param>
            <param name="allChanges">The entire set of pending changes for the workspace (can be null -- indicates
            that the method should retrieve this set itself if it is needed)</param>
            <param name="changes">The candidate changes for evaluation</param>
            <param name="comment">Checkin comment for validation</param>
            <param name="checkinNote">Checkin notes</param>
            <param name="workItemChanges">Associated work items for this checkin</param>
            <returns>Evaluation result object</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.CheckIn(Microsoft.TeamFoundation.VersionControl.Client.PendingChange[],System.String)">
            <summary>
            Given a set of pending changes from this workspace, check in the pending changes to the server.
            A checkin is an atomic operation. All changes will be checked in or none will.
            If the checkin is successful, a positive changeset number will be returned from this method.
            If the set of pending changes for checkin is null, the server will attempt to check in all changes
            in the workspace, but this operation is not valid if any pending changes in the workspace are edits or adds,
            as content will not have been uploaded to the server.
            </summary>
            <param name="changes">The set of pending changes (from this workspace) to check in (can be null)</param>
            <param name="comment">The comment to be associated with this checkin (can be null)</param>
            <returns>If successful, a positive changeset number for this checkin.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.CheckIn(Microsoft.TeamFoundation.VersionControl.Client.PendingChange[],System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinNote,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo[],Microsoft.TeamFoundation.VersionControl.Client.PolicyOverrideInfo)">
            <summary>
            Given a set of pending changes from this workspace, check in the pending changes to the server.
            A checkin is an atomic operation. All changes will be checked in or none will.
            If the checkin is successful, a positive changeset number will be returned from this method.
            If the set of pending changes for checkin is null, the server will attempt to check in all changes
            in the workspace, but this operation is not valid if any pending changes in the workspace are edits or adds,
            as content will not have been uploaded to the server.
            </summary>
            <param name="changes">The set of pending changes (from this workspace) to check in (can be null)</param>
            <param name="comment">The comment to be associated with this checkin (can be null)</param>
            <param name="checkinNote">Checkin note information associated with this checkin (can be null)</param>
            <param name="workItemChanges">Associated work item information (can be null)</param>
            <param name="policyOverride">Checkin policy override information (can be null)</param>
            <returns>If successful, a positive changeset number for this checkin.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.CheckIn(Microsoft.TeamFoundation.VersionControl.Client.PendingChange[],System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinNote,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo[],Microsoft.TeamFoundation.VersionControl.Client.PolicyOverrideInfo)">
            <summary>
            Given a set of pending changes from this workspace, check in the pending changes to the server.
            A checkin is an atomic operation. All changes will be checked in or none will.
            If the checkin is successful, a positive changeset number will be returned from this method.
            If the set of pending changes for checkin is null, the server will attempt to check in all changes
            in the workspace, but this operation is not valid if any pending changes in the workspace are edits or adds,
            as content will not have been uploaded to the server.
            </summary>
            <param name="changes">The set of pending changes (from this workspace) to check in (can be null)</param>
            <param name="author">If null, the author of the changeset will be the user making the CheckIn call. If non-null,
            and the user making the CheckIn call has CheckInOther permission, the author will be set to the provided value.</param>
            <param name="comment">The comment to be associated with this checkin (can be null)</param>
            <param name="checkinNote">Checkin note information associated with this checkin (can be null)</param>
            <param name="workItemChanges">Associated work item information (can be null)</param>
            <param name="policyOverride">Checkin policy override information (can be null)</param>
            <returns>If successful, a positive changeset number for this checkin.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.CheckIn(Microsoft.TeamFoundation.VersionControl.Client.PendingChange[],System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinNote,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo[],Microsoft.TeamFoundation.VersionControl.Client.PolicyOverrideInfo,Microsoft.TeamFoundation.VersionControl.Client.CheckinOptions)">
            <summary>
            Given a set of pending changes from this workspace, check in the pending changes to the server.
            A checkin is an atomic operation. All changes will be checked in or none will.
            If the checkin is successful, a positive changeset number will be returned from this method.
            If the set of pending changes for checkin is null, the server will attempt to check in all changes
            in the workspace, but this operation is not valid if any pending changes in the workspace are edits or adds,
            as content will not have been uploaded to the server.
            </summary>
            <param name="itemSpecs">Itemspecs to use to scope the checkin operation (can be null)</param>
            <param name="author">If null, the author of the changeset will be the user making the CheckIn call. If non-null,
            and the user making the CheckIn call has CheckInOther permission, the author will be set to the provided value.</param>
            <param name="comment">The comment to be associated with this checkin (can be null)</param>
            <param name="checkinNote">Checkin note information associated with this checkin (can be null)</param>
            <param name="workItemChanges">Associated work item information (can be null)</param>
            <param name="policyOverride">Checkin policy override information (can be null)</param>
            <param name="checkinOptions">Checkin options for this checkin</param>
            <returns>If successful, a positive changeset number for this checkin.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.EvaluateCheckin2(Microsoft.TeamFoundation.VersionControl.Client.CheckinEvaluationOptions,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.PendingChange},System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinNote,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo[])">
            <summary>
            Evaluate the pending changes to see if they are ready to check in.
            </summary>
            <param name="options">Bitmask indicating what to check (checkin notes, policies, conflicts)</param>
            <param name="changes">The candidate changes for evaluation</param>
            <param name="comment">Checkin comment for validation</param>
            <param name="checkinNote">Checkin notes</param>
            <param name="workItemChanges">Associated work items for this checkin</param>
            <returns>Evaluation result object</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.EvaluateCheckin2(Microsoft.TeamFoundation.VersionControl.Client.CheckinEvaluationOptions,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.PendingChange},System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.PendingChange},System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinNote,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo[])">
            <summary>
            Evaluate the pending changes to see if they are ready to check in.
            </summary>
            <param name="options">Bitmask indicating what to check (checkin notes, policies, conflicts)</param>
            <param name="allChanges">The entire set of pending changes for the workspace (can be null -- indicates
            that the method should retrieve this set itself if it is needed)</param>
            <param name="changes">The candidate changes for evaluation</param>
            <param name="comment">Checkin comment for validation</param>
            <param name="checkinNote">Checkin notes</param>
            <param name="workItemChanges">Associated work items for this checkin</param>
            <returns>Evaluation result object</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.CheckIn(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceCheckInParameters)">
            <summary>
            Given a set of pending changes from this workspace, check in the pending changes to the server.
            A checkin is an atomic operation. All changes will be checked in or none will.
            If the checkin is successful, a positive changeset number will be returned from this method.
            If the set of pending changes for checkin is null, the server will attempt to check in all changes
            in the workspace, but this operation is not valid if any pending changes in the workspace are edits or adds,
            as content will not have been uploaded to the server.
            </summary>
            <param name="checkinParameters">An instance of WorkspaceCheckInParameters that you create to supply instructions for this
            checkin, such as (but not limited to) the items to check in, the comment associated with the changeset, and
            the associated work items.</param>
            <returns>If successful, a positive changeset number for this checkin.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.CheckInInternal(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceCheckInParameters,System.Int32)">
            <summary>
            Private implementation of CheckIn.
            New parameters should be added as properties on the WorkspaceCheckInParameters object. Do not add new overloads to CheckIn.
            </summary>
            <param name="checkinParameters">An instance of WorkspaceCheckInParameters that you create to supply instructions for this
            checkin, such as (but not limited to) the items to check in, the comment associated with the changeset, and
            the associated work items.</param>
            <returns>If successful, a positive changeset number for this checkin.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PagedCheckin(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.PendingChange},System.Boolean,Microsoft.TeamFoundation.VersionControl.Client.Changeset,Microsoft.TeamFoundation.VersionControl.Client.CheckinNotificationInfo,Microsoft.TeamFoundation.VersionControl.Common.CheckInOptions2,Microsoft.TeamFoundation.VersionControl.Client.UploadedBaselinesCollection,Microsoft.TeamFoundation.VersionControl.Client.Failure[]@,Microsoft.TeamFoundation.VersionControl.Client.Failure[]@)">
            <summary>
            Wraps the checkin webmethod and calls the applicable method
            based on the server's capabilities. Called by CheckInInternal.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.CheckInOptions2FromCheckinOptions(Microsoft.TeamFoundation.VersionControl.Client.CheckinOptions)">
            <summary>
            Convert a CheckinOptions to a CheckInOptions2. The values in the enumerations
            do not line up so we cannot just cast the value.
            </summary>
            <param name="checkinOptions">CheckinOptions to convert</param>
            <returns>CheckInOptions2 with the same flags set</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Diff(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[])">
            <summary>
            Scans the workspace's contents on disk to discover any changes which are present locally but not tracked
            by Team Foundation Server.
            </summary>
            <param name="itemSpecs">ItemSpecs to scan; if null, the entire workspace will be scanned</param>
            <returns>An enumeration of WorkspaceDifference objects describing the detected changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Diff(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.String[],Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceFlags)">
            <summary>
            Scans the workspace's contents on disk to discover any changes which are present locally but not tracked
            by Team Foundation Server.
            </summary>
            <param name="itemSpecs">ItemSpecs to scan; if null, the entire workspace will be scanned</param>
            <param name="exclusions">Any globs to exclude from the scan (may be null)</param>
            <param name="flags">Flags which alter the behavior of Workspace.Diff.</param>
            <returns>An enumeration of WorkspaceDifference objects describing the detected changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.ToLocalItemSpecs(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[])">
            <summary>
            Uses the current mappings of the workspace to transform all provided itemspecs
            to local space.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.ExtendWorkingFolders(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder})">
            <summary>
            Extends the working folders provided so that they do not stop traversing below
            local item roots. One-level mappings are upgraded to recursive mappings, and
            all cloaks are removed.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.Workspace.WorkspaceItemFlags.Seen">
            <summary>
            This WorkspaceItemAndFlags was seen during the first pass.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetTfs2010DiffItemSets(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.ItemSpec})">
            <summary>
            The data reported by this method is known to be inaccurate in some cases, but we have
            no better option when talking to TFS 2010. Specifically, this method relies
            on the mappings for the workspace lining up with where the items are on disk.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.IsLocalPathMapped(System.String)">
            <summary>
            Returns true if the local item is mapped and not cloaked.
            </summary>
            <param name="localPath">The local item to check</param>
            <returns>True if the local item is mapped and not cloaked, false otherwise</returns>
            <remarks>First shipped in TFS 2005</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetServerItemForLocalItem(System.String)">
            <summary>
            Gets the corresponding server item for a local item.
            
            Throws ItemNotMappedException if the local path is not mapped in the workspace.
            Throws ItemCloakedException if the local path is cloaked in the workspace.
            </summary>
            <param name="localItem">The local item to translate</param>
            <returns>The corresponding server item for the local item</returns>
            <exception cref="T:Microsoft.TeamFoundation.VersionControl.Client.ItemNotMappedException">Thrown if the local item is not mapped in the workspace</exception>
            <exception cref="T:Microsoft.TeamFoundation.VersionControl.Client.ItemCloakedException">Thrown if the local item is cloaked in the workspace</exception>
            <remarks>First shipped in TFS 2005</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.TryGetServerItemForLocalItem(System.String)">
            <summary>
            Gets the corresponding server item for a local item.
            
            Does not throw ItemNotMappedException or ItemCloakedException.
            </summary>
            <param name="localItem">The local item to translate</param>
            <returns>The corresponding server item for the local item</returns>
            <remarks>First shipped in TFS 2005</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.TryGetServerItemForLocalItem(System.String,System.Boolean)">
            <summary>
            Gets the corresponding server item for a local item.
            
            Does not throw ItemNotMappedException or ItemCloakedException.
            </summary>
            <param name="localItem">The local item to translate</param>
            <param name="detectImplicitCloak">If true, detect and return null if the local item is
            implicitly cloaked in the workspace</param>
            <returns>The corresponding server item for the local item</returns>
            <remarks>First shipped in TFS 2012</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetWorkingFolderForLocalItem(System.String)">
            <summary>
            Gets a WorkingFolder instance describing how the local item is mapped in the workspace.
            
            The WorkingFolder is created such that the local item matches exactly. That is, the WorkingFolder is not
            necessarily identical to one of the mappings in the Folders collection of this workspace.
            
            Throws ItemNotMappedException if the local path is not mapped in the workspace.
            </summary>
            <param name="localItem">The local path for which to construct a WorkingFolder</param>
            <returns>A WorkingFolder describing how the local path is mapped in the workspace</returns>
            <exception cref="T:Microsoft.TeamFoundation.VersionControl.Client.ItemNotMappedException">Thrown if the local item is not mapped in the workspace</exception>
            <remarks>First shipped in TFS 2005</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.TryGetWorkingFolderForLocalItem(System.String)">
            <summary>
            Gets a WorkingFolder instance describing how the local item is mapped in the workspace.
            
            The WorkingFolder is created such that the local item matches exactly. That is, the WorkingFolder is not
            necessarily identical to one of the mappings in the Folders collection of this workspace.
            
            Returns null if the local item is not mapped in the workspace.
            </summary>
            <param name="localItem">A local path for which to construct a WorkingFolder</param>
            <returns>A WorkingFolder describing how the local path is mapped in the workspace, or null if the 
            local path is not mapped</returns>
            <remarks>First shipped in TFS 2005</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.TryGetServerItemForLocalItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[])">
            <summary>
            Gets the corresponding server item for a local item.
            
            Does not throw ItemNotMappedException or ItemCloakedException.
            </summary>
            <param name="localItem">The local item to translate</param>
            <param name="folders">The WorkingFolder objects to use to translate the path</param>
            <returns>The corresponding server item for the local item</returns>
            <remarks>First shipped in TFS 2010</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.TryGetServerItemForLocalItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[],System.Boolean)">
            <summary>
            Gets the corresponding server item for a local item.
            
            Does not throw ItemNotMappedException or ItemCloakedException.
            </summary>
            <param name="localItem">The local item to translate</param>
            <param name="folders">The WorkingFolder objects to use to translate the path</param>
            <param name="detectImplicitCloak">If true, detect and return null if the local item is
            implicitly cloaked in the workspace</param>
            <returns>The corresponding server item for the local item</returns>
            <remarks>First shipped in TFS 2012</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.IsServerPathMapped(System.String)">
            <summary>
            Returns true if the server item is mapped and not cloaked.
            
            This method may return a false positive for implicitly cloaked server paths.
            </summary>
            <param name="serverPath">The server item to check</param>
            <returns>True if the server item is mapped and not cloaked, false otherwise</returns>
            <remarks>First shipped in TFS 2005</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.IsServerPathMapped(System.String,System.Boolean)">
            <summary>
            Returns true if the server item is mapped and not cloaked.
            
            If detectImplicitCloak is true, this method will return false in the case that the server
            item is implicitly cloaked.
            </summary>
            <param name="serverPath">The server item to check</param>
            <param name="detectImplicitCloak">If true, detect and return false if the server item is
            implicitly cloaked in the workspace</param>
            <returns>True if the server item is mapped and not cloaked, false otherwise</returns>
            <remarks>First shipped in TFS 2010</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetLocalItemForServerItem(System.String)">
             <summary>
             Gets the corresponding local item for a server item.
            
             This method may return a false positive for implicitly cloaked server paths.
             
             Throws ItemNotMappedException if the server path is not mapped in the workspace.
             Throws ItemCloakedException if the server path is cloaked in the workspace.
             </summary>
             <param name="serverItem">The server item to translate</param>
             <returns>The corresponding local item for the server item</returns>
             <exception cref="T:Microsoft.TeamFoundation.VersionControl.Client.ItemNotMappedException">Thrown if the server item is not mapped in the workspace</exception>
             <exception cref="T:Microsoft.TeamFoundation.VersionControl.Client.ItemCloakedException">Thrown if the server item is cloaked in the workspace</exception>
             <remarks>First shipped in TFS 2005</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetLocalItemForServerItem(System.String,System.Boolean)">
            <summary>
            Gets the corresponding local item for a server item.
            
            Throws ItemNotMappedException if the server path is not mapped in the workspace.
            Throws ItemCloakedException if the server path is cloaked in the workspace.
            
            If detectImplicitCloak is true, this method will throw ItemNotMappedException if the server path
            is implicitly cloaked in the workspace.
            </summary>
            <param name="serverItem">The server item to translate</param>
            <param name="detectImplicitCloak">If true, detect and throw ItemNotMappedException if the server item is
            implicitly cloaked in the workspace</param>
            <returns>The corresponding local item for the server item</returns>
            <exception cref="T:Microsoft.TeamFoundation.VersionControl.Client.ItemNotMappedException">Thrown if the server item is not mapped in the workspace</exception>
            <exception cref="T:Microsoft.TeamFoundation.VersionControl.Client.ItemCloakedException">Thrown if the server item is cloaked in the workspace</exception>
            <remarks>First shipped in TFS 2010</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.TryGetLocalItemForServerItem(System.String)">
            <summary>
            Gets the corresponding local item for a server item.
            
            This method may return a false positive for implicitly cloaked server paths.
            
            Does not throw ItemNotMappedException or ItemCloakedException.
            </summary>
            <param name="serverItem">The server item to translate</param>
            <returns>The corresponding local item for the server item</returns>
            <remarks>First shipped in TFS 2005</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.TryGetLocalItemForServerItem(System.String,System.Boolean)">
            <summary>
            Gets the corresponding local item for a server item.
            
            If detectImplicitCloak is true, this method will return null in the case that the server
            item is implicitly cloaked.
            
            Does not throw ItemNotMappedException or ItemCloakedException.
            </summary>
            <param name="serverItem">The server item to translate</param>
            <param name="detectImplicitCloak">If true, detect and return null if the server item is
            implicitly cloaked in the workspace</param>
            <returns>The corresponding local item for the server item</returns>
            <remarks>First shipped in TFS 2010</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetWorkingFolderForServerItem(System.String)">
            <summary>
            Gets a WorkingFolder instance describing how the server item is mapped in the workspace.
            
            The WorkingFolder is created such that the server item matches exactly. That is, the WorkingFolder is not
            necessarily identical to one of the mappings in the Folders collection of this workspace.
            
            Throws ItemNotMappedException if the server path is not mapped in the workspace.
            </summary>
            <param name="serverItem">A server path in the workspace</param>
            <returns>A WorkingFolder describing how the server path is mapped in the workspace</returns>
            <exception cref="T:Microsoft.TeamFoundation.VersionControl.Client.ItemNotMappedException">Thrown if the server item is not mapped in the workspace</exception>
            <remarks>First shipped in TFS 2005</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.TryGetWorkingFolderForServerItem(System.String)">
            <summary>
            Gets a WorkingFolder instance describing how the server item is mapped in the workspace.
            
            The WorkingFolder is created such that the server item matches exactly. That is, the WorkingFolder is not
            necessarily identical to one of the mappings in the Folders collection of this workspace.
            
            Returns null if the server item is not mapped in the workspace.
            </summary>
            <param name="serverItem">A server path in the workspace</param>
            <returns>A WorkingFolder describing how the server path is mapped in the workspace, or null if the 
            server path is not mapped</returns>
            <remarks>First shipped in TFS 2005</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetWorkingFolderForServerItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[])">
            <summary>
            Gets a WorkingFolder instance describing how the server item is mapped by the provided WorkingFolder
            objects.
            
            The WorkingFolder is created such that the server item matches exactly. That is, the WorkingFolder is not
            necessarily identical to one of the mappings from the folders provided.
            
            Throws ItemNotMappedException if the server path is not mapped by the provided WorkingFolder objects.
            </summary>
            <param name="serverItem">A server path mapped by the provided WorkingFolder objects</param>
            <param name="folders">The provided WorkingFolder objects</param>
            <returns>A WorkingFolder describing how the server path is mapped by the provided WorkingFolder objects</returns>
            <exception cref="T:Microsoft.TeamFoundation.VersionControl.Client.ItemNotMappedException">Thrown if the server item is not mapped by the provided WorkingFolder objects</exception>
            <remarks>First shipped in TFS 2005</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.TryGetWorkingFolderForServerItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[])">
            <summary>
            Gets a WorkingFolder instance describing how the server item is mapped by the provided WorkingFolder
            objects.
            
            The WorkingFolder is created such that the server item matches exactly. That is, the WorkingFolder is not
            necessarily identical to one of the mappings from the folders provided.
            
            Returns null if the server path is not mapped by the provided WorkingFolder objects.
            </summary>
            <param name="serverItem">A server path mapped by the provided WorkingFolder objects</param>
            <param name="folders">The provided WorkingFolder objects</param>
            <returns>A WorkingFolder describing how the server path is mapped by the provided WorkingFolder objects</returns>
            <remarks>First shipped in TFS 2005</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.TryGetWorkingFolderForServerItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[],System.Boolean)">
            <summary>
            Gets a WorkingFolder instance describing how the server item is mapped by the provided WorkingFolder
            objects.
            
            The WorkingFolder is created such that the server item matches exactly. That is, the WorkingFolder is not
            necessarily identical to one of the mappings from the folders provided.
            
            Returns null if the server path is not mapped by the provided WorkingFolder objects.
            </summary>
            <param name="serverItem">A server path mapped by the provided WorkingFolder objects</param>
            <param name="folders">The provided WorkingFolder objects</param>
            <param name="matchPattern">If false, WorkingFolder objects with RecursionType.OneLevel are interpreted as having RecursionType.Full</param>
            <returns>A WorkingFolder describing how the server path is mapped by the provided WorkingFolder objects</returns>
            <remarks>First shipped in TFS 2008</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.#cctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.#ctor(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[],System.String,Microsoft.TeamFoundation.VersionControl.Common.WorkspaceLocation)">
            <summary>
            NOTE: This overload should only be used if this object is going to be sent to the server because
            it doesn't take in the ownerUniqueName or ownerAliases.
            </summary>
            <param name="sourceControl"></param>
            <param name="name"></param>
            <param name="owner"></param>
            <param name="comment"></param>
            <param name="workingFolders"></param>
            <param name="computer"></param>
            <param name="location"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Delete">
            <summary>
            Delete this workspace.
            </summary>
            <returns>whether the workspace was deleted successfully.  False if the operation was cancelled</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Update(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[])">
            <summary>
            Update a workspace.  The name, comment, and working folders may be changed.  The repository
            is the one referenced by changedWorkspace (workspaces cannot be moved across repositories).
            </summary>
            <param name="newName">the new name</param>
            <param name="newComment">the new comment</param>
            <param name="newMappings">the new mappings</param>
            <param name="newComputer">the new computer</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Update(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[],System.Boolean)">
            <summary>
            Update a workspace.  The name, comment, and working folders may be changed.  The repository
            is the one referenced by changedWorkspace (workspaces cannot be moved across repositories).
            </summary>
            <param name="newName">the new name</param>
            <param name="newComment">the new comment</param>
            <param name="newMappings">the new mappings</param>
            <param name="newComputer">the new computer</param>
            <param name="removeUnparentedCloaks">When true, will strip from the mappings any cloaks not parented by a mapping</param>
            ********************************************************************************************
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Update(System.String,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[],System.Boolean)">
            <summary>
            Update a workspace.  The name, comment, and working folders may be changed.  The repository
            is the one referenced by changedWorkspace (workspaces cannot be moved across repositories).
            </summary>
            <param name="newName">the new name</param>
            <param name="newOwner">the new owner</param>
            <param name="newComment">the new comment</param>
            <param name="newMappings">the new mappings</param>
            <param name="removeUnparentedCloaks">When true, will strip from the mappings any cloaks not parented by a mapping</param>
            ********************************************************************************************
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Update(System.String,System.String,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[],Microsoft.TeamFoundation.VersionControl.Client.WorkspacePermissionProfile,System.Boolean)">
            <summary>
            Update a workspace.  The name, comment, and working folders may be changed.  The repository
            is the one referenced by changedWorkspace (workspaces cannot be moved across repositories).
            </summary>
            <param name="newName">the new name</param>
            <param name="newOwner">the new owner</param>
            <param name="newComment">the new comment</param>
            <param name="newComputer">the new computer name</param>
            <param name="newMappings">the new mappings</param>
            <param name="newPermissionProfile">the new permission profile</param>
            <param name="removeUnparentedCloaks">When true, will strip from the mappings any cloaks not parented by a mapping</param>
            ********************************************************************************************
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Update(Microsoft.TeamFoundation.VersionControl.Client.UpdateWorkspaceParameters)">
            ********************************************************************************************
            <summary>
            Update a workspace using an UpdateWorkspaceParameters object as the source for update instructions.
            Only those properties on the UpdateWorkspaceParameters that you want to change need to be populated.
            </summary>
            <param name="updateWorkspaceParameters">UpdateWorkspaceParameters object with new values set</param>
            ********************************************************************************************
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.UpdateComputerName">
            <summary>
            Update the name of the computer in the repository.  This is useful when the user has renamed the machine on which
            the workspace is hosted.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Map(System.String,System.String)">
            <summary>
            Adds a working file or folder mapping associating the specified server path with a location on the local disk.
            </summary>
            <param name="serverPath">The repository path to the folder being mapped</param>
            <param name="localPath">The path to the location being mapped to</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Cloak(System.String)">
            <summary>
            Marks a file or folder in the repository as being excluded from this workspace.
            </summary>
            <param name="serverPath">The repository path to the folder being excluded</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.CreateMapping(Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder)">
            <summary>
            Adds a working file or folder mapping associating the specified server path with a location on the local disk.
            </summary>
            <param name="mapping">A WorkingFolder object associating a server path with a local path</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.DeleteMapping(Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder)">
            <summary>
            Removes a working folder mapping from the workspace.
            </summary>
            <param name="mapping">A WorkingFolder object associating a server path with a local path</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChanges">
            <summary>
            Gets all of the pending changes for the this workspace.
            </summary>
            <returns>the pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChangesEnumerable">
            <summary>
            Gets all of the pending changes for the this workspace.
            </summary>
            <returns>the pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChanges(System.String)">
            <summary>
            Gets all of the pending changes for this item in this workspace.
            </summary>
            <param name="item">The path, local or server, to the item being queried</param>
            <returns>The pending changes for the specified item in this workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChangesEnumerable(System.String)">
            <summary>
            Gets all of the pending changes for this item in this workspace.
            </summary>
            <param name="item">The path, local or server, to the item being queried</param>
            <returns>The pending changes for the specified item in this workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChanges(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Gets all of the pending changes for this item and potentially subitems in this workspace.
            </summary>
            <param name="item">The path, local or server, to the item being queried</param>
            <param name="recursion">A flag indicating whether or not to recurse</param>
            <returns>The pending changes for the specified items in this workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChangesEnumerable(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Gets all of the pending changes for this item and potentially subitems in this workspace.
            </summary>
            <param name="item">The path, local or server, to the item being queried</param>
            <param name="recursion">A flag indicating whether or not to recurse</param>
            <returns>The pending changes for the specified items in this workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChanges(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.Boolean)">
            <summary>
            Gets all of the pending changes for this item and potentially subitems in this workspace.
            </summary>
            <param name="item">The path, local or server, to the item being queried</param>
            <param name="recursion">A flag indicating whether or not to recurse</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>The pending changes for the specified items in this workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChanges(System.String[])">
            <summary>
            Gets all of the pending changes for these items in this workspace.
            </summary>
            <param name="items">A list of paths, local or server, to the items being queried</param>
            <returns>The pending changes for the specified items in this workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChanges(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Gets all of the pending changes for these items and potentially subitems in this workspace.
            </summary>
            <param name="items">A list of paths, local or server, to the items being queried</param>
            <param name="recursion">A flag indicating whether or not to recurse</param>
            <returns>The pending changes for the specified items in this workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChanges(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.Boolean)">
            <summary>
            Gets all of the pending changes for these items and potentially subitems in this workspace.
            </summary>
            <param name="items">A list of paths, local or server, to the items being queried</param>
            <param name="recursion">A flag indicating whether or not to recurse</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>The pending changes for the specified items in this workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChanges(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[])">
            <summary>
            Gets all of the pending changes for these items and potentially subitems in this workspace.
            </summary>
            <param name="itemSpecs">A list of item specifications for the items being queried</param>
            <returns>The pending changes for the specified items in this workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChangesEnumerable(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[])">
            <summary>
            Gets all of the pending changes for these items and potentially subitems in this workspace.
            </summary>
            <param name="itemSpecs">A list of item specifications for the items being queried</param>
            <returns>The pending changes for the specified items in this workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChanges(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean)">
            <summary>
            Gets all of the pending changes for these items and potentially subitems in this workspace.
            </summary>
            <param name="itemSpecs">A list of item specifications for the items being queried</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>The pending changes for the specified items in this workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChanges(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean,System.Int32,System.String)">
            <summary>
            Gets all of the pending changes for these items and potentially subitems in this workspace.
            </summary>
            <param name="itemSpecs">A list of item specifications for the items being queried</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <param name="pageSize">The maximum number of pending changes to return in this page. Fewer pending changes
            could be returned if there aren't enough pending changes for a full page.</param>
            <param name="lastChange">The server path of the last pending change in the previous page. For the first
            page this value should be null. For subsequent pages, the server path of the last pending change in the
            page should be used.</param>
            <returns>The pending changes for the specified items in this workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChanges(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
            Gets all of the pending changes for these items and potentially subitems in this workspace.
            </summary>
            <param name="itemSpecs">A list of item specifications for the items being queried</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <param name="pageSize">The maximum number of pending changes to return in this page. Fewer pending changes
            could be returned if there aren't enough pending changes for a full page.</param>
            <param name="lastChange">The server path of the last pending change in the previous page. For the first
            page this value should be null. For subsequent pages, the server path of the last pending change in the
            page should be used.</param>
            <param name="includeMergeSourceInfo">Whether to include source information about renames / merges</param>
            <returns>The pending changes for the specified items in this workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChanges(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean,System.Int32,System.String,System.Boolean,System.String[])">
            <summary>
            Gets all of the pending changes for these items and potentially subitems in this workspace.
            </summary>
            <param name="itemSpecs">A list of item specifications for the items being queried</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <param name="pageSize">The maximum number of pending changes to return in this page. Fewer pending changes
            could be returned if there aren't enough pending changes for a full page.</param>
            <param name="lastChange">The server path of the last pending change in the previous page. For the first
            page this value should be null. For subsequent pages, the server path of the last pending change in the
            page should be used.</param>
            <param name="includeMergeSourceInfo">Whether to include source information about renames / merges</param>
            <param name="itemPropertyFilters">List of property names to return on the pending change object
            if they exist.</param>
            <returns>The pending changes for the specified items in this workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChangesWithCandidates(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean,Microsoft.TeamFoundation.VersionControl.Client.PendingChange[]@)">
            <summary>
            Gets all of the pending changes and candidate changes.
            </summary>
            <param name="itemSpecs"></param>
            <param name="includeDownloadInfo"></param>
            <param name="candidateChanges"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetPendingChangesWithCandidates(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean,System.String[],Microsoft.TeamFoundation.VersionControl.Client.PendingChange[]@)">
            <summary>
            Gets all of the pending changes and candidate changes.
            </summary>
            <param name="itemSpecs"></param>
            <param name="includeDownloadInfo"></param>
            <param name="candidateChanges"></param>
            <param name="itemPropertyFilters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.QueryPendingSets(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String,System.String,System.Boolean)">
            <summary>
            Gets the pending changes for the specified query.
            </summary>
            <param name="items">the paths to query for pending changes</param>
            <param name="recursion">Recursion level for querying pending changes</param>
            <param name="queryWorkspaceName">the workspace name (may be null)</param>
            <param name="queryUserName">the user name (may be null), which is the workspace owner if the 
              workspace name is not null</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>an array of pending sets with the pending changes for the server items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.QueryPendingSets(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String,System.String,System.Boolean,System.String[])">
            <summary>
            Gets the pending changes for the specified query.
            </summary>
            <param name="items">the paths to query for pending changes</param>
            <param name="recursion">Recursion level for querying pending changes</param>
            <param name="queryWorkspaceName">the workspace name (may be null)</param>
            <param name="queryUserName">the user name (may be null), which is the 
            workspace owner if the workspace name is not null</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <param name="itemPropertyFilters">A list of property names that indicate which item 
            properties should be returned for these pending changes.</param>
            <returns>an array of pending sets with the pending changes for the server items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.QueryPendingSets(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.String,System.String,System.Boolean)">
            <summary>
            Gets the pending changes for the specified query.
            </summary>
            <param name="itemSpecs">the items</param>
            <param name="queryWorkspaceName">the workspace name (may be null)</param>
            <param name="queryUserName">the user name (may be null), which is the workspace owner if the 
              workspace name is not null</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>an array of pending sets with the pending changes for the server items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetExtendedItems(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType)">
            <summary>
            For each input ItemSpec, retrieves a list of extended items in the repository that match the specified criteria.  
            If the 'path' argument is a file, returns a set of items containing just that file.  If the 'path' is a 
            folder, returns a set of items containing all items in that folder.  If the 'path' contains a 
            wildcard character, returns a set of items in the specified folder that match the wildcard.
            </summary>
            <param name="itemSpecs">The item specifiers for the item(s) being listed, may be server or local</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to return files, folders, or both</param>
            <returns>An array of ExtendedItem arrays, each containing the matching ExtendedItem instances
            associated with each specified ItemSpec</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetExtendedItems(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions)">
            <summary>
            For each input ItemSpec, retrieves a list of extended items in the repository that match the specified criteria.  
            If the 'path' argument is a file, returns a set of items containing just that file.  If the 'path' is a 
            folder, returns a set of items containing all items in that folder.  If the 'path' contains a 
            wildcard character, returns a set of items in the specified folder that match the wildcard.
            </summary>
            <param name="itemSpecs">The item specifiers for the item(s) being listed, may be server or local</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to return files, folders, or both</param>
            <param name="getItemsOptions">Options</param>
            <returns>An array of ExtendedItem arrays, each containing the matching ExtendedItem instances
            associated with each specified ItemSpec</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetExtendedItems(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions,System.String[])">
            <summary>
            For each input ItemSpec, retrieves a list of extended items in the repository that match 
            the specified criteria. If the 'path' argument is a file, returns a set of items 
            containing just that file.  If the 'path' is a folder, returns a set of items containing 
            all items in that folder.  If the 'path' contains a wildcard character, returns a set of 
            items in the specified folder that match the wildcard.
            </summary>
            <param name="itemSpecs">The item specifiers for the item(s) being listed, may be server 
            or local</param>
            <param name="deletedState">A flag representing whether to return deleted items, 
            non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to return files, folders, or 
            both</param>
            <param name="getItemsOptions">Options</param>
            <param name="itemPropertyFilters">A list of properties to query.</param>
            <returns>An array of ExtendedItem arrays, each containing the matching ExtendedItem 
            instances associated with each specified ItemSpec</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetItems(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.Boolean,Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions)">
            <summary>
            For each provided ItemSpec, returns a corresponding WorkspaceItemSet containing data
            about items in the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.QueryConflicts(System.String[],System.Boolean)">
            <summary>
            Gets the list of conflicts that match the specified path filters.  The source and target
            local and server paths for each conflict are matched against the specified paths.
            </summary>
            <param name="pathFilters">the paths by which to filter the conflicts (local or server paths)
              </param>
            <param name="recursive">when true, the path is recursively matched with the filters</param>
            <returns>the conflicts that match the specified paths</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.QueryConflictsNoSorting(System.String[],System.Boolean)">
            <summary>
            Gets the list of conflicts that match the specified path filters.  The source and target
            local and server paths for each conflict are matched against the specified paths.
            Does not perform sorting on the result list.
            </summary>
            <param name="pathFilters">the paths by which to filter the conflicts (local or server paths)
              </param>
            <param name="recursive">when true, the path is recursively matched with the filters</param>
            <returns>the conflicts that match the specified paths</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.ResolveConflict(Microsoft.TeamFoundation.VersionControl.Client.Conflict)">
            <summary>
            Attempts to resolve a conflict according to the conflict's Resolution property.  If the
            the conflict is successfully resolved, the IsResolved property will be true.
            </summary>
            <param name="conflict">the conflict to resolve</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.ResolveConflict(Microsoft.TeamFoundation.VersionControl.Client.Conflict,Microsoft.TeamFoundation.VersionControl.Client.Conflict[]@)">
            <summary>
            Attempts to resolve a conflict according to the conflict's Resolution property.  If the
            the conflict is successfully resolved, the IsResolved property will be true.
            If resolving this conflict caused other conflicts to be deleted besides the current 
            conflict, then the list of other deleted conflicts will be returned in deltedConflicts.
            </summary>
            <param name="conflict">the conflict to resolve</param>
            <param name="resolvedConflicts">The other Conflicts that were deleted</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.ResolveConflict(Microsoft.TeamFoundation.VersionControl.Client.Conflict,Microsoft.TeamFoundation.VersionControl.Client.Conflict[]@,System.String[])">
            <summary>
            Attempts to resolve a conflict according to the conflict's Resolution property.  If the
            the conflict is successfully resolved, the IsResolved property will be true.
            If resolving this conflict caused other conflicts to be deleted besides the current 
            conflict, then the list of other deleted conflicts will be returned in resolvedConflicts.
            </summary>
            <param name="conflict">the conflict to resolve</param>
            <param name="resolvedConflicts">The other Conflicts that were deleted</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.ResolveConflict(Microsoft.TeamFoundation.VersionControl.Client.Conflict,Microsoft.TeamFoundation.VersionControl.Client.Conflict[]@,System.String[],System.String[])">
            <summary>
            Attempts to resolve a conflict according to the conflict's Resolution property.  If the
            the conflict is successfully resolved, the IsResolved property will be true.
            If resolving this conflict caused other conflicts to be deleted besides the current 
            conflict, then the list of other deleted conflicts will be returned in resolvedConflicts.
            </summary>
            <param name="conflict">the conflict to resolve</param>
            <param name="resolvedConflicts">The other Conflicts that were deleted</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.ResolveConflicts(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.Conflict},System.String[],Microsoft.TeamFoundation.VersionControl.Client.Conflict[]@)">
            <summary>
            Attempts to resolve a conflict according to the conflict's Resolution property.  If the
            the conflict is successfully resolved, the IsResolved property will be true.
            If resolving these conflicts caused other conflicts to be deleted besides the current 
            conflicts, then the list of other deleted conflicts will be returned in resolvedConflicts.
            
            Note: For this method, all resolution options for the conflicts must be the same.
            </summary>
            <param name="conflicts">the conflicts to resolve</param>
            <param name="resolvedConflicts">The other Conflicts that were deleted</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <param name="failures">Any failures that occurred while resolving conflicts.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.ResolveConflicts(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.Conflict},System.String[],System.String[],Microsoft.TeamFoundation.VersionControl.Client.Conflict[]@)">
            <summary>
            Attempts to resolve a conflict according to the conflict's Resolution property.  If the
            the conflict is successfully resolved, the IsResolved property will be true.
            If resolving these conflicts caused other conflicts to be deleted besides the current 
            conflicts, then the list of other deleted conflicts will be returned in resolvedConflicts.
            
            Note: For this method, all resolution options for the conflicts must be the same.
            </summary>
            <param name="conflicts">the conflicts to resolve</param>
            <param name="resolvedConflicts">The other Conflicts that were deleted</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <param name="failures">Any failures that occurred while resolving conflicts.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.ResolveConflicts(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.Conflict},System.String[],System.String[],Microsoft.TeamFoundation.VersionControl.Common.ResolveErrorOptions,Microsoft.TeamFoundation.VersionControl.Client.Conflict[]@)">
            <summary>
            Attempts to resolve a conflict according to the conflict's Resolution property.  If the
            the conflict is successfully resolved, the IsResolved property will be true.
            If resolving these conflicts caused other conflicts to be deleted besides the current 
            conflicts, then the list of other deleted conflicts will be returned in resolvedConflicts.
            
            Note: For this method, all resolution options for the conflicts must be the same.
            </summary>
            <param name="conflicts">the conflicts to resolve</param>
            <param name="resolvedConflicts">The other Conflicts that were deleted</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <param name="failures">Any failures that occurred while resolving conflicts.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Rollback(Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Common.RollbackOptions)">
            <summary>
            Pends a rollback for all changes between the specified versions
            </summary>
            <param name="versionFrom">The version we are rolling back from</param>
            <param name="versionTo">The version we are rolling back to</param>
            <param name="lockLevel">The lock level to apply to each item being rolled back</param>
            <param name="options">Options to use</param>
            <returns>Status information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Rollback(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Common.RollbackOptions,System.String[])">
            <summary>
            Pends a rollback for changes which happened to a certain path, within the specified versions
            </summary>
            <param name="paths">Array of path filters to apply</param>
            <param name="RecursionType">Recursion to use for path filters</param>
            <param name="itemSpecVersion">The version spec used to identify the item the user is referring to</param>
            <param name="versionFrom">The version we are rolling back from</param>
            <param name="versionTo">The version we are rolling back to</param>
            <param name="lockLevel">The lock level to apply to each item being rolled back</param>
            <param name="options">Options to use.</param>
            <param name="itemAttributeFilters">Array of properties to include for each get operation.</param>
            <returns>Status information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Rollback(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Common.RollbackOptions,System.String[],System.String[])">
            <summary>
            Pends a rollback for changes which happened to a certain path, within the specified versions
            </summary>
            <param name="paths">Array of path filters to apply</param>
            <param name="RecursionType">Recursion to use for path filters</param>
            <param name="itemSpecVersion">The version spec used to identify the item the user is referring to</param>
            <param name="versionFrom">The version we are rolling back from</param>
            <param name="versionTo">The version we are rolling back to</param>
            <param name="lockLevel">The lock level to apply to each item being rolled back</param>
            <param name="options">Options to use.</param>
            <param name="itemAttributeFilters">Array of properties to include for each get operation.</param>
            <returns>Status information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Shelve(Microsoft.TeamFoundation.VersionControl.Client.Shelveset,Microsoft.TeamFoundation.VersionControl.Client.PendingChange[],Microsoft.TeamFoundation.VersionControl.Client.ShelvingOptions)">
            <summary>
            Collects a set of pending changes and shelves them to the server so they can be later reproduced
            as pending changes in this or another workspace.
            </summary>
            <param name="shelveset">The shelveset (name, owner)</param>
            <param name="changes">A list of pending changes to shelve</param>
            <param name="options">Various options for the shelving command</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.BuildEmptyLastSavedCheckin">
            <summary>
            Build an empty SavedCheckin with the existing excluded server paths preserved
            </summary>
            <returns>saved checkin</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Unshelve(System.String,System.String)">
            <summary>
            Reproduces in this workspace a set of pending changes that have been previously shelved to the server. 
            </summary>
            <param name="shelvesetName">The name of the shelveset to unshelve</param>
            <param name="shelvesetOwner">The name of the user who created the shelveset</param>
            <returns>The shelveset that was unshelved</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Unshelve(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[])">
            <summary>
            Reproduces in this workspace a set of pending changes that have been previously shelved to the server. 
            </summary>
            <param name="shelvesetName">The name of the shelveset to unshelve</param>
            <param name="shelvesetOwner">The name of the user who created the shelveset</param>
            <param name="items">A list of files and/or folders within the shelveset that should be
              unshelved or null for all</param>
            <returns>The shelveset that was unshelved</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Unshelve(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.PendingChange[]@)">
            <summary>
            Reproduces in this workspace a set of pending changes that have been previously shelved to the server. 
            </summary>
            <param name="shelvesetName">The name of the shelveset to unshelve</param>
            <param name="shelvesetOwner">The name of the user who created the shelveset</param>
            <param name="items">A list of files and/or folders within the shelveset that should be
              unshelved or null for all</param>
            <param name="changes">Return the set of unshelved pending changes</param>
            <returns>The shelveset that was unshelved</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Unshelve(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.PendingChange[]@,System.String[])">
            <summary>
            Reproduces in this workspace a set of pending changes that have been previously shelved to the server. 
            </summary>
            <param name="shelvesetName">The name of the shelveset to unshelve</param>
            <param name="shelvesetOwner">The name of the user who created the shelveset</param>
            <param name="items">A list of files and/or folders within the shelveset that should be
              unshelved or null for all</param>
            <param name="changes">Return the set of unshelved pending changes</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <returns>The shelveset that was unshelved</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Unshelve(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.String[],System.String[],System.String[],System.Boolean,System.Boolean,Microsoft.TeamFoundation.VersionControl.Client.PendingChange[]@,Microsoft.TeamFoundation.VersionControl.Client.Conflict[]@)">
            <summary>
            Reproduces in this workspace a set of pending changes that have been previously 
            shelved to the server. 
            </summary>
            <param name="shelvesetName">The name of the shelveset to unshelve</param>
            <param name="shelvesetOwner">The name of the user who created the shelveset</param>
            <param name="items">A list of files and/or folders within the shelveset that should be
              unshelved or null for all</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with
            each get operation</param>
            <param name="shelvesetPropertyNameFilters">The list of properties to be returned on 
            the shelvesets. To get all properties pass a single filter that is simply "*".</param>
            <param name="merge">True if "merge" should be performed when unshelving. This will file
            merge and version conflicts for items that have conflicting pending changes and different
            pended versions respectively.</param>
            <param name="noAutoResolve">Prevents any conflicts from being auto resolved even if the
            option is set in the registry.</param>
            <param name="changes">Return the set of unshelved pending changes</param>
            <param name="conflicts">The list of conflicts that were generated by the unshelve operation.
            Conflicts are only filed if the merge parameter is true.  In the case where merge is false
            an empty array will be returned.</param>
            <returns>The shelveset that was unshelved</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.QueryShelvedChanges(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[])">
            <summary>
            Gets the shelved changes for the specified query.
            </summary>
            <param name="shelvesetName">the shelveset name (may be null)</param>
            <param name="shelvesetOwner">the user name (may be null), which is the shelveset owner if
              the shelveset name is not null</param>
            <param name="itemSpecs">the items</param>
            <returns>an array of pending sets with the pending changes for the shelved changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.QueryShelvedChanges(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean)">
            <summary>
            Gets the shelved changes for the specified query.
            </summary>
            <param name="shelvesetName">the shelveset name (may be null)</param>
            <param name="shelvesetOwner">the user name (may be null), which is the shelveset owner if
              the shelveset name is not null</param>
            <param name="itemSpecs">the items</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>an array of pending sets with the pending changes for the shelved changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.QueryShelvedChanges(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean,System.String[])">
            <summary>
            Gets the shelved changes for the specified query.
            </summary>
            <param name="shelvesetName">the shelveset name (may be null)</param>
            <param name="shelvesetOwner">the user name (may be null), which is the shelveset owner if
              the shelveset name is not null</param>
            <param name="itemSpecs">the items</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <param name="itemPropertyFilters">List of property names to retrieve for the PendingChanges.
            </param>
            <returns>an array of pending sets with the pending changes for the shelved changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.QueueForEdit(System.String)">
            <summary>
            Marks the provided local item for check-out the next time we would make a call to the server.
            This method is only supported for server workspaces.
            </summary>
            <param name="localItem">Local item to check out</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.UnqueueForEdit(System.String)">
            <summary>
            Unmarks the provided local item for check-out the next time we would make a call to the server.
            This method is only supported for server workspaces.
            </summary>
            <param name="localItem">Local item which should no longer be queued for check-out</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.UpdateLastSavedCheckin(Microsoft.TeamFoundation.VersionControl.Client.Shelveset)">
            <summary>
            Updates the last attempted checkin information with the information from the shelveset.
            </summary>
            <param name="shelveset">the shelveset</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.UpdateLastSavedCheckin(Microsoft.TeamFoundation.VersionControl.Client.Shelveset,Microsoft.TeamFoundation.VersionControl.Client.PendingChange[])">
            <summary>
            Updates the last attempted checkin information with the information from the shelveset
            and ensures that the specified set of pending changes have a checked state set.
            </summary>
            <param name="shelveset">The shelveset containing the desired metadata</param>
            <param name="unshelvedChanges">The pending changes that where unshelved</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendAdd(System.String)">
            <summary>
            Queues files or a folder for addition to the repository.
            </summary>
            <param name="path">A local path representing the items to be added.  This path can contain wildcards</param>
            <returns>The number of files or folders queued for addition</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendAdd(System.String,System.Boolean)">
            <summary>
            Queues files or folders for addition to the repository.  This method can recurse through the specified path
            to queue subitems as well as the items matched by the specified path.
            </summary>
            <param name="path">A local path representing the items to be added.  This path can contain wildcards</param>
            <param name="isRecursive">A boolean value indicating whether or not to recurse.  Why don't we use "RecursionType" here???</param>
            <returns>The number of files or folders queued for addition</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendAdd(System.String[])">
            <summary>
            Queues files or folders for addition to the repository.
            </summary>
            <param name="paths">A list of paths representing items that should be added.  These paths can contain wildcards</param>
            <returns>The number of files or folders queued for addition</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendAdd(System.String[],System.Boolean)">
            <summary>
            Queues files or folders for addition to the repository.  This method can recurse through the specified path
            to queue subitems as well as the items matched by the specified path.
            </summary>
            <param name="paths">A list of paths representing items that should be added.
              These paths can contain wildcards</param>
            <param name="isRecursive">A boolean value indicating whether or not to recurse</param>
            <returns>The number of files or folders queued for addition</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendAdd(System.String[],System.Boolean,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel)">
            <summary>
            Queues files or folders for addition to the repository.  This method can recurse through the specified path
            to queue subitems as well as the items matched by the specified path.
            </summary>
            <param name="paths">A list of paths representing items that should be added.
              These paths can contain wildcards</param>
            <param name="isRecursive">A boolean value indicating whether or not to recurse</param>
            <param name="fileType">if non-null, the file type for the new item</param>
            <param name="lockLevel">the lock level to apply to each file added</param>
            <returns>The number of files or folders queued for addition</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendAdd(System.String[],System.Boolean,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean)">
            <summary>
            Queues files or folders for addition to the repository.  This method can recurse through the specified path
            to queue subitems as well as the items matched by the specified path.
            </summary>
            <param name="paths">A list of paths representing items that should be added.
              These paths can contain wildcards</param>
            <param name="isRecursive">A boolean value indicating whether or not to recurse</param>
            <param name="fileType">if non-null, the file type for the new item</param>
            <param name="lockLevel">the lock level to apply to each file added</param>
            <param name="treatMissingItemsAsFiles">whether items missing on disk should be assumed to be files</param>
            <returns>The number of files or folders queued for addition</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendAdd(System.String[],System.Boolean,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean)">
            <summary>
            Queues files or folders for addition to the repository.  This method can recurse through the specified path
            to queue subitems as well as the items matched by the specified path.
            </summary>
            <param name="paths">A list of paths representing items that should be added.
              These paths can contain wildcards</param>
            <param name="isRecursive">A boolean value indicating whether or not to recurse</param>
            <param name="fileType">if non-null, the file type for the new item</param>
            <param name="lockLevel">the lock level to apply to each file added</param>
            <param name="treatMissingItemsAsFiles">whether items missing on disk should be assumed to be files</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <returns>The number of files or folders queued for addition</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendAdd(System.String[],System.Boolean,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Queues files or folders for addition to the repository.  This method can recurse through the specified path
            to queue subitems as well as the items matched by the specified path.
            </summary>
            <param name="paths">A list of paths representing items that should be added.
              These paths can contain wildcards</param>
            <param name="isRecursive">A boolean value indicating whether or not to recurse</param>
            <param name="fileType">if non-null, the file type for the new item</param>
            <param name="lockLevel">the lock level to apply to each file added</param>
            <param name="treatMissingItemsAsFiles">whether items missing on disk should be assumed to be files</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <param name="applyLocalItemExclusions">If true, applies the local item exlusion lists for items
            found by searching in a directory or matching a wildcard.</param>
            <returns>The number of files or folders queued for addition</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendAdds(Microsoft.TeamFoundation.VersionControl.Client.ChangeRequest[],Microsoft.TeamFoundation.VersionControl.Client.Workspace.AsyncPendAddOperation,System.Boolean)">
            <summary>
            Send the list of pending adds to the server.
            </summary>
            <param name="changeRequests">the list of change requests</param>
            <param name="asyncOp">the asynchronous add operation that owns the overall add</param>
            <param name="silent">Specifies whether server should return get ops</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendDelete(System.String)">
            <summary>
            Queues files or folders for deletion from the repository.
            </summary>
            <param name="path">A path, local or server, representing the items to be deleted.  
              This path can contain wildcards</param>
            <returns>The number of files or folders queued for deletion</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendDelete(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Queues files or folders for deletion from the repository.  This method can recurse through the specified path
            to queue subitems as well as the items matched by the specified path.
            </summary>
            <param name="path">A path, local or server, representing the items to be deleted.  
              This path can contain wildcards</param>
            <param name="recursion">A value indicating whether or not to recurse</param>
            <returns>The number of files or folders queued for deletion</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendDelete(System.String[])">
            <summary>
            Queues files or folders for deletion from the repository.
            </summary>
            <param name="paths">A list of paths, local or server, representing items to be deleted</param>
            <returns>The number of files or folders queued for deletion</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendDelete(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Queues files or folders for deletion from the repository and deletes them in the local workspace.
            This method can recurse through the specified path to queue subitems as well as the items matched 
            by the specified path.
            </summary>
            <param name="paths">A list of paths, local or server, representing items to be deleted</param>
            <param name="recursion">A value indicating whether or not to recurse</param>
            <returns>The number of files or folders queued for deletion</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendDelete(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.LockLevel)">
            <summary>
            Queues files or folders for deletion from the repository and deletes them in the local workspace.
            This method can recurse through the specified path to queue subitems as well as the items matched 
            by the specified path.
            </summary>
            <param name="paths">A list of paths, local or server, representing items to be deleted</param>
            <param name="recursion">recursion level</param>
            <param name="lockLevel">the lock level to apply to each item</param>
            <returns>The number of files or folders queued for deletion</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendDelete(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean)">
            <summary>
            Queues files or folders for deletion from the repository and deletes them in the local workspace.
            This method can recurse through the specified path to queue subitems as well as the items matched 
            by the specified path.
            </summary>
            <param name="paths">A list of paths, local or server, representing items to be deleted</param>
            <param name="recursion">recursion level</param>
            <param name="lockLevel">the lock level to apply to each item</param>
            <param name="updateDisk">Specifies whether the deleted files should be deleted on the local disk</param>
            <returns>The number of files or folders queued for deletion</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendDelete(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean)">
            <summary>
            Queues files or folders for deletion from the repository and deletes them in the local workspace.
            This method can recurse through the specified path to queue subitems as well as the items matched 
            by the specified path.
            </summary>
            <param name="paths">A list of paths, local or server, representing items to be deleted</param>
            <param name="recursion">recursion level</param>
            <param name="lockLevel">the lock level to apply to each item</param>
            <param name="updateDisk">Specifies whether the deleted files should be deleted on the local disk</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <returns>The number of files or folders queued for deletion</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendDelete(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Queues files or folders for deletion from the repository and deletes them in the local workspace.
            This method can recurse through the specified path to queue subitems as well as the items matched 
            by the specified path.
            </summary>
            <param name="paths">A list of paths, local or server, representing items to be deleted</param>
            <param name="recursion">recursion level</param>
            <param name="lockLevel">the lock level to apply to each item</param>
            <param name="updateDisk">Specifies whether the deleted files should be deleted on the local disk</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <param name="itemAttributeFilters">List of properties to return with get ops</param>
            <returns>The number of files or folders queued for deletion</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendDelete(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean,System.String[],System.String[])">
            <summary>
            Queues files or folders for deletion from the repository and deletes them in the local workspace.
            This method can recurse through the specified path to queue subitems as well as the items matched 
            by the specified path.
            </summary>
            <param name="paths">A list of paths, local or server, representing items to be deleted</param>
            <param name="recursion">recursion level</param>
            <param name="lockLevel">the lock level to apply to each item</param>
            <param name="updateDisk">Specifies whether the deleted files should be deleted on the local disk</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <param name="itemAttributeFilters">List of properties to return with get ops</param>
            <returns>The number of files or folders queued for deletion</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendUndelete(System.String,System.Int32,System.String)">
            <summary>
            Queues files or folders for undeletion from the repository and optionally restores them 
            in the current workspace.
            </summary>
            <param name="path">the items to undelete (multiple with 
              wildcards); both server and local paths are allowed</param>
            <param name="deletionId">deletion id for the item to undelete</param>
            <param name="newPath">optional new path for the item to undelete</param>
            <returns>the number of pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendUndelete(System.String,System.Int32,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean)">
            <summary>
            Queues files or folders for undeletion from the repository and optionally restores them 
            in the current workspace.
            </summary>
            <param name="path">the items to undelete (multiple with 
              wildcards); both server and local paths are allowed</param>
            <param name="deletionId">deletion id for the item to undelete</param>
            <param name="newPath">optional new path for the item to undelete</param>
            <param name="lockLevel">the lock level to apply to each item</param>
            <param name="updateDisk">for undelete, whether to retrieve undeleted items from the
              repository and/or create directories on disk; when false, the local disk is not altered</param>
            <returns>the number of pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendUndelete(System.String,System.Int32,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean)">
            <summary>
            Queues files or folders for undeletion from the repository and optionally restores them 
            in the current workspace.
            </summary>
            <param name="path">the items to undelete (multiple with 
              wildcards); both server and local paths are allowed</param>
            <param name="deletionId">deletion id for the item to undelete</param>
            <param name="newPath">optional new path for the item to undelete</param>
            <param name="lockLevel">the lock level to apply to each item</param>
            <param name="updateDisk">for undelete, whether to retrieve undeleted items from the
              repository and/or create directories on disk; when false, the local disk is not altered</param>
            <param name="detectFolderAtTarget">if true, look for a local folder existing at the target and
              tell the server if that is the case; otherwise, do not check</param>
            <returns>the number of pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendUndelete(System.String,System.Int32,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Queues files or folders for undeletion from the repository and optionally restores them 
            in the current workspace.
            </summary>
            <param name="path">the items to undelete (multiple with 
              wildcards); both server and local paths are allowed</param>
            <param name="deletionId">deletion id for the item to undelete</param>
            <param name="newPath">optional new path for the item to undelete</param>
            <param name="lockLevel">the lock level to apply to each item</param>
            <param name="updateDisk">for undelete, whether to retrieve undeleted items from the
              repository and/or create directories on disk; when false, the local disk is not altered</param>
            <param name="detectFolderAtTarget">if true, look for a local folder existing at the target and
              tell the server if that is the case; otherwise, do not check</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <returns>the number of pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendUndelete(System.String,System.Int32,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Queues files or folders for undeletion from the repository and optionally restores them 
            in the current workspace.
            </summary>
            <param name="path">the items to undelete (multiple with 
              wildcards); both server and local paths are allowed</param>
            <param name="deletionId">deletion id for the item to undelete</param>
            <param name="newPath">optional new path for the item to undelete</param>
            <param name="lockLevel">the lock level to apply to each item</param>
            <param name="updateDisk">for undelete, whether to retrieve undeleted items from the
              repository and/or create directories on disk; when false, the local disk is not altered</param>
            <param name="detectFolderAtTarget">if true, look for a local folder existing at the target and
              tell the server if that is the case; otherwise, do not check</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <param name="itemAttributeFilters">List of the property name filters to return with get ops.</param>
            <returns>the number of pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendUndelete(System.String,System.Int32,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean,System.Boolean,System.String[],System.String[])">
            <summary>
            Queues files or folders for undeletion from the repository and optionally restores them 
            in the current workspace.
            </summary>
            <param name="path">the items to undelete (multiple with 
              wildcards); both server and local paths are allowed</param>
            <param name="deletionId">deletion id for the item to undelete</param>
            <param name="newPath">optional new path for the item to undelete</param>
            <param name="lockLevel">the lock level to apply to each item</param>
            <param name="updateDisk">for undelete, whether to retrieve undeleted items from the
              repository and/or create directories on disk; when false, the local disk is not altered</param>
            <param name="detectFolderAtTarget">if true, look for a local folder existing at the target and
              tell the server if that is the case; otherwise, do not check</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <param name="itemAttributeFilters">List of the property name filters to return with get ops.</param>
            <returns>the number of pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendUndelete(System.String,System.Int32)">
            <summary>
            Queues files or folders for undeletion from the repository and optionally restores them in
            the current workspace.
            </summary>
            <param name="path">the items to undelete (multiple with 
              wildcards); both server and local paths are allowed</param>
            <param name="deletionId">deletion id for the item to undelete</param>
            <returns>The number of files queued for undeletion</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendUndelete(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean)">
            <summary>
            Queues files or folders for undeletion from the repository and optionally restores them in
            the current workspace.
            </summary>
            <param name="path">the items to undelete (multiple with 
              wildcards); both server and local paths are allowed</param>
            <param name="deletionId">deletion id for the item to undelete</param>
            <param name="lockLevel">the lock level to apply to each item</param>
            <param name="updateDisk">Specifies whether the undeleted files or folders should be restored
              on the local disk</param>
            <returns>The number of files queued for undeletion</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendUndelete(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean)">
            <summary>
            Queues files or folders for undeletion from the repository and optionally restores them in
            the current workspace.
            </summary>
            <param name="itemSpecs">A list of deleted items to restore in the repository</param>
            <param name="lockLevel">the lock level to apply to each item</param>
            <param name="updateDisk">Specifies whether the undeleted files or folders should be restored
              on the local disk</param>
            <param name="detectFolderAtTarget">if true, look for a local folder existing at the target and
              tell the server if that is the case; otherwise, do not check</param>
            <returns>The number of files queued for undeletion</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendUndelete(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Queues files or folders for undeletion from the repository and optionally restores them in
            the current workspace.
            </summary>
            <param name="itemSpecs">A list of deleted items to restore in the repository</param>
            <param name="lockLevel">the lock level to apply to each item</param>
            <param name="updateDisk">Specifies whether the undeleted files or folders should be restored
              on the local disk</param>
            <param name="detectFolderAtTarget">if true, look for a local folder existing at the target and
              tell the server if that is the case; otherwise, do not check</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <returns>The number of files queued for undeletion</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendEdit(System.String)">
            <summary>
            Checks out files for editing from the repository.
            </summary>
            <param name="path">The path, local or server, to the items being checked out.  This path 
              may contain wildcards</param>
            <returns>The number of files checked out</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendEdit(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Checks out files for editing from the repository.
            </summary>
            <param name="path">The path, local or server, to the items being checked out.  This path 
              may contain wildcards</param>
            <param name="recursion">Determines whether the checkout will operate recursively</param>
            <returns>The number of files checked out</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendEdit(System.String[])">
            <summary>
            Checks out files for editing from the repository.
            Note that fileSpec may have wildcards only in the last element of the path (e.g., 
            c:\foo*z\baz\xyz is not allowed, but c:\foo\baz\*.cs is).
            </summary>
            <param name="paths">A list of paths, local or server, to checkout for editing</param>
            <returns>The number of files checked out</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendEdit(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Checks out files for editing from the repository.
            Note that fileSpec may have wildcards only in the last element of the path (e.g., 
            c:\foo*z\baz\xyz is not allowed, but c:\foo\baz\*.cs is).
            </summary>
            <param name="paths">A list of paths, local or server, to checkout for editing</param>
            <param name="recursion">recursion level</param>
            <returns>The number of files checked out</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendEdit(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel)">
            <summary>
            Checks out files for editing from the repository.
            Note that fileSpec may have wildcards only in the last element of the path (e.g., 
            c:\foo*z\baz\xyz is not allowed, but c:\foo\baz\*.cs is).
            </summary>
            <param name="paths">A list of paths, local or server, to checkout for editing</param>
            <param name="recursion">recursion level</param>
            <param name="fileType">if non-null, the new file type</param>
            <param name="lockLevel">the lock level to apply to each file checked out</param>
            <returns>The number of files checked out</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendEdit(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean)">
            <summary>
            Checks out files for editing from the repository.
            Note that fileSpec may have wildcards only in the last element of the path (e.g., 
            c:\foo*z\baz\xyz is not allowed, but c:\foo\baz\*.cs is).
            </summary>
            <param name="paths">A list of paths, local or server, to checkout for editing</param>
            <param name="recursion">recursion level</param>
            <param name="fileType">if non-null, the new file type</param>
            <param name="lockLevel">the lock level to apply to each file checked out</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <returns>The number of files checked out</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendEdit(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,Microsoft.TeamFoundation.VersionControl.Common.PendChangesOptions)">
            <summary>
            Checks out files for editing from the repository.
            Note that fileSpec may have wildcards only in the last element of the path (e.g., 
            c:\foo*z\baz\xyz is not allowed, but c:\foo\baz\*.cs is).
            </summary>
            <param name="paths">A list of paths, local or server, to checkout for editing</param>
            <param name="recursion">recursion level</param>
            <param name="fileType">if non-null, the new file type</param>
            <param name="lockLevel">the lock level to apply to each file checked out</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <param name="options">The set of PendChanges options. Some relevant flags for PendEdit are:
            GetLatestOnCheckout: Pend an edit against the latest version of the item instead of the workspace version.
            </param>
            <returns>The number of files checked out</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendEdit(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,Microsoft.TeamFoundation.VersionControl.Common.PendChangesOptions,System.String[])">
            <summary>
            Checks out files for editing from the repository.
            Note that fileSpec may have wildcards only in the last element of the path (e.g., 
            c:\foo*z\baz\xyz is not allowed, but c:\foo\baz\*.cs is).
            </summary>
            <param name="paths">A list of paths, local or server, to checkout for editing</param>
            <param name="recursion">recursion level</param>
            <param name="fileType">if non-null, the new file type</param>
            <param name="lockLevel">the lock level to apply to each file checked out</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <param name="options">The set of PendChanges options. Some relevant flags for PendEdit are:
            GetLatestOnCheckout: Pend an edit against the latest version of the item instead of the workspace version.
            </param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <returns>The number of files checked out</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendEdit(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,Microsoft.TeamFoundation.VersionControl.Common.PendChangesOptions,System.String[],System.String[])">
            <summary>
            Checks out files for editing from the repository.
            Note that fileSpec may have wildcards only in the last element of the path (e.g., 
            c:\foo*z\baz\xyz is not allowed, but c:\foo\baz\*.cs is).
            </summary>
            <param name="paths">A list of paths, local or server, to checkout for editing</param>
            <param name="recursion">recursion level</param>
            <param name="fileType">if non-null, the new file type</param>
            <param name="lockLevel">the lock level to apply to each file checked out</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <param name="options">The set of PendChanges options. Some relevant flags for PendEdit are:
            GetLatestOnCheckout: Pend an edit against the latest version of the item instead of the workspace version.
            </param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <returns>The number of files checked out</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendPropertyChange(System.String,Microsoft.TeamFoundation.Framework.Client.PropertyValue,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.LockLevel)">
            <summary>
            Pends changes on the passed in path giving it the passed in properties.
            
            Note, property changes are merged with existing properties on the server. To delete
            an existing property pass in a property with the desired name and a value of null.
            </summary>
            <param name="path">The path to pend the property changes on.</param>
            <param name="properties">The properties to pend as changes.</param>
            <param name="recursion">The amount of recursion to use on the items.</param>
            <param name="lockLevel">The lock level to place on the resulting pending change.</param>
            <returns>The number of files checked out</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendPropertyChange(System.String,Microsoft.TeamFoundation.Framework.Client.PropertyValue[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.LockLevel)">
            <summary>
            Pends changes on the passed in path giving it the passed in properties.
            
            Note, property changes are merged with existing properties on the server. To delete
            an existing property pass in a property with the desired name and a value of null.
            </summary>
            <param name="path">The path to pend the property changes on.</param>
            <param name="properties">The properties to pend as changes.</param>
            <param name="recursion">The amount of recursion to use on the items.</param>
            <param name="lockLevel">The lock level to place on the resulting pending change.</param>
            <returns>The number of files checked out</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendPropertyChange(System.String[],Microsoft.TeamFoundation.Framework.Client.PropertyValue,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.LockLevel)">
            <summary>
            Pends changes on the passed in paths giving each of them the passed in property.
            
            Note, property changes are merged with existing properties on the server. To delete
            an existing property pass in a property with the desired name and a value of null.
            </summary>
            <param name="paths">The paths to pend the property changes on.</param>
            <param name="property">The property to pend as a change.</param>
            <param name="recursion">The amount of recursion to use on the items.</param>
            <param name="lockLevel">The lock level to place on the resulting pending change.</param>
            <returns>The number of files checked out</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendPropertyChange(System.String[],Microsoft.TeamFoundation.Framework.Client.PropertyValue[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Common.PendChangesOptions,System.String[],System.String[])">
            <summary>
            Pends changes on the passed in paths giving each of them the passed in properties.
            
            Note, property changes are merged with existing properties on the server. To delete
            an existing property pass in a property with the desired name and a value of null.
            </summary>
            <param name="paths">The paths to pend the property changes on.</param>
            <param name="properties">The properties to pend as changes.</param>
            <param name="recursion">The amount of recursion to use on the items.</param>
            <param name="lockLevel">The lock level to place on the resulting pending change.</param>
            <param name="options">The set of PendChanges options. Some relevant flags 
            for PendPropertyChange are:
            Silent: Don't return GetOps for the changes pended.
            </param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <returns>The number of files checked out</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendPropertyChange(Microsoft.TeamFoundation.VersionControl.Client.ItemProperties[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Common.PendChangesOptions,System.String[],System.String[])">
            <summary>
            Pends changes on the passed in paths giving each of them the passed in properties.
            
            Note, property changes are merged with existing properties on the server. To delete
            an existing property pass in a property with the desired name and a value of null.
            </summary>
            <param name="specs">The property changes to make</param>
            <param name="recursion">The amount of recursion to use on the items.</param>
            <param name="lockLevel">The lock level to place on the resulting pending change.</param>
            <param name="options">The set of PendChanges options. Some relevant flags 
            for PendPropertyChange are:
            Silent: Don't return GetOps for the changes pended.
            </param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <returns>The number of files checked out</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendRename(System.String,System.String)">
            <summary>
            Queues an item for renaming or moving in the repository and renames it locally on disk.
            </summary>
            <param name="oldPath">The current path, local or server, to the item being renamed.
              This path may contain wildcards if the destination is a folder</param>
            <param name="newPath">The new path, local or server, for the item</param>
            <returns>The number of items renamed</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendRename(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean)">
            <summary>
            Moves or renames a file or directory.  The source may contain wildcards if the target is
            a directory.  The target may never have wildcards.  If the target is an existing directory,
            the source will be moved to be a child of the target.
            </summary>
            <param name="oldPath">The current path, local or server, to the item being renamed.
              This path may contain wildcards if the destination is a folder</param>
            <param name="newPath">The new path, local or server, for the item</param>
            <param name="lockLevel">The level of locking for the pending change</param>
            <param name="updateDisk">if true, the local disk is updated according to the pending changes;
              if false, the disk is not modified and changes are not acknowledged</param>
            <param name="detectFolderAtTarget">if true, look for a local folder existing at the target and
              tell the server if that is the case; otherwise, do not check</param>
            <returns>The number of items renamed</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendRename(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Moves or renames a file or directory.  The source may contain wildcards if the target is
            a directory.  The target may never have wildcards.  If the target is an existing directory,
            the source will be moved to be a child of the target.
            </summary>
            <param name="oldPath">The current path, local or server, to the item being renamed.
              This path may contain wildcards if the destination is a folder</param>
            <param name="newPath">The new path, local or server, for the item</param>
            <param name="lockLevel">The level of locking for the pending change</param>
            <param name="updateDisk">if true, the local disk is updated according to the pending changes;
              if false, the disk is not modified and changes are not acknowledged</param>
            <param name="detectFolderAtTarget">if true, look for a local folder existing at the target and
              tell the server if that is the case; otherwise, do not check</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <returns>The number of items renamed</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendRename(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Moves or renames a file or directory.  The source may contain wildcards if the target is
            a directory.  The target may never have wildcards.  If the target is an existing directory,
            the source will be moved to be a child of the target.
            </summary>
            <param name="oldPath">The current path, local or server, to the item being renamed.
              This path may contain wildcards if the destination is a folder</param>
            <param name="newPath">The new path, local or server, for the item</param>
            <param name="lockLevel">The level of locking for the pending change</param>
            <param name="updateDisk">if true, the local disk is updated according to the pending changes;
              if false, the disk is not modified and changes are not acknowledged</param>
            <param name="detectFolderAtTarget">if true, look for a local folder existing at the target and
              tell the server if that is the case; otherwise, do not check</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <param name="itemAttributeFilters">A list of versioned item attributes to return with each 
            get operation</param>
            <returns>The number of items renamed</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendRename(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean,Microsoft.TeamFoundation.VersionControl.Common.PendChangesOptions,System.String[])">
            <summary>
            Moves or renames a file or directory.  The source may contain wildcards if the target is
            a directory.  The target may never have wildcards.  If the target is an existing directory,
            the source will be moved to be a child of the target.
            </summary>
            <param name="oldPath">The current path, local or server, to the item being renamed.
              This path may contain wildcards if the destination is a folder</param>
            <param name="newPath">The new path, local or server, for the item</param>
            <param name="lockLevel">The level of locking for the pending change</param>
            <param name="updateDisk">if true, the local disk is updated according to the pending changes;
              if false, the disk is not modified and changes are not acknowledged</param>
            <param name="detectFolderAtTarget">if true, look for a local folder existing at the target and
              tell the server if that is the case; otherwise, do not check</param>
            <param name="options">Options for the call to PendChanges</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <returns>The number of items renamed</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendRename(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean,Microsoft.TeamFoundation.VersionControl.Common.PendChangesOptions,System.String[],System.String[])">
            <summary>
            Moves or renames a file or directory.  The source may contain wildcards if the target is
            a directory.  The target may never have wildcards.  If the target is an existing directory,
            the source will be moved to be a child of the target.
            </summary>
            <param name="oldPath">The current path, local or server, to the item being renamed.
              This path may contain wildcards if the destination is a folder</param>
            <param name="newPath">The new path, local or server, for the item</param>
            <param name="lockLevel">The level of locking for the pending change</param>
            <param name="updateDisk">if true, the local disk is updated according to the pending changes;
              if false, the disk is not modified and changes are not acknowledged</param>
            <param name="detectFolderAtTarget">if true, look for a local folder existing at the target and
              tell the server if that is the case; otherwise, do not check</param>
            <param name="options">Options for the call to PendChanges</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <returns>The number of items renamed</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendBranch(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            Schedules a file or folder for branching (branching happens at check in).  Branching a
            folder is implicitly recursive.
            </summary>
            <param name="sourcePath">the item to branch</param>
            <param name="targetPath">the location for the branch that will be created</param>
            <param name="version">the version to branch</param>
            <returns>the number of pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendBranch(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean)">
            <summary>
            Schedules a file or folder for branching (branching happens at check in).  Branching a
            folder is implicitly recursive.
            </summary>
            <param name="sourcePath">the item to branch</param>
            <param name="targetPath">the location for the branch that will be created</param>
            <param name="version">the version to branch</param>
            <param name="lockLevel">the lock level to apply to each file checked out</param>
            <param name="updateDisk">if true, populate the branch on disk; otherwise, the disk is
              not modified</param>
            <returns>the number of pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendBranch(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean)">
            <summary>
            Schedules a file or folder for branching (branching happens at check in).  Branching a
            folder is implicitly recursive.
            </summary>
            <param name="sourcePath">the item to branch</param>
            <param name="targetPath">the location for the branch that will be created</param>
            <param name="version">the version to branch</param>
            <param name="lockLevel">the lock level to apply to each file checked out</param>
            <param name="updateDisk">if true, populate the branch on disk; otherwise, the disk is
              not modified</param>
            <param name="detectFolderAtTarget">if true, look for a local folder existing at the target and
              tell the server if that is the case; otherwise, do not check</param>
            <returns>the number of pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendBranch(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Schedules a file or folder for branching (branching happens at check in).  Branching a
            folder is implicitly recursive.
            </summary>
            <param name="sourcePath">the item to branch</param>
            <param name="targetPath">the location for the branch that will be created</param>
            <param name="version">the version to branch</param>
            <param name="lockLevel">the lock level to apply to each file checked out</param>
            <param name="updateDisk">if true, populate the branch on disk; otherwise, the disk is
              not modified</param>
            <param name="detectFolderAtTarget">if true, look for a local folder existing at the target and
              tell the server if that is the case; otherwise, do not check</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <returns>the number of pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PendBranch(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,System.Boolean,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Schedules a file or folder for branching (branching happens at check in).  Branching a
            folder is implicitly recursive.
            </summary>
            <param name="sourcePath">the item to branch</param>
            <param name="targetPath">the location for the branch that will be created</param>
            <param name="version">the version to branch</param>
            <param name="lockLevel">the lock level to apply to each file checked out</param>
            <param name="updateDisk">if true, populate the branch on disk; otherwise, the disk is
              not modified</param>
            <param name="detectFolderAtTarget">if true, look for a local folder existing at the target and
              tell the server if that is the case; otherwise, do not check</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <returns>the number of pending changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Merge(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            Performs a merge of the source to the target.
            </summary>
            <param name="sourcePath">the source of the merge (local or server path)</param>
            <param name="targetPath">the target of the merge (local or server path -- must be mapped)</param>
            <param name="versionFrom">the starting version (may be null)</param>
            <param name="versionTo">the ending version (may be null)</param>
            <returns>status information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Merge(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.MergeOptions)">
            <summary>
            Performs a merge of the source to the target.
            </summary>
            <param name="sourcePath">the source of the merge (local or server path)</param>
            <param name="targetPath">the target of the merge (local or server path -- must be mapped)</param>
            <param name="versionFrom">the starting version (may be null)</param>
            <param name="versionTo">the ending version (may be null)</param>
            <param name="lockLevel">the lock level to apply to each item specified by the target</param>
            <param name="recursion">the recursion</param>
            <param name="mergeOptions">the merge options specified</param>
            <returns>status information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Merge(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Common.MergeOptionsEx)">
            <summary>
            Performs a merge of the source to the target.
            </summary>
            <param name="sourcePath">the source of the merge (local or server path)</param>
            <param name="targetPath">the target of the merge (local or server path -- must be mapped)</param>
            <param name="versionFrom">the starting version (may be null)</param>
            <param name="versionTo">the ending version (may be null)</param>
            <param name="lockLevel">the lock level to apply to each item specified by the target</param>
            <param name="recursion">the recursion</param>
            <param name="mergeOptions">the merge options specified</param>
            <returns>status information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Merge(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Common.MergeOptionsEx)">
            <summary>
            Performs a merge of the source to the target.
            </summary>
            <param name="source">the source of the merge includes path (local or server), recursion and deletionId.</param>
            <param name="targetPath">the target of the merge (local or server path -- must be mapped)</param>
            <param name="versionFrom">the starting version (may be null)</param>
            <param name="versionTo">the ending version (may be null)</param>
            <param name="lockLevel">the lock level to apply to each item specified by the target</param>
            <param name="mergeOptions">the merge options specified</param>
            <returns>status information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Merge(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Common.MergeOptionsEx,System.String[])">
            <summary>
            Performs a merge of the source to the target.
            </summary>
            <param name="source">the source of the merge includes path (local or server), recursion and deletionId.</param>
            <param name="targetPath">the target of the merge (local or server path -- must be mapped)</param>
            <param name="versionFrom">the starting version (may be null)</param>
            <param name="versionTo">the ending version (may be null)</param>
            <param name="lockLevel">the lock level to apply to each item specified by the target</param>
            <param name="mergeOptions">the merge options specified</param>
            <param name="itemAttributeFilters">List of property filters to include with the get op</param>
            <returns>status information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Merge(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Common.MergeOptionsEx,System.String[],System.String[])">
            <summary>
            Performs a merge of the source to the target.
            </summary>
            <param name="source">the source of the merge includes path (local or server), recursion and deletionId.</param>
            <param name="targetPath">the target of the merge (local or server path -- must be mapped)</param>
            <param name="versionFrom">the starting version (may be null)</param>
            <param name="versionTo">the ending version (may be null)</param>
            <param name="lockLevel">the lock level to apply to each item specified by the target</param>
            <param name="mergeOptions">the merge options specified</param>
            <param name="itemAttributeFilters">List of property filters to include with the get op</param>
            <returns>status information</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.ConvertToNewOptions(Microsoft.TeamFoundation.VersionControl.Client.MergeOptions)">
            <summary>
            Converts the old merge options enum to the new merge options enum
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Undo(System.String)">
            <summary>
            Undo the pending changes for the specified item.  The item may contain wildcards.
            </summary>
            <param name="item">the item for which to undo pending changes</param>
            <returns>returns the number of undone changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Undo(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Undo the pending changes for the specified item.  The item may contain wildcards.
            </summary>
            <param name="item">the item for which to undo pending changes</param>
            <param name="recursion">recursion level</param>
            <returns>returns the number of undone changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Undo(System.String[])">
            <summary>
            Undo the pending changes for the specified items.  The items may contain wildcards.
            </summary>
            <param name="items">the items for which to undo pending changes</param>
            <returns>returns the number of undone changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Undo(System.String[],System.Boolean)">
            <summary>
            Undo the pending changes for the specified items.  The items may contain wildcards.
            </summary>
            <param name="items">the items for which to undo pending changes</param>
            <param name="updateDisk">if true, update the items on disk for the undo; otherwise, the
              disk is not modified</param>
            <returns>returns the number of undone changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Undo(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Undo the pending changes for the specified items.  The items may contain wildcards.
            </summary>
            <param name="items">the items for which to undo pending changes</param>
            <param name="recursion">recursion level</param>
            <returns>returns the number of undone changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Undo(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.Boolean)">
            <summary>
            Undo the pending changes for the specified items.  The items may contain wildcards.
            </summary>
            <param name="items">the items for which to undo pending changes</param>
            <param name="recursion">recursion level</param>
            <param name="updateDisk">if true, update the items on disk for the undo; otherwise, the
              disk is not modified</param>
            <returns>returns the number of undone changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Undo(Microsoft.TeamFoundation.VersionControl.Client.PendingChange[])">
            <summary>
            Undo the pending changes for the specified items.  The items may contain wildcards.
            </summary>
            <param name="pendingChanges">the pending changes to undo</param>
            <returns>returns the number of undone changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Undo(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[])">
            <summary>
            Undo the pending changes for the specified items.  The items may contain wildcards.
            </summary>
            <param name="itemSpecs">the items for which to undo pending changes</param>
            <returns>returns the number of undone changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Undo(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean)">
            <summary>
            Undo the pending changes for the specified items.  The items may contain wildcards.
            </summary>
            <param name="itemSpecs">the items for which to undo pending changes</param>
            <param name="updateDisk">if true, update the items on disk for the undo; otherwise, the
              disk is not modified</param>
            <returns>returns the number of undone changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Undo(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean,System.String[])">
            <summary>
            Undo the pending changes for the specified items.  The items may contain wildcards.
            </summary>
            <param name="itemSpecs">the items for which to undo pending changes</param>
            <param name="updateDisk">if true, update the items on disk for the undo; otherwise, the
              disk is not modified</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <returns>returns the number of undone changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Undo(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean,System.String[],System.String[])">
            <summary>
            Undo the pending changes for the specified items.  The items may contain wildcards.
            </summary>
            <param name="itemSpecs">the items for which to undo pending changes</param>
            <param name="updateDisk">if true, update the items on disk for the undo; otherwise, the
              disk is not modified</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <returns>returns the number of undone changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Undo(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean,System.Boolean,System.String[],System.String[])">
            <summary>
            Undo the pending changes for the specified items.  The items may contain wildcards.
            </summary>
            <param name="itemSpecs">the items for which to undo pending changes</param>
            <param name="updateDisk">if true, update the items on disk for the undo; otherwise, the
              disk is not modified</param>
              <param name="deleteAdds">determines if adds should be deleted.</param>
            <returns>returns the number of undone changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.SetLock(System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel)">
            <summary>
            Apply the selected lock level to the specified path.
            </summary>
            <param name="path">path to set the lock on</param>
            <param name="lockLevel">requested lock for the paths</param>
            <returns>number of locks set</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.SetLock(System.String,Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Apply the selected lock level to the specified path.
            </summary>
            <param name="path">path to set the lock on</param>
            <param name="lockLevel">requested lock for the paths</param>
            <param name="recursion">recursion level</param>
            <returns>number of locks set</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.SetLock(System.String[],Microsoft.TeamFoundation.VersionControl.Client.LockLevel)">
            <summary>
            Apply the selected lock level to the specified paths.
            </summary>
            <param name="paths">paths to set the lock on</param>
            <param name="lockLevel">requested lock for the paths</param>
            <returns>number of locks set</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.SetLock(System.String[],Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Apply the selected lock level to the specified paths.
            </summary>
            <param name="paths">paths to set the lock on</param>
            <param name="lockLevel">requested lock for the paths</param>
            <param name="recursion">recursion level</param>
            <returns>number of locks set</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.SetLock(System.String[],Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.Boolean)">
            <summary>
            Apply the selected lock level to the specified paths.
            </summary>
            <param name="paths">paths to set the lock on</param>
            <param name="lockLevel">requested lock for the paths</param>
            <param name="recursion">recursion level</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <returns>number of locks set</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.SetLock(System.String[],Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.Boolean,System.String[])">
            <summary>
            Apply the selected lock level to the specified paths.
            </summary>
            <param name="paths">paths to set the lock on</param>
            <param name="lockLevel">requested lock for the paths</param>
            <param name="recursion">recursion level</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <returns>number of locks set</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.SetLock(System.String[],Microsoft.TeamFoundation.VersionControl.Client.LockLevel,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.Boolean,System.String[],System.String[])">
            <summary>
            Apply the selected lock level to the specified paths.
            </summary>
            <param name="paths">paths to set the lock on</param>
            <param name="lockLevel">requested lock for the paths</param>
            <param name="recursion">recursion level</param>
            <param name="silent">Specifies whether server should return get ops</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <returns>number of locks set</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetLocalVersions(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean)">
            <summary>
            Returns local item information about items in a workspace
            </summary>
            <param name="itemSpecs">Local item paths only; will throw if passed a server path</param>
            <param name="sortData">Whether to sort the returned data - in top down fashion or not</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.SetPendingChangeAttribute(System.Collections.Generic.List{Microsoft.TeamFoundation.Framework.Client.ArtifactPropertyValue})">
            <summary>
            Sets properties on existing pending changes - only applies to TFS 2013 and older
            </summary>
            <param name="pendingChangePropertyValues">A list of artifact property values to set.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.AddIgnoreFileExclusion(System.String,System.String)">
            <summary>
            Adds an ignore file exclusion to the specified .tfignore file.
            </summary>
            <param name="fileSpecToExclude">Ignore glob to add to the .tfignore file</param>
            <param name="ignoreFileDirectory">Directory whose .tfignore file should be used</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Get">
            <summary>
            Get requests that the server update the current workspace with the latest version of
            all mapped items.
            </summary>
            <returns>a GetStatus object describing the number of operations, conflicts, errors,
              etc. that occurred while processing the get</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Get(Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.GetOptions)">
            <summary>
            Get requests that the server update the current workspace with the specified versions of
            all mapped items.
            </summary>
            <param name="version">the version of the items being requested</param>
            <param name="options">options for the get (all, overwrite, etc.)</param>
            <returns>a GetStatus object describing the number of operations, conflicts, errors,
              etc. that occurred while processing the get</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Get(System.String[],Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.GetOptions)">
            <summary>
            Get requests that the server update the current workspace with the specified versions of
            the items.
            </summary>
            <param name="items">the items and versions being requested</param>
            <param name="version">the version of the items being requested</param>
            <param name="recursion">recursion level for the items being requested</param>
            <param name="options">options for the get (all, overwrite, etc.)</param>
            <returns>a GetStatus object describing the number of operations, conflicts, errors,
              etc. that occurred while processing the get</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Get(Microsoft.TeamFoundation.VersionControl.Client.GetRequest,Microsoft.TeamFoundation.VersionControl.Client.GetOptions)">
            <summary>
            Get requests that the server update the current workspace with the specified versions of
            the items.
            </summary>
            <param name="request">the item and version being requested</param>
            <param name="options">options for the get (all, overwrite, etc.)</param>
            <returns>a GetStatus object describing the number of operations, conflicts, errors,
              etc. that occurred while processing the get</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Get(Microsoft.TeamFoundation.VersionControl.Client.GetRequest[],Microsoft.TeamFoundation.VersionControl.Client.GetOptions)">
            <summary>
            Get requests that the server update the current workspace with the specified versions of
            the items.
            </summary>
            <param name="requests">the items and versions being requested</param>
            <param name="options">options for the get (all, overwrite, etc.)</param>
            <returns>a GetStatus object describing the number of operations, conflicts, errors,
              etc. that occurred while processing the get</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Get(Microsoft.TeamFoundation.VersionControl.Client.GetRequest,Microsoft.TeamFoundation.VersionControl.Client.GetOptions,Microsoft.TeamFoundation.VersionControl.Client.GetFilterCallback,System.Object)">
            <summary>
            Get requests that the server update the current workspace with the specified versions of
            the items.  The filtering delegate allows the caller to discard operations before they are
            processed by setting the Ignore property on each operation to be discarded.
            </summary>
            <param name="request">the item and version being requested</param>
            <param name="options">options for the get (all, overwrite, etc.)</param>
            <param name="filterCallback">a delegate to be called with the operations obtained from the
              server before the operations are processed</param>
            <param name="userData">a user-specified object passed to the delegate when it's
              called</param>
            <returns>a GetStatus object describing the number of operations, conflicts, errors,
              etc. that occurred while processing the get</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Get(Microsoft.TeamFoundation.VersionControl.Client.GetRequest[],Microsoft.TeamFoundation.VersionControl.Client.GetOptions,Microsoft.TeamFoundation.VersionControl.Client.GetFilterCallback,System.Object)">
            <summary>
            Get requests that the server update the current workspace with the specified versions of
            the items.  The filtering delegate allows the caller to discard operations before they are
            processed by setting the Ignore property on each operation to be discarded.
            </summary>
            <param name="requests">the items and versions being requested</param>
            <param name="options">options for the get (all, overwrite, etc.)</param>
            <param name="filterCallback">a delegate to be called with the operations obtained from the
              server before the operations are processed</param>
            <param name="userData">a user-specified object passed to the delegate when it's
              called</param>
            <returns>a GetStatus object describing the number of operations, conflicts, errors,
              etc. that occurred while processing the get</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Get(Microsoft.TeamFoundation.VersionControl.Client.GetRequest[],Microsoft.TeamFoundation.VersionControl.Client.GetOptions,Microsoft.TeamFoundation.VersionControl.Client.GetFilterCallback,System.Object,System.String[])">
            <summary>
            Get requests that the server update the current workspace with the specified versions of
            the items.  The filtering delegate allows the caller to discard operations before they are
            processed by setting the Ignore property on each operation to be discarded.
            </summary>
            <param name="requests">the items and versions being requested</param>
            <param name="options">options for the get (all, overwrite, etc.)</param>
            <param name="filterCallback">a delegate to be called with the operations obtained from the
              server before the operations are processed</param>
            <param name="userData">a user-specified object passed to the delegate when it's
              called</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <returns>a GetStatus object describing the number of operations, conflicts, errors,
              etc. that occurred while processing the get</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Get(Microsoft.TeamFoundation.VersionControl.Client.GetRequest[],Microsoft.TeamFoundation.VersionControl.Client.GetOptions,Microsoft.TeamFoundation.VersionControl.Client.GetFilterCallback,System.Object,System.String[],Microsoft.TeamFoundation.VersionControl.Client.Conflict[]@)">
            <summary>
            Get requests that the server update the current workspace with the specified versions of
            the items.  The filtering delegate allows the caller to discard operations before they are
            processed by setting the Ignore property on each operation to be discarded.
            </summary>
            <param name="requests">the items and versions being requested</param>
            <param name="options">options for the get (all, overwrite, etc.)</param>
            <param name="filterCallback">a delegate to be called with the operations obtained from the
              server before the operations are processed</param>
            <param name="userData">a user-specified object passed to the delegate when it's
              called</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <returns>a GetStatus object describing the number of operations, conflicts, errors,
              etc. that occurred while processing the get</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Get(Microsoft.TeamFoundation.VersionControl.Client.GetRequest[],Microsoft.TeamFoundation.VersionControl.Client.GetOptions,Microsoft.TeamFoundation.VersionControl.Client.GetFilterCallback,System.Object,System.String[],System.String[],Microsoft.TeamFoundation.VersionControl.Client.Conflict[]@)">
            <summary>
            Get requests that the server update the current workspace with the specified versions of
            the items.  The filtering delegate allows the caller to discard operations before they are
            processed by setting the Ignore property on each operation to be discarded.
            </summary>
            <param name="requests">the items and versions being requested</param>
            <param name="options">options for the get (all, overwrite, etc.)</param>
            <param name="filterCallback">a delegate to be called with the operations obtained from the
              server before the operations are processed</param>
            <param name="userData">a user-specified object passed to the delegate when it's
              called</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <returns>a GetStatus object describing the number of operations, conflicts, errors,
              etc. that occurred while processing the get</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Get(Microsoft.TeamFoundation.VersionControl.Client.GetRequest[],Microsoft.TeamFoundation.VersionControl.Client.GetOptions,Microsoft.TeamFoundation.VersionControl.Client.GetFilterCallback,System.Object,System.String[],System.String[],System.Boolean,Microsoft.TeamFoundation.VersionControl.Client.Conflict[]@)">
            <summary>
            Get requests that the server update the current workspace with the specified versions of
            the items.  The filtering delegate allows the caller to discard operations before they are
            processed by setting the Ignore property on each operation to be discarded.
            </summary>
            <param name="requests">the items and versions being requested</param>
            <param name="options">options for the get (all, overwrite, etc.)</param>
            <param name="filterCallback">a delegate to be called with the operations obtained from the
              server before the operations are processed</param>
            <param name="userData">a user-specified object passed to the delegate when it's
              called</param>
            <param name="itemAttributeFilters">A list of versioned item properties to return with each 
            get operation</param>
            <returns>a GetStatus object describing the number of operations, conflicts, errors,
              etc. that occurred while processing the get</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.DebugFilterCallback(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.ILocalUpdateOperation[],System.Object)">
            <summary>
            This callback is defined for debug builds to get coverage on the filter code that the VS
            integration code uses.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.AddConflict(Microsoft.TeamFoundation.VersionControl.Client.ConflictType,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Adds a local disk conflict to the server's list of conflicts for this workspace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares two workspace objects, first comparing the repository URLs, then comparing the
            workspace names, and finally comparing owners.
            </summary>
            <param name="obj">the workspace to which this one will be compared</param>
            <returns>-1, 0, 1 for this workspace being less than, equal to, or greater than the 
              specified workspace, respectively</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Equals(System.Object)">
            <summary>
            Returns true if the repository, name, and owner match.
            </summary>
            <param name="obj">the workspace with which to compare</param>
            <returns>returns true if the repository, name, and owner match</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns>the hash code</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Equals(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Returns true if the repository, name, and owner match for the specified workspaces.
            </summary>
            <param name="x">the first workspace to compare</param>
            <param name="y">the second workspace to compare</param>
            <returns>returns true if the repository, name, and owner match</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetHashCode(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Returns the hash code for the specified workspace.
            </summary>
            <returns>the hash code</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Name">
            <summary>
            The name of the workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Computer">
            <summary>
            The name of the computer on which this workspace resides.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Comment">
            <summary>
            The comment string associated with this workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.OwnerName">
            <summary>
            The owner of this workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Location">
            <summary>
            Indicates the location where data (pending changes, local versions) for this workspace are stored.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.WorkspaceOptions">
            <summary>
            The options for the workspace (including the SetFileTimeToCheckin flag).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Folders">
            <summary>
            The working folders for this workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.PermissionsProfile">
            <summary>
            The permissions profile for this workspace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.MatchName(System.String,System.String)">
            <summary>
            Compare two workspace names and return true if they match.  
            Comparisons are case insensitive.
            </summary>
            <param name="workspaceName1">the first workspace name to compare</param>
            <param name="workspaceName2">the second workspace name to compare</param>
            <returns>true if the names match</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.MatchOwnerName(System.String,System.String)">
            <summary>
            Compare two workspace owners and return true if they match.  
            Comparisons are case insensitive.
            </summary>
            <param name="workspaceOwnerName1">the first workspace owner to compare</param>
            <param name="workspaceOwnerName2">the second workspace owner to compare</param>
            <returns>true if the owners match</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.OwnerNameMatches(System.String)">
            <summary>
            Returns true if the owner name matches any of the valid owner names for this workspace.
            </summary>
            <param name="ownerName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Reconcile(System.Boolean,System.Boolean@)">
            <summary>
            Reconciles a local workspace with the server.
            </summary>
            <param name="reconcileMissingLocalItems">True to remove local version rows for items
            that no longer exist on disk</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.RefreshMappings">
            <summary>
            Gets from the server the current set of mappings for this workspace.
            Obsolete. Use the Refresh() method instead to accomplish the same task.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Refresh">
            <summary>
            Refreshes this Workspace instance from the server.
            </summary>
            //********************************************************************************************
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.RefreshIfNeeded">
            <summary>
            Refreshes this Workspace instance from the server if uncacheable properties are stale or
            have not been loaded. Uncacheable properties include working folders and effective
            permissions.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.MappingsAvailable">
            <summary>
            Returns true if the working folders held by this Workspace object are believed to be
            current. If true, a call to perform mapping translations will not result in a server
            call.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.RefreshMappingsIfNeeded">
            <summary>
            Refreshes the mappings of this Workspace object from the server.
            For a local workspace, the 'server' is the local workspaces object model.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.UpdateFromWorkspace(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            An internal helper method called by Client.GetLocalWorkspaceFromCache to update
            the following properties of a Workspace object that cannot be retrieved from the
            Workstation's cache file:
             - WorkingFolder[] Folders
             - int EffectivePermissions
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.UpdateLocationFromWorkspaceInfo(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo)">
            <summary>
            Called by the cross-process notification dispatcher in the case of an UpdatedWorkspace notification,
            before that notification is dispatched to listeners.
            </summary>
            <param name="wsInfo">Latest copy of the WorkspaceInfo from the local workspace cache</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.Lock">
            <summary>
            Locks the local workspace from changes.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.RemoveLocalConflict(Microsoft.TeamFoundation.VersionControl.Client.Conflict)">
            <summary>
            Removes a local conflict from the server's list of conflicts for this workspace.
            </summary>
            <param name="conflict">the local conflict</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.RemoveLocalConflicts(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.Conflict})">
            <summary>
            Removes local conflicts from the server's list of conflicts for this workspace.
            </summary>
            <param name="conflict">the local conflict</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.MergeContent(Microsoft.TeamFoundation.VersionControl.Client.Conflict,System.Boolean)">
            <summary>
            Perform a content merge based on the requested conflict.
            </summary>
            <param name="conflict">Conflict to do a content merge for</param>
            <param name="useExternalMergeTool">whether to use a registered external merge tool</param>
            <returns>whether the merge was successful or not</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.EnsureUploadHashValuesCurrent(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.PendingChange})">
            <summary>
            Updates the pending changes in the IEnumerable provided to have the latest UploadHashValue from the
            server. Returns the updated IEnumerable.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.CheckForInternalMappingConflicts(System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[],System.Boolean)">
            <summary>
            Checks for conflicting working folders within the working folder array itself.
            LocalCache checks for cross-workspace local folder conflicts.
            </summary>
            <param name="workspaceName">the name of the workspace being checked</param>
            <param name="mappings">the new working folders to check</param>
            <param name="removeUnparentedCloaks">When true, will strip from the mappings any cloaks not parented
            by a mapping</param>
            <exception cref="T:Microsoft.TeamFoundation.VersionControl.Client.MappingConflictException">thrown if there is any conflict</exception>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.FormatWorkspaceNameForException(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Formats the conflicting workspace name for exception when there is a conflict.  The owner
            of the workspace is included when the owner is different.
            </summary>
            <param name="conflictingWorkspace">the workspace that conflicts</param>
            <returns>the formatted workspace name</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetTeamProjectForLocalPath(System.String)">
            <summary>
            Finds and returns the TeamProject in which a given localPath resides.  The local path must
            be in this workspace.
            </summary>
            <param name="localPath">the local path</param>
            <returns>the TeamProject for the specified local path or throws a VersionControlException</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetTeamProjectsForLocalPaths(System.String[])">
            <summary>
            Gets the team projects in the repository with the specified paths.  If a path is not mapped
            or is cloaked or doesn't correspond to a team project in the repository, there will not be
            a corresponding TeamProject object in the list returned.
            </summary>
            <param name="localPaths">the local paths for which to get the team projects</param>
            <returns>the team projects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.InvalidateMappings">
            <summary>
            Invalidates the cached copy of the workspace mappings held by this Workspace object and
            causes the next access to them to re-fetch them from the server or local data access layer
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.AsyncPendAddGroupOperation.ReportFailures(Microsoft.TeamFoundation.VersionControl.Client.Failure[])">
            <summary>
            reports failures
            </summary>
            <param name="failures"></param>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.Workspace.AsyncUploadOperation.BufferWriteStream">
            <summary>
            Whether or not to issue new child upload requests with write stream
            buffering enabled. Usually this is false; but under certain web proxy
            scenarios, not buffering the write stream can be be pathologically slower
            because the upload logic may have to retry each request with buffering
            enabled (after failing once with it disabled). We detect this pathological
            behavior and set a flag that turns on write stream buffering 'permanently'
            for the rest of the upload operation.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.Workspace.AsyncUploadOperation.BaselineFolderCollection">
            <summary>
            The baseline folder collection in which baselines will be stored (optional)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.Workspace.AsyncUploadOperation.UploadedBaselinesCollection">
            <summary>
            The set of baselines that were stored.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.OwnerDisplayName">
            <summary>
            The owner's display name
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.OwnerAliases">
            <summary>
            The aliases for the owner of this workspace not including the display name or unique name.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.EffectivePermissions">
            <summary>
            The effective permissions that the AuthenticatedUser has on this workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.IsScannerAsynchronous">
            <summary>
            This flag applies only to local workspaces (Location == WorkspaceLocation.Local). If true,
            then the VersionControlServer which owns this Workspace will fire the PendingChangesChanged
            and GetCompleted events as soon the disk scanner notices that something has changed on disk.
            That is, the generation of those events is truly asynchronous. If false, the disk scanner
            only runs when necessary for correctness -- as a part of calls to this Workspace object's
            public methods. The events will still fire, but they will fire after the scanned API call
            which notices them, rather than as soon as they occur on disk.
            
            The default is false. Setting this flag to true may decrease performance, but it is useful
            for the construction of a feature such as an always-up-to-date list of pending changes in
            the workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.SecurityToken">
            <summary>
            The security token of this workspace for the workspace security namespace
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.OwnerDescriptor">
            <summary>
            Gets the IdentityDescriptor for the workspace owner, if available.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.RefreshPermissionsProfile">
            <summary>
            Calls the security service to update the PermissionsProfile field
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.LastSavedCheckin">
            <summary>
            Holds the metadata for the last unsuccessful checkin or the metadata from unshelving
            (comment, work items, etc.).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.IsLocal">
            <summary>
            Returns true if the workspace resides on the current machine.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.LocalMetadataDirectory">
            <summary>
            The full path to the metadata directory for this workspace (local workspaces only).
            The path is in the ProgramData directory.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.GetWorkspaceDirectory(System.String)">
            <summary>
            Helper method which returns a subdirectory of the provided path. The subdirectory is unique
            to this workspace and contains the TPC GUID, the workspace name, and the workspace owner's
            TFID in it.
            </summary>
            <param name="basePath">Base path to form the path from</param>
            <returns>Workspace-unique directory</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.VersionControlServer">
            <summary>
            This is the VersionControlServer object that hosts this workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.OfflineCacheData">
            <summary>
            Pointer to a structure that holds cached data about this workspace,
            if it is a local workspace. Populated at runtime and valid only at runtime.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.DisplayName">
            <summary>
            This is the formatted display name of the workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.QualifiedName">
            <summary>
            This is the formatted unique display name of the workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.DisambiguatedDisplayName">
            <summary>
            This is the formatted display name of the workspace containing both the display and unique
            owner names.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.IsDeleted">
            <summary>
            Returns true if the workspace has been deleted.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.RepositoryComparer">
            <summary>
            Returns a Comparer for display purposes.  It is culture sensitive and case insensitive.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.HasReadPermission">
            <summary>
            Returns true if the AuthorizedUser has Read permission on this workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.HasUsePermission">
            <summary>
            Returns true if the AuthorizedUser has Use permission on this workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.HasCheckInPermission">
            <summary>
            Returns true if the AuthorizedUser has CheckIn permission on this workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workspace.HasAdministerPermission">
            <summary>
            Returns true if the AuthorizedUser has Administer permission on this workspace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workspace.HasWorkspacePermission(Microsoft.TeamFoundation.VersionControl.Client.WorkspacePermissions)">
            <summary>
            Checks to see whether this.VersionControlServer.AuthorizedUser has the
            provided WorkspacePermissions bits on this workspace.
            </summary>
            <param name="toCheck">WorkspacePermissions bits to check</param>
            <returns>True if the AuthorizedUser has the requested permissions, false otherwise</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceItem">
            <summary>
            Used by QueryWorkspaceItems to represent an item.
            Inherits all fields from Item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceItem.LocalItem">
            <summary>
            Path to the item on the client's local disk.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionSpec">
            <summary>
            Specifies a version based on a workspace name/owner.
            </summary>
            <summary>
            This class represents a version specifier based on a specified workspace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionSpec.#ctor(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo)">
            <summary>
            Construct a WorkspaceVersionSpec based the specified WorkspaceInfo.
            </summary>
            <param name="wsInfo">Workspace info to pull workspace information from</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionSpec.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Construct a WorkspaceVersionSpec based the specified Workspace.
            </summary>
            <param name="workspace">Workspace to pull workspace information from</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionSpec.#ctor(System.String,System.String)">
            <summary>
            Construct a WorkspaceVersionSpec based the specified workspace name and owner.
            </summary>
            <param name="name">workspace name for the specification</param>
            <param name="ownerName">workspace owner for the specification</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionSpec.#ctor(System.String,System.String,System.String)">
            <summary>
            Construct a WorkspaceVersionSpec based the specified workspace name and owner.
            </summary>
            <param name="name">workspace name for the specification</param>
            <param name="ownerName">workspace owner for the specification</param>
            <param name="ownerUnqiueName">workspace owner's unique name for the specification</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionSpec.Equals(System.Object)">
            <summary>
            Determine whether this instance is equal with the specified instance
            </summary>
            <param name="obj">other instance to compare with</param>
            <returns>true if the other instance matches this one</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionSpec.GetHashCode">
            <summary>
            Generates a hash code for this instance.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceVersionSpec.Identifier">
            <summary>
            Identifier for this version spec in command-line usage.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryHistory(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Retrieves an enumerable collection of Changeset objects matching the specified criteria.
            </summary>
            <param name="path">The item whose history is to be retrieved. The last path part may include the
            ? and * wildcard characters, i.e. $/Abc/def/*.cs. The item may be a server or a local path.</param>
            <param name="version">A VersionSpec describing the point in time at which the path provided in the 
            path parameter should be resolved to an item. The most common value to provide for this parameter is
            VersionSpec.Latest.</param>
            <param name="deletionId">If the path provided in the path parameter is deleted at the version provided
            in the version parameter, then the deletion ID of the particular deleted item you are referring to should
            be provided here. The most common value to provide for this parameter is zero. If you are querying a TFS
            2010 server or later, then you can safely provide zero in all cases.</param>
            <param name="recursion">The recursion type to apply to the provided path. When querying the history of files,
            it is common to provide RecursionType.None. When querying the history of a folder, it is common to provide
            RecursionType.Full.</param>
            <param name="user">This parameter allows the caller to restrict the history query to the set of changesets
            authored by a particular identity. For TFS 2010 servers and earlier, this parameter must be in the form
            "DOMAIN\user". Later servers accept identities in this format, as well as display names ("Maggie Carrido").
            The most common value to provide for this parameter is null, indicating that the query should not be restricted
            by author.</param>
            <param name="versionFrom">This parameter allows the caller to restrict the history query along the time axis.
            The most common value to provide for this parameter is null, to indicate that the range of the history query
            goes all the way back to the start of the repository.</param>
            <param name="versionTo">This parameter allows the caller to restrict the history query along the time axis.
            The most common value to provide for this parameter is null, to indicate that the range of the history query
            starts with the latest changeset in the repository.</param>
            <param name="maxCount">This parameter allows the caller to limit the number of results returned. QueryHistory
            pages results back from the server on demand, so limiting your own consumption of the returned IEnumerable is
            almost as effective (from a performance perspective) as providing a fixed value here. The most common value to
            provide for this parameter is Int32.MaxValue.</param>
            <param name="includeChanges">This parameter allows the caller to request that the returned Changeset objects
            include Change objects (the manifest of the changeset). If false, the Changeset objects returned
            will contain only the changeset metadata. Note that even when this parameter is set to true, the set of returned
            Change objects is scoped to the provided path and recursion.</param>
            <param name="slotMode">If this parameter is false, then the (path, version, deletionId) tuple is resolved to
            an item and the history is performed on that item, tracking across renames. If this parameter is true, then the
            tuple is not resolved. Instead, all changesets which have an item with the name "path" (or beneath it, if the query
            is recursive), are returned. That is, the query is on a particular "namespace slot" (slot mode) rather than on a
            particular item. The most common value to provide for this parameter is true.</param>
            <returns>An enumerable collection of Changeset objects matching the specified criteria.</returns>
            <remarks>First shipped in TFS 2005</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryHistory(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Retrieves an enumerable collection of Changeset objects matching the specified criteria.
            </summary>
            <param name="path">The item whose history is to be retrieved. The last path part may include the
            ? and * wildcard characters, i.e. $/Abc/def/*.cs. The item may be a server or a local path.</param>
            <param name="version">A VersionSpec describing the point in time at which the path provided in the 
            path parameter should be resolved to an item. The most common value to provide for this parameter is
            VersionSpec.Latest.</param>
            <param name="deletionId">If the path provided in the path parameter is deleted at the version provided
            in the version parameter, then the deletion ID of the particular deleted item you are referring to should
            be provided here. The most common value to provide for this parameter is zero. If you are querying a TFS
            2010 server or later, then you can safely provide zero in all cases.</param>
            <param name="recursion">The recursion type to apply to the provided path. When querying the history of files,
            it is common to provide RecursionType.None. When querying the history of a folder, it is common to provide
            RecursionType.Full.</param>
            <param name="user">This parameter allows the caller to restrict the history query to the set of changesets
            authored by a particular identity. For TFS 2010 servers and earlier, this parameter must be in the form
            "DOMAIN\user". Later servers accept identities in this format, as well as display names ("Maggie Carrido").
            The most common value to provide for this parameter is null, indicating that the query should not be restricted
            by author.</param>
            <param name="versionFrom">This parameter allows the caller to restrict the history query along the time axis.
            The most common value to provide for this parameter is null, to indicate that the range of the history query
            goes all the way back to the start of the repository.</param>
            <param name="versionTo">This parameter allows the caller to restrict the history query along the time axis.
            The most common value to provide for this parameter is null, to indicate that the range of the history query
            starts with the latest changeset in the repository.</param>
            <param name="maxCount">This parameter allows the caller to limit the number of results returned. QueryHistory
            pages results back from the server on demand, so limiting your own consumption of the returned IEnumerable is
            almost as effective (from a performance perspective) as providing a fixed value here. The most common value to
            provide for this parameter is Int32.MaxValue.</param>
            <param name="includeChanges">This parameter allows the caller to request that the returned Changeset objects
            include Change objects (the manifest of the changeset). If false, the Changeset objects returned
            will contain only the changeset metadata. Note that even when this parameter is set to true, the set of returned
            Change objects is scoped to the provided path and recursion. The most common value to provide for this
            parameter is false.</param>
            <param name="slotMode">If this parameter is false, then the (path, version, deletionId) tuple is resolved to
            an item and the history is performed on that item, tracking across renames. If this parameter is true, then the
            tuple is not resolved. Instead, all changesets which have an item with the name "path" (or beneath it, if the query
            is recursive), are returned. That is, the query is on a particular "namespace slot" (slot mode) rather than on a
            particular item. The most common value to provide for this parameter is true.</param>
            <param name="includeDownloadInfo">This parameter applies only when includeChanges is set to true. Set this parameter
            to true to have the server generate download URLs and include them with the Change objects returned in each
            Changeset. This allows the client to download the file content associated with a particular Change object with one
            round-trip to the server instead of two. Setting this parameter to true increases the computation time on the server for the
            QueryHistory call, as well as the size of the result set on the wire. For performance reasons, you should set this
            flag only if you intend to download the content the returned Change objects. The most common value to provide
            for this parameter is false.</param>
            <returns>An enumerable collection of Changeset objects matching the specified criteria.</returns>
            <remarks>First shipped in TFS 2005</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryHistory(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Retrieves an enumerable collection of Changeset objects matching the specified criteria.
            </summary>
            <param name="path">The item whose history is to be retrieved. The last path part may include the
            ? and * wildcard characters, i.e. $/Abc/def/*.cs. The item may be a server or a local path.</param>
            <param name="version">A VersionSpec describing the point in time at which the path provided in the 
            path parameter should be resolved to an item. The most common value to provide for this parameter is
            VersionSpec.Latest.</param>
            <param name="deletionId">If the path provided in the path parameter is deleted at the version provided
            in the version parameter, then the deletion ID of the particular deleted item you are referring to should
            be provided here. The most common value to provide for this parameter is zero. If you are querying a TFS
            2010 server or later, then you can safely provide zero in all cases.</param>
            <param name="recursion">The recursion type to apply to the provided path. When querying the history of files,
            it is common to provide RecursionType.None. When querying the history of a folder, it is common to provide
            RecursionType.Full.</param>
            <param name="user">This parameter allows the caller to restrict the history query to the set of changesets
            authored by a particular identity. For TFS 2010 servers and earlier, this parameter must be in the form
            "DOMAIN\user". Later servers accept identities in this format, as well as display names ("Maggie Carrido").
            The most common value to provide for this parameter is null, indicating that the query should not be restricted
            by author.</param>
            <param name="versionFrom">This parameter allows the caller to restrict the history query along the time axis.
            The most common value to provide for this parameter is null, to indicate that the range of the history query
            goes all the way back to the start of the repository.</param>
            <param name="versionTo">This parameter allows the caller to restrict the history query along the time axis.
            The most common value to provide for this parameter is null, to indicate that the range of the history query
            starts with the latest changeset in the repository.</param>
            <param name="maxCount">This parameter allows the caller to limit the number of results returned. QueryHistory
            pages results back from the server on demand, so limiting your own consumption of the returned IEnumerable is
            almost as effective (from a performance perspective) as providing a fixed value here. The most common value to
            provide for this parameter is Int32.MaxValue.</param>
            <param name="includeChanges">This parameter allows the caller to request that the returned Changeset objects
            include Change objects (the manifest of the changeset). If false, the Changeset objects returned
            will contain only the changeset metadata. Note that even when this parameter is set to true, the set of returned
            Change objects is scoped to the provided path and recursion. The most common value to provide for this
            parameter is false.</param>
            <param name="slotMode">If this parameter is false, then the (path, version, deletionId) tuple is resolved to
            an item and the history is performed on that item, tracking across renames. If this parameter is true, then the
            tuple is not resolved. Instead, all changesets which have an item with the name "path" (or beneath it, if the query
            is recursive), are returned. That is, the query is on a particular "namespace slot" (slot mode) rather than on a
            particular item. The most common value to provide for this parameter is true.</param>
            <param name="includeDownloadInfo">This parameter applies only when includeChanges is set to true. Set this parameter
            to true to have the server generate download URLs and include them with the Change objects returned in each
            Changeset. This allows the client to download the file content associated with a particular Change object with one
            round-trip to the server instead of two. Setting this parameter to true increases the computation time on the server for the
            QueryHistory call, as well as the size of the result set on the wire. For performance reasons, you should set this
            flag only if you intend to download the content the returned Change objects. The most common value to provide
            for this parameter is false.</param>
            <param name="sortAscending">By default, the results are from versionTo to versionFrom (reverse order). If you want
            the results to be returned in ascending order instead (from versionFrom to versionTo), set this flag to true. This flag
            requires a TFS 2010 or later server to have any effect. The most common value to provide for this parameter is false.</param>
            <returns>An enumerable collection of Changeset objects matching the specified criteria.</returns>
            <remarks>First shipped in TFS 2010</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryHistory(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Retrieves an enumerable collection of Changeset objects matching the specified criteria.
            </summary>
            <param name="item">The item whose history is to be retrieved. The last path part may include the
            ? and * wildcard characters, i.e. $/Abc/def/*.cs. The item may be a server or a local path.</param>
            <param name="recursion">The recursion type to apply to the provided path. When querying the history of files,
            it is common to provide RecursionType.None. When querying the history of a folder, it is common to provide
            RecursionType.Full.</param>
            <returns>An enumerable collection of Changeset objects matching the specified criteria.</returns>
            <remarks>First shipped in TFS 2012</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryHistory(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.Int32)">
            <summary>
            Retrieves an enumerable collection of Changeset objects matching the specified criteria.
            </summary>
            <param name="item">The item whose history is to be retrieved. The last path part may include the
            ? and * wildcard characters, i.e. $/Abc/def/*.cs. The item may be a server or a local path.</param>
            <param name="recursion">The recursion type to apply to the provided path. When querying the history of files,
            it is common to provide RecursionType.None. When querying the history of a folder, it is common to provide
            RecursionType.Full.</param>
            <param name="maxResults">This parameter allows the caller to limit the number of results returned. QueryHistory
            pages results back from the server on demand, so limiting your own consumption of the returned IEnumerable is
            almost as effective (from a performance perspective) as providing a fixed value here. The most common value to
            provide for this parameter is Int32.MaxValue.</param>
            <returns>An enumerable collection of Changeset objects matching the specified criteria.</returns>
            <remarks>First shipped in TFS 2012</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryHistory(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec)">
            <summary>
            Retrieves an enumerable collection of Changeset objects matching the specified criteria.
            </summary>
            <param name="itemSpec">An ItemSpec describing the item whose history is to be retrieved, its deletion id,
            and the recursion type at which the query should be performed.</param>
            <returns>An enumerable collection of Changeset objects matching the specified criteria.</returns>
            <remarks>First shipped in TFS 2012</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryHistory(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,System.Int32)">
            <summary>
            Retrieves an enumerable collection of Changeset objects matching the specified criteria.
            </summary>
            <param name="itemSpec">An ItemSpec describing the item whose history is to be retrieved, its deletion id,
            and the recursion type at which the query should be performed.</param>
            <param name="maxResults">This parameter allows the caller to limit the number of results returned. QueryHistory
            pages results back from the server on demand, so limiting your own consumption of the returned IEnumerable is
            almost as effective (from a performance perspective) as providing a fixed value here. The most common value to
            provide for this parameter is Int32.MaxValue.</param>
            <returns>An enumerable collection of Changeset objects matching the specified criteria.</returns>
            <remarks>First shipped in TFS 2012</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryHistory(Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters)">
            <summary>
            Retrieves an enumerable collection of Changeset objects matching the specified criteria.
            </summary>
            <param name="item">The item whose history is to be retrieved. The last path part may include the
            ? and * wildcard characters, i.e. $/Abc/def/*.cs. The item may be a server or a local path.</param>
            <param name="recursion">The recursion type to apply to the provided path. When querying the history of files,
            it is common to provide RecursionType.None. When querying the history of a folder, it is common to provide
            RecursionType.Full.</param>
            <param name="maxResults">This parameter allows the caller to limit the number of results returned. QueryHistory
            pages results back from the server on demand, so limiting your own consumption of the returned IEnumerable is
            almost as effective (from a performance perspective) as providing a fixed value here. The most common value to
            provide for this parameter is Int32.MaxValue.</param>
            <returns>An enumerable collection of Changeset objects matching the specified criteria.</returns>
            <remarks>First shipped in TFS 2012</remarks>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.#ctor">
            <summary>
            The VersionControlServer object represents the repository.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.UpdateUserName">
            <summary>
            Fix the display name for this user on the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CreateWorkspace(System.String)">
            <summary>
            Create a new workspace.  The calling identity must have the CreateWorkspace global permission.
            The comment is empty, the computer attribute is defaulted to the current machine, and the 
            workspace has no working folder mappings. An exception is thrown if the workspace cannot be created.
            </summary>
            <param name="name">The name of this workspace.  Must be unique for this owner</param>
            <returns>A reference to a workspace object representing the new workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CreateWorkspace(System.String,System.String)">
            <summary>
            Create a new workspace.  The calling identity must have the CreateWorkspace global permission.
            The comment is empty, the computer attribute is defaulted to the current machine, and the 
            workspace has no working folder mappings. An exception is thrown if the workspace cannot be created.
            </summary>
            <param name="name">The name of this workspace.  Must be unique for this owner</param>
            <param name="owner">The owner of this workspace</param>
            <returns>A reference to a workspace object representing the new workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CreateWorkspace(System.String,System.String,System.String)">
            <summary>
            Create a new workspace.  The calling identity must have the CreateWorkspace global permission.
            The workspace has no working folders and the computer attribute is defaulted to the current 
            machine.  An exception is thrown if the workspace cannot be created.
            </summary>
            <param name="name">The name of this workspace.  Must be unique for this owner</param>
            <param name="owner">The owner of this workspace</param>
            <param name="comment">A descriptive comment for the workspace</param>
            <returns>A reference to a workspace object representing the new workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CreateWorkspace(System.String,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[])">
            <summary>
            Create a new workspace.  The calling identity must have the CreateWorkspace global permission.
            This method returns a reference to a Workspace object.  The computer attribute is defaulted to
            the current machine.  An exception is thrown if the workspace cannot be created.
            </summary>
            <param name="name">The name of this workspace.  Must be unique for this owner</param>
            <param name="owner">The owner of this workspace</param>
            <param name="comment">A descriptive comment for the workspace</param>
            <param name="mappings">An array of working folders to be established for the workspace</param>
            <returns>A reference to a workspace object representing the new workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CreateWorkspace(System.String,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[],System.String)">
            <summary>
            Create a new workspace.  The calling identity must have the CreateWorkspace global permission.
            An exception is thrown if the workspace cannot be created.
            </summary>
            <param name="name">The name of this workspace.  Must be unique for this owner</param>
            <param name="owner">The owner of this workspace</param>
            <param name="comment">A descriptive comment for the workspace</param>
            <param name="mappings">An array of working folders to be established for the workspace</param>
            <param name="computer">The computer on which the workspace will exist</param>
            <returns>A reference to a workspace object representing the new workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CreateWorkspace(System.String,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[],System.String,System.Boolean)">
            <summary>
            Create a new workspace.  The calling identity must have the CreateWorkspace global permission.
            An exception is thrown if the workspace cannot be created.
            </summary>
            <param name="name">The name of this workspace.  Must be unique for this owner</param>
            <param name="owner">The owner of this workspace</param>
            <param name="comment">A descriptive comment for the workspace</param>
            <param name="mappings">An array of working folders to be established for the workspace</param>
            <param name="computer">The computer on which the workspace will exist</param>
            <param name="removeUnparentedCloaks">When true, will strip from the mappings any cloaks not parented by a mapping</param>
            <returns>A reference to a workspace object representing the new workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CreateWorkspace(System.String,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkingFolder[],System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkspacePermissionProfile,System.Boolean)">
            <summary>
            Create a new workspace.  The calling identity must have the CreateWorkspace global permission.
            An exception is thrown if the workspace cannot be created.
            </summary>
            <param name="name">The name of this workspace.  Must be unique for this owner</param>
            <param name="owner">The owner of this workspace</param>
            <param name="comment">A descriptive comment for the workspace</param>
            <param name="mappings">An array of working folders to be established for the workspace</param>
            <param name="computer">The computer on which the workspace will exist</param>
            <param name="permissionProfile">The permission profile for this workspace</param>
            <param name="removeUnparentedCloaks">When true, will strip from the mappings any cloaks not parented by a mapping</param>
            <returns>A reference to a workspace object representing the new workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CreateWorkspace(Microsoft.TeamFoundation.VersionControl.Client.CreateWorkspaceParameters)">
            <summary>
            Create a new workspace.  The calling identity must have the CreateWorkspace global permission.
            An exception is thrown if the workspace cannot be created.
            </summary>
            <param name="createWorkspaceParameters">A CreateWorkspaceParameters instance describing the workspace to be created.</param>
            <returns>A reference to a workspace object representing the new workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.DeleteWorkspace(System.String,System.String)">
            <summary>
            Deletes the workspace with the specified name and owner.
            </summary>
            <param name="workspaceName">The name of the workspace to delete</param>
            <param name="workspaceOwner">The owner of the workspace to delete</param>
            <returns>true if the workspace was deleted; false if it was canceled (throws if the request
              fails on the server)</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetWorkspace(System.String)">
            <summary>
            Retrieve the workspace that is mapped to the provided local path.  This method searches all known 
            workspaces on the current computer to identify a workspace that has explicitly or implicitly mapped 
            the provided local path.  If no workspace is found, this method throws a ItemNotMappedException.
            </summary>
            <param name="localPath">A local path for which a workspace is desired</param>
            <returns>A reference to the workspace object that has mapped the specified local path</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.TryGetWorkspace(System.String)">
            <summary>
            This is the same as GetWorkspace() except that it returns null rather than throwing ItemNotMappedException
            if the path is not in any known local workspace.
            </summary>
            <param name="localPath">A local path for which a workspace is desired</param>
            <returns>A reference to the workspace object that has mapped the specified local path or null
              if the local path is not in a local workspace</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetWorkspace(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo)">
            <summary>
            Retrieve a workspace from the name and owner in the specified WorkspaceInfo.  
            </summary>
            <param name="workspaceInfo">workspace information object</param>
            <returns>A reference to the workspace object representing the workspace with the specified name and owner</returns>    
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetWorkspace(System.String,System.String)">
            <summary>
            Retrieve a workspace with the specified name and owner.  The workspace does not need to be on the 
            current computer.  If the workspace cannot be found, the method throws.
            </summary>
            <param name="workspaceName">The name of the workspace</param>
            <param name="workspaceOwner">The owner of the workspace</param>
            <returns>A reference to the workspace object representing the workspace with the specified name and owner</returns>    
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryWorkspaces(System.String,System.String,System.String)">
            <summary>
            Retrieves a list of workspaces that matches the specified name, owner, and/or computer.
            </summary>
            <param name="workspaceName">The name of the workspace or null for all workspace names</param>
            <param name="workspaceOwner">The username of the owner or null for all users</param>
            <param name="computer">The name of the host computer or null for all computers</param>
            <returns>The set of workspaces matching the provided filters</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryWorkspaces(System.String,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.WorkspacePermissions)">
            <summary>
            Retrieves a list of workspaces that matches the specified name, owner, and/or computer.
            Also allows filtering by permission.
            </summary>
            <param name="workspaceName">The name of the workspace or null for all workspace names</param>
            <param name="workspaceOwner">The username of the owner or null for all users</param>
            <param name="computer">The name of the host computer or null for all computers</param>
            <param name="permissionsFilter">WorkspacePermissions to use for filtering by the AuthorizedUsers If not
             permissions. Supply WorkspacePermissions.NoneOrNotSupported to not use permission filtering.</param>
            <returns>The set of workspaces matching the provided filters</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.StripUnsupportedCheckinOptions(Microsoft.TeamFoundation.VersionControl.Client.CheckInParameters)">
            <summary>
            Given a CheckInParameters instance, strip out those options not supported by the server.
            Some options are not supported by older servers. If they remain set on the CheckInParameters instance,
            the CheckIn method will throw a FeatureNotSupportedException.
            </summary>
            <param name="checkInParameters">CheckInParameters instance whose options will be stripped appropriately</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CheckInShelveset(System.String,System.String)">
            <summary>
            Submit an existing shelveset for checkin to the repository. Work items associated with the
            changeset will be either associated or resolved once the checkin completes.
            </summary>
            <param name="shelvesetName">The name of the shelveset to submit</param>
            <param name="ownerName">The owner of the shelveset</param>
            <returns>The changeset ID created if successful</returns>
            <exception cref="T:System.ApplicationException" />
            <exception cref="T:Microsoft.TeamFoundation.VersionControl.Client.CheckinException" />
            <exception cref="T:Microsoft.TeamFoundation.VersionControl.Client.ShelvesetNotFoundException" />
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CheckInShelveset(Microsoft.TeamFoundation.VersionControl.Client.ShelvesetCheckInParameters)">
            <summary>
            Submit an existing shelveset for checkin to the repository. Work items associated with the
            changeset will be either associated or resolved once the checkin completes.
            </summary>
            <param name="checkinParameters">An instance of ShelvesetCheckInParameters that describes
            the shelveset to be checked in.</param>
            <returns>The changeset ID created if successful</returns>
            <exception cref="T:System.ApplicationException" />
            <exception cref="T:Microsoft.TeamFoundation.VersionControl.Client.CheckinException" />
            <exception cref="T:Microsoft.TeamFoundation.VersionControl.Client.ShelvesetNotFoundException" />
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetAllCheckinNoteFieldNames">
            <summary>
            Return a list of all of the checkin note fields that have ever been used in this database.
            </summary>
            <returns>List of checkin note field names</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.RenameCheckinNoteFieldName(System.String,System.String,System.String)">
            <summary>
            Rename all instances of the specified checkin note field to the new specified name for
            the given team project folder.
            </summary>
            <param name="path">the path to a team project folder</param>
            <param name="oldName">Old checkin note field name</param>
            <param name="newName">New checkin note field name</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetCheckinNoteDefinitions(Microsoft.TeamFoundation.VersionControl.Client.TeamProject[])">
            <summary>
            Look up the field definitions supported for checkin note data
            </summary>
            <param name="teamProjects">array of team projects to look up against</param>
            <returns>CheckinNoteFieldDefinition array that unions the fields of the server items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetPermissions(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Gets the permissions for items in the repository.
            </summary>
            <param name="items">the items</param>
            <param name="recursionType">the recursion to use when matching items</param>
            <returns>the permissions from the repository</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetPermissions(System.String[],System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Gets the permissions for items in the repository.
            </summary>
            <param name="identityNames">the user or group names (may be null)</param>
            <param name="items">the items</param>
            <param name="recursionType">the recursion to use when matching items</param>
            <returns>the permissions from the repository</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetPermissions(Microsoft.TeamFoundation.VersionControl.Client.SecurityChange[])">
            <summary>
            Sets the permissions for items in the repository.
            </summary>
            <param name="securityChanges">the list of changes to send to the server</param>
            <returns>a list of successful changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetGlobalPermissions(System.String[])">
            <summary>
            Gets the global permissions for the selected users in the repository.
            </summary>
            <param name="identityNames">the user or group names (may be null for all identities)</param>
            <returns>the permissions from the repository</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetGlobalPermissions(Microsoft.TeamFoundation.VersionControl.Client.PermissionChange[])">
            <summary>
            Sets the permissions for items in the repository.
            </summary>
            <param name="permissionChanges">the list of changes to send to the server</param>
            <returns>a list of successful changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetEffectivePermissions(System.String,System.String)">
            <summary>
            Computes the permissions for a user against a particular item.  Applies 
            the allow and deny lists, inheritance, and group membership rules to 
            come up with a simple list of permissions the user has.
            </summary>
            <param name="userName">Name of user to check</param>
            <param name="item">Item to check (server or local path)</param>
            <returns>Array of permission names</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetEffectiveGlobalPermissions(System.String)">
            <summary>
            Computes the global permissions for a user.  Applies the allow and deny lists,
            inheritance, and group membership rules to come up with a simple list of permissions
            the user has.
            </summary>
            <param name="userName">Name of user to check</param>
            <returns>Array of permission names</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetFileTypes">
            <summary>
            Gets the list of file types registered on the server.
            </summary>
            <returns>the file types known to the server</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetFileTypes(Microsoft.TeamFoundation.VersionControl.Client.FileType[])">
            <summary>
            Sets the file types registered on the server.
            </summary>
            <param name="fileTypes">the new set of file types known to the server</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryCachedFileType(System.String)">
            <summary>
            Queries our local cache for the FileType object for the specified 
            extension.  A server call can be made here to load the cache.  Null
            is returned if the extension has no associated FileType.
            </summary>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.ServerItemExists(System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemType)">
            <summary>
            Returns true if the server item of the specified type exists in the repository.
            </summary>
            <param name="path">the path to check, may be server or local</param>
            <param name="itemType">the type of the item</param>
            <returns>true if the item in the repository</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.ServerItemExists(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType)">
            <summary>
            Returns true if the server item of the specified type exists in the repository.
            </summary>
            <param name="path">the path to check, may be server or local</param>
            <param name="version">the version of the item to check for</param>
            <param name="deletedState">whether the item must be non-deleted, deleted, or either</param>
            <param name="itemType">the type of the item</param>
            <returns>true if the item in the repository</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItem(System.String)">
            <summary>
            Gets the Item object for the path specified.
            </summary>
            <param name="path">The path to the item, may be server or local</param>
            <returns>The item or throws an exception</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            Gets the Item object for the path specified.
            </summary>
            <param name="path">The path to the item, may be server or local</param>
            <param name="version">The version being listed</param>
            <returns>The item or throws an exception</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32)">
            <summary>
            Gets the Item object for the path specified.
            </summary>
            <param name="path">The path to the item, may be server or local</param>
            <param name="version">The version being listed</param>
            <param name="deletionId">The deletion ID of the specified item</param>
            <returns>The item or throws an exception</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState)">
            <summary>
            Gets the Item object for the path specified.
            </summary>
            <param name="path">The path to the item, may be server or local</param>
            <param name="version">The version being listed</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <returns>The item or throws an exception</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,System.Boolean)">
            <summary>
            Gets the Item object for the path specified.
            </summary>
            <param name="path">The path to the item(s) being listed, may be server or local</param>
            <param name="version">The version being listed</param>
            <param name="deletionId">The deletion ID of the specified item</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>The item or throws an exception</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,System.Boolean)">
            <summary>
            Gets the Item object for the path specified.
            </summary>
            <param name="path">The path to the item(s) being listed, may be server or local</param>
            <param name="version">The version being listed</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>The item or throws an exception</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions)">
            <summary>
            Gets the Item object for the path specified.
            </summary>
            <param name="path">The path to the item(s) being listed, may be server or local</param>
            <param name="version">The version being listed</param>
            <param name="deletionId">The deletion ID of the specified item</param>
            <param name="options">Additional behavior flags (see GetItemsOptions).</param>
            <returns>The item or throws an exception</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItem(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions)">
            <summary>
            Gets the Item object for the path specified.
            </summary>
            <param name="path">The path to the item(s) being listed, may be server or local</param>
            <param name="version">The version being listed</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="options">Additional behavior flags (see GetItemsOptions).</param>
            <returns>The item or throws an exception</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItems(System.String)">
            <summary>
            Retrieves a list of all items in the repository that match the specified path.  If the 'path' argument
            is a file, returns a set of items containing just that file.  If the 'path' is a folder, returns
            a set of items contained in that folder.  If the 'path' contains a wildcard character,
            returns a set of items in the specified folder that match the wildcard.
            </summary>
            <param name="path">The path to the item(s) being listed, may be server or local</param>
            <returns>An ItemSet object containing a collection of matching Items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItems(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Retrieves a list of all items in the repository that match the specified path.  If the 'path' argument
            is a file, returns a set of items containing just that file.  If the 'path' is a folder, returns
            a set of items containing all items in that folder.  If the 'path' contains a wildcard character,
            returns a set of items in the specified folder that match the wildcard.
            </summary>
            <param name="path">The path to the item(s) being listed, may be server or local</param>
            <param name="recursion">
            A flag representing whether the items should be listed from subfolders.
            </param>
            <returns>An ItemSet object containing a collection of matching Items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItems(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Retrieves a list of all items in the repository that match the specified path and version.  If the 
            'path' argument is a file, returns a set of items containing just that file.  If the 'path' is a 
            folder, returns a set of items containing all items in that folder.  If the 'path' contains a 
            wildcard character, returns a set of items in the specified folder that match the wildcard.
            </summary>
            <param name="path">The path to the item(s) being listed, may be server or local</param>
            <param name="version">The version being listed</param>
            <param name="recursion">A flag representing whether the items should be listed from subfolders</param>
            <returns>An ItemSet object containing a collection of matching Items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItems(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType)">
            <summary>
            Retrieves a list of all items in the repository that match the specified path and version.  If the 
            'path' argument is a file, returns a set of items containing just that file.  If the 'path' is a 
            folder, returns a set of items containing all items in that folder.  If the 'path' contains a 
            wildcard character, returns a set of items in the specified folder that match the wildcard.
            </summary>
            <param name="path">The path to the item(s) being listed, may be server or local</param>
            <param name="version">The version being listed</param>
            <param name="recursion">A flag representing whether the items should be listed from subfolders</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to return files, folders, or both</param>
            <returns>An ItemSet object containing a collection of matching Items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItems(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.Boolean)">
            <summary>
            Retrieves a list of all items in the repository that match the specified path and version.  If the 
            'path' argument is a file, returns a set of items containing just that file.  If the 'path' is a 
            folder, returns a set of items containing all items in that folder.  If the 'path' contains a 
            wildcard character, returns a set of items in the specified folder that match the wildcard.
            </summary>
            <param name="path">The path to the item(s) being listed, may be server or local</param>
            <param name="version">The version being listed</param>
            <param name="recursion">A flag representing whether the items should be listed from subfolders</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to return files, folders, or both</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>An ItemSet object containing a collection of matching Items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItems(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.Boolean)">
            <summary>
            Retrieves a list of all items in the repository that match the specified path and version.  If the 
            'path' argument is a file, returns a set of items containing just that file.  If the 'path' is a 
            folder, returns a set of items containing all items in that folder.  If the 'path' contains a 
            wildcard character, returns a set of items in the specified folder that match the wildcard.
            </summary>
            <param name="itemSpec">The item specifier for the item(s) being listed, may be server or local</param>
            <param name="version">The version being listed</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to return files, folders, or both</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>An ItemSet object containing a collection of matching Items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItems(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType)">
            <summary>
            Retrieves a list of all items in the repository that match the specified path and version.  If the 
            'path' argument is a file, returns a set of items containing just that file.  If the 'path' is a 
            folder, returns a set of items containing all items in that folder.  If the 'path' contains a 
            wildcard character, returns a set of items in the specified folder that match the wildcard.
            </summary>
            <param name="itemSpecs">The item specifiers for the item(s) being listed, may be server or local</param>
            <param name="version">The version being listed</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to return files, folders, or both</param>
            <returns>ItemSet objects containing collections of matching Items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItems(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.Boolean)">
            <summary>
            Retrieves a list of all items in the repository that match the specified path and version.  If the 
            'path' argument is a file, returns a set of items containing just that file.  If the 'path' is a 
            folder, returns a set of items containing all items in that folder.  If the 'path' contains a 
            wildcard character, returns a set of items in the specified folder that match the wildcard.
            </summary>
            <param name="itemSpecs">The item specifiers for the item(s) being listed, may be server or local</param>
            <param name="version">The version being listed</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to return files, folders, or both</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>ItemSet objects containing collections of matching Items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItems(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions)">
            <summary>
            Retrieves a list of all items in the repository that match the specified path and version.  If the 
            'path' argument is a file, returns a set of items containing just that file.  If the 'path' is a 
            folder, returns a set of items containing all items in that folder.  If the 'path' contains a 
            wildcard character, returns a set of items in the specified folder that match the wildcard.
            </summary>
            <param name="itemSpecs">The item specifiers for the item(s) being listed, may be server or local</param>
            <param name="version">The version being listed</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to return files, folders, or both</param>
            <param name="options">Additional behavior flags (see GetItemsOptions).</param>
            <param name="filters">An array of property filters that specify what kinds of properties (if any) 
                                  you would like the server to return.
            </param>
            <returns>ItemSet objects containing collections of matching Items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItems(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions,System.String[],System.String[])">
            <summary>
            Retrieves a list of all items in the repository that match the specified path and version.  If the 
            'path' argument is a file, returns a set of items containing just that file.  If the 'path' is a 
            folder, returns a set of items containing all items in that folder.  If the 'path' contains a 
            wildcard character, returns a set of items in the specified folder that match the wildcard.
            
            Note, specifying either itemPropertyFilters or itemAttributeFilters will only work against a TFS 11 
            or newer server. If you need to retrieve attributes on items against a TFS 2010 or older server then you
            will need to use the GetVersionedItemProperty method.
            </summary>
            <param name="itemSpecs">The item specifiers for the item(s) being listed, may be server or local</param>
            <param name="version">The version being listed</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to return files, folders, or both</param>
            <param name="options">Additional behavior flags (see GetItemsOptions).</param>
            <param name="filters">An array of property filters that specify what kinds of properties (if any) 
                                  you would like the server to return.
            </param>
            <returns>ItemSet objects containing collections of matching Items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetExtendedItems(System.String,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType)">
            <summary>
            Retrieves a list of extended items in the repository that match the specified criteria.  If the
            'path' argument is a file, returns a set of items containing just that file.  If the 'path' is a 
            folder, returns a set of items containing all items in that folder.  If the 'path' contains a 
            wildcard character, returns a set of items in the specified folder that match the wildcard.
            </summary>
            <param name="path">The path to the item(s) being listed, may be server or local</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to return files, folders, or both</param>
            <returns>An ExtendedItem array containing the matching ExtendedItem instances</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetExtendedItems(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType)">
            <summary>
            For each input ItemSpec, retrieves a list of extended items in the repository that match the specified criteria.  
            If the 'path' argument is a file, returns a set of items containing just that file.  If the 'path' is a 
            folder, returns a set of items containing all items in that folder.  If the 'path' contains a 
            wildcard character, returns a set of items in the specified folder that match the wildcard.
            </summary>
            <param name="itemSpecs">The item specifiers for the item(s) being listed, may be server or local</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to return files, folders, or both</param>
            <returns>An array of ExtendedItem arrays, each containing the matching ExtendedItem instances
            associated with each specified ItemSpec</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetExtendedItems(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions)">
            <summary>
            For each input ItemSpec, retrieves a list of extended items in the repository that match the specified criteria.  
            If the 'path' argument is a file, returns a set of items containing just that file.  If the 'path' is a 
            folder, returns a set of items containing all items in that folder.  If the 'path' contains a 
            wildcard character, returns a set of items in the specified folder that match the wildcard.
            </summary>
            <param name="itemSpecs">The item specifiers for the item(s) being listed, may be server or local</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to return files, folders, or both</param>
            <param name="options">Options</param>
            <returns>An array of ExtendedItem arrays, each containing the matching ExtendedItem instances
            associated with each specified ItemSpec</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetExtendedItems(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions,System.String[])">
            <summary>
            For each input ItemSpec, retrieves a list of extended items in the repository that match the specified criteria.  
            If the 'path' argument is a file, returns a set of items containing just that file.  If the 'path' is a 
            folder, returns a set of items containing all items in that folder.  If the 'path' contains a 
            wildcard character, returns a set of items in the specified folder that match the wildcard.
            </summary>
            <param name="itemSpecs">The item specifiers for the item(s) being listed, may be server or local</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to return files, folders, or both</param>
            <param name="options">Options</param>
            <param name="itemPropertyFilters">List of property names to populate the ExtendedItem with if they exist.</param>
            <returns>An array of ExtendedItem arrays, each containing the matching ExtendedItem instances
            associated with each specified ItemSpec</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.AddProxy(System.String)">
            <summary>
            Adds a new proxy server record.
            </summary>
            <param name="url">The URL of the proxy</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.AddProxy(System.String,System.String)">
            <summary>
            Adds a new proxy server record.
            </summary>
            <param name="url">The URL of the proxy</param>
            <param name="friendlyName">The Friendly Name of the proxy. 
            This may be an empty string.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.AddProxy(Microsoft.TeamFoundation.VersionControl.Client.ProxyInfo)">
            <summary>
            Adds a new proxy server record.
            </summary>
            <param name="proxy">The proxy record to add</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.DeleteProxy(System.String)">
            <summary>
            Deletes the proxy server record for the given proxy urlr.
            </summary>
            <param name="proxyUrl">Url of the proxy record to delete</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetProxy(System.String)">
            <summary>
            Retrieves the record for a proxy server based on url.
            </summary>
            <param name="proxyUrl">Url of the proxy record to get</param>
            <returns>ProxyInfo object if found, null if not.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetProxies(System.String[])">
            <summary>
            Retrieves a list of proxy server records based on proxyId. 
            If a proxy cannot be found for a specific proxyId then the corresponding element in the 
            ProxyInfo output array will be null.
            </summary>
            <param name="proxyIds">Proxy server Identifiers</param>
            <returns>An array of ProxyInfo records for all known proxies configured
            for the server.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetProxies">
            <summary>
            Queries for a list of all configured proxy servers.
            </summary>
            <returns>An array of ProxyInfo records for all known proxies configured
            for the server, or null if there are no proxy records.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetBestProxies(System.String)">
            <summary>
            Attempts to retrieve a list of recommended proxy servers returned in preferential order
            for the given site.
            </summary>
            <param name="site">The site to retrieve recommended proxies for.</param>
            <returns>An array of ProxyInfo records corresponding to the bext
            proxy matches for the given site, or an empty list if no recommended matches
            are found.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.ConfigureProxy(Microsoft.TeamFoundation.VersionControl.Client.ProxyInfo)">
            <summary>
            Configures the given proxy.
            </summary>
            <param name="proxy">The proxy to configure</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.ConfigureProxy(System.String)">
            <summary>
            Configures the given proxy url.
            </summary>
            <param name="proxyUrl">The url of the proxy to configure</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.ConfigureProxy(System.String,System.Boolean)">
            <summary>
            Configures the given proxy url.
            </summary>
            <param name="proxyUrl">The url of the proxy to configure</param>
            <param name="proxyAutoConfigured">If the configuration is an automtic
            configuration</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.AutomaticallyConfigureProxy">
            <summary>
            Automatically configure the proxy setting for the given site. The list of proxies that
            will attempt to configure is chosen from those that match the site.
            </summary>
            <param name="site">The site to configure for. This may be a null or empty string</param>
            <param name="exclude">A list of proxy URLs that should be excluded from the 
            configuration. This may be a null or empty list.</param>
            <returns>The proxy record of the configured proxy, or null if a proxy was not configured.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetIdentityDisplayName(Microsoft.TeamFoundation.Framework.Client.TeamFoundationIdentity)">
            <summary>
            Gets the appropriate display name based upon the version of the server you are talking to.
            If this is a TFS 2010 and prior server, it will return the account name else the display name
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItem(System.Int32,System.Int32)">
            <summary>
            Retrieves an item from repository, based on itemId and changeset. If an item cannot
            be found, null is returned.
            </summary>
            <param name="itemId">Item identifier</param>
            <param name="changesetNumber">Changeset version to get</param>
            <returns>the Item if available, null if not found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItem(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Retrieves an item from repository, based on itemId and changeset. If an item cannot
            be found, null is returned.
            </summary>
            <param name="itemId">Item identifier</param>
            <param name="changesetNumber">Changeset version to get</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>the Item if available, null if not found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItem(System.Int32,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions)">
            <summary>
            Retrieves an item from repository, based on itemId and changeset. If an item cannot
            be found, null is returned.
            </summary>
            <param name="itemId">Item identifier</param>
            <param name="changesetNumber">Changeset version to get</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>the Item if available, null if not found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItems(System.Int32[],System.Int32)">
            <summary>
            Retrieves a list of items from repository, based on itemId and changeset. If an item cannot
            be found for a specific itemId and changeset then the corresponding element in the item
            output array will be null.
            </summary>
            <param name="itemIds">Item identifiers</param>
            <param name="changesetNumber">Changeset version to get</param>
            <returns>Array of items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetItems(System.Int32[],System.Int32,Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions)">
            <summary>
            Retrieves a list of items from repository, based on itemId and changeset. If an item cannot
            be found for a specific itemId and changeset then the corresponding element in the item
            output array will be null
            </summary>
            <param name="itemIds">Item identifiers</param>
            <param name="changesetNumber">Changeset version to get</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>Array of items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetPendingSets(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Gets the pending changes for the specified query.
            </summary>
            <param name="items">the paths to query for pending changes</param>
            <param name="recursion">Recursion level for querying pending changes</param>
            <returns>an array of pending sets with the pending changes for the server items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryPendingSets(System.String[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.String,System.String)">
            <summary>
            Gets the pending changes for the specified query.
            </summary>
            <param name="items">the paths to query for pending changes</param>
            <param name="recursion">Recursion level for querying pending changes</param>
            <param name="queryWorkspaceName">the workspace name (may be null)</param>
            <param name="queryUserName">the user name (may be null), which is the workspace owner if the 
              workspace name is not null</param>
            <returns>an array of pending sets with the pending changes for the server items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryPendingSets(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.String,System.String)">
            <summary>
            Gets the pending changes for the specified query.
            </summary>
            <param name="itemSpecs">the items</param>
            <param name="queryWorkspaceName">the workspace name (may be null)</param>
            <param name="queryUserName">the user name (may be null), which is the workspace owner if the 
              workspace name is not null</param>
            <returns>an array of pending sets with the pending changes for the server items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryPendingSets(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.String,System.String,System.Boolean)">
            <summary>
            Gets the pending changes for the specified query.
            </summary>
            <param name="itemSpecs">the items</param>
            <param name="queryWorkspaceName">the workspace name (may be null)</param>
            <param name="queryUserName">the user name (may be null), which is the workspace owner if the 
              workspace name is not null</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>an array of pending sets with the pending changes for the server items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryPendingSets(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the pending changes for the specified query.
            </summary>
            <param name="itemSpecs">the items</param>
            <param name="queryWorkspaceName">the workspace name (may be null)</param>
            <param name="queryUserName">the user name (may be null), which is the workspace owner if the 
              workspace name is not null</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
              <param name="includeCandidates">If true for a local workspace, candidate changes will be populated on
              the pending set. A pending set will be returned if the workspace contains pending changes or candidate
              changes</param>
            <returns>an array of pending sets with the pending changes for the server items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryPendingSets(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.String,System.String,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Gets the pending changes for the specified query.
            </summary>
            <param name="itemSpecs">the items</param>
            <param name="queryWorkspaceName">the workspace name (may be null)</param>
            <param name="queryUserName">the user name (may be null), which is the workspace owner if the 
              workspace name is not null</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
              <param name="includeCandidates">If true for a local workspace, candidate changes will be populated on
              the pending set. A pending set will be returned if the workspace contains pending changes or candidate
              changes</param>
            <param name="itemPropertyFilters">List of property names that should be retuned on the
            PendingChange object if they exist.</param>
            <returns>an array of pending sets with the pending changes for the server items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetPendingChange(System.Int32)">
            <summary>
            Retrieves a pending change from repository, based on pending change ID.
            </summary>
            <param name="pendingChangeId">Pending change identifier</param>
            <returns>PendingChange, if one is found matching the ID; null otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetPendingChange(System.Int32,System.Boolean)">
            <summary>
            Retrieves a pending change from repository, based on pending change ID.
            </summary>
            <param name="pendingChangeId">Pending change identifier</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>PendingChange, if one is found matching the ID; null otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetPendingChanges(System.Int32[])">
            <summary>
            Retrieves a list of pending changes from repository, based on pending change ID. If a pending
            change cannot be found for a specific pending change ID, then the corresponding element in the
            pending change output array will be null.
            </summary>
            <param name="pendingChangeIds">Pending change identifiers</param>
            <returns>Array of PendingChanges</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetPendingChanges(System.Int32[],System.Boolean)">
            <summary>
            Retrieves a list of pending changes from repository, based on pending change ID. If a pending
            change cannot be found for a specific pending change ID, then the corresponding element in the
            pending change output array will be null.
            </summary>
            <param name="pendingChangeIds">Pending change identifiers</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>Array of PendingChanges</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetLatestChangesetId">
            <summary>
            Retrieves the changeset ID for the latest changeset in the repository.  Call GetChangeset()
            with the result of this method to get the Changeset object with the details, if needed.
            </summary>
            <returns>The latest changeset ID</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetChangeset(System.Int32)">
            <summary>
            Retrieves the details (comment, changes, etc.) for a changeset.
            </summary>
            <param name="changesetId">The numeric ID for the changeset being researched</param>
            <returns>A reference to a changeset object specifying these details</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetChangeset(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Retrieves the details (comment, changes, etc.) for a changeset.
            </summary>
            <param name="changesetId">The numeric ID for the changeset being researched</param>
            <param name="includeChanges">If true, the server will include the changes in the changeset;
              otherwise, only the metadata will be returned</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>A reference to a changeset object specifying these details</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetChangeset(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Retrieves the details (comment, changes, etc.) for a changeset.
            </summary>
            <param name="changesetId">The numeric ID for the changeset being researched</param>
            <param name="includeChanges">If true, the server will include the changes in the changeset;
              otherwise, only the metadata will be returned</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <param name="includeSourceRenames">Include rename sources in the changes returned</param>
            <returns>A reference to a changeset object specifying these details</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetChangeset(System.Int32,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Retrieves the details (comment, changes, etc.) for a changeset.
            </summary>
            <param name="changesetId">The numeric ID for the changeset being researched</param>
            <param name="includeChanges">If true, the server will include the changes in the changeset;
              otherwise, only the metadata will be returned</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <param name="changesetPropertyFilters">List of the property name filters to return</param>
            <returns>A reference to a changeset object specifying these details</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetChangeset(System.Int32,System.Boolean,System.Boolean,System.String[],System.String[],System.String[])">
            <summary>
            Retrieves the details (comment, changes, etc.) for a changeset.
            </summary>
            <param name="changesetId">The numeric ID for the changeset being researched</param>
            <param name="includeChanges">If true, the server will include the changes in the changeset;
              otherwise, only the metadata will be returned</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <param name="changesetPropertyFilters">List of the property name filters to return</param>
            <param name="itemAttributeFilters">List of the attribute name filters to return on the items.</param>
            <param name="itemPropertyFilters">List of the property name filters to return on the items.</param>
            <returns>A reference to a changeset object specifying these details</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetChangesForChangeset(System.Int32,System.Boolean,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec)">
            <summary>
            Gets the changes within a changeset
            Allows the caller to page changes back from the server.
            </summary>
            <param name="changesetId">The changeset for which to get changes</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false.</param>
            <param name="pageSize">The # of items to return.</param>
            <param name="lastItem">Instructs the server to return items which sort after this item. If null, the server will begin
            from the start of the changeset. This parameter should be null in the first call to this method, and then should be the
            last seen value on subsequent calls</param>
            <returns>Array of Changes.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetChangesForChangeset(System.Int32,System.Boolean,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,System.String[])">
            <summary>
            Gets the changes within a changeset
            Allows the caller to page changes back from the server.
            </summary>
            <param name="changesetId">The changeset for which to get changes</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false.</param>
            <param name="pageSize">The # of items to return.</param>
            <param name="lastItem">Instructs the server to return items which sort after this item. If null, the server will begin
            from the start of the changeset. This parameter should be null in the first call to this method, and then should be the
            last seen value on subsequent calls</param>
            <param name="propertyNameFilters">Array of the property name filters to return for each Change.</param>
            <returns>Array of Changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetChangesForChangeset(System.Int32,System.Boolean,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,System.String[],System.Boolean)">
            <summary>
            Gets the changes within a changeset
            Allows the caller to page changes back from the server.
            </summary>
            <param name="changesetId">The changeset for which to get changes</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false.</param>
            <param name="pageSize">The # of items to return.</param>
            <param name="lastItem">Instructs the server to return items which sort after this item. If null, the server will begin
            from the start of the changeset. This parameter should be null in the first call to this method, and then should be the
            last seen value on subsequent calls</param>
            <param name="itemAttributeFilters">Array of the property name filters to return for each Change.</param>
            <param name="includeMergeSourceInfo">Whether to include source information about renames / merges</param>
            <returns>Array of Changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetChangesForChangeset(System.Int32,System.Boolean,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,System.String[],System.String[],System.Boolean)">
            <summary>
            Gets the changes within a changeset
            Allows the caller to page changes back from the server.
            </summary>
            <param name="changesetId">The changeset for which to get changes</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false.</param>
            <param name="pageSize">The # of items to return.</param>
            <param name="lastItem">Instructs the server to return items which sort after this item. If null, the server will begin
            from the start of the changeset. This parameter should be null in the first call to this method, and then should be the
            last seen value on subsequent calls</param>
            <param name="itemAttributeFilters">Array of the property name filters to return for each Change.</param>
            <param name="includeMergeSourceInfo">Whether to include source information about renames / merges</param>
            <returns>Array of Changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetBranchHistory(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            Look up the branch history of the requested items.  For each input ItemSpec, there is
            an associated BranchHistoryTreeItem[] in the output array.
            </summary>
            <param name="itemSpecs">array of requested item specifiers</param>
            <param name="version">the version of the items</param>
            <returns>an array of BranchHistoryTreeItem arrays</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryMergesWithDetails(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
             Look up the merge history (details) of the requested item with an optional source.
            </summary>
            <param name="sourcePath">the local or server path of the optional source item</param>
            <param name="sourceVersion">the version of the optional source spec</param>
            <param name="sourceDeletionId">DeletionId of the source</param>
            <param name="targetPath">the local or server path of the required target item</param>
            <param name="targetVersion">the version of the required target spec</param>
            <param name="targetDeletionId">DeletionId of the target</param>
            <param name="versionFrom">start of the merge history range, null for "start of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="versionTo">end of the merge history range, null for "end of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="recursion">what level of recursion we should apply to the target search.</param>
            <returns>ChangesetMergeDetails object</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryMergesWithDetails(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.Boolean)">
            <summary>
             Look up the merge history (details) of the requested item with an optional source.
            </summary>
            <param name="sourcePath">the local or server path of the optional source item</param>
            <param name="sourceVersion">the version of the optional source spec</param>
            <param name="sourceDeletionId">DeletionId of the source</param>
            <param name="targetPath">the local or server path of the required target item</param>
            <param name="targetVersion">the version of the required target spec</param>
            <param name="targetDeletionId">DeletionId of the target</param>
            <param name="versionFrom">start of the merge history range, null for "start of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="versionTo">end of the merge history range, null for "end of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="recursion">what level of recursion we should apply to the target search.</param>
            <param name="showAll">indicates whether to include merge history of renamed items</param>
            <returns>ChangesetMergeDetails object</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryMerges(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
             Look up the merge history of the requested item with an optional source.
            </summary>
            <param name="sourcePath">the local or server path of the optional source item</param>
            <param name="sourceVersion">the version of the optional source spec</param>
            <param name="targetPath">the local or server path of the required target item</param>
            <param name="targetVersion">the version of the required target spec</param>
            <param name="versionFrom">start of the merge history range, null for "start of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="versionTo">end of the merge history range, null for "end of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="recursion">what level of recursion we should apply to the target search</param>
            <returns>an array of ChangesetMerge objects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryMerges(System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.RecursionType,System.Boolean)">
            <summary>
             Look up the merge history of the requested item with an optional source.
            </summary>
            <param name="sourcePath">the local or server path of the optional source item</param>
            <param name="sourceVersion">the version of the optional source spec</param>
            <param name="targetPath">the local or server path of the required target item</param>
            <param name="targetVersion">the version of the required target spec</param>
            <param name="versionFrom">start of the merge history range, null for "start of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="versionTo">end of the merge history range, null for "end of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="recursion">what level of recursion we should apply to the target search</param>
            <param name="showAll">indicates whether to include merge history of renamed items</param>
            <returns>an array of ChangesetMerge objects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryMerges(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
             Look up the merge history of the requested item with an optional source.
            </summary>
            <param name="sourceItemSpec">the optional source itemspec</param>
            <param name="sourceVersion">the version of the optional source spec</param>
            <param name="targetItemSpec">the required target itemspec</param>
            <param name="targetVersion">the version of the required target spec</param>
            <param name="versionFrom">start of the merge history range, null for "start of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="versionTo">end of the merge history range, null for "end of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <returns>an array of ChangesetMerge objects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryMerges(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Boolean)">
            <summary>
             Look up the merge history of the requested item with an optional source.
            </summary>
            <param name="sourceItemSpec">the optional source itemspec</param>
            <param name="sourceVersion">the version of the optional source spec</param>
            <param name="targetItemSpec">the required target itemspec</param>
            <param name="targetVersion">the version of the required target spec</param>
            <param name="versionFrom">start of the merge history range, null for "start of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="versionTo">end of the merge history range, null for "end of time"; only
              date, latest, and changeset version specs are supported by the server</param>
            <param name="showAll">indicates whether to include merge history of renamed items</param>
            <returns>an array of ChangesetMerge objects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.TrackMerges(System.Int32[],Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier,Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier[],Microsoft.TeamFoundation.VersionControl.Client.ItemSpec)">
            <summary>
            Returns merges which occurred from a source item for a list of source changesets
            to a set of target items. The source and target items need not be directly related
            </summary>
            <param name="sourceChangesetIds">List of source changeset ids</param>
            <param name="sourceItem">Source Item (recursive) to track merges from</param>
            <param name="targetItems">Target Item (recursive) to track merges to</param>
            <param name="itemFilter">Optional path filter to reduce the scope of source item
            e.g You may want data aggregated upto $/proj/main, but only track the folder $/proj/main/test
            </param>
            <returns>A list of extended merge objects which represent how the changes went from the source item
            to the target item.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.TrackMerges(System.Int32[],Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier,Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier[],Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,System.String[]@)">
            <summary>
            Returns merges which occurred from a source item for a list of source changesets
            to a set of target items. The source and target items need not be directly related
            </summary>
            <param name="sourceChangesetIds">List of source changeset ids</param>
            <param name="sourceItem">Source Item (recursive) to track merges from</param>
            <param name="targetItems">Target Item (recursive) to track merges to</param>
            <param name="itemFilter">Optional path filter to reduce the scope of source item
            e.g You may want data aggregated upto $/proj/main, but only track the folder $/proj/main/test
            </param>
            <param name="partialTargetItems">A list of target items where the source changeset has only been partially merged</param>
            <returns>A list of extended merge objects which represent how the changes went from the source item
            to the target item.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryMergesExtended(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            QueryMergesExtended is used to find the source changes for a given ItemSpec in specific 
            version range. The result is the set of changes as ExtendedMerge's. Which contain the 
            source of the merge (item, version, deletionId, and change), as well as the changeset 
            details.
            
            The changeset is not a completed object. Only the owner, committer, date, comment, and
            changesetId are filled in. No items, release notes or other data.
            </summary>
            <param name="targetItemSpec">Target item of the merge to find source merges</param>
            <param name="targetVersion">The version of the target being identified</param>
            <param name="versionFrom">The start of the range to retrieve merges</param>
            <param name="versionTo">The end of the range to retrieve merges</param>
            <returns>Set of ExtendedMerges for the item and range specified</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryMergesExtended(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Common.QueryMergesExtendedOptions)">
            <summary>
            QueryMergesExtended is used to find the source changes for a given ItemSpec in specific 
            version range. The result is the set of changes as ExtendedMerge's. Which contain the 
            source of the merge (item, version, deletionId, and change), as well as the changeset 
            details.
            
            The changeset is not a completed object. Only the owner, committer, date, comment, and
            changesetId are filled in. No items, release notes or other data.
            </summary>
            <param name="targetItemSpec">Target item of the merge to find source merges</param>
            <param name="targetVersion">The version of the target being identified</param>
            <param name="versionFrom">The start of the range to retrieve merges</param>
            <param name="versionTo">The end of the range to retrieve merges</param>
            <param name="options">Options to use in Query merges extended</param>
            <returns>Set of ExtendedMerges for the item and range specified</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryMergeRelationships(System.String)">
            <summary>
            Returns all items which have a merge relationship to the provided item. 
            </summary>
            <param name="serverItem">Server Item to query.</param>
            <returns>Array of ItemIdentifier objects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetMergeCandidates(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Look up the merge candidates for merging between the requested items.
            </summary>
            <param name="sourcePath">the local or server path of the source of the potential merge</param>
            <param name="targetPath">the local or server path of the target of the potential merge</param>
            <param name="recursion">what level of recursion we should apply to the candidate search</param>
            <returns>an array of MergeCandidate objects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetMergeCandidates(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,System.String)">
            <summary>
            Look up the merge candidates for merging between the requested items.
            </summary>
            <param name="source">the local or server path, deletionId of the source and the recursion of the potential merge</param>
            <param name="targetPath">the local or server path of the target of the potential merge</param>
            <returns>an array of MergeCandidate objects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetMergeCandidates(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,System.String,Microsoft.TeamFoundation.VersionControl.Common.MergeOptionsEx)">
            <summary>
            Look up the merge candidates for merging between the requested items.
            </summary>
            <param name="source">the local or server path, deletionId of the source and the recursion of the potential merge</param>
            <param name="targetPath">the local or server path of the target of the potential merge</param>
            <param name="options">Options to pass to the merge engine</param>
            <returns>an array of MergeCandidate objects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.DownloadFile(System.String,System.String)">
            <summary>
            Downloads the latest version of a file from the server and places its contents in a local
            file.
            </summary>
            <param name="serverPath">The repository path to the file to download</param>
            <param name="localFileName">The local path where the file's contents should be stored</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.DownloadFile(System.String,System.Int32,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.String)">
            <summary>
            Downloads the specified version of a file from the server and places its contents in a
            local file.
            </summary>
            <param name="serverPath">The repository path to the file to download</param>
            <param name="deletionId">The non-zero deletion ID of the file if it has been deleted</param>
            <param name="version">The version of the file to be downloaded</param>
            <param name="localFileName">The local path where the file's contents should be stored</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CreateLabel(Microsoft.TeamFoundation.VersionControl.Client.VersionControlLabel,Microsoft.TeamFoundation.VersionControl.Client.LabelItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.LabelChildOption)">
            <summary>
            Create or update a label.
            </summary>
            <remarks>If an itemSpec doesn't match anything, a Failure will be reported.</remarks>
            <param name="label">the label definition to create or update</param>
            <param name="itemSpecs">the item specs included in the label</param>
            <param name="options">how to handle existing items in a label</param>
            <returns>results of the label operations</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CreateLabel(Microsoft.TeamFoundation.VersionControl.Client.VersionControlLabel,Microsoft.TeamFoundation.VersionControl.Client.LabelItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.LabelChildOption,Microsoft.TeamFoundation.VersionControl.Client.Failure[]@)">
            <summary>
            Create or update a label.
            </summary>
            <remarks>If an itemSpec doesn't match anything, a Failure will be reported.</remarks>
            <param name="label">the label definition to create or update</param>
            <param name="itemSpecs">the item specs included in the label</param>
            <param name="options">how to handle existing items in a label</param>
            <param name="failures">[out] Any failures registered by the unlabel operation</param>
            <returns>results of the label operations</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.UnlabelItem(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            Removes a label that is applied to an item.
            </summary>
            <param name="labelName">The name of the label being removed</param>
            <param name="labelScope">The repository path denoting the scope at which the label is
              defined</param>
            <param name="itemSpecs">An array of items to remove from the label</param>
            <param name="version">The version of the specified items to remove -- typically the label's LabelVersionSpec</param>
            <returns>results of the label operations</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.UnlabelItem(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Predicate{Microsoft.TeamFoundation.VersionControl.Client.Failure},Microsoft.TeamFoundation.VersionControl.Client.Failure[]@)">
            <summary>
            Removes a label that is applied to an item.
            </summary>
            <param name="labelName">The name of the label being removed</param>
            <param name="labelScope">The repository path denoting the scope at which the label is
              defined</param>
            <param name="itemSpecs">An array of items to remove from the label</param>
            <param name="version">The version of the specified items to remove -- typically the label's LabelVersionSpec</param>
            <param name="failures">[out] Any failures registered by the unlabel operation</param>
            <returns>results of the label operations</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.DeleteLabel(System.String,System.String)">
            <summary>
            Deletes the label with the specified name and label scope.
            </summary>
            <param name="labelName">The name of the label to delete</param>
            <param name="labelScope">The server path denoting the scope at which the label is defined</param>
            <returns>results of the label operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryLabels(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Queries for a list of labels applied to items in the repository.
            </summary>
            <param name="labelName">The name of the label being queried</param>
            <param name="labelScope">The repository path denoting the scope at which the label is defined</param>
            <param name="owner">The person who created the label.  This option can be null to match all owners</param>
            <param name="includeItems">If true, the items in the labels will be included</param>
            <returns>the label information for each label selected by the query</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryLabels(System.String,System.String,System.String,System.Boolean,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            Queries for a list of labels applied to items in the repository.
            </summary>
            <param name="labelName">The name of the label being queried</param>
            <param name="labelScope">The repository path denoting the scope at which the label is defined</param>
            <param name="owner">The person who created the label.  This option can be null to match all owners</param>
            <param name="includeItems">If true, the items in the labels will be included</param>
            <param name="filterItem">If not-null, only returns labels containing this item (server or local path)</param>
            <param name="versionFilterItem">Versionspec for filterItem.  Ignored if filterItem is null</param>
            <returns>the label information for each label selected by the query</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryLabels(System.String,System.String,System.String,System.Boolean,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Boolean)">
            <summary>
            Queries for a list of labels applied to items in the repository.
            </summary>
            <param name="labelName">The name of the label being queried</param>
            <param name="labelScope">The repository path denoting the scope at which the label is defined</param>
            <param name="owner">The person who created the label.  This option can be null to match all owners</param>
            <param name="includeItems">If true, the items in the labels will be included</param>
            <param name="filterItem">If not-null, only returns labels containing this item (server or local path)</param>
            <param name="versionFilterItem">Versionspec for filterItem.  Ignored if filterItem is null</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>the label information for each label selected by the query</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CompareLabels(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Queries for a list of labels applied to items in the repository.
            </summary>
            <param name="startLabelName">Name of the label starting the range</param>
            <param name="startLabelScope">Scope of the label starting the range</param>
            <param name="endLabelName">Name of the label ending the range</param>
            <param name="endLabelScope">Scope of the label ending the range</param>
            <param name="minChangeSet">Minimum changeset. 0 == all</param>
            <param name="maxCount">Maximum number of changesets to return</param>
            <returns>the label information for each label selected by the query</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryShelvesets(System.String,System.String)">
            <summary>
            Queries for a list of shelvesets with a given name and/or owner.
            </summary>
            <param name="shelvesetName">The name of the shelveset to look for.  Can be null to match all shelvesets</param>
            <param name="shelvesetOwner">The owner of the shelvesets to look for.  Can be null to match all users</param>
            <returns>An array of shelveset objects matching the query</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryShelvesets(System.String,System.String,System.String[])">
            <summary>
            Queries for a list of shelvesets with a given name and/or owner.
            </summary>
            <param name="shelvesetName">The name of the shelveset to look for.
            Can be null to match all shelvesets</param>
            <param name="shelvesetOwner">The owner of the shelvesets to look for.
            Can be null to match all users</param>
            <param name="propertyNameFilters">The list of properties to be returned on the shelvesets. 
            To get all properties pass a single filter that is simply "*".</param>
            <returns>An array of shelveset objects matching the query</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.DeleteShelveset(Microsoft.TeamFoundation.VersionControl.Client.Shelveset)">
            <summary>
            Removes a shelveset from the server.
            </summary>
            <param name="shelveset">The shelveset to remove</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.DeleteShelveset(System.String,System.String)">
            <summary>
            Removes a shelveset from the server.
            </summary>
            <param name="shelvesetName">The name of the shelveset to remove</param>
            <param name="shelvesetOwner">The owner of the shelveset to remove</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.UpdateShelveset(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.Shelveset)">
            <summary>
            Saves the changes made to the shelveset object.
            
            NOTE: Currently only changes to the property bag are honored. Any other
            changes will result in an exception thrown.
            </summary>
            <param name="shelvesetName">The name of the shelveset to update</param>
            <param name="shelvesetOwner">The owner of the shelveset to update</param>
            <param name="updatedShelveset">The updated shelveset</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryShelvedChanges(Microsoft.TeamFoundation.VersionControl.Client.Shelveset)">
            <summary>
            Gets the shelved changes for the specified query.
            </summary>
            <param name="shelveset">the shelveset to query</param>
            <returns>an array of pending sets with the pending changes for the shelved changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryShelvedChanges(Microsoft.TeamFoundation.VersionControl.Client.Shelveset,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[])">
            <summary>
            Gets the shelved changes for the specified query.
            </summary>
            <param name="shelveset">the shelveset to query</param>
            <param name="itemSpecs">the items</param>
            <returns>an array of pending sets with the pending changes for the shelved changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryShelvedChanges(System.String,System.String)">
            <summary>
            Gets the shelved changes for the specified query.
            </summary>
            <param name="shelvesetName">the shelveset name (may be null)</param>
            <param name="shelvesetOwner">the user name (may be null), which is the shelveset owner if
              the shelveset name is not null</param>
            <returns>an array of pending sets with the pending changes for the shelved changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryShelvedChanges(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[])">
            <summary>
            Gets the shelved changes for the specified query.
            </summary>
            <param name="shelvesetName">the shelveset name (may be null)</param>
            <param name="shelvesetOwner">the user name (may be null), which is the shelveset owner if
              the shelveset name is not null</param>
            <param name="itemSpecs">the items</param>
            <returns>an array of pending sets with the pending changes for the shelved changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryShelvedChanges(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean)">
            <summary>
            Gets the shelved changes for the specified query.
            </summary>
            <param name="shelvesetName">the shelveset name (may be null)</param>
            <param name="shelvesetOwner">the user name (may be null), which is the shelveset owner if
              the shelveset name is not null</param>
            <param name="itemSpecs">the items</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <returns>an array of pending sets with the pending changes for the shelved changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryShelvedChanges(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean,System.String[])">
            <summary>
            Gets the shelved changes for the specified query.
            </summary>
            <param name="shelvesetName">the shelveset name (may be null)</param>
            <param name="shelvesetOwner">the user name (may be null), which is the shelveset owner if
              the shelveset name is not null</param>
            <param name="itemSpecs">the items</param>
            <param name="includeDownloadInfo">If true, the server will include the information needed
              to download files.  Only set this to true if you are going to be downloading the files
              using the objects that are returned.  The call will be faster and require less bandwidth
              when this parameter is false (default for overloads that don't specify it)</param>
            <param name="itemPropertyFilters">List of property names to be returned on the PendingChange
            objects if they exist.</param>
            <returns>an array of pending sets with the pending changes for the shelved changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetAllTeamProjects(System.Boolean)">
            <summary>
            Gets the team projects in that are in the repository.
            </summary>
            <param name="refresh">if true, refresh the team project cache by calling the server;
              otherwise, return all cached team projects</param>
            <returns>the team projects in the repository</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetTeamProjectForServerPath(System.String)">
            <summary>
            Gets the team project for the specified server path.
            </summary>
            <param name="serverPath">the server path for which to get the team project</param>
            <returns>the team project; throws a VersionControlException if it doesn't exist</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.TryGetTeamProjectForServerPath(System.String)">
            <summary>
            Gets the team project for the specified server path.
            </summary>
            <param name="serverPath">the server path for which to get the team project</param>
            <returns>the team project; returns null if it doesn't exist</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetTeamProjectsForServerPaths(System.String[])">
            <summary>
            Gets the team projects in the repository with the specified paths.  If a path doesn't
            correspond to a team project in the repository, there will not be a corresponding
            TeamProject object in the list returned.
            </summary>
            <param name="serverPaths">the server paths for which to get the team projects</param>
            <returns>the team projects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetTeamProject(System.String)">
            <summary>
            Gets the team project in the repository having the corresponding name.
            </summary>
            <param name="name">the name of the team project being requested</param>
            <returns>the team project; throws a VersionControlException if it doesn't exist</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.TryGetTeamProject(System.String)">
            <summary>
            Gets the team project in the repository having the corresponding name.
            </summary>
            <param name="name">the name of the team project being requested</param>
            <returns>the team project; returns null if it doesn't exist</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetTeamProjects(System.String[])">
            <summary>
            Gets the team projects in the repository with the specified names.  If a name doesn't
            correspond to a team project in the repository, there will not be a corresponding
            TeamProject object in the list returned.
            </summary>
            <param name="names">the names of the team projects to get</param>
            <returns>the team projects matching the names</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.UpdateTeamProjectCache">
            <summary>
            Update the team project cache by getting the current projects from the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetTeamProjectCacheRefreshFlagIfNecessary(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.PendingChange})">
            <summary>
            INTERNAL
            Helper method called by CheckIn() to force a refresh on the next GetAllTeamProjects() call
            if the cache didn't have projects for all server paths involved in the checkin (happens
            when creating new team projects).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetCheckinPoliciesForServerPaths(System.String[])">
            <summary>
            Get the list of check in policies for the specified team projects.
            </summary>
            <param name="serverItems">Server items to get the policies for</param>
            <returns>The list of policies</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetCheckinNoteDefinitionsForServerPaths(System.String[])">
            <summary>
            Look up the field definitions supported for checkin note data
            </summary>
            <param name="serverItems">array of server items to look up against</param>
            <returns>CheckinNoteFieldDefinition array that unions the fields of the server items</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CreateTeamProjectFolder(Microsoft.TeamFoundation.VersionControl.Client.TeamProjectFolderOptions)">
            <summary>
            Create a team project root folder and configure the folder's settings, permissions, and
            checkin notes.
            </summary>
            <param name="options">Options for the creation of the team project folder</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetChangesetProperty(System.Int32,System.String)">
            <summary>
            Retrieves a property value on a changeset, using the supplied changeset id and property name.
            </summary>
            <param name="changesetId">Changeset identifier to query.</param>
            <param name="propertyNameFilter">The property filter to query</param>
            <returns>An ArtifactPropertyValue object, which contains the property value. Null if the property does not exist on the changeset.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetChangesetProperty(System.Int32,System.String[])">
            <summary>
            Retrieves a set of property values on a changeset, using the supplied changeset id and list of property names.
            </summary>
            <param name="changesetId">Changeset identifier to query.</param>
            <param name="propertyNameFilters">List of properties to retrieve.</param>
            <returns>An ArtifactPropertyValue object, which contains the set of property values. Null if none of the properties exist on the changeset.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetChangesetProperty(System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            binds property-value pair to a changeset.
            </summary>
            <param name="changesetId">a valid changeset id</param>
            <param name="propertyName">the name of the property</param>
            <param name="value">the value to be assigned to the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetChangesetProperty(System.Int32,System.String,System.String)">
            <summary>
            binds property-value pair to a changeset.
            </summary>
            <param name="changesetId">a valid changeset id</param>
            <param name="propertyName">the name of the property</param>
            <param name="value">the value to be assigned to the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetChangesetProperty(System.Int32,System.String,System.Nullable{System.Double})">
            <summary>
            binds property-value pair to a changeset.
            </summary>
            <param name="changesetId">a valid changeset id</param>
            <param name="propertyName">the name of the property</param>
            <param name="value">the value to be assigned to the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetChangesetProperty(System.Int32,System.String,System.Byte[])">
            <summary>
            binds property-value pair to a changeset.
            </summary>
            <param name="changesetId">a valid changeset id</param>
            <param name="propertyName">the name of the property</param>
            <param name="value">the value to be assigned to the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetChangesetProperty(System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            binds property-value pair to a changeset.
            </summary>
            <param name="changesetId">a valid changeset id</param>
            <param name="propertyName">the name of the property</param>
            <param name="value">the value to be assigned to the property</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetChangesetProperty(System.Int32,System.Collections.Generic.List{Microsoft.TeamFoundation.Framework.Client.PropertyValue})">
            <summary>
            binds a list of property-value pair to a changeset.
            </summary>
            <param name="changesetId">a valid changeset id</param>
            <param name="propertyName">the name of the property</param>
            <param name="propertyValues">a list of property values</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetChangesetProperty(System.Int32,Microsoft.TeamFoundation.Framework.Client.PropertyValue[])">
            <summary>
            binds an array of property-value pairs to a changeset.
            </summary>
            <param name="changesetId">a valid changeset id</param>
            <param name="propertyName">the name of the property</param>
            <param name="propertyValues">an array of property values</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetVersionedItemProperty(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.String)">
            <summary>
            Retrieves a given property value for a list of items, specified by the ItemSpec, VersionSpec, DeletedState, ItemType filters.
            </summary>
            <param name="itemSpec">The item specifier for the item being listed, may be server or local</param>
            <param name="versionSpec">The version being listed</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to return files, folders, or both</param>
            <param name="propertyNameFilter">The property to query.</param>
            <returns>An ArtifactPropertyValue object for each item matched by the filters which have the 
            requested property set on it.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetVersionedItemProperty(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.String[])">
            <summary>
            Retrieves a set of property values for a list of items, specified by the ItemSpec, VersionSpec, DeletedState, ItemType filters.
            </summary>
            <param name="itemSpec">The item specifier for the item being listed, may be server or local</param>
            <param name="versionSpec">The version being listed</param>
            <param name="deletedState">A flag representing whether to return deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to return files, folders, or both</param>
            <param name="propertyNameFilters">A list of properties to query.</param>
            <returns>An ArtifactPropertyValue object for each item matched by the filters which have atleast one or more of the 
            requested properties set on it</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetVersionedItemProperty(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.String,System.Nullable{System.Int32})">
            <summary>
            Sets a given property on a list of items matches by the ItemSpec, VersionSpec, DeletedState and ItemType filter.
            </summary>
            <param name="itemSpec">The item specifier for the item being listed, may be server or local</param>
            <param name="versionSpec">The version being listed</param>
            <param name="deletedState">A flag representing whether to set the property on deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to set the property on files, folders, or both</param>
            <param name="propertyName">The property name to set.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetVersionedItemProperty(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.String,System.Nullable{System.Double})">
            <summary>
            Sets a given property on a list of items matches by the ItemSpec, VersionSpec, DeletedState and ItemType filter.
            </summary>
            <param name="itemSpec">The item specifier for the item being listed, may be server or local</param>
            <param name="versionSpec">The version being listed</param>
            <param name="deletedState">A flag representing whether to set the property on deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to set the property on files, folders, or both</param>
            <param name="propertyName">The property name to set.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetVersionedItemProperty(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets a given property on a list of items matches by the ItemSpec, VersionSpec, DeletedState and ItemType filter.
            </summary>
            <param name="itemSpec">The item specifier for the item being listed, may be server or local</param>
            <param name="versionSpec">The version being listed</param>
            <param name="deletedState">A flag representing whether to set the property on deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to set the property on files, folders, or both</param>
            <param name="propertyName">The property name to set.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetVersionedItemProperty(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.String,System.String)">
            <summary>
            Sets a given property on a list of items matches by the ItemSpec, VersionSpec, DeletedState and ItemType filter.
            </summary>
            <param name="itemSpec">The item specifier for the item being listed, may be server or local</param>
            <param name="versionSpec">The version being listed</param>
            <param name="deletedState">A flag representing whether to set the property on deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to set the property on files, folders, or both</param>
            <param name="propertyName">The property name to set.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetVersionedItemProperty(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.String,System.Byte[])">
            <summary>
            Sets a given property on a list of items matches by the ItemSpec, VersionSpec, DeletedState and ItemType filter.
            </summary>
            <param name="itemSpec">The item specifier for the item being listed, may be server or local</param>
            <param name="versionSpec">The version being listed</param>
            <param name="deletedState">A flag representing whether to set the property on deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to set the property on files, folders, or both</param>
            <param name="propertyName">The property name to set.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetVersionedItemProperty(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,Microsoft.TeamFoundation.Framework.Client.PropertyValue[])">
            <summary>
            Sets a given property on a list of items matches by the ItemSpec, VersionSpec, DeletedState and ItemType filter.
            </summary>
            <param name="itemSpec">The item specifier for the item being listed, may be server or local</param>
            <param name="versionSpec">The version being listed</param>
            <param name="deletedState">A flag representing whether to set the property on deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to set the property on files, folders, or both</param>
            <param name="propertyName">The property name to set.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetVersionedItemAttribute(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.String,System.Nullable{System.Int32})">
            <summary>
            Sets a given property on a list of items matches by the ItemSpec, VersionSpec, DeletedState and ItemType filter.
            </summary>
            <param name="itemSpec">The item specifier for the item being listed, may be server or local</param>
            <param name="versionSpec">The version being listed</param>
            <param name="deletedState">A flag representing whether to set the property on deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to set the property on files, folders, or both</param>
            <param name="propertyName">The property name to set.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetVersionedItemAttribute(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.String,System.Nullable{System.Double})">
            <summary>
            Sets a given property on a list of items matches by the ItemSpec, VersionSpec, DeletedState and ItemType filter.
            </summary>
            <param name="itemSpec">The item specifier for the item being listed, may be server or local</param>
            <param name="versionSpec">The version being listed</param>
            <param name="deletedState">A flag representing whether to set the property on deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to set the property on files, folders, or both</param>
            <param name="propertyName">The property name to set.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetVersionedItemAttribute(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets a given property on a list of items matches by the ItemSpec, VersionSpec, DeletedState and ItemType filter.
            </summary>
            <param name="itemSpec">The item specifier for the item being listed, may be server or local</param>
            <param name="versionSpec">The version being listed</param>
            <param name="deletedState">A flag representing whether to set the property on deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to set the property on files, folders, or both</param>
            <param name="propertyName">The property name to set.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetVersionedItemAttribute(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.String,System.String)">
            <summary>
            Sets a given property on a list of items matches by the ItemSpec, VersionSpec, DeletedState and ItemType filter.
            </summary>
            <param name="itemSpec">The item specifier for the item being listed, may be server or local</param>
            <param name="versionSpec">The version being listed</param>
            <param name="deletedState">A flag representing whether to set the property on deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to set the property on files, folders, or both</param>
            <param name="propertyName">The property name to set.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetVersionedItemAttribute(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,System.String,System.Byte[])">
            <summary>
            Sets a given property on a list of items matches by the ItemSpec, VersionSpec, DeletedState and ItemType filter.
            </summary>
            <param name="itemSpec">The item specifier for the item being listed, may be server or local</param>
            <param name="versionSpec">The version being listed</param>
            <param name="deletedState">A flag representing whether to set the property on deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to set the property on files, folders, or both</param>
            <param name="propertyName">The property name to set.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetVersionedItemAttribute(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.DeletedState,Microsoft.TeamFoundation.VersionControl.Client.ItemType,Microsoft.TeamFoundation.Framework.Client.PropertyValue[])">
            <summary>
            Sets a given property on a list of items matches by the ItemSpec, VersionSpec, DeletedState and ItemType filter.
            </summary>
            <param name="itemSpec">The item specifier for the item being listed, may be server or local</param>
            <param name="versionSpec">The version being listed</param>
            <param name="deletedState">A flag representing whether to set the property on deleted items, non-deleted items, or both</param>
            <param name="itemType">A flag representing whether to set the property on files, folders, or both</param>
            <param name="propertyName">The property name to set.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.Destroy(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Common.DestroyFlags)">
            <summary>
            Destroy the subtree represented by itemSpec.
            </summary>
            <param name="workspace">The workspace this operation is being performed in if there is one.</param>
            <param name="itemSpec">The local or server path that will be 
                                   recursively destroyed</param>
            <param name="versionSpec">The version spec to resolve itemSpec with</param>
            <param name="stopAtSpec">The simple version spec (not label or workspace) that influences keepHistory behavior</param>
            <param name="flags">The set of destroy options
            KeepHistory: If set to true this means that destroy only 
                         removes the content of every version of a file up 
                         to but not including the changeset represented by stopAt
            Force: If set this means that destroy will asynchronously kick off content garbage collection
            Preview: If set then no database data will actually be deleted, only the list of items that would have been destroyed are returned.
            </param>
            <returns>The list of items that were destroyed</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.Destroy(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,Microsoft.TeamFoundation.VersionControl.Common.DestroyFlags,Microsoft.TeamFoundation.VersionControl.Client.PendingSet[]@,Microsoft.TeamFoundation.VersionControl.Client.PendingSet[]@)">
            <summary>
            Destroy the subtree represented by itemSpec.
            </summary>
            <param name="workspace">The workspace this operation is being performed in if there is one.</param>
            <param name="itemSpec">The local or server path that will be 
                                   recursively destroyed</param>
            <param name="versionSpec">The version spec to resolve itemSpec with</param>
            <param name="stopAtSpec">The simple version spec (not label or workspace) that influences keepHistory behavior</param>
            <param name="flags">The set of destroy options
            KeepHistory: If set to true this means that destroy only 
                         removes the content of every version of a file up 
                         to but not including the changeset represented by stopAt
            Force: If set this means that destroy will asynchronously kick off content garbage collection
            Preview: If set then no database data will actually be deleted, only the list of items that would have been destroyed are returned.
            Silent: If set then return no data to the client.
            AffectedChanges: If set the pending changes and shelved changes that will be destroyed will be returned in
                             affectedPendingChanges and affectedShelvedChanges. This can only be set if Preview is set.
                             If set then the return value array will be empty.
            </param>
            <param name="affectedPendingChanges">The pending changes that will be destroyed.</param>
            <param name="affectedShelvedChanges">The shelved changes that will be destroyed.</param>
            <returns>The list of items that will be/were destroyed if the Silent flag is not specified.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CreateBranchObject(Microsoft.TeamFoundation.VersionControl.Client.BranchProperties)">
            <summary>
            Creates a branch object on the server.
            </summary>
            <param name="properties">Properties of the branch object to create</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.DeleteBranchObject(Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier)">
            <summary>
            Deletes a branch object and all associated properties from the server.
            </summary>
            <param name="branch">Item identifier of the branch to delete</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.UpdateBranchObject(Microsoft.TeamFoundation.VersionControl.Client.BranchProperties)">
            <summary>
            Updates an existing branch object on the server.
            </summary>
            <param name="properties">Branch properties to update.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryBranchObjects(Microsoft.TeamFoundation.VersionControl.Client.ItemIdentifier,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Queries either a particular branch object or all branch object which have no parent
            </summary>
            <param name="rootItem">The item identifier of the branch object to be traversed. If null, all hierarchies are traversed.</param>
            <param name="recursion">The number of levels to traverse. None will only return just the branch object, OneLevel will return 
            children, Full will return all descendants.</param>
            <returns>A list of branch objects.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryRootBranchObjects(Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Queries all branch objects which have no parent.
            </summary>
            <param name="recursion">The number of levels to traverse. None will only return just the branch object, OneLevel will return 
            children, Full will return all descendants.</param>
            <returns>A list of branch objects.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryBranchObjectOwnership(System.Int32[])">
            <summary>
            Retrieves the associated branch objects for a given array of changesets.
            </summary>
            <param name="changesetIds">Array of changeset ids to query.</param>
            <returns>A list of branch objects which are associated with the given changesets, along with the # of items
            which belong to each branch object.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.QueryBranchObjectOwnership(System.Int32[],Microsoft.TeamFoundation.VersionControl.Client.ItemSpec)">
            <summary>
            Retrieves the associated branch objects for a given array of changesets.
            </summary>
            <param name="changesetIds">Array of changeset ids to query.</param>
            <param name="pathFilter">Optional path filter, which will restrict the paths looked at in the changesets.</param>
            <returns>A list of branch objects which are associated with the given changesets, along with the # of items
            which belong to each branch object.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CreateBranch(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            Creates a branch on the server and checks it in without downloading the branch to the client.
            </summary>
            <param name="sourcePath">Source path of the branch - must be a server path.</param>
            <param name="targetPath">Target path of the branch - must be a server path.</param>
            <param name="version">Changeset or DateTime version spec to create the branch with.</param>
            <returns>changeset identifier for the checkin of the branch.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CreateBranch(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.CheckinNote,Microsoft.TeamFoundation.VersionControl.Client.PolicyOverrideInfo,Microsoft.TeamFoundation.VersionControl.Client.Mapping[])">
            <summary>
            Creates a branch on the server and checks it in without downloading the branch to the client.
            </summary>
            <param name="sourcePath">Source path of the branch - must be a server path.</param>
            <param name="targetPath">Target path of the branch - must be a server path.</param>
            <param name="version">Changeset or DateTime version spec to create the branch with.</param>
            <param name="owner">Optional owner of the changeset (if not specified, will default to the
            authenticated user)</param>
            <param name="comment">Optional comment on the changeset</param>
            <param name="checkinNote">Checkin note if any</param>
            <param name="policyOverride">Policy override info if any</param>
            <param name="mappings">A list of mappings under the target path to include / exclude from the branch.</param>
            <returns>changeset identifier for the checkin of the branch.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.ResetCheckinDates(System.DateTime)">
            <summary>
            Resets the checkin dates of all changesets in the Team Project Collection to before the last date.
            The requirement is that the Team Project collection should only contain empty Team Projects.
            </summary>
            <param name="lastCheckinDate">The date the last changeset in the collection should be updated to.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetServerSettingsWithFallback(System.Boolean@)">
            <summary>
            Returns the ServerSettings for this VersionControlServer.
            If the server does not support the ServerSettings APIs, then a default set of settings is returned.
            This method does not generally make a server call.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.FetchServerSettings">
            <summary>
            Fetches the current ServerSettings object from the server.
            If the server does not support the GetServerSettings webmethod, then the default ServerSettings are returned.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetServerSettings(Microsoft.TeamFoundation.VersionControl.Client.ServerSettings)">
            <summary>
            Sets the server settings on the server
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.RaiseChangesetReconciled(System.Int32)">
            <summary>
            Raises the ChangesetReconciled event.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.BeforeCheckinPendingChange">
            <summary>
            Raised before checking in a pending change
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CommitCheckin">
            <summary>
            Raised on the commit of a new checkin.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.ChangesetReconciled">
            <summary>
            Raised when a workspace is reconciled to a changeset.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.FolderContentChanged">
            <summary>
            Raised when a server folder content is changed without pending changes.
            Examples are creating committed branch and destroying item.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.BeforeShelvePendingChange">
            <summary>
            Raised before shelving a pending change
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CommitShelveset">
            <summary>
            Raised on the creation of a new shelveset
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.DeletedShelveset">
            <summary>
            Raised on the deletion of a shelveset
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.UnshelveShelveset">
            <summary>
            Raised when unshelving a shelveset
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.Merging">
            <summary>
            Raised during a merge operation
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.NewPendingChange">
            <summary>
            Raised on the creation of a new pending change
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.UndonePendingChange">
            <summary>
            Raised when an existing pending change is undone
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.ResolvedConflict">
            <summary>
             Raised when a conflict is resolved
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.Conflict">
            <summary>
            Raised when a conflict is created
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.UnshelveConflict">
            <summary>
            Raised when an unshelve conflict is created
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.NonFatalError">
            <summary>
            Raised on errors that do not prevent the operation from completing
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.BeforeWorkItemsUpdate">
            <summary>
            Raised before updating work items with a checkin
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.AfterWorkItemsUpdated">
            <summary>
            Raised after updating work items with a checkin
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.WorkItemUpdated">
            <summary>
            Raised when a work item has been updated with a checkin
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.Getting">
            <summary>
            Raised during a Get operation
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CreatedWorkspace">
            <summary>
            Raised when a workspace is created
            This event can be raised by a cross-process notification if the
            NotificationManager has been initialized.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.UpdatedWorkspace">
            <summary>
            Raised when an existing workspace is updated
            This event can be raised by a cross-process notification if the
            NotificationManager has been initialized.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.DeletedWorkspace">
            <summary>
            Raised when a workspace is deleted
            This event can be raised by a cross-process notification if the
            NotificationManager has been initialized.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.GetCompleted">
            <summary>
            Raised when a get operation completes on a workspace.
            This event can be raised by a cross-process notification if the
            NotificationManager has been initialized.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.PendingChangesChanged">
            <summary>
            Raised when a workspace's set of pending changes is modified.
            This event can be raised by a cross-process notification if the
            NotificationManager has been initialized.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.PendingChangeCandidatesChanged">
            <summary>
            Raised when a workspace's set of pending change candidates
            is modified.
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.BeforeDeleteWorkspace">
            <summary>
             Raised before deleting an existing workspace
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetWorkspaceLocationProgress">
            <summary>
            This event is raised during a call to Workspace.Update, when the location of the workspace
            is being changed (server to local, or local to server).
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.Destroyed">
            <summary>
            This event is fired when a tree or an item is destroyed.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.OnDestroyed(Microsoft.TeamFoundation.VersionControl.Client.DestroyEventArgs)">
            <summary>
            This event is sent with the items that were destroyed.
            </summary>
            <param name="e">Information on the operation</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CommittedBranchCreated">
            <summary>
            This event is fired when a committed branch is created.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.OnCommittedBranchCreated(Microsoft.TeamFoundation.VersionControl.Client.CommittedBranchCreatedEventArgs)">
            <summary>
            This event is sent with the committed branch that was created.
            </summary>
            <param name="e">Information on the operation</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.BranchObjectCreated">
            <summary>
            This event is fired when a branch object is created
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.OnBranchObjectCreated(Microsoft.TeamFoundation.VersionControl.Client.BranchObjectCreatedEventArgs)">
            <summary>
            This event is sent with the branch object that was created.
            </summary>
            <param name="e">Information on the operation</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.BranchObjectDeleted">
            <summary>
            This event is fired when a branch object is deleted
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.OnBranchObjectDeleted(Microsoft.TeamFoundation.VersionControl.Client.BranchObjectDeletedEventArgs)">
            <summary>
            This event is sent with the branch object that was deleted.
            </summary>
            <param name="e">Information on the operation</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.BranchObjectUpdated">
            <summary>
            This event is fired when a branch object is updated
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.OnBranchObjectUpdated(Microsoft.TeamFoundation.VersionControl.Client.BranchObjectUpdatedEventArgs)">
            <summary>
            This event is sent with the branch object that was updated.
            </summary>
            <param name="e">Information on the operation</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.OnDownloading(Microsoft.TeamFoundation.VersionControl.Client.FileTransferEventArgs)">
            <summary>
            This event is sent when a download is starting, downloading (periodically), and finished.
            </summary>
            <param name="e">Information on the download</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.OperationStarting">
            <summary>
            This event is raised when an operation such as pending a set of changes begins.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.OnOperationStarting(Microsoft.TeamFoundation.VersionControl.Client.OperationEventArgs)">
            <summary>
            This event is sent when an operation such as pending a set of changes begins.  Each
            starting event will always be followed by a finished event, regardless of whether the
            operation completed successfully.
            </summary>
            <param name="e">Information on the operation</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.OperationFinished">
            <summary>
            This event is sent when an operation such as pending a set of changes is finished.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.OnOperationFinished(Microsoft.TeamFoundation.VersionControl.Client.OperationEventArgs)">
            <summary>
            This event is sent when an operation such as pending a set of changes is finished.
            </summary>
            <param name="e">Information on the operation</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.TeamProjectFolderCreated">
            <summary>
            This event is sent when a team project folder is created.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.OnTeamProjectFolderCreated(Microsoft.TeamFoundation.VersionControl.Client.TeamProjectFolderCreatedEventArgs)">
            <summary>
            This event is sent when a team project folder is created.
            </summary>
            <param name="e">Information on the team project folder created</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.ShelvesetUpdated">
            <summary>
            This event is sent when a shelveset is updated.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.OnShelvesetUpdated(Microsoft.TeamFoundation.VersionControl.Client.ShelvesetUpdatedEventArgs)">
            <summary>
            Fires the ShelvesetUpdated event.
            </summary>
            <param name="e">Information about the updated shelveset.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.TeamFoundationServer">
            <summary>
            This is the TeamFoundationServer object that owns this VersionControlServer instance.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.TeamProjectCollection">
            <summary>
            This is the TfsTeamProjectCollection object that owns this VersionControlServer instance.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.AuthenticatedUser">
            <summary>
            This is the identity the server used to authenticate the user.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.AuthorizedIdentity">
            <summary>
            Get the user we authorized with against the specified server.  
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.AuthorizedUser">
            <summary>
            Get the user we authorized with against the specified server.  If the user
            name was specified as a command-line parameter, environment variable, etc that value
            will just be returned.  If default credentials are used, we'll actually authenticate
            with the server and find out who it thinks we are.
            </summary>
            <returns>The user name that we will use to access the specified repository.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.IsAuthorizedUser(System.String)">
            <summary>
            Returns true if the passed in name represents the authorized user.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.CurrentCommand">
            <summary>
            This property can be used to specify what command is being executed on the client side.
            The server records this in the activity log, which makes it easier to understand what users are
            actually doing.
            This property is the same as the TeamFoundationServer.OperationName property and gets/sets that property.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.ServerGuid">
            <summary>
            The source control server's repository GUID.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.Canceled">
            <summary>
            This is used to determine whether the user has requested canceling the current operation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.ArtifactProvider">
            <summary>
            This is the artifact provider for this server
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.MaxBackgroundThreads">
            <summary>
            Maximum number of background threads that will be used for file uploads and downloads.
            If 0 is used, all uploads, downloads, and adds will be done on the foreground thread.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.MaxResults">
            <summary>
            Maximum number of Get operation results that the server may return from a single
            call. This is to guard against client running out of memory, and also to guard
            against Http runtime timeout on server when streaming a large result set back to
            the client.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.ClientTracing">
            <summary>
            Set or get the tracing level for all instances of VersionControlServer.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.BaselineFolderNamePrefix">
            <summary>
            Gets the prefix used for baseline folders in local workspaces.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.IgnoreFileName">
            <summary>
            Returns the name to be used for ignore files (".tfignore", in general)
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.Client">
            <summary>
            INTERNAL helper property
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.TeamProjectCache">
            <summary>
            Private cache of team projects used to prevent unnecessary calls to the server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SecurityProvider">
            <summary>
            The SecurityProvider is the object that allows the client to
            access the security objects associated with the version control
            server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SetServerSimulationModeForSecurity(System.Boolean)">
            <summary>
            THIS IS FOR TEST PURPOSES ONLY!!!!
            </summary>
            <param name="simulateVersionTwoServer"></param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.SupportedFeatures">
            <summary>
            Returns the supported features by the version control server
            Use by doing a bitwise or against the SupportedFeatures enum
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.WebServiceLevel">
            <summary>
            Returns the version of TFS on the server represented by this VersionControlServer object.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.IMSUserNameSearchFactor">
            <summary>
            Returns the search factor that should be used when reading identities from IMS depending
            on the version of the server we are talking to.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer.LatestSettingsHash">
            <summary>
            This is the latest settings hash that the server has sent down. This is not necessarily
            what hash is stored away in the XML. This will trigger a background operation if the
            hash isn't what we have stored or have seen last
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters">
            <summary>
            Represents all the parameters needed to call the QueryHistory method on the VersionControlServer
            object.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters.#ctor(System.String,Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Creates a new QueryHistoryParameters object.
            </summary>
            <param name="item">The item whose history is to be retrieved. The last path part may include the
            ? and * wildcard characters, i.e. $/Abc/def/*.cs. The item may be a server or a local path.</param>
            <param name="recursion">The recursion type to apply to the provided path. When querying the history of files,
            it is common to provide RecursionType.None. When querying the history of a folder, it is common to provide
            RecursionType.Full.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters.#ctor(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec)">
            <summary>
            Creates a new QueryHistoryParameters object.
            </summary>
            <param name="itemSpec">An ItemSpec describing the item whose history is to be retrieved, its deletion id,
            and the recursion type at which the query should be performed.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters.Item">
            <summary>
            The item whose history is to be retrieved. The last path part may include the
            ? and * wildcard characters, i.e. $/Abc/def/*.cs. The item may be a server or
            a local path.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters.ItemVersion">
            <summary>
            A VersionSpec describing the point in time at which the path provided in the 
            Item property should be resolved. Defaults to VersionSpec.Latest; supplying
            another value for this property is not common.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters.DeletionId">
            <summary>
            If the path provided in the Item property is deleted, the deletion ID of the
            particular item referred to by the Item property may be provided here. Defaults
            to zero; supplying another value for this property is not common, and is only
            necessary when using TFS 2005 or 2008.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters.RecursionType">
            <summary>
            The recursion type to apply to the Item property when performing the history query.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters.Author">
            <summary>
            This property defaults to null. Set this property to restrict the history query
            to the set of changesets authored by a particular identity. For TFS 2010 servers
            and earlier, this property must be in the form "DOMAIN\user". Later servers accept
            identities in this format, as well as display names ("Maggie Carrido").
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters.VersionStart">
            <summary>
            Set this property to restrict the history query along the time axis. This property
            defaults to null, to indicate that the range of the history query goes all the way
            back to when the repository was created.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters.VersionEnd">
            <summary>
            Set this property to restrict the history query along the time axis. This property
            defaults to null, to indicate that the range of the history query starts with the
            latest changeset in the repository.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters.MaxResults">
            <summary>
            Set this property to limit the number of results returned by the QueryHistory call.
            By default, this property is set to Int32.MaxValue. QueryHistory pages results back
            from the server on demand, so limiting your own consumption of the IEnumerable
            is almost as effective from a performance perspective.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters.IncludeChanges">
            <summary>
            Set this property to true if you need for the returned Changeset objects to contain
            actual Change objects (the manifest of the changeset). By default, this property is
            false, and the Changeset objects returned will contain only the changeset metadata.
            
            Note that even when this property is set to true, the set of returned Change objects
            is scoped to the Item/RecursionType pair used to perform the query.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters.SlotMode">
            <summary>
            If this property is false, then the (Item, ItemVersion, DeletionId) tuple is resolved to
            an item ID and the history is performed on that item ID, tracking across renames. If this
            property is true, then the tuple is not resolved. Instead, all changesets which have an item
            with the name Item (or beneath it, if the query is recursive), are returned. That is, the query
            is on a particular "namespace slot" (slot mode) rather than on a particular item.
            
            This property defaults to true.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters.IncludeDownloadInfo">
            <summary>
            This property applies only when IncludeChanges is set to true. Set this property to true
            to have the server generate download URLs and include them with the Change objects returned
            in each Changeset. This allows the client to download the file content associated with a
            particular Change object with one round-trip to the server instead of two.
            
            Setting this property to true increases the computation time on the server for the
            QueryHistory call, as well as the size of the result set on the wire. For performance reasons,
            you should enable this flag only if you intend to download the content the returned Change
            objects.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters.SortAscending">
            <summary>
            By default, the results from a QueryHistory call are from VersionEnd to VersionStart (reverse order).
            If you want the results to be returned in ascending order instead (from VersionStart to VersionEnd),
            set this flag to true.
            
            This flag requires a TFS 2010 or later server to have any effect.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.QueryHistoryParameters.BatchSize">
            <summary>
            The batch size for the QueryHistory paging mechanism. The default value for this property is 256.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.RuntimeWorkspaceCache">
            <summary>
            A cache of Workspace objects for a given VersionControlServer. This class is responsible for
            maintaining the illusion that there is only one Workspace object alive in a given appdomain
            for a particular workspace, even though many different Workspace instances may be used for
            over-the-wire marshaling with webmethods like CreateWorkspace, UpdateWorkspace,
            QueryWorkspace, and QueryWorkspaces.
            
            The cache is keyed by name;owner. The Workspace objects are held by weak references to allow
            for garbage collection to function normally. Dead references are pruned on every write.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.RuntimeWorkspaceCache.#ctor(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer)">
            <summary>
            Creates a new runtime workspace cache for the given VersionControlServer.
            
            Generally a VersionControlServer owns exactly one RuntimeWorkspaceCache.
            </summary>
            <param name="sourceControl">VersionControlServer to cache Workspace objects for</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.RuntimeWorkspaceCache.TryGetWorkspace(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo)">
            <summary>
            If a Workspace instance is in the runtime cache which matches the name and owner of 
            the given WorkspaceInfo object, that Workspace instance will be returned. Otherwise
            null will be returned.
            </summary>
            <param name="workspaceInfo">WorkspaceInfo object containing the name and owner of the
            workspace to look up.</param>
            <returns>The cached workspace if it is in the cache, null otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.RuntimeWorkspaceCache.TryGetWorkspace(System.String,System.String)">
            <summary>
            If a Workspace instance is in the runtime cache matching the name and owner provided,
            then that Workspace instance will be returned. Otherwise null will be returned.
            </summary>
            <param name="workspaceName">The name of the workspace to look up</param>
            <param name="workspaceOwner">The owner of the workspace to look up</param>
            <returns>The cached workspace if it is in the cache, null otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.RuntimeWorkspaceCache.GetWorkspace(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo)">
            <summary>
            If a Workspace instance is in the runtime cache which matches the name and owner of 
            the given WorkspaceInfo object, that Workspace instance will be returned. Otherwise
            a Workspace object will be constructed with data from the WorkspaceInfo object. The
            Workspace instance will not contain some important properties -- such as the working
            folders or the effective permissions. If the consumer of the Workspace instance
            attempts to access those properties, their thread will block on a QueryWorkspace
            call to retrieve them.
            </summary>
            <param name="workspaceName">The name of the workspace to look up</param>
            <param name="workspaceOwner">The owner of the workspace to look up</param>
            <returns>A Workspace instance</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.RuntimeWorkspaceCache.CacheWorkspace(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            If the provided Workspace is not currently cached, it will be added into the cache
            and the same instance will be returned. If another Workspace instance is in the cache
            with a matching name and owner, that instance will be updated with all the data from
            the provided Workspace instance, and the cached instance will be returned.
            
            Intended to be used by CreateWorkspace, QueryWorkspace, and QueryWorkspaces, all of
            which return Workspace objects from the server for use by the client. They need to come
            through here to enforce the rule that only one Workspace instance exists for consumption
            by users of the client OM.
            </summary>
            <param name="workspace">A Workspace object to be cached or to use as a cache update</param>
            <returns>A Workspace object (not necessarily the same instance) from the cache which
            now has all the data from the provided Workspace instance</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.RuntimeWorkspaceCache.CacheWorkspaces(Microsoft.TeamFoundation.VersionControl.Client.Workspace[])">
            <summary>
            A plural form of CacheWorkspace. See CacheWorkspace for details.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.RuntimeWorkspaceCache.UpdateWorkspace(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Similar to CacheWorkspace in that it updates the existing cached workspace
            with new data, but this method additionally handles a change in the cache key
            of name;owner. Name/owner changes can never occur with CacheWorkspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.RuntimeWorkspaceCache.Workspaces">
            <summary>
            All live Workspaces currently held by this cache.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.AccessControlEntryFromVersionControl">
            <summary>
            Framework AccessControlEntry objects require an IdentityDescriptor, but the version control webmethods used
            on pre-framework servers (Orcas and earlier) key by DOMAIN\user. So this backcompat layer resolves the DOMAIN\user
            through IMS's backcompat layer in order to build the required IdentityDescriptor. But IMS's backcompat layer
            returns a full TeamFoundationIdentity (since the GSS webmethod ReadIdentityFromSource includes all the necessary
            information to do so). All we need is the IdentityDescriptor off that identity in order to build the ACE.
            
            But we have the additional data already; so we make sure the instances of AccessControlEntry in the AccessControlList
            are actually instances of AccessControlEntryFromVersionControl, and are tagged with the full TeamFoundationIdentity
            object in case the caller needs that data. They can try to cast the ACE they get back to ACEFromVersionControl
            and see if the TeamFoundationIdentity object is available without going to IMS to fetch it. This improves performance
            (see HatGui\PermissionManager.cs).
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace">
            <summary>
            The purpose of this class is to create a security namespace API for talking
            to an Orcas or earlier server for versioned item permissions.  This allows us
            to hide the back compat layer of version control security behind the security
            namespace OM.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.Description">
            <summary>
            The description for this security namespace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.HasPermission(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Determines if the given user has the requested permissions.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <param name="requestedPermissions"></param>
            <param name="alwaysAllowAdministrators"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.HasPermission(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor},System.Int32,System.Boolean)">
            <summary>       
            Determines if the given users has the requested permissions.
            </summary>
            <param name="token"></param>
            <param name="descriptors"></param>
            <param name="requestedPermissions"></param>
            <param name="alwaysAllowAdministrators"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.HasPermission(System.Collections.Generic.IEnumerable{System.String},Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32,System.Boolean)">
            <summary>
            Determines if the given user has the requested permissions.
            </summary>
            <param name="tokens"></param>
            <param name="descriptor"></param>
            <param name="requestedPermissions"></param>
            <param name="alwaysAllowAdministrators"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.HasPermission(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32,System.Boolean)">
            <summary>
            Determines if the given user has the requested permissions.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <param name="requestedPermissions"></param>
            <param name="alwaysAllowAdministrators"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.HasWritePermission(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Determines if the user has permission to change the provided permissions
            </summary>
            <param name="token"></param>
            <param name="permissionsToChange"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.HasWritePermission(System.String,System.Int32)">
            <summary>
            Determines if the user has permission to change the provided permissions.
            </summary>
            <param name="token"></param>
            <param name="permissionsToChange"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.QueryEffectivePermissions(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Queries the effective permissions for the given descriptor on the token.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.QueryAccessControlList(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor},System.Boolean)">
            <summary>
            Query the permissions on the user to build the ACL.
            </summary>
            <param name="token"></param>
            <param name="descriptors"></param>
            <param name="includeExtendedInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.QueryAccessControlLists(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor},System.Boolean,System.Boolean)">
            <summary>
            Query the permissions on the users to build the ACLs.
            </summary>
            <param name="token"></param>
            <param name="descriptors"></param>
            <param name="includeExtendedInfo"></param>
            <param name="recurse"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.RemovePermissions(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32)">
            <summary>
            Removes the specified permissions from the descriptor for the token.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <param name="permissionsToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.RemoveAccessControlEntry(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Removes the permissions from the ACE for the descriptor on the token.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.RemoveAccessControlEntries(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor})">
            <summary>
            Removes the permissions from the ACE for the descriptors on the token.
            </summary>
            <param name="token"></param>
            <param name="descriptors"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.SetInheritFlag(System.String,System.Boolean)">
            <summary>
            Sets the inherit flag for the item.
            </summary>
            <param name="token"></param>
            <param name="inherit"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.SetAccessControlEntry(System.String,Microsoft.TeamFoundation.Framework.Client.AccessControlEntry,System.Boolean)">
            <summary>
            Sets the new permission on the token.
            </summary>
            <param name="token"></param>
            <param name="permission"></param>
            <param name="merge"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.SetPermissions(System.String,Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the new bits on the ACE for the descriptor on the token.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <param name="allow"></param>
            <param name="deny"></param>
            <param name="merge"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.SetAccessControlEntries(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.AccessControlEntry},System.Boolean)">
            <summary>
            Sets the AccessControlEntries on the token.
            </summary>
            <param name="token"></param>
            <param name="permissions"></param>
            <param name="merge"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.ResolveIdentityName(Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor)">
            <summary>
            Gets the identity name for the descriptor.
            </summary>
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.ResolveIdentityNames(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.IdentityDescriptor})">
            <summary>
            Gets the identity names for the descriptors.
            </summary>
            <param name="descriptors"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.ResolveIdentities(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Resolves the identity descriptors for the provided names.  It is possible that names queried for will not
            be returned if the user no longer exists.
            </summary>
            <param name="identityNames"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.SourceControlSecurityNamespace.RemovePermissionHelper(System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.AccessControlEntry})">
            <summary>
            Removes the specified permissions from the ACE for the descriptor on the token.
            </summary>
            <param name="token"></param>
            <param name="descriptor"></param>
            <param name="permissionsToRemove"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ISecurityProvider">
            <summary>
            The purpose of this interface is to abstract out the multiple ways
            the VersionControlServer object talks to the server to get permission
            information.  This interface is a result of having to be backward
            compatible with Whidbey and Orcas servers.
            
            In the case that we no longer support Whidbey and Orcas servers with new clients, we
            can throw out this interface as well as the PreFrameworkSecurityProvider
            and move the FrameworkSecurityProvider to the SourceControl class.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ISecurityProvider.GetPermissions(System.String[],Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Gets the permissions for items in the repository.
            </summary>
            <param name="identityNames">the user or group names (may be null)</param>
            <param name="itemSpecs">the items</param>
            <param name="recursionType">the recursion to use whenmatching items</param>
            <returns>the permissions from the repository</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ISecurityProvider.SetPermissions(Microsoft.TeamFoundation.VersionControl.Client.SecurityChange[])">
            <summary>
            Sets the permissions for items in the repository.
            </summary>
            <param name="securityChanges">the list of changes to send to the server</param>
            <returns>a list of successful changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ISecurityProvider.GetGlobalPermissions(System.String[])">
            <summary>
            Gets the global permissions for the selected users in the repository.
            </summary>
            <param name="identityNames">the user or group names (may be null for all identities)</param>
            <returns>the permissions from the repository</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ISecurityProvider.SetGlobalPermissions(Microsoft.TeamFoundation.VersionControl.Client.PermissionChange[])">
            <summary>
            Sets the permissions for items in the repository.
            </summary>
            <param name="permissionChanges">the list of changes to send to the server</param>
            <returns>a list of successful changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ISecurityProvider.GetEffectivePermissions(System.String,System.String)">
            <summary>
            Computes the permissions for a user against a particular item.  Applies 
            the allow and deny lists, inheritance, and group membership rules to 
            come up with a simple list of permissions the user has.
            </summary>
            <param name="userName">Name of user to check</param>
            <param name="item">Item to check (server or local path)</param>
            <returns>Array of permission names</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ISecurityProvider.GetEffectiveGlobalPermissions(System.String)">
            <summary>
            Computes the global permissions for a user.  Applies the allow and deny lists,
            inheritance, and group membership rules to come up with a simple list of permissions
            the user has.
            </summary>
            <param name="userName">Name of user to check</param>
            <returns>Array of permission names</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PreFrameworkSecurityProvider.#ctor(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer)">
            <summary>
            Creates a security provider that is used to talk to HatServer to get
            its security information.
            </summary>
            <param name="versionControlServer">The version control server we are
            providing security information for.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PreFrameworkSecurityProvider.GetPermissions(System.String[],Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Gets the permissions for items in the repository.
            </summary>
            <param name="identityNames">the user or group names (may be null)</param>
            <param name="itemSpecs">the items</param>
            <param name="recursionType">the recursion to use when matching items</param>
            <returns>the permissions from the repository</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PreFrameworkSecurityProvider.SetPermissions(Microsoft.TeamFoundation.VersionControl.Client.SecurityChange[])">
            <summary>
            Sets the permissions for items in the repository.
            </summary>
            <param name="securityChanges">the list of changes to send to the server</param>
            <returns>a list of successful changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PreFrameworkSecurityProvider.GetGlobalPermissions(System.String[])">
            <summary>
            Gets the global permissions for the selected users in the repository.
            </summary>
            <param name="identityNames">the user or group names (may be null for all identities)</param>
            <returns>the permissions from the repository</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PreFrameworkSecurityProvider.SetGlobalPermissions(Microsoft.TeamFoundation.VersionControl.Client.PermissionChange[])">
            <summary>
            Sets the permissions for items in the repository.
            </summary>
            <param name="permissionChanges">the list of changes to send to the server</param>
            <returns>a list of successful changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PreFrameworkSecurityProvider.GetEffectivePermissions(System.String,System.String)">
            <summary>
            Computes the permissions for a user against a particular item.  Applies 
            the allow and deny lists, inheritance, and group membership rules to 
            come up with a simple list of permissions the user has.
            </summary>
            <param name="userName">Name of user to check</param>
            <param name="item">Item to check (server or local path)</param>
            <returns>Array of permission names</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PreFrameworkSecurityProvider.GetEffectiveGlobalPermissions(System.String)">
            <summary>
            Computes the global permissions for a user.  Applies the allow and deny lists,
            inheritance, and group membership rules to come up with a simple list of permissions
            the user has.
            </summary>
            <param name="userName">Name of user to check</param>
            <returns>Array of permission names</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FrameworkSecurityProvider.#ctor(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,Microsoft.TeamFoundation.Framework.Client.ISecurityService,Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService,Microsoft.TeamFoundation.Framework.Client.SecurityNamespace,Microsoft.TeamFoundation.Framework.Client.SecurityNamespace)">
            <summary>
            Creates a security provider that talks to the security manager to get its information.
            </summary>
            <param name="versionControlServer">The version control server we are getting
            security information for.</param>
            <param name="securityService">The security service that this provider should
            talk to.</param>
            <param name="identityManagment">The IMS instance this should use for resolving identities</param>
            <param name="privilegeSecurity">The namespace this provider should talk to for
            privilege information.</param>
            <param name="repositorySecurity">The namespace this provider should talk to for
            repository security information.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FrameworkSecurityProvider.GetPermissions(System.String[],Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],Microsoft.TeamFoundation.VersionControl.Client.RecursionType)">
            <summary>
            Gets the permissions for items in the repository.
            </summary>
            <param name="identityNames">the user or group names (may be null)</param>
            <param name="itemSpecs">the items</param>
            <param name="recursionType">the recursion to use when matching items</param>
            <returns>the permissions from the repository</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FrameworkSecurityProvider.SetPermissions(Microsoft.TeamFoundation.VersionControl.Client.SecurityChange[])">
            <summary>
            Sets the permissions for items in the repository.
            </summary>
            <param name="securityChanges">the list of changes to send to the server</param>
            <returns>a list of successful changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FrameworkSecurityProvider.GetGlobalPermissions(System.String[])">
            <summary>
            Gets the global permissions for the selected users in the repository.
            </summary>
            <param name="identityNames">the user or group names (may be null for all identities)</param>
            <returns>the permissions from the repository</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FrameworkSecurityProvider.ReadIdentitiesForACL(Microsoft.TeamFoundation.Framework.Client.AccessControlList)">
            <summary>
            Reads the identities associated with all of the permissions in the ACL
            </summary>
            <param name="accessControlList"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FrameworkSecurityProvider.SetGlobalPermissions(Microsoft.TeamFoundation.VersionControl.Client.PermissionChange[])">
            <summary>
            Sets the permissions for items in the repository.
            </summary>
            <param name="permissionChanges">the list of changes to send to the server</param>
            <returns>a list of successful changes</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FrameworkSecurityProvider.GetEffectivePermissions(System.String,System.String)">
            <summary>
            Computes the permissions for a user against a particular item.  Applies 
            the allow and deny lists, inheritance, and group membership rules to 
            come up with a simple list of permissions the user has.
            </summary>
            <param name="userName">Name of user to check</param>
            <param name="item">Item to check (server or local path)</param>
            <returns>Array of permission names</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FrameworkSecurityProvider.GetEffectiveGlobalPermissions(System.String)">
            <summary>
            Computes the global permissions for a user.  Applies the allow and deny lists,
            inheritance, and group membership rules to come up with a simple list of permissions
            the user has.
            </summary>
            <param name="userName">Name of user to check</param>
            <returns>Array of permission names</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FrameworkSecurityProvider.ReadIdentitiesForACLs(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.Framework.Client.AccessControlList})">
            <summary>
            Reads the identities associated with all of the permissions in the ACLs
            </summary>
            <param name="accessControlLists"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.FrameworkSecurityProvider.GetRequestorIdentity">
            <summary>
            Gets the current requestor identity
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ServerSettingsCache.FileName">
            <summary>
            The path of the cache file, which is a function of the client cache directory and the server GUID.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ServerSettingsCache.FromFile(System.String)">
            <summary>
            Given a file name, creates and returns a new ServerSettings instance from previously
            serialized data in that file.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ServerSettingsCache.ToFile(Microsoft.TeamFoundation.VersionControl.Client.ServerSettings,System.String)">
            <summary>
            Given a file name and a ServerSettings object, serializes the instance to XML
            and saves it to disk.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ShelvesetComparer">
            <summary>
            A comparer used to compare shelvesets first by name and then by owner.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ShelvesetComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two shelvesets first by name and second by owner for display purposes
            (culture sensitive and case insensitive).
            </summary>
            <param name="x">Shelveset object</param>
            <param name="y">Shelveset object</param>
            <returns>result of String.Compare() (integer indicating lexical relationship)</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.FileTransferEventHandler">
            <summary>
            Handler for file transfer notifications.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.FileTransferEventArgs">
            <summary>
            Event arguments for file transfers (uploads and downloads).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.FileTransferEventArgs.FileName">
            <summary>
            File being transferred.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.FileTransferEventArgs.NumBytesTransferred">
            <summary>
            Number of bytes transferred so far.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.FileTransferEventArgs.NumBytesTotal">
            <summary>
            Number of bytes total bytes in the file.  When Status is not Working or Finished, the
            value of this property is not meaningful.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.FileTransferEventArgs.Status">
            <summary>
            This provides the current state of the file transfer.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.FileTransferEventArgs.ElapsedMilliseconds">
            <summary>
            This provides the milliseconds elapsed while waiting on this web method call.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.DestroyedEventHandler">
            <summary>
            Handler for destroying items.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.DestroyEventArgs">
            <summary>
            Event arguments for destroyed items
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.DestroyEventArgs.Item">
            <summary>
            Returns a destroyed item destroyed with .DestroyFlags.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.DestroyEventArgs.DestroyFlags">
            <summary>
            Returns the set of options that were passed up 
            to the server Destroy method.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.DestroyEventArgs.StopAtSpec">
            <summary>
            The version spec used when DestroyFlags.KeepHistory is set to bound
            how many versions of files get their content destroyed.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CommittedBranchCreatedEventHandler">
            <summary>
            Handler for committed branch created
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CommittedBranchCreatedEventArgs">
            <summary>
            Event arguments for committed branch created
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.FolderContentChangedEventHandler">
            <summary>
            Handler for folder content changed events
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.FolderContentChangedEventArgs">
            <summary>
            Event arguments describing a folder content changed event
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.FolderContentChangedEventArgs.ChangesetId">
            <summary>
            If available, the Id of the changeset in which the changes were committed. An Id value
            of -1 indicates that the changeset is not available like in the case of items destroyed.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BranchObjectCreatedEventHandler">
            <summary>
            Handler for branch object created
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BranchObjectCreatedEventArgs">
            <summary>
            Event arguments for branch object created
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BranchObjectDeletedEventHandler">
            <summary>
            Handler for branch object deleted
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BranchObjectDeletedEventArgs">
            <summary>
            Event arguments for branch object deleted
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BranchObjectUpdatedEventHandler">
            <summary>
            Handler for branch object updated
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BranchObjectUpdatedEventArgs">
            <summary>
            Event arguments for branch object updated
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CancelException">
            <summary>
            Exception specifically for user-requested cancellation of the client's actions.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CommitCheckinEventHandler">
            <summary>
            Handler for committed checkins 
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CommitCheckinEventArgs">
            <summary>
            Event arguments for committing checkins
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CommitShelvesetEventHandler">
            <summary>
            Handler for committing shelvesets
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CommitShelvesetEventArgs">
            <summary>
            Event arguments for committing shelvesets
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.DeletedShelvesetEventHandler">
            <summary>
            Handler for deleting shelvesets
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.DeletedShelvesetEventArgs">
            <summary>
            Event arguments for deleting shelvesets
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.UnshelveShelvesetEventHandler">
            <summary>
            Handler for unshelving shelvesets
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.UnshelveShelvesetEventArgs">
            <summary>
            Event arguments for unshelving shelvesets
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.SetWorkspaceLocationProgressEventArgs">
            <summary>
            Event arguments describing the state of the workspace conversion (server to local, or local to server).
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ProcessingChangeEventHandler">
            <summary>
            Handler for processing change events (CheckIn() and Shelve()).
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ProcessingChangeEventArgs">
            <summary>
            Event arguments describing the change being processed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ProcessingChangeEventArgs.PendingChange">
            <summary>
            The pending change being processed.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ProcessingChangeEventArgs.Workspace">
            <summary>
            The workspace where the event occurred.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ChangesetReconciledEventHandler">
            <summary>
            Handler for reconcile to changeset events
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ChangesetReconciledEventArgs">
            <summary>
            Event arguments describing a reconcile-to-changeset event
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ChangesetReconciledEventArgs.ChangesetId">
            <summary>
            The id of the changeset that was checked in.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PendingChangeEventHandler">
            <summary>
            Handler for all PendingChange events.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.PendingChangeEventArgs">
            <summary>
            Event arguments describing actions on a pending change.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChangeEventArgs.UpdateServer(System.String)">
            <summary>
            Updates the server to tell it where pending change's item is currently located.
            </summary>
            <param name="currentLocalPath">current location on disk (null if not on disk)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.PendingChangeEventArgs.UpdateServer(Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueue,System.String)">
            <summary>
            Updates the server to tell it where pending change's item is currently located.
            Accepts UpdateLocalVersionQueue to allow batching of the UpdateLocalVersion calls.
            </summary>
            <param name="currentLocalPath">current location on disk (null if not on disk)</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChangeEventArgs.PendingChange">
            <summary>
            The pending change being operated on.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChangeEventArgs.IsLatest">
            <summary>
            Returns true if this operation is getting the latest version of the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.PendingChangeEventArgs.DiskUpdateAttempted">
            <summary>
            True if the disk update was attempted (i.e., this was not a preview or noget).
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.UndonePendingChangeEventHandler">
            <summary>
            Handler for all undone change events.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.BeforeWorkItemsUpdateEventHandler">
            <summary>
            Handler used to signal the start of work item update.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.AfterWorkItemsUpdatedEventHandler">
            <summary>
            Handler used to signal the start of work item update.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkItemsUpdateEventArgs">
            <summary>
            Event argument providing information about the work items in an update.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemsUpdateEventArgs.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo[])">
            <summary>
            Create an event args instance.
            </summary>
            <param name="workspace">the workspace involved in the checkin</param>
            <param name="workItemInfo">work item info array</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkItemsUpdateEventArgs.WorkItemInfo">
            <summary>
            Get the work item information.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkItemsUpdateEventArgs.Workspace">
            <summary>
            Get the workspace involved in the checkin.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkItemUpdatedEventHandler">
            <summary>
            Handler for all work item transitioned events.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkItemUpdatedEventArgs">
            <summary>
            Event arguments describing actions on a transitioned work item.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemUpdatedEventArgs.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo)">
            <summary>
            Create an event args instance.
            </summary>
            <param name="workspace">the workspace involved in the checkin</param>
            <param name="workItemInfo">work item info</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemUpdatedEventArgs.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo,System.String)">
            <summary>
            Create an event args instance for a failed transition.
            </summary>
            <param name="workspace">the workspace involved in the checkin</param>
            <param name="workItemInfo">work item info</param>
            <param name="errorMessage">a localized message about what went wrong</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkItemUpdatedEventArgs.WorkItemInfo">
            <summary>
            Get the work item information.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkItemUpdatedEventArgs.Workspace">
            <summary>
            Get the workspace involved in the checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkItemUpdatedEventArgs.Successful">
            <summary>
            Get the work item transition and link status.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkItemUpdatedEventArgs.ErrorMessage">
            <summary>
            The error message if the work item did not transition successfully.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.MergeEventHandler">
            <summary>
            Handler for all Merge events.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.MergeEventArgs">
            <summary>
            Event arguments describing actions on a merge.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.MergeEventArgs.GetMessage(System.String@)">
            <summary>
            Converts this event into a displayable message.
            </summary>
            <param name="error">the error message, if any, that is also a result of this event</param>
            <returns>the displayable message for pending a merge</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.MergeEventArgs.PendingChange">
            <summary>
            If the merge is automatically resolved, this is the pending change that resulted.
            Otherwise, this property is null.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.MergeEventArgs.IsLatest">
            <summary>
            Returns true if this operation is getting the latest version of the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.MergeEventArgs.DiskUpdateAttempted">
            <summary>
            True if the disk update was attempted (i.e., this was not a preview).
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ResolvedConflictEventHandler">
            <summary>
            Handler for all Conflict events.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ResolvedConflictEventArgs">
            <summary>
            Event arguments describing a resolved conflict.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ResolvedConflictEventArgs.Conflict">
            <summary>
            The conflict that was resolved.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ResolvedConflictEventArgs.Workspace">
            <summary>
            The workspace containing the conflict.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ConflictEventHandler">
            <summary>
            Handler for all Conflict events.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ConflictEventArgs">
            <summary>
            Event arguments describing actions on a conflict.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ConflictEventArgs.ServerItem">
            <summary>
            The server item being operated on.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ConflictEventArgs.Workspace">
            <summary>
            The workspace containing the conflict.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ConflictEventArgs.Message">
            <summary>
            The conflict message.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ConflictEventArgs.Resolvable">
            <summary>
            Is this conflict resolvable or not
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ExceptionEventHandler">
            <summary>
            Handler for all Exception events.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ExceptionEventArgs">
            <summary>
            Event arguments describing actions on a non-fatal exception.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExceptionEventArgs.Exception">
            <summary>
            The exception being operated on.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExceptionEventArgs.Failure">
            <summary>
            If this event is due to a failure reported by the server, it available from this property.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExceptionEventArgs.Workspace">
            <summary>
            The workspace associated with the error or null if there is no workspace or it's unknown.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ExceptionEventArgs.OperationId">
            <summary>
            A unique identifier for the operation, within the process.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceEventHandler">
            <summary>
            Handler for workspace changes. 
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceEventArgs">
            <summary>
            Event arguments for workspace changes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceEventArgs.Workspace">
            <summary>
            The workspace that was created, updated, or deleted.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceEventArgs.EventSource">
            <summary>
            Indicates whether this workspace event was raised as a result of an internal action, or
            from an external event (such as a notification from another process on the same desktop)
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceEventArgs.Flags">
            <summary>
            The meaning of this property varies by event. It may be used to provide information to
            event handlers, or for event handlers to provide information (such as a cancel request)
            back to the sender of the event.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceEventSource.Internal">
            <summary>
            This event was raised by an action which occurred on this VersionControlServer object.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceEventSource.External">
            <summary>
            This event was raised by an action which occurred externally (such as through a cross-
            process notification from the NotificationManager). External events can only be received
            if the notification manager has been started with NotificationManager.Initialize().
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceEventSource.ExternalScanned">
            <summary>
            This event was raised by an action which occurred externally, but not through a cross-process
            notification -- instead, it was discovered by the local workspace scanner. Events with this
            source are raised only for local workspaces (Workspace.Location == WorkspaceLocation.Local).
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.OperationEventGenerator">
            <summary>
            This is a simple helper class used to make generating the operation start and finish
            events easy to do with a using statement.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.OperationEventHandler">
            <summary>
            Handler for operations starting and finishing.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.OperationEventArgs">
            <summary>
            Event arguments for file transfers (uploads and downloads).
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.OperationEventArgs.Starting(Microsoft.TeamFoundation.VersionControl.Client.OperationEventType,Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            This factory method creates the operation event args and raises the starting event.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.OperationEventArgs.Finished">
            <summary>
            Raise the matching finished event.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.OperationEventArgs.Type">
            <summary>
            The type of operation that is starting or has finished.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.OperationEventArgs.Workspace">
            <summary>
            The workspace associated with the error or null if there is no workspace or it's unknown.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.OperationEventArgs.Id">
            <summary>
            This id is unique for each start/finish event pair that can be used to match the start and
            finish events.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.TeamProjectFolderCreatedEventHandler">
            <summary>
            Handler for creation of a team project folder.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.TeamProjectFolderCreatedEventArgs">
            <summary>
            Event arguments for creation of a team project folder
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ShelvesetUpdatedEventHandler">
            <summary>
            Handler for the update of a shelveset.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ShelvesetUpdatedEventArgs">
            <summary>
            Event arguments for the update of a shelveset.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.OperationEventType">
            <summary>
            These operations have starting and finished event notifications.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ShelvingOptions">
            <summary>
            Options for how to perform the shelving operation
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspacePermissions">
            <summary>
            Workspace permissions.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions">
            <summary>
            Options for the GetItems and GetItem calls
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions.None">
            <summary>
            Default behavior.  Sorting is performed and no download information is generated.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions.Download">
            <summary>
            If set, causes download information to be generated.  Set this only if you
            plan to download the file's contents after calling GetItems().
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions.Unsorted">
            <summary>
            Speeds up GetItems() by not sorting the result items.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions.IncludeBranchInfo">
            <summary>
            Include information on whether an item is a branch object in the system
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions.IncludeSourceRenames">
            <summary>
            Include items which are the source of a rename.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions.LocalOnly">
            <summary>
            Only available in local workspaces. Will cause the retrieval of items
            from the local table, without making a server call.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.GetItemsOptions.IncludeRecursiveDeletes">
            <summary>
            Instructs the server to return items which are affected by a Recursive Delete
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.LocalVersionComparer">
            <summary>
            Compares 2 versions of the local version object for display purposes.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.TeamProject">
            <summary>
            Represents a team project as it relates to the Version Control portion of Team Foundation.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.FromItems(Microsoft.TeamFoundation.VersionControl.Client.Item[])">
            <summary>
            INTERNAL helper for VersionControlServer
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.ToServerItems(Microsoft.TeamFoundation.VersionControl.Client.TeamProject[])">
            <summary>
            INTERNAL helper for VersionControlServer
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.ValidateChange(System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemType,Microsoft.TeamFoundation.VersionControl.Client.Failure@)">
            <summary>
            Validates if given server items is a root or team project path. If so, creates apropriate failure.
            Does not validate if item represents existing team project or child of existing team project.
            </summary>
            <param name="type">Item type</param>
            <param name="serverItem"></param>
            <param name="failure">Failure created, if pending change is not valid (item is root or team project).</param>
            <returns>True if operation is valid. False is serverItem is root or team project folder.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.GetCheckinPolicies">
            <summary>
            Get the list of check in policies for this project.
            </summary>
            <returns>The list of policies.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.SetCheckinPolicies(Microsoft.TeamFoundation.VersionControl.Client.PolicyEnvelope[])">
            <summary>
            Sets the checkin policies for this project.
            </summary>
            <param name="policies">The checking policies.  If null or
              an empty array is specified, the policies for this project are cleared.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.SetCheckinNoteFields(Microsoft.TeamFoundation.VersionControl.Client.CheckinNoteFieldDefinition[])">
            <summary>
            Create a new set of field definitions associated with this project.
            </summary>
            <param name="checkinNoteFields">CheckinNoteFieldDefinition objects defining these fields.  If null or
              an empty array is specified, the checkin note fields for this project are cleared.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.GetCheckinNoteFields">
            <summary>
            Get the set of field definitions associated with this project.
            </summary>
            <returns>the CheckinNoteFieldDefinition objects defining these fields</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.Equals(System.Object)">
            <summary>
            Returns true if the two team projects represent the same project (same name and in the
            same repository).
            </summary>
            <param name="obj">team project with which to compare</param>
            <returns>returns true if the same</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.GetHashCode">
            <summary>
            Returns the hash code (objects that return true in Equals() have matching hash codes).
            </summary>
            <returns>the hash code</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.Name">
            <summary>
            The name of this project.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.ServerItem">
            <summary>
            The Source Control server path for this project.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.ArtifactUri">
            <summary>
            The artifact URI for this team project.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.ExclusiveCheckout">
            <summary>
            The exclusive checkout property for this project.  When true, every pending change results
            in the item being locked with a checkout lock.  When false, pending a change does not affect
            the lock status of the item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.GetLatestOnCheckout">
            <summary>
            The "get latest on checkout" property for this project.  When true, every attempt to
            pend an edit will subsequently download the latest version of the file if the local
            version is not up-to-date.  When false, pending an edit simply pends an edit
            unless the user has requested "get latest on checkout" functionality.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.VersionControlServer">
            <summary>
            The source control repository associated with this project.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.TeamFoundationServer">
            <summary>
            The Team Foundation Server where this team project resides
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.TeamProjectCollection">
            <summary>
            The TfsTeamProjectCollection where this team project resides
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.ItemId">
            <summary>
            INTERNAL The item ID for the project -- this is used in the team project cache handling.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.TeamProject.WebServiceLayer">
            <summary>
            Convenience property to get the repository.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyAssemblyTool">
            <summary>
            Abstracts a tool provider that is loaded from an extension assembly and is executed
            in proc.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyAssemblyTool.#ctor(Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition)">
            <summary>
            Constructor
            </summary>
            <param name="toolDefinition">The tool definition</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyAssemblyTool.Extension">
            <summary>
            The extension supported by this tool
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyAssemblyTool.Operation">
            <summary>
            The operation supported by this tool
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyAssemblyTool.CanOperateOnInMemoryFiles">
            <summary>
            Whether this tool provider can operate on the in memory version of the file.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyAssemblyTool.IsToolProxyLoaded">
            <summary>
            Is the proxy tool loaded
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyAssemblyTool.Execute(System.EventHandler,Microsoft.TeamFoundation.VersionControl.Client.AdvancedToolParameters,System.String[])">
            <summary>
            The implementation of the execute method. 
            </summary>
            <param name="exitHandler">the exit handler</param>
            <param name="waitForExit">wait for exit</param>
            <param name="modalExperience">if diff should be invoked in a modal experience</param>
            <param name="arguments">arguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyAssemblyTool.LoadToolProxy">
            <summary>
            Loads the tool proxy
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyAssemblyTool.IsToolThirdPartyAssemblyTool(Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition)">
            <summary>
            If the definition command has a ".dll" then it is an assembly otherwise it is an executable
            </summary>
            <param name="toolDefinition">The tool definition</param>
            <returns>True if the command is an assembly path</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool">
            <summary>
            Provides an implementation for IToolProvider that wrapps executable tools.
            This object is constructed whenever we need to use an executable tool to
            execute compare or merge.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool.#ctor(Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition)">
            <summary>
            Constructor
            </summary>
            <param name="toolDefinition">The tool definition of the tool</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool.Extension">
            <summary>
            The extension supported by this Third party tool
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool.Operation">
            <summary>
            The operation supported by this Third party tool
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool.CanOperateOnInMemoryFiles">
            <summary>
            Whether this tool provider can operate on the in memory version of the file.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool.Execute(System.EventHandler,Microsoft.TeamFoundation.VersionControl.Client.AdvancedToolParameters,System.String[])">
            <summary>
            The execute implementation for this tool
            </summary>
            <param name="exitHandler">Exit handler, used for merge tools</param>
            <param name="waitForExit">Wait for exit</param>
            <param name="modalExperience">if diff should be invoked in a modal experience</param>
            <param name="arguments">The arguments</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool.ExecuteCompare(System.EventHandler,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Execute compare
            </summary>
            <param name="exitHandler">The exit handler</param>
            <param name="waitForExit">Wait for exit</param>
            <param name="originalFile">The original file</param>
            <param name="modifiedFile">The modified file</param>
            <param name="originalLabel">The original file label</param>
            <param name="modifiedLabel">The modified file label</param>
            <param name="options">The commandline options</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool.ExecuteMerge(System.EventHandler,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Execute merge
            </summary>
            <param name="exitHandler">The exit handler</param>
            <param name="waitForExit">Wait for exit</param>
            <param name="latestFile">The latest file</param>
            <param name="modifiedFile">The modified file</param>
            <param name="originalFile">The original file</param>
            <param name="mergedFile">The merged file</param>
            <param name="latestFileLabel">The latest file label</param>
            <param name="modifiedFileLabel">The modified file label</param>
            <param name="originalFileLabel">The original file label</param>
            <param name="mergedFileLabel">The merged file label</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool.Id">
            <summary>
            The process id is used as the unique id for the result
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool.Name">
            <summary>
            The process name is used as the unique name for the result
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool.HasExited">
            <summary>
            we forward the has exited request to the process object
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool.ExitCode">
            <summary>
            The exit code is only set when we wait for the operation end
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool.ExitMessage">
            <summary>
            The exit message is empty for external executables
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool.PromptUserForMergeConfirmation">
            <summary>
            Whether we should prompt the user for confirmaiton. This is only false in the case we are using diffmerge.exe
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool.WaitForOperationEnd">
            <summary>
            Waits for the process to exit
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool.Cancel">
            <summary>
            Cancel the operation
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyExecutableTool.ReplaceArguments(System.String,System.String[])">
            <summary>
            Replaces arguments, represented in the string s in the form %X, where X is a digit, with values
            stored in the arguments[X]. If arguments[X] is null, no action is performed.
            </summary>
            <param name="s"></param>
            <param name="arguments"></param>
            <returns>Computed string.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyRunner.RunCompare(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.EventHandler,System.Boolean,System.Boolean)">
            <summary>
            Run a "diff" (compare) operation between two files using the Third-Party support
            </summary>
            <param name="originalFile">unmodified file - base file for our comparison</param>
            <param name="modifiedFile">file that includes our changes, "newer" file</param>
            <param name="commandLineOptions">options to pass along to the program</param>
            <param name="originalLabel">label for the original file to pass along</param>
            <param name="modifiedLabel">label for the modified file to pass along</param>
            <param name="exitedHandler">handler for Process Exited event</param>
            <param name="wait">if true, wait for the process to exit</param>
            <param name="modalExperience">if diff should be invoked in a modal experience</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyRunner.BeginRunMerge(Microsoft.TeamFoundation.VersionControl.Client.ThreeWayMerge)">
            <summary>
            Run a third-party merge tool.  Extension to use is based on the
            threeWayMerge.ModifiedFileName.
            </summary>
            <param name="threeWayMerge">The three way merge to run</param>
            <returns>whether we were able to find a tool, run it, and get merged output</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyRunner.EndRunMerge(Microsoft.TeamFoundation.VersionControl.Client.IToolExecutionResult,System.String)">
            <summary>
            Finishes running a third-party merge tool.
            </summary>
            <param name="mergeProcess">The result of BeginRunMerge()</param>
            <param name="mergedFile">The path to the file that receives the merged contents</param>
            <returns>Whether a merge tool executed and producted merged output</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyRunner.BeginRunAutomerge(Microsoft.TeamFoundation.VersionControl.Client.ThreeWayMerge)">
            <summary>
            Run a third-party automerge tool. Extension to use is based on the threeWayMerge.ModifiedFileName
            </summary>
            <param name="threeWayMerge">The merge to run</param>
            <returns>A tool result that can be used with EndRunAutomerge()</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyRunner.EndRunAutomerge(Microsoft.TeamFoundation.VersionControl.Client.IToolExecutionResult,System.String)">
            <summary>
            Finishes an external tool automerge
            </summary>
            <param name="toolResult">Generated by BeginRunAutomerge()</param>
            <param name="mergedFile">The path to the file to receive the merged contents, in case toolResult is null</param>
            <returns>Whether we were able to find a tool, run it, and get merged output</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyRunner.BeginRunMergeTool(Microsoft.TeamFoundation.VersionControl.Client.ThreeWayMerge,Microsoft.TeamFoundation.VersionControl.Client.IToolProvider)">
            <summary>
            Runs a third-party (interactive) merge or automerge tool. Extension to use is based on the threeWayMerge.ModifiedFileName
            </summary>
            <param name="threeWayMerge">The files to merge</param>
            <param name="tool">The tool to run</param>
            <returns>The result of running the tool</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyRunner.EndRunMergeTool(Microsoft.TeamFoundation.VersionControl.Client.IToolExecutionResult,System.String)">
            <summary>
            Finishes an external tool (interactive) merge or automerge
            </summary>
            <param name="toolResult">Generated by BeginRunMergeTool()</param>
            <param name="mergedFile">The path to the file to receive the merged contents, in case toolResult is null</param>
            <returns>Whether we were able to find a tool, run it, and get merged output</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyRunner.IsCompareToolConfigured(System.String)">
            <summary>
            Whether we have an external compare/diff third-party tool configured for this file's extension
            </summary>
            <param name="file">filename whose extension we'll check for in the mappings</param>
            <returns>whether a compare/diff tool is configured</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyRunner.IsMergeToolConfigured(System.String)">
            <summary>
            Whether we have an external merge third-party tool configured for this file's extension
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyRunner.IsAutomergeToolConfigured(System.String)">
            <summary>
            Whether we have an external merge third-party tool configured for this file's extension.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyRunner.CheckMergedFile(System.String)">
            <summary>
            Verify that the merged file was created properly
            </summary>
            <param name="mergedFile">Merge file to check</param>
            <returns>true if file is valid; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.#ctor">
            <summary>
            Default constructor should make an empty Compare operation
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.#ctor(System.String,Microsoft.TeamFoundation.VersionControl.Client.ToolOperations,System.String,System.String,System.String)">
            <summary>
            Create a new instance with the given parameters for initial data points
            </summary>
            <param name="extension">extension - comes from user</param>
            <param name="operationLocalized">*LOCALIZED* version of "Compare" or "Merge"</param>
            <param name="command">command path, comes from user</param>
            <param name="typeName">the type which is only used for assembly tools (optional)</param>
            <param name="arguments">arguments, comes from user</param>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.ExtensionChanged">
            <summary>
            Triggered when the extension is updated
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.Extension">
            <summary>
            The extension supported by this tool
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.OperationChanged">
            <summary>
            Triggered when the operation is updated
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.Operation">
            <summary>
            The operation supported by this tool
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.OperationDisplay">
            <summary>
            The display string of this operation (Used for localized builds)
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.CommandChanged">
            <summary>
            Triggered when the command updated
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.Command">
            <summary>
            The command to call this tool
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.TypeName">
            <summary>
            Returns the type name for assembly tools when applicable
            </summary>
        </member>
        <member name="E:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.ArgumentsChanged">
            <summary>
            Triggered when the arguments are updated
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.Arguments">
            <summary>
            The arguments expected by this tool
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.IsDefaultTool">
            <summary>
            True if this is tool shipped with TFS (diffmerge.exe), false otherwise
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.System#ICloneable#Clone">
            <summary>
            Implementation of the ICloneable interface, allowing us to create a copy of a tool
            instance for potential modification by another dialog
            </summary>
            <returns>deep copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.ValidateThirdPartyToolDefinition(Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition)">
            <summary>
            Validates the third party tool definition specified
            </summary>
            <param name="tool">The tool definition</param>
            <returns>True if the definition is valid, false otherwise</returns>        
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.ExtensionSplit(Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition)">
            <summary>
            Split the current instance into multiple instances based on multiple extensions in
            the extension text box.
            </summary>
            <returns>array of instances, each with the same operation/command/arguments as this</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.GetExtensionsFromString(System.String)">
            <summary>
            Get the extensions in the string passed
            </summary>
            <param name="input">list of files</param>
            <returns>list of extensions</returns>       
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.CheckLegalExtension(System.String)">
            <summary>
            Check* methods for validating individual fields 
            </summary>
            <param name="extension">extension</param>
            <returns>empty if the extension is valid, error message if not</returns>       
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.CheckLegalCommand(System.String)">
            <summary>
            Checks if the file specified by the command exists
            </summary>
            <param name="command">command</param>
            <returns>empty if the operation is valid, error message if not</returns>        
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.CheckLegalArguments(System.String,Microsoft.TeamFoundation.VersionControl.Client.ToolOperations)">
            <summary>
            Verifies that the arguments passed are correct
            </summary>
            <param name="arguments">arguments</param>
            <param name="operation">operation</param>
            <returns>empty if the operation is valid, error message if not</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.GetExtensionError(System.String)">
            <summary>
            Provide the error string to return to users to let them know this extension is invalid.
            Return string.Empty if the extension is valid.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="extension">file extension to test</param>
            <returns>empty string if extension is fine, reason this extension is bad otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.GetExtensionError(System.String,System.Boolean)">
            <summary>
            Provide the error string to return to users to let them know this extension is invalid.
            Return string.Empty if the extension is valid.
            </summary>
            <remarks>Safe for remote paths.  Does not access the local disk.</remarks>
            <param name="extension">file extension to test</param>
            <param name="allowMultipleExtensions">Is it OK to have more than one period extension</param>
            <returns>empty string if extension is fine, reason this extension is bad otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.CheckArgumentsForWeirdPatterns(System.String)">
            <summary>
            Verifies that the arguments does not contain weird patterns
            </summary>
            <param name="arguments">arguments</param>
            <returns>The error message if invalid, string.Empty otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.CheckLegalCompareArguments(System.String)">
            <summary>
            Verifies that the compare arguments does not contain weird patterns
            </summary>
            <param name="arguments">arguments</param>
            <returns>The error message if invalid, string.Empty otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition.CheckLegalMergeArguments(System.String)">
            <summary>
            Verifies that the merge arguments does not contain weird patterns
            </summary>
            <param name="arguments">arguments</param>
            <returns>The error message if invalid, string.Empty otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinitionCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinitionCollection.Instance">
            <summary>
            Singleton Instance of the ThirdPartyToolCollection manager
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinitionCollection.AddTool(Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition)">
            <summary>
            Add tool to the third party tool collection
            </summary>
            <param name="tool">new tool to add</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinitionCollection.LoadAllFromRegistry">
            <summary>
            Clears the list and loads all the third party tools form the registry
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinitionCollection.PersistAllToRegistry">
            <summary>
            Save all the tools in the list to the registry
            </summary>
            [EditorBrowsable(EditorBrowsableState.Never)]
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinitionCollection.FindTool(System.String,Microsoft.TeamFoundation.VersionControl.Client.ToolOperations)">
            <summary>
            Searches for tool in the registry
            </summary>
            <param name="extension">file extension</param>
            <param name="operationLocalized">tool operation</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolRegistryHelper.LoadAllFromRegistry">
            <summary>
            Loads all the tool definitions in registry
            </summary>
            <returns>List of all user defined tool definitions</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolRegistryHelper.PersistAllToRegistry(System.Collections.Generic.List{Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition})">
            <summary>
            Saves all tool definitions in the registry
            </summary>
            <param name="toolDefinitions">The list of tools defined to save</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolRegistryHelper.DeleteAllFromRegistry">
            <summary>
            Deletes all the user defined tools from the registry
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolRegistryHelper.GetBestCompareTool(System.String)">
            <summary>
            Determines the best compare tool to use
            </summary>
            <param name="file">File name used to extract the extension</param>
            <returns>An IToolProvider used to execute the compare command</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolRegistryHelper.GetBestMergeTool(System.String)">
            <summary>
            Determines the best merge tool to use
            </summary>
            <param name="file">File name used to extract the extension</param>
            <returns>An IToolProvider used to execute the merge command</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolRegistryHelper.GetBestAutomergeTool(System.String)">
            <summary>
            Determines the best automerge tool to use
            </summary>
            <param name="file">File name used to extract the extension</param>
            <returns>IToolProvider used to execute the automerge command</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolRegistryHelper.GetBestTool(System.String,Microsoft.TeamFoundation.VersionControl.Client.ToolOperations)">
            <summary>
            Determines the best tool to use for the operation
            </summary>
            <param name="file">File name used to extract the extension</param>
            <param name="operation">The operation to be executed</param>
            <returns>An IToolProvider used to execute the operation</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolRegistryHelper.PersistToolDefinitionToRegistry(Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolDefinition)">
            <summary>
            Saves the tool definition to registry
            </summary>
            <param name="toolDef">The tool definition</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolRegistryHelper.LoadUserToolDefinition(System.String,Microsoft.TeamFoundation.VersionControl.Client.ToolOperations)">
            <summary>
            Looks up the user registry for a tool that supports the extension and operation
            </summary>
            <param name="extension">The extension</param>
            <param name="operation">The operation</param>
            <returns>The tool definition found, null if nothing found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolRegistryHelper.LoadMachToolDefinition(System.String,Microsoft.TeamFoundation.VersionControl.Client.ToolOperations)">
            <summary>
            Looks up the machine registry for a tool that supports the extension and operation
            </summary>
            <param name="extension">The extension</param>
            <param name="operation">The operation</param>
            <returns>The tool definition found, null if nothing found</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolRegistryHelper.LoadToolDefinitionFromRegistryKey(Microsoft.Win32.RegistryKey,System.String,Microsoft.TeamFoundation.VersionControl.Client.ToolOperations)">
            <summary>
            Loads the tool definition from the registry key root
            </summary>
            <param name="registryKey">The registry key root</param>
            <param name="extension">The extension</param>
            <param name="operation">The operation</param>
            <returns>The tool definition loaded</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolRegistryHelper.GetPath(System.String,Microsoft.TeamFoundation.VersionControl.Client.ToolOperations)">
            <summary>
            Get the registry path that corresponds to the given file extension (".cs", ".xml") and operation
            ("Compare", "Merge").
            </summary>
            <param name="extension">extension to operate on.</param>
            <param name="operationInvariant">the operation name.</param>
            <returns>registry path.</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolRegistryHelper.GetRegistryKey(System.String,Microsoft.TeamFoundation.VersionControl.Client.ToolOperations)">
            <summary>
            Opens the registry path that corresponds to the correct extension and operation from the user hive
            </summary>
            <param name="extension">extension to operate on.</param>
            <param name="operationInvariant">the operation name.</param>
            <returns>registry key</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolRegistryHelper.GetMachineRegistryKey(System.String,Microsoft.TeamFoundation.VersionControl.Client.ToolOperations)">
            <summary>
            Opens the registry path that corresponds to the correct extension and operation from the user hive.
            </summary>
            <param name="extension">extension to operate on.</param>
            <param name="operationInvariant">the operation name.</param>
            <returns>registry key</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolRegistryHelper.GetBottomRegistryKey(Microsoft.Win32.RegistryHive)">
            <summary>
            Allows redirection of the base registry key for diff/merge tools while
            running in Razzle or Rascal Pro.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThirdPartyToolRegistryHelper.GetTopRegistryKey">
            <summary>
            Returns the top registry key for the tools configuration.
            </summary>
            <returns>top registry key</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.IToolProvider">
            <summary>
            Interface defining the operation provider for tfs vc client OM
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IToolProvider.Extension">
            <summary>
            The extension that this tool operate on.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IToolProvider.Operation">
            <summary>
            The operation supported by this tool.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IToolProvider.CanOperateOnInMemoryFiles">
            <summary>
            Whether this tool provider can operate on the in memory version of the file.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IToolProvider.Execute(System.EventHandler,Microsoft.TeamFoundation.VersionControl.Client.AdvancedToolParameters,System.String[])">
            <summary>
            The execute method for the tool. Called to execute the tool by the OM.
            </summary>
            <param name="arguments">All the argument specified by the operation</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.IToolExecutionResult">
            <summary>
            Interface defining the result of the execute operation
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IToolExecutionResult.Id">
            <summary>
            The id of the process or the operation handler that is executing the operation
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IToolExecutionResult.Name">
            <summary>
            Name of the operation handler that is executing the operation
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IToolExecutionResult.HasExited">
            <summary>
            Returns true if the executer has exited the operation
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IToolExecutionResult.ExitCode">
            <summary>
            The exit code 
            0 - success
            otherwise - failure
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IToolExecutionResult.ExitMessage">
            <summary>
            A message to be shown to the user in the resolve dialog on exit (as part of the confirmation dialog)
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IToolExecutionResult.PromptUserForMergeConfirmation">
            <summary>
            Whether TFS should prompt for user confirmation
            (Used) only by merge tools
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IToolExecutionResult.WaitForOperationEnd">
            <summary>
            Blocks until the operation is complete
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.IToolExecutionResult.Cancel">
            <summary>
            Sends a cancel request to the results object
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.IToolExecutionFallBackResult">
            <summary>
            Interface defining a result that is a fall back to another tool
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.AdvancedToolParameters">
            <summary>
            Class used to pass advanced parameters to the tool execution implementors
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AdvancedToolParameters.IsModalDialog">
            <summary>
            Whether the operation was invoked from a modal dialog inside VS or not
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AdvancedToolParameters.ShouldWaitForExit">
            <summary>
            Whether the tool should wait for exit before returing control to the OM or not
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AdvancedToolParameters.CompareIsSourceReadOnly">
            <summary>
            Is the source file read only
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AdvancedToolParameters.CompareIsTargetReadOnly">
            <summary>
            Is the target file read only
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AdvancedToolParameters.MergeSourceFileSpec">
            <summary>
            The file spec of the source file
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AdvancedToolParameters.MergeTargetFileSpec">
            <summary>
            The file spec of the target file
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.AdvancedToolParameters.MergeServerGuid">
            <summary>
            The server guid
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.DefaultToolExecutionResult">
            <summary>
            The default tool results which is basically an 
            empty implementation of the the tool result for assembly tools
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.DefaultToolExecutionResult.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.DefaultToolExecutionResult.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.DefaultToolExecutionResult.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.DefaultToolExecutionResult.HasExited">
            <summary>
            Has existed always true
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.DefaultToolExecutionResult.ExitCode">
            <summary>
            Exit code
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.DefaultToolExecutionResult.ExitMessage">
            <summary>
            The exit message is empty by default
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.DefaultToolExecutionResult.PromptUserForMergeConfirmation">
            <summary>
            Should prompt for user confirmation
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.DefaultToolExecutionResult.WaitForOperationEnd">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.DefaultToolExecutionResult.Cancel">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ToolProviderCookieGenerator">
            <summary>
            The cookie generator. Uses a basic random number generator
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ToolProviderCookieGenerator.GenerateNewCookie">
            <summary>
            Gets a new cookie
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ToolProviderConstants">
            <summary>
            Constants used by tool providers.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ToolOperations">
            <summary>
            Enum for the existing supported operations
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.ToolOperations.Undefined">
            <summary>
            Value for undefined
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.ToolOperations.Compare">
            <summary>
            Compare operation
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.ToolOperations.Merge">
            <summary>
            Merge operation
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.ToolOperations.Automerge">
            <summary>
            This option is not currently supported.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThreeWayMerge.WriteMergedFile(Microsoft.TeamFoundation.VersionControl.Common.Internal.MergeOptions,System.IO.Stream,System.Text.Encoding,System.Boolean,Microsoft.TeamFoundation.VersionControl.Common.DiffFile,Microsoft.TeamFoundation.VersionControl.Common.DiffFile,Microsoft.TeamFoundation.VersionControl.Common.DiffFile,Microsoft.TeamFoundation.VersionControl.Common.IMergeChange[],System.Boolean)">
            <summary>
            Helper used to write the merged output file given the input files, the list of merged changes, and options related to the output
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThreeWayMerge.GenerateFakeBase">
            <summary>
            Called during a baseless merge.  Generates the original file by combining the common chunks
            of ModifiedFileName and LatestFileName.  Writes the original file to OriginalFileName.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThreeWayMerge.CreateConflictLabelsFromConflict(Microsoft.TeamFoundation.VersionControl.Client.Conflict,Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Conflict labels are supplied to the external merge tool to describe each of the three files
            for the three-way merge.
            </summary>
            <param name="conflict">Conflict object to generate conflict labels for</param>
            <param name="originalLabel">[out] Conflict label for the base file ("original")</param>
            <param name="latestLabel">[out] Conflict label for diff #1 against the base ("latest")</param>
            <param name="modifiedLabel">[out] Conflict label for diff #2 against the base ("modified")</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThreeWayMerge.CreateConflictFileSpecsFromConflict(Microsoft.TeamFoundation.VersionControl.Client.Conflict,Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Populates the file specs and server guid information on the object using the parent conflict
            object
            </summary>
            <param name="conflict">The conflict</param>
            <param name="workspace">The workspace</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThreeWayMerge.FormatVersionedFileString(System.String,System.String)">
            <summary>
            Returns the formatted version of the file containing the version information.
            </summary>
            <param name="fileName"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ThreeWayMerge.CreateDiffFile(System.String,System.Text.Encoding,Microsoft.TeamFoundation.VersionControl.Common.Internal.MergeOptions,System.String,System.String)">
            <summary>
            Call DiffFile.Create() and show friendly error if a DecoderFallbackException is thrown
            </summary>
            <param name="path"></param>
            <param name="encoding"></param>
            <param name="mergeOptions"></param>
            <param name="fileName"></param>
            <param name="fileTag"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThreeWayMerge.ModifiedFileSpec">
            <summary>
            The file spec of the modified file
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThreeWayMerge.LatestFileSpec">
            <summary>
            The file spec of the latest file
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ThreeWayMerge.VersionControlServerGuid">
            <summary>
            The version control server guid
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueue">
            <summary>
             Class for handling deferred batch updates of the LocalVersion table.
             Holds up to N requests for a maximum of M seconds.  We use time rather
             than byte counts because it more closely models the user's maximum threshold
             of pain, if the operation were to be cancelled.  In effect, it is the byte count
             adjusted for bandwidth.
            NOTE: This should only be used for very specialized situations (e.g., conversion tools).
            Normally this class should not be used by external code.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueue.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Workspace)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueue.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueueOptions)" -->
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueue.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueueOptions,Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLock)">
            <summary>
            Constructs a queue for updating the workspace's local version table.
            </summary>
            <param name="workspace">Workspace to queue local version updates for</param>
            <param name="options">Which table locations to update (local, server, or both)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueue.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueueOptions,Microsoft.TeamFoundation.VersionControl.Client.WorkspaceLock,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a queue for updating the workspace's local version table.
            This constructor is called from get.cs to provide the workspace lock which was
            opened for ProcessGetOperations. (It may have been taken on a different thread.)
            </summary>
            <param name="workspace">Workspace to queue local version updates for</param>
            <param name="options">Which table locations to update (local, server, or both)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueue.QueueUpdate(System.Int32,System.String,System.Int32)">
            <summary>
            Queue a request to tell the server the local disk location of an item in the workspace.
            
            This overload is deprecated.
            </summary>
            <param name="itemId">Item ID of the item in the workspace</param>
            <param name="targetLocalItem">New local path of the item, or null to remove it from
            the workspace</param>
            <param name="localVersion">The version of the item in the workspace. If zero, the request
            refers to the uncommitted slot for the item ID. If non-zero, the request refers to the
            committed slot for the item ID.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueue.QueueUpdate(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Queue a request to tell the server the local disk location of an item in the workspace.
            </summary>
            <param name="sourceServerItem">The committed server path of the item in the workspace,
            or the target server item if the item is uncommitted (pending add or branch)</param>
            <param name="itemId">Item ID of the item in the workspace (optional; used for backwards
            compatibility with TFS 2010 and earlier servers)</param>
            <param name="targetLocalItem">New local path of the item, or null to remove it from
            the workspace</param>
            <param name="localVersion">The version of the item in the workspace. If zero, the request
            refers to the uncommitted slot for the item ID. If non-zero, the request refers to the
            committed slot for the item ID.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueue.QueueUpdate(System.String,System.Int32,System.String,System.Int32,System.DateTime,System.Int32,System.Byte[],System.Int64)">
            <summary>
            Queue a request to tell the server the local disk location of an item in the workspace.
            </summary>
            <param name="sourceServerItem">The committed server path of the item in the workspace,
            or the target server item if the item is uncommitted (pending add or branch)</param>
            <param name="itemId">Item ID of the item in the workspace (optional; used for backwards
            compatibility with TFS 2010 and earlier servers)</param>
            <param name="targetLocalItem">New local path of the item, or null to remove it from
            the workspace</param>
            <param name="localVersion">The version of the item in the workspace. If zero, the request
            refers to the uncommitted slot for the item ID. If non-zero, the request refers to the
            committed slot for the item ID.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueue.QueueUpdate(Microsoft.TeamFoundation.VersionControl.Client.ILocalVersionUpdate)">
            <summary>
            Add the update to the queue, flushing if thresholds have been exceeded.
            </summary>
            <param name="update">the update</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueue.Dispose">
            <summary>
             Send any pending requests to the server
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueue.Flush">
            <summary>
            Send any pending requests to the server
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueue.FlushNoAcks">
            <summary>
             Send any pending requests to the server
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueue.FlushAcks">
            <summary>
            When the UpdateLocalVersionQueue is being disposed, if the queue is flushing to both local and server,
            take the last batch of ILocalVersionUpdate objects that need to have the PendingReconcile bit cleared,
            and do that work.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.UpdateLocalVersionQueueOptions">
            <summary>
            Options to control where and how the local versions are updated.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.EndDownload(System.IAsyncResult)">
            <summary>
            Ends a RetryDownloadAsyncResult.
            The length of the downloaded file, in bytes, is returned.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.BeginDownloadNoRetry(Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadParameters,System.AsyncCallback,System.Object)">
            <summary>
            Starts a download operation. This operation is not retryable.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.EndDownloadNoRetry(System.IAsyncResult)">
            <summary>
            Ends a DownloadAsyncResult.
            The length of the downloaded file, in bytes, is returned.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.Dispose(System.Boolean)">
            <summary>
            Invoked by Fail() in the base class to clean up any resources
            that are outstanding. We already have an exception stored.
            Try not to throw.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.VersionControlServer">
            <summary>
            The VersionControlServer from which the file is being downloaded.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.DownloadUrl">
            <summary>
            The download URL for this download request.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.DestinationLocalPath">
            <summary>
            The final destination local path of the content. The item will be moved here after
            the download is completed to the temporary folder.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.BaselineFolderCollection">
            <summary>
            The BaselineFolderCollection object used to generate the wire destination local path.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.BaselineFolderCollectionLockToken">
            <summary>
            The token returned by the BaselineFolderCollection when we take a read lock on it.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.BaselineFileGuid">
            <summary>
            The baseline file GUID to use to form the wire destination local path.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.WireDestinationLocalPath">
            <summary>
            If provided, the compressed content from the wire will be written to this location
            additionally (this is for local workspace baselines).
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.TemporaryFolder">
            <summary>
            The temporary folder where the content should be downloaded to on disk initially.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.ExpectedHashValue">
            <summary>
            The expected hash value of the downloaded content.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.MemoryBuffer">
            <summary>
            The byte array used while downloading content from version control.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.DownloadingToStream">
            <summary>
            True if this download request is not writing a file to disk, but is instead
            returning the response stream (possibly wrapped) to the caller as soon as it is available.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.DestinationPathForEvents">
            <summary>
            Returns a string that best describes where this download request is downloading to.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.HashProvider">
            <summary>
            The hash provider used for calculating the MD5 hash of the downloaded content.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.BytesInBuffer">
            <summary>
            The number of bytes in the MemoryBuffer which are valid. This value is
            less than or equal to MemoryBuffer.Length.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.Response">
            <summary>
            The HttpWebResponse from the HttpWebRequest.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.ResponseStream">
            <summary>
            The response stream from the HttpWebRequest.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.ResponseStreamIsCompressed">
            <summary>
            Indicates whether the content-type of the response to the HttpWebRequest is application/gzip.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.WireLength">
            <summary>
            The length of the content being downloaded as it is on the wire. (It may or may not be compressed.)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.BytesRead">
            <summary>
            The total number of bytes read off the wire.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.UncompressedLength">
            <summary>
            The uncompressed length of the content being downloaded. This header is only supplied
            by Dev11 and later servers.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.BytesWrittenToDestinationStream">
            <summary>
            This is the number of bytes written to the destination stream.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.TemporaryFileName">
            <summary>
            The temporary file name on disk where the content is being written to disk as it is downloaded.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.DestinationStream">
            <summary>
            The stream on disk (in the temporary folder) where the content is being written.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.WireDestinationStream">
            <summary>
            The stream on disk (in the temporary folder) where the wire content is being written,
            if a wire destination local path was provided.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.DecompressionStream">
            <summary>
            If the response stream is compressed, then this GZipStream is used to decompress the content.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.GZipSourceStream">
            <summary>
            If the response stream is compressed, this GZipSourceStream is used to feed compressed data
            to the decompression stream.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.DecompressionBuffer">
            <summary>
            If the response stream is compressed, this buffer is used to hold decompressed data from the
            decompression stream.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.LastOnDownloadingElapsedMilliseconds">
            <summary>
            The value of the ElapsedMilliseconds timer when the last OnDownloading event was raised on the
            VersionControlServer object for this download.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.UsingVersionControlProxy">
            <summary>
            This value is true if the HttpWebRequest is accessing a version control proxy. It is false if
            we are requesting content directly from an application tier.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.DownloadAsyncResult.ProxyCredentialsType">
            <summary>
            The type of credentials (Tfs or Default) to use when creating a download request to talk to a
            version control proxy server.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.s_downloadCounter">
            <summary>
            The total number of download requests processed since the application was started.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.s_activeDownloads">
            <summary>
            The number of downloads currently in-flight.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.s_proxyCredentials">
            <summary>
            The type of credentials (Tfs or Default) to use when creating a download request for a
            version control proxy server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.CreateDownloadStream(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String)">
            <summary>
            Returns a reliable download stream for the given download URL. If a transient network exception
            is encountered, the stream will issue a limited number of retries transparently in an attempt to
            hide the problem from the caller.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.BeginGetDownloadStream(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts a download-to-stream operation. This operation is not retryable.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.EndGetDownloadStream(System.IAsyncResult)">
            <summary>
            Ends a download-to-stream operation.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.RetryAsyncResult`2.RetryAsyncResultState.NotStarted">
            <summary>
            The RetryAsyncResult has not yet started.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.RetryAsyncResult`2.RetryAsyncResultState.WaitingForChild">
            <summary>
            The RetryAsyncResult is waiting for a child IAsyncResult to complete.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.RetryAsyncResult`2.RetryAsyncResultState.WaitingForTimer">
            <summary>
            The RetrydAsyncResult's child IAsyncResult failed previously due to a transient
            network exception, and we are now 'sleeping' by waiting for a timer to fire. The timer
            waits get progressively longer if the child IAsyncResults keep failing due to transient
            network exceptions.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.RetryAsyncResult`2.RetryAsyncResultState.WaitingForThreadpool">
            <summary>
            The timer has fired after the WaitingForTimer stage, but we cannot do substantive work
            on the timer thread (it is shared across the appdomain). We have queued our post-timer
            work on the threadpool and are waiting for that delegate to be called on a threadpool
            thread.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.RetryAsyncResult`2.RetryAsyncResultState.Completed">
            <summary>
            The RetryAsyncResult's child IAsyncResult completed successfully, so we
            have completed successfully.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.RetryAsyncResult`2.RetryAsyncResultState.Failed">
            <summary>
            This RetryAsyncResult has failed. The Exception property is populated with
            an exception that describes the reason for the failure.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.BeginUploadNoRetry(Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadParameters,System.AsyncCallback,System.Object)">
            <summary>
            Starts an upload operation. This operation is not retryable.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.EndUploadNoRetry(System.IAsyncResult)">
            <summary>
            Ends an upload operation.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.GetInitialRange(Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult)">
            <summary>
            Helper function to get the range of the first upload chunk (the range with offset 0).
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.Workspace">
            <summary>
            The target Workspace for the upload operation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.VersionControlServer">
            <summary>
            The target VersionControlServer for the upload operation.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.PendingChange">
            <summary>
            The pending change whose content is being uploaded.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.BaselineFolderCollection">
            <summary>
            If present, the baseline folder collection where the compressed baseline should be stored as a part of the upload operation.
            (We do this as a part of upload because we don't want to end up compressing the content twice.)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.RequestId">
            <summary>
            Our own RequestId -- from the static upload counter for this appdomain.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.ContentStream">
            <summary>
            The FileStream for the content stream.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.BaselineFileGuid">
            <summary>
            The baseline file GUID of the uploaded content.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.BaselineFolderCollectionLockToken">
            <summary>
            The token returned by the BaselineFolderCollection when we take a read lock on it.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.UncompressedLength">
            <summary>
            The uncompressed length of the content to be uploaded.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.HashValue">
            <summary>
            The MD5 hash value of the content to be uploaded.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.IsCompressed">
            <summary>
            True if the ContentStream is compressed with gzip; false otherwise.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.CurrentChunk">
            <summary>
            The IAsyncResult of the currently issued sub-operation to upload a chunk.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.CurrentRange">
            <summary>
            The range of the currently issued sub-operation to upload a chunk.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.BufferWriteStream">
            <summary>
            Whether to set AllowWriteStreamBuffering on child upload chunks.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.RetriedWithBufferingEnabled">
            <summary>
            Whether or not we re-issued the upload with write buffering enabled.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.MemoryBuffer">
            <summary>
            The byte array used while uploading the chunk.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.Status">
            <summary>
            The current status of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.Exception">
            <summary>
            If the status of the upload is Failed, the Exception property will be populated with the exception
            that caused the failure.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.SetStatus(Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadStatus)">
            <summary>
            Transitions the state of this UploadDownloadAsyncResult to the
            new state specified. The new state must be later in the enumeration
            than the current state.
            </summary>
            <param name="newStatus">New state for the UploadDownloadAsyncResult</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.Fail(System.Exception,System.Boolean)">
            <summary>
            Transitions the state of this UploadDownloadAsyncResult to the
            Failed state. The exception provided is persisted as the reason
            for the failure.
            </summary>
            <param name="ex">Exception which caused the failure</param>
            <param name="callCompletionCallback">Whether or not to invoke the completion callback</param>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.ChunkSize">
            <summary>
            The size of an upload chunk.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadAsyncResult.CompressionLimit">
            <summary>
            The maximum size of a file on which we will try gzip compression.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadStatus">
            <summary>
            State values for upload requests. An UploadAsyncResult is always in
            one of these states.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadStatus.NotStarted">
            <summary>
            The UploadAsyncResult has not yet started.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadStatus.PreparingContentStream">
            <summary>
            The UploadAsyncResult is preparing the content stream.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadStatus.WaitingForChild">
            <summary>
            The UploadAsyncResult is waiting for a child operation (an UploadChunkAsyncResult) to
            complete.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadStatus.Completed">
            <summary>
            The UploadAsyncResult completed successfully.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadStatus.Failed">
            <summary>
            This UploadAsyncResult has failed. The Exception property is populated with
            an exception that describes the reason for the failure.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.NullHashAlgorithm">
            <summary>
            A HashAlgorithm which does nothing.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.s_uploadCounter">
            <summary>
            The number of master upload requests processed since the application was started.
            Each master upload request can issue child upload chunk requests.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.s_activeUploads">
            <summary>
            The number of uploads currently in flight.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.BeginUploadChunk(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.String,System.Int64,System.Byte[],Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadChunkRange,System.Boolean,System.IO.Stream,System.Byte[],System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts an upload chunk operation. This operation is not retryable.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.EndUploadChunk(System.IAsyncResult)">
            <summary>
            Ends an UploadChunkAsyncResult.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadChunkAsyncResult.VersionControlServer">
            <summary>
            The target version control server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadChunkAsyncResult.ContentStream">
            <summary>
            The source data for the content of the upload chunk.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadChunkAsyncResult.RequestStream">
            <summary>
            The request stream we are writing the upload chunk to.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadChunkAsyncResult.UnionStream">
            <summary>
            The union of the header, content stream, and footer: the data
            to be written to the request stream.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadChunkAsyncResult.Response">
            <summary>
            The HttpWebResponse from the HttpWebRequest.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadChunkAsyncResult.MemoryBuffer">
            <summary>
            The byte array used while uploading the chunk.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.UploadChunkRange">
            <summary>
            Describes the "range" parameter for an upload chunk.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.s_uploadChunkCounter">
            <summary>
            The number of upload chunk requests processed since the application was started.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.s_activeUploadChunks">
            <summary>
            The number of upload web requests currently in flight.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestAsyncResult.SetStatus(Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestStatus)">
            <summary>
            Transitions the state of this UploadDownloadAsyncResult to the
            new state specified. The new state must be later in the enumeration
            than the current state.
            </summary>
            <param name="newStatus">New state for the UploadDownloadAsyncResult</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestAsyncResult.TimedOutCallback(System.Object)">
            <summary>
            Invoked when the timeout for the request has expired.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestAsyncResult.Fail(System.Exception,System.Boolean)">
            <summary>
            Transitions the state of this UploadDownloadAsyncResult to the
            Failed state. The exception provided is persisted as the reason
            for the failure.
            </summary>
            <param name="ex">Exception which caused the failure</param>
            <param name="callCompletionCallback">Whether or not to invoke the completion callback</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestAsyncResult.Status">
            <summary>
            The current state of this UploadDownloadAsyncResult.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestAsyncResult.RequestId">
            <summary>
            Our own RequestId -- from the static counter for this appdomain. (Either upload chunk, or download.)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestAsyncResult.TfsConnectionRequestId">
            <summary>
            The RequestId returned by OnWebServiceCallBegin on the TfsConnection object.
            We need to track this so we can fire the corresponding OnWebServiceCallEnd
            event when the web service call finishes.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestAsyncResult.HttpWebRequest">
            <summary>
            The web request associated with this UploadDownloadAsyncResult.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestAsyncResult.ElapsedMilliseconds">
            <summary>
            The total time that the request has been running.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestAsyncResult.ElapsedMillisecondsInStatus">
            <summary>
            The time that the stopwatch has been 
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestStatus">
            <summary>
            State values for upload chunk/download requests. An WebRequestAsyncResult is always in
            one of these states.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestStatus.NotStarted">
            <summary>
            The WebRequestAsyncResult has not yet started.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestStatus.WaitingToWriteRequest">
            <summary>
            The WebRequestAsyncResult is waiting for the connection to be established so that it
            can write the request body.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestStatus.WritingRequest">
            <summary>
            The WebRequestAsyncResult is currently writing the request to the wire.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestStatus.WaitingForResponse">
            <summary>
            The WebRequestAsyncResult has finished writing the request to the wire and is waiting
            to receive the response.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestStatus.ReadingResponse">
            <summary>
            The WebRequestAsyncResult is reading the response from the wire.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestStatus.MovingToFinalTarget">
            <summary>
            In the case of a DownloadRequest only, the downloaded data is being placed on the local
            disk at the requested location.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestStatus.Completed">
            <summary>
            This WebRequestAsyncResult was completed successfully.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.WebRequestStatus.Failed">
            <summary>
            This WebRequestAsyncResult failed. The cause of the failure can be retrieved from the
            Exception property of the WebRequestAsyncResult.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.s_processId">
            <summary>
            A string which uniquely identifies this instance of the client object model on this computer.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.s_lowPriorityHintInfo">
            <summary>
            The hint information for file handles to indicate our I/Os are low priority. (Vista+)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.UploadDownload.s_eofInfoSize">
            <summary>
            The size of an end-of-file information structure
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.VersionControlClientProxy">
            <summary>
            Base class for all proxy objects in the VersionControl.Client namespace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlClientProxy.ComponentName">
            <summary>
            For the IRegistration service
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlClientProxy.VersionControlServer">
            <summary>
            VersionControlServer object associated with this web service.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.VersionControlClientProxy.Uri">
            <summary>
            Shortcut property for the Uri of the team project collection.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlClientProxy.PrepareForLargeRequest">
            <summary>
            TODO: DEV11: Remove this when the web service execution engine is rewritten
            Whether or not a webmethod has "large requests" should be delegated to individual
            webmethod declarations in the server assembly.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlClientProxy.ThrowIfCanceled">
            <summary>
            Delegate ThrowIfCanceled() to the VersionControlServer object.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlClientProxy.OnAfterReceiveReply(System.Int64,System.String,System.Net.HttpWebResponse)">
            <summary>
            The method invoked after a reply is received from the remote server.
            </summary>
            <param name="requestId">The previously generated request identifier</param>
            <param name="methodName">The name of the web method</param>
            <param name="response">The HTTP response</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlClientProxy.TraceHeaders(System.Net.HttpWebResponse)">
            <summary>
            Provide a convenience method for version control so that tracing may be done via
            static reference to this VersionControlClientProxy.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.VersionControlClientProxy.GetService(System.Type)">
            <summary>
            For GenProxy infrastructure.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayer.Repository">
            <summary>
            For use outside this class in very specific scenarios only.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayer.QueryServerPendingChanges(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Given a workspace, returns all pending changes for that workspace by calling
            QueryPendingSets on the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayer.QueryServerPendingChanges(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean)">
            <summary>
            Given a workspace, returns all pending changes for that workspace by calling
            QueryPendingSets on the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayer.QueryServerPendingChanges(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.Guid@)">
            <summary>
            Given a local workspace, returns all pending changes for that workspace by calling
            QueryPendingSets on the server. Also returns the current pending change signature from the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayer.QueryServerWorkspace(System.String,System.String)">
            <summary>
            Given a workspace name and owner, returns the server's copy of the Workspace object.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayer.UpdateWorkspaceNoReconcile(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.Int32)">
            <summary>
            Calls UpdateWorkspace without reconciling first
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLevel">
            <summary>
            Represents the version of the web services on the server.
            For the value PreTfs2010, check for specific features using the
            VersionControlServer.SupportedFeatures property.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLevel.PreTfs2010">
            <summary>
            TFS 2005 through TFS 2008 SP1
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLevel.Tfs2010">
            <summary>
            TFS 2010
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLevel.Tfs2012">
            <summary>
            TFS 2012
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLevel.Tfs2012_1">
            <summary>
            TFS 2012.1
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLevel.Tfs2012_2">
            <summary>
            TFS 2012.2
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLevel.Tfs2012_3">
            <summary>
            TFS 2012.3
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLevel.Tfs2012_QU1">
            <summary>
            TFS 2012.QU1
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLevel.Tfs2012_QU1_1">
            <summary>
            TFS 2012.QU1_1
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLevel.Tfs2013">
            <summary>
            TFS 2013
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.TryGetLocalWorkspace(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.Workspace@)">
            <summary>
            If the workspace name and owner name provided are a local workspace on this
            computer, the Workspace object will be placed in the out parameter and true
            will be returned. Otherwise localWorkspace will be set to null and false returned.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.ReconcileIfLocalItem(System.String,System.String,System.String,System.Boolean)">
            <summary>
            If the item provided is a local path, and the workspace name and owner provided are for a 
            local workspace, that local workspace will be reconciled.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.ReconcileIfLocalItem(System.String,System.String,System.String)">
            <summary>
            If the item provided is a local path, and the workspace name and owner provided are for a 
            local workspace, that local workspace will be reconciled.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.ReconcileIfLocalItemSpec(System.String,System.String,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec,System.Boolean)">
            <summary>
            If the itemspec provided is a local path, and the workspace name and owner provided are for
            a local workspace, that local workspace will be reconciled.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.ReconcileIfAnyLocalItems(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            If at least one of the items provided is a local path, and the workspace name and owner
            provided are for a local workspace, that local workspace will be reconciled.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.ReconcileIfAnyLocalItems(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            If at least one of the items provided is a local path, and the workspace name and owner
            provided are for a local workspace, that local workspace will be reconciled.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.ReconcileIfAnyLocalItemSpecs(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.ItemSpec},System.Boolean)">
            <summary>
            If at least one of the itemspecs provided is a local path, and the workspace name and owner
            provided are for a local workspace, that local workspace will be reconciled.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.ReconcileIfLocalVersionSpec(Microsoft.TeamFoundation.VersionControl.Client.VersionSpec)">
            <summary>
            If the VersionSpec provided is a WorkspaceVersionSpec and the workspace for that WorkspaceVersionSpec
            is a local workspace on this computer, that local workspace will be reconciled.
            </summary>
            <param name="versionSpec"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.ReconcileIfLocalVersionSpec(Microsoft.TeamFoundation.VersionControl.Client.VersionSpec,System.Boolean)">
            <summary>
            If the VersionSpec provided is a WorkspaceVersionSpec and the workspace for that WorkspaceVersionSpec
            is a local workspace on this computer, that local workspace will be reconciled.
            </summary>
            <param name="versionSpec"></param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.ReconcileIfLocal(System.String,System.String)">
            <summary>
            If the workspace name and owner provided correspond to a local workspace on this computer,
            that local workspace will be reconciled.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.ReconcileIfLocal(System.String,System.String,System.Boolean@)">
            <summary>
            If the workspace name and owner provided correspond to a local workspace on this computer,
            that local workspace will be reconciled.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.ReconcileIfLocal(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            If the workspace name and owner provided correspond to a local workspace on this computer,
            that local workspace will be reconciled.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.SyncPendingChangesIfLocal(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            If the workspace name and owner provided correspond to a local workspace on this computer,
            that local workspace will dump its pending changes and reload them from the server by
            making a call to QueryPendingSets.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.SyncPendingChangesIfLocal(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.GetOperation[])">
            <summary>
            If the workspace name and owner provided correspond to a local workspace on this computer,
            that local workspace will dump its pending changes and reload them from the server by
            making a call to QueryPendingSets.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.LockIfLocal(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Returns a workspace lock suitable for use in a using block
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.QueryServerPendingChanges(Microsoft.TeamFoundation.VersionControl.Client.Workspace,System.Guid@)">
            <summary>
            Given a local workspace, returns all pending changes for that workspace by calling
            QueryPendingSets on the server. Also returns the current pending change signature from the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.QueryServerPendingChanges(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.Boolean)">
            <summary>
            Given a workspace, returns all pending changes for that workspace by calling
            QueryPendingSets on the server.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.SyncWorkingFoldersIfNecessary(Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Common.ChangePendedFlags)">
            <summary>
            After a server call which may have updated the working folders of the given local
            workspace, call SyncWorkingFoldersIfNecessary and pass the ChangePendedFlags value
            returned by the server. If the value indicates the working folders have been updated,
            then the working folders in the workspace properties table will be synced with those
            on the server.
            </summary>
            <param name="localWorkspace">The local workspace whose mappings may have changed</param>
            <param name="flags">The ChangePendedFlags returned by the server call</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.RemoveNonLocalExtendedItems(Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem[][])">
            <summary>
            Returnes ExtendedItem object which have local version or have pending deletes.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WebServiceLayerLocalWorkspaces.IsNonLocal(Microsoft.TeamFoundation.VersionControl.Client.ExtendedItem)">
            <summary>
            Returns true if item should be ignored when LocalOnly flag is specified - item does not have pending change and does not reside in the workspace.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolderComparer">
            A comparer used to compare working folders.  See the Compare enum to see the possible orders.
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolderComparer.Compare">
            <summary>
            The options for comparing working folders.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolderComparer.#ctor(Microsoft.TeamFoundation.VersionControl.Client.WorkingFolderComparer.Compare)">
            <summary>
            Constructs the working folder comparing object with the specified setting.
            </summary>
            <param name="compare">what to compare</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkingFolderComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two working folders according to the m_compare setting for display purposes 
            (culture sensitive and case insensitive).
            </summary>
            <param name="x">WorkingFolder object</param>
            <param name="y">WorkingFolder object</param>
            <returns>result of String.Compare() (integer indicating lexical relationship)</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkItemHelper">
            <summary>
            Encapsulates helper routines for work items.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemHelper.GetWorkItemInfoForCheckin(Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo[])">
            <summary>
            Gets the work items for checkin to send to the server.
            </summary>
            <param name="workItems">full work item info</param>
            <returns>checkin work item info</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemHelper.GetWorkItemInfoForCheckin(Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo[])">
            <summary>
            Gets the work items for checkin to send to the server. This converter uses WorkItemCheckedInfo
            which does not require a full WorkItem object which provide better performance by reducing
            server calls to the work item store.
            </summary>
            <param name="workItems">brief work item info</param>
            <returns>checkin work item info</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemHelper.ConvertToCheckinNotification(System.Int32,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinAction)">
            <summary>
            Convert a work item Id and checkin action into a CheckinNotificationWorkItemInfo
            </summary>
            <param name="id">work item Id</param>
            <param name="checkinAction">checkin action</param>
            <returns>instance of CheckinNotificationWorkItemInfo or null</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemHelper.UpdateWorkItems(Microsoft.TeamFoundation.VersionControl.Client.Client,Microsoft.TeamFoundation.VersionControl.Client.Workspace,Microsoft.TeamFoundation.VersionControl.Client.Changeset,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo[],System.String)">
            <summary>
            Update the specified work items, inluding linking the changeset to the work items.
            </summary>
            <param name="workspace">the workspace of the checkin</param>
            <param name="changeset">the changeset (not fully baked)</param>
            <param name="workItems">list of work items</param>
            <param name="author">checkin author -- used to set Changed By field</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemHelper.BuildWorkItemBatchedErrorMessage(System.Collections.Generic.List{Microsoft.TeamFoundation.VersionControl.Client.WorkItemHelper.WorkItemErrorInfo})">
            <summary>
            Build the error message for a set of batched work item update errors.
            </summary>
            <param name="errors">error list</param>
            <returns>localized and formatted error message</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkItemHelper.WorkItemErrorInfo">
            <summary>
            Encapsulate a work item transition and change set linking error.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo">
             <summary>
             Encapsulate supplementary info about a work item. An example of a supplement
             information is the work item checked/unchecked state.
            
             The checked state of a work item is sticky. Once its state is changed, the
             new state will be persisted between invocations.
             </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo.#ctor(System.Int32,System.Boolean,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinAction)">
            <summary>
            Create a new work item supplement info.
            </summary>
            <param name="id">work item ID</param>
            <param name="checkedOnOff">checked state: on/off</param>
            <param name="action">action to perform on the work item (associate, resolve)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo.LoadFromXml(System.Xml.XmlDocument)">
            <summary>
            Parse the XML doc for the persistent work items checked info.
            </summary>
            <param name="doc">XML doc</param>
            <returns>list of persistent work items checked info, null for none</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Parse the XML doc for the persistent work items checked info.
            </summary>
            <param name="listRoot">XML node containing the work items checked info</param>
            <returns>list of persistent work items checked info, null for empty list</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo.SaveAsXml(System.Xml.XmlNode,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo[])">
            <summary>
            Save a list of work items checked info as XML.
            </summary>
            <param name="parentNode">XML parent node</param>
            <param name="list">checked info list</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>a clone</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo.Equals(Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo)">
            <summary>
            Check to see if the specified checked info is the
            same as this one.
            </summary>
            <param name="src">the other checked info</param>
            <returns>true for same, false otherwise</returns>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo.Id">
            <summary>
            Get/Set the ID of the work item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo.Checked">
            <summary>
            Get/Set the checked state of the work item.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo.CheckinAction">
            <summary>
            Get/Set the action to take (resolve, associate).
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo">
            <summary>
            Encapsulate a work item to be associated with a checkin.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo.#ctor(Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItem,Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinAction)">
            <summary>
            Create a work item checkin info.
            </summary>
            <param name="workItem">work item</param>
            <param name="checkinAction">checkin action</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo.FromWorkItemCheckedInfo(Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo[],Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemStore)">
            <summary>
            Convert WorkItemCheckedInfo objects (persisted data) into WorkItemCheckinInfo objects.
            </summary>
            <param name="checkedInfo">WorkItemCheckedInfo objects to convert</param>
            <param name="workItemStore">the work item store from which to get WorkItem objects</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo.FromWorkItemCheckedInfo(Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckedInfo[],Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemStore,System.Boolean)">
            <summary>
            Convert WorkItemCheckedInfo objects (persisted data) into WorkItemCheckinInfo objects.
            </summary>
            <param name="checkedInfo">WorkItemCheckedInfo objects to convert</param>
            <param name="workItemStore">the work item store from which to get WorkItem objects</param>
            <param name="filterDestroyed">Ignores work items that have been destroyed in when set to
            true.  When set to false, DeniedOrNotExistException will be thrown when a destroyed work
            item is encountered.</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo.WorkItem">
            <summary>
            Get/Set the work item.
            </summary>
            <value>work item object</value>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinInfo.CheckinAction">
            <summary>
            Get the checkin action.
            </summary>
            <value>checkin action</value>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkItemCheckinAction">
            <summary>
            Checkin action for work items.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceComparer">
            <summary>
            A comparer used to compare workspaces first by repository, then by name.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two workspaces first by repository URL and second by name for display 
            purposes (culture sensitive and case insensitive).
            </summary>
            <param name="x">Workspace object</param>
            <param name="y">Workspace object</param>
            <returns>result of String.Compare() (integer indicating lexical relationship)</returns>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo">
            <summary>
            A copy of the cacheable properties of a Workspace.
            </summary>    
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.#ctor(Microsoft.TeamFoundation.VersionControl.Client.Workspace)">
            <summary>
            Creates a WorkspaceInfo from a Workspace by capturing its cacheable properties.
            </summary>
            <param name="workspace">Workspace to create from</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.#ctor(System.Guid,System.Uri,System.Xml.XmlNode)">
            <summary>
            Deserializes a WorkspaceInfo instance from an XmlNode.
            The instance ID and URI of the server on which the WorkspaceInfo exists must be provided.
            </summary>
            <param name="serverGuid">Instance ID of the Team Project Collection</param>
            <param name="serverUri">URI of the Team Project Collection</param>
            <param name="workspaceInfoNode">XmlNode to deserialize from</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.GetWorkspace(Microsoft.TeamFoundation.Client.TeamFoundationServer)">
            <summary>
            Gets the Workspace object which corresponds to this WorkspaceInfo.
            
            The TeamFoundationServer object must be provided.
            </summary>
            <param name="tfs">the Team Foundation Server hosting the workspace</param>
            <returns>the workspace</returns>        
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.GetWorkspace(Microsoft.TeamFoundation.Client.TfsTeamProjectCollection)">
            <summary>
            Gets the Workspace object which corresponds to this WorkspaceInfo.
            
            The TfsTeamProjectCollection object must be provided.
            </summary>
            <param name="teamProjectCollection">The TfsTeamProjectCollection on which the workspace resides</param>
            <returns>The Workspace object</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.SaveAsXml(System.Xml.XmlNode)">
            <summary>
            Saves this instance to the XML format used in the cache file.
            </summary>
            <param name="parent">the XML node for the workspace's repository</param>        
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.FormatWorkspaceNameForException(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo)">
            <summary>
            Formats the conflicting workspace name for exception when there is a conflict.  The owner
            of the workspace is included when the owner is different.
            </summary>
            <param name="conflictingWorkspace">the workspace that conflicts</param>
            <returns>the formatted workspace name</returns>        
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.ToString">
            <summary>
            Return a string instance reflecting this WorkspaceInfo's contents
            </summary>
            <returns>string instance reflecting this WorkspaceInfo's contents</returns>        
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.OwnerNameMatches(System.String)">
            <summary>
            Returns true if the provided string matches any of the valid owner names for this workspace.
            </summary>
            <param name="ownerName">The candidate owner name to check</param>
            <returns>True if the owner name matches; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.AreMappedPathSetsEqual(System.String[],System.String[])">
            <summary>
            Returns true if two sets of mapped local paths are identical.
            </summary>
            <param name="set1">The first set of mapped paths</param>
            <param name="set2">The second set of mapped paths</param>
            <returns>True if the two sets are identical, false otherwise</returns>        
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.ServerUri">
            <summary>
            The URI of the Team Project Collection on which this workspace exists.
            </summary>        
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.ServerGuid">
            <summary>
            The instance ID of the Team Project Collection on which this workspace exists.
            </summary>        
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.Name">
            <summary>
            The name of the workspace.
            </summary>        
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.OwnerName">
            <summary>
            The name of the owner of the workspace.
            </summary>        
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.OwnerDisplayName">
            <summary>
            The display name of the workspace owner.
            </summary>        
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.OwnerAliases">
            <summary>
            The aliases of the workspace owner.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.DisplayName">
            <summary>
            The formatted display name of the workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.QualifiedName">
            <summary>
            This is the formatted unique display name of the workspace.
            </summary>        
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.Computer">
            <summary>
            The computer on which the workspace is located.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.Comment">
            <summary>
            A user-provided description of the workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.Location">
            <summary>
            Indicates the location where data (pending changes, local versions) for this workspace are stored.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.MappedPaths">
            <summary>
            The mapped local paths of the workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.SecurityToken">
            <summary>
            The security token for the workspace's access control list in the workspace security namespace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.Options">
            <summary>
            Options set on a workspace, such as whether the last-modified time of downloaded items is set
            to the current time (default), or to the time the item was checked into source control.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.LastSavedCheckin">
            <summary>
            The LastSavedCheckin object for this workspace, which contains the pending checkin
            comment, included/excluded item sets, pending checkin notes, policy override comment,
            etc. This is the only mutable property of WorkspaceInfo.
            </summary>        
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo.UpdateLastSavedCheckinFrom(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo)">
            <summary>
            Updates the only mutable part of a WorkspaceInfo -- its LastSavedCheckin data.
            </summary>
            <param name="updateSource">WorkspaceInfo to copy LastSavedCheckin data from</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IWorkspaceDiffItem.LocalItem">
            <summary>
            The path of the item in the workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IWorkspaceDiffItem.VersionLocal">
            <summary>
            The version of the item in the workspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IWorkspaceDiffItem.ItemType">
            <summary>
            The item's type (file or folder).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IWorkspaceDiffItem.ChangeType">
            <summary>
            The effective changetype on the item (including recursive changetypes from parent renames and deletes).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IWorkspaceDiffItem.ContentLength">
            <summary>
            The length of the file's contents (files only)
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.IWorkspaceDiffItem.HashValue">
            <summary>
            The MD5 hash of the file's contents (files only)
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifference">
            <summary>
            A data structure which describes an individual difference detected by Workspace.Diff.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifference.DifferenceType">
            <summary>
            Describes whether the difference is a new item, a modified item, or a missing item.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifference.LocalItem">
            <summary>
            The full local path to the item.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifference.VersionLocal">
            <summary>
            The version of the item in the workspace.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifference.ItemType">
            <summary>
            The type of the item (file or folder)
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifference.RecursiveChangeType">
            <summary>
            The existing changetype on the local item, including parent recursive changes.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifference.ModifiedReason">
            <summary>
            If the DifferenceType is WorkspaceDifferenceType.Modified, this field contains more
            specific information about why this WorkspaceDifference was enumerated by Workspace.Diff.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceType">
            <summary>
            An enumeration which describes the three kinds of differences which can be detected
            by Workspace.Diff.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceType.New">
            <summary>
            An item was found in mapped local space (or beneath it, if WorkspaceDifferenceFlags.EnumerateUnmapped was supplied),
            and the item is not in the workspace's local version table.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceType.Modified">
            <summary>
            An item in the local version table was found on the local disk without a pending edit, but it appears to have
            been modified. The ModifiedReason is available for more specific information about why this WorkspaceDifference was
            enumerated.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceType.Missing">
            <summary>
            An item in the local version table was not found on the local disk.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceModifiedReason">
            <summary>
            An enumeration which describes the various reasons why a WorkspaceDifference
            was emitted by the Workspace.Diff method with WorkspaceDifferenceType.Modified.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceModifiedReason.NotApplicable">
            <summary>
            This WorkspaceDifference's DifferenceType is either New or Missing, but
            ModifiedReason information is only supplied for those WorkspaceDifferences
            whose DifferenceType is Modified.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceModifiedReason.HashValue">
            <summary>
            The hash value of the content on disk was computed, and it does not match
            the hash value of the server's version of the content.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceModifiedReason.ReadOnlyBit">
            <summary>
            The workspace is a server workspace (WorkspaceLocation.Server) and the item does
            not have a pending edit, but the read-only bit is unset on the local disk.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceModifiedReason.TypeChange">
            <summary>
            The item changed from a file to a directory, or vice versa.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceModifiedReason.FileLength">
            <summary>
            The length of the file on disk does not match the length of the server's
            version of the content.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceFlags">
            <summary>
            Flags which control the behavior of the Workspace.Diff method.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceFlags.None">
            <summary>
            Default behavior for the Workspace.Diff method.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceFlags.HashContent">
            <summary>
            The caller requests that the Workspace.Diff method compute hash values for those
            files which do not otherwise appear to have been modified (read-only bit is set
            in a server workspace, and the file length matches the record on the server).
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceFlags.EnumerateUnmapped">
            <summary>
            The caller requests that the Workspace.Diff method enumerate WorkspaceDifferences
            with WorkspaceDifferentType.New for those items which are not mapped, but which are
            subitems of a mapping in the workspace and therefore cannot be source-controlled
            items in another workspace.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceFlags.NoIgnore">
            <summary>
            The caller requests that the Workspace.Diff method ignore the global exclusion list
            for the Team Project Collection, and any .tfignore files encountered while walking
            the disk. If this option is not specified, then the global exclusion list for the
            TPC and .tfignore files encountered while walking will be applied to those items
            which would be enumerated as WorkspaceDifferenceType.New only.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceDifferenceFlags.EnumerateHiddenAndSystem">
            <summary>
            The caller requests that the Workspace.Diff method enumerate hidden and system items.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CheckInParameters">
            <summary>
            A CheckInParameters object encapsulates data needed to call a CheckIn method
            (Workspace.CheckIn or VersionControlServer.CheckInShelveset)
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckInParameters.Author">
            <summary>
            Optionally, set the Author property to the name of the user to whom the checkin should be
            attributed. Checking in a changeset on behalf of another user requires CheckinOther permission.
            If the ValidateAuthor property is true, and this property is set, the value must be a valid user in TFS.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckInParameters.ValidateAuthor">
            <summary>
            If this flag is set and a value has been provided for the Author property, the value for the Author
            property must be the DOMAIN\user form of a valid identity in TFS. If false, the value provided for the Author
            may be any string. The default value is true.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckInParameters.SuppressEvent">
            <summary>
            If true, server-side events generated by this checkin will be suppressed. CheckInOther permission on each item
            being checked in is required to suppress event generation. The default value is false.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckInParameters.OverrideGatedCheckIn">
            <summary>
            If one or more of the items being checked in affects a gated checkin build definition, ordinarily the
            checkin must go through the gated checkin system. To submit a checkin directly and bypass the gated checkin
            system, set this flag. To successfully override gated checkin, you must have the OverrideBuildCheckInValidation
            permission on all gated build definitions affected by the checkin.
            
            The default value is false. 
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckInParameters.QueueBuildForGatedCheckIn">
            <summary>
            If one or more of the items being checked in affects a gated build definition, the checkin will be
            rejected because it must go through the gated checkin system to be checked in. The server will create a shelveset
            of the changes submitted for checkin and throw a GatedCheckinException to the client containing the names of
            the affected build definitions, the name of the created shelveset, and a checkin ticket string (a cookie). The client
            must call IBuildServer.QueueBuild with an IBuildRequest containing the shelveset name, the checkin ticket string,
            and a reason of BuildReason.CheckInShelveset. The build can be queued against any of the affected definitions.
            
            However, some of this work can be automated by the server if the QueueBuildForGatedCheckIn flag is true, and the
            items being checked in affect exactly one gated build definition. In this case the call to checkin will still fail
            with a GatedCheckInException, but the changes will have been queued for validation against the affected definition
            automatically by the server. If the build succeeds, the changes will be subsequently checked in by the build service.
            
            The default value is false.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckInParameters.AllowUnchangedContent">
            <summary>
            The server will permit items to be committed whose content hasn't been modified instead of
            undoing the changes
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckInParameters.NoAutoResolve">
            <summary>
            Prevents the client from trying to auto resolve conflicts generated by the checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CheckInParameters.Options">
            <summary>
            Internal property for accessing the flags held by this CheckInParameters object as a CheckInOptions2.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CheckInParameters.Validate">
            <summary>
            Throws if the CheckInParameters object's state violates any client-side API rules.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceCheckInParameters">
            <summary>
            A WorkspaceCheckInParameters object encapsulates all the information needed to call Workspace.CheckIn.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceCheckInParameters.#ctor(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.PendingChange},System.String)">
            <summary>
            Create a new WorkspaceCheckInParameters instance to supply data to Workspace.CheckIn.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceCheckInParameters.#ctor(Microsoft.TeamFoundation.VersionControl.Client.ItemSpec[],System.String)">
            <summary>
            Create a new WorkspaceCheckInParameters instance to supply data to Workspace.CheckIn.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceCheckInParameters.PendingChanges">
            <summary>
            Either the PendingChanges property or the ItemSpecs property must be set to specify
            what items to check in. You may only set one of the two properties.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceCheckInParameters.ItemSpecs">
            <summary>
            Either the PendingChanges property or the ItemSpecs property must be set to specify
            what items to check in. You may only set one of the two properties.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceCheckInParameters.Comment">
            <summary>
            Optionally, provide a comment to be associated with this checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceCheckInParameters.CheckinNotes">
            <summary>
            Optionally, provide values for the checkin notes for this checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceCheckInParameters.AssociatedWorkItems">
            <summary>
            Optionally, provide work items to be associated with this checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceCheckInParameters.PolicyOverride">
            <summary>
            Optionally, provide a checkin policy override string to be associated with this checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceCheckInParameters.CheckinDate">
            <summary>
            Optionally, the checkin date to use for the checkin
            It must be between the date of the last committed checkin and the current server time.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceCheckInParameters.NoConflictsCheckForGatedCheckin">
            <summary>
            This flag only affects the server's behavior when the server paths being checked in affect
            a gated build definition. In this case the server will ordinarily call CheckPendingChanges
            before shelving the workspace and throwing back a GatedCheckinException. If the call
            to CheckPendingChanges results in the creation of conflicts, then no GatedCheckinException
            will be thrown; instead CheckIn fails and informs the user that they need to resolve their
            conflicts.
            
            If this flag is specified, this call to CheckPendingChanges is skipped. This allows the
            gated checkin shelveset to be created even when the items being checked in are not at
            latest, for example. The build agent workspace will unshelve the shelveset and attempt
            to resolve conflicts at that time.
            
            This is a liberalization of the default behavior, so the default value for this flag is false.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspaceCheckInParameters.Validate">
            <summary>
            Throws if the WorkspaceCheckInParameters object's state violates any client-side API rules.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.ShelvesetCheckInParameters">
            <summary>
            A ShelvesetCheckInParameters object encapsulates all the information needed to call VersionControlServer.CheckInShelveset.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ShelvesetCheckInParameters.#ctor(System.String,System.String)">
            <summary>
            Create a new ShelvesetCheckInParameters instance to supply data to VersionControlServer.CheckInShelveset.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ShelvesetCheckInParameters.Name">
            <summary>
            The name of the shelveset to check in.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ShelvesetCheckInParameters.OwnerName">
            <summary>
            The owner of the shelveset to check in.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.ShelvesetCheckInParameters.DeleteShelveset">
            <summary>
            If true, after successfully checking in the shelveset, it will be deleted from the server.
            If the shelveset is not your shelveset, CheckInOther permission on each item in the shelveset
            is required. The default value is false.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.ShelvesetCheckInParameters.Validate">
            <summary>
            Throws if the ShelvesetCheckInParameters object's state violates any client-side API rules.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.UpdateWorkspaceParameters">
            <summary>
            An UpdateWorkspaceParameters object encapsulates all the information needed to call Workspace.Update.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UpdateWorkspaceParameters.WorkspaceName">
            <summary>
            If set, the name of the workspace will be changed to this value.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UpdateWorkspaceParameters.OwnerName">
            <summary>
            If set, the owner of the workspace will be changed to this value. The owner of
            a workspace cannot be changed while the workspace has pending changes.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UpdateWorkspaceParameters.Comment">
            <summary>
            If set, the comment of the workspace will be changed to this value.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UpdateWorkspaceParameters.Computer">
            <summary>
            If set, the computer name of the workspace will be changed to this value.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UpdateWorkspaceParameters.Folders">
            <summary>
            If set, the working folders (mappings) of the workspace will be replaced
            with these working folders.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UpdateWorkspaceParameters.Location">
            <summary>
            If set, the workspace's location (local or server) will be changed to the
            value provided. This value may not be changed simultaneously with other
            any other properties of the workspace. It requires its own call to UpdateWorkspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UpdateWorkspaceParameters.RemoveUnparentedCloaks">
            <summary>
            If true, any cloaks in the working folders set (this.Folders) which are not parented by
            a mapping are removed silently.
            
            The default value is false.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UpdateWorkspaceParameters.WorkspaceOptions">
            <summary>
            If set, the options for the workspace are replaced with these options.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.UpdateWorkspaceParameters.PermissionProfile">
            <summary>
            If set, the workspace permissions for this workspace will be set to the values in the
            provided workspace permission profile. A workspace permission profile is a template fo
            the workspace's access control list.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.CreateWorkspaceParameters">
            <summary>
            A CreateWorkspaceParameters object encapsulates all the information needed to call VersionControlServer.CreateWorkspace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CreateWorkspaceParameters.#ctor(System.String)">
            <summary>
            Create a new CreateWorkspaceParameters instance to supply data to VersionControlServer.CreateWorkspace.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CreateWorkspaceParameters.WorkspaceName">
            <summary>
            The name of the workspace to be created.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CreateWorkspaceParameters.OwnerName">
            <summary>
            The owner name of the workspace to be created.
            The default value for this parameter is RepositoryConstants.AuthenticatedUser (or "."),
            which indicates that the server should create the workspace on behalf of the
            calling user. If you are unsure who this resolves to, the value of the AuthorizedUser
            property of the VersionControlServer object gives the full display name form of the
            calling user.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CreateWorkspaceParameters.OwnerDisplayName">
            <summary>
            The owner display name of the workspace to be created.
            The default value for this parameter is RepositoryConstants.AuthenticatedUser (or "."),
            which indicates that the server should create the workspace on behalf of the
            calling user. If you are unsure who this resolves to, the value of the AuthorizedUser
            property of the VersionControlServer object gives the full display name form of the
            calling user.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CreateWorkspaceParameters.Comment">
            <summary>
            A descriptive comment to be associated with the workspace to be created. The default
            value for this parameter is the empty string (String.Empty).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CreateWorkspaceParameters.Computer">
            <summary>
            The computer on which the workspace to be created will reside. The default value for
            this parameter is Workstation.Current.Name.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CreateWorkspaceParameters.Location">
            <summary>
            Set this value to WorkspaceLocation.Local to indicate the workspace to be created should
            be a local workspace. Set this value to WorkspaceLocation.Server to indicate the workspace
            to be created should be a server-side or "traditional" workspace, which is the only
            kind of workspace backwards compatible with TFS 2005-2010 clients.
            
            The default value if not provided is determined from the server.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CreateWorkspaceParameters.Folders">
            <summary>
            The initial working folders (mappings) for the workspace to be created.
            The default value for this parameter is an empty array.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CreateWorkspaceParameters.PermissionProfile">
            <summary>
            The workspace permission profile for the workspace to be created. A workspace permission profile
            is a template for the workspace's access control list. By default, the value for this parameter
            is WorkspacePermissionProfile.BuiltInProfiles[(int)WorkspacePermissionProfile.BuiltInIndexes.Private],
            which only grants permission to the owner of the workspace (a 'private' workspace).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CreateWorkspaceParameters.RemoveUnparentedCloaks">
            <summary>
            If true, any cloaks in the initial working folders (this.Folders) which are not parented by
            a mapping are removed silently.
            
            The default value is false.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.CreateWorkspaceParameters.WorkspaceOptions">
            <summary>
            Options for the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.CreateWorkspaceParameters.Validate">
            <summary>
            Throws if the CreateWorkspaceParameters object's state violates any client-side API rules.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.GetFilterCallback">
            <summary>
            This delegate type is used to provide the ability to filter the results of a get after the
            server request but before being processed locally.  See the Workspace Get() method.
            </summary>
            <param name="workspace">workspace to perform the get operation on</param>
            <param name="operations">the set of local operations fetched from the server</param>
            <param name="userData">user data associated with the operation</param>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.AutoResolveOptions">
            <summary>
            Enum specifying which conflicts will be resolved as automerge
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.AutoResolveOptions.None">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.AutoResolveOptions.OnlyLocalTarget">
            <summary>
            Only conflicts with ChangeSummary.TotalConflicting = 0 and TotalLatest = 0 will be resolved.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.AutoResolveOptions.OnlyServerSource">
            <summary>
            Only conflicts with ChangeSummary.TotalConflicting = 0 and TotalModified = 0 will be resolved. 
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.AutoResolveOptions.BothLocalTargetAndServerSource">
            <summary>
            All conflicts with ChangeSummary.TotalConflict = 0 will be resolved.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.AutoResolveOptions.IncomingRename">
            <summary>
            Conflict that include source/server rename, but not local/target rename will be resolved.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.AutoResolveOptions.Redundant">
            <summary>
            Behavior intended for Gated Checkin:
            - only version Get/Checkin
            - if Your and Their change is identical, content, encoding and path are identical resolves conflicts as TakeTheirs
            Content is compared for Edit and Branch changes.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.AutoResolveOptions.Silent">
            <summary>
            Conflicts that require name or encoding parameters are not reported to the user.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.AutoResolveOptions.AllContent">
            <summary>
            All conflicts will be resolved and conflict that require name or encoding will be reported to the user.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.AutoResolveOptions.All">
            <summary>
            All content and redundant conflicts will be resolved.
            </summary>
        </member>
        <member name="F:Microsoft.TeamFoundation.VersionControl.Client.AutoResolveOptions.AllSilent">
            <summary>
            All conflicts will be resolved, conflict that require name or encoding will be ignored.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspacePermissionProfile">
            <summary>
            A class that encapsulates a set of permissions for a Workspace
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.WorkspacePermissionProfile.#ctor(System.String,Microsoft.TeamFoundation.Framework.Client.AccessControlEntry[])">
            <summary>
            Creates a new Workspace permission profile with the given list of
            access control entries.
            </summary>
            <param name="profileName">The profile name</param>
            <param name="accessControlEntries">List of access control entries that represent
            the permissions for the workspace</param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspacePermissionProfile.Name">
            <summary>
            The name of the workspace permissions profile
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspacePermissionProfile.AccessControlEntries">
            <summary>
            Gets an array of the access control entries that make up the permission
            settings for this profile
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspacePermissionProfile.BuiltInIndex">
            <summary>
            The index into the BuiltInProfiles array at which this WorkspacePermissionProfile
            may be found. If this WorkspacePermissionProfile is not a built-in profile, this
            value will be -1.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.WorkspacePermissionProfile.BuiltInProfiles">
            <summary>
            Retrieves the array of built in profiles.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkspacePermissionProfile.BuiltInIndexes">
            <summary>
            Indexes into the WorkspacePermissionProfile.BuiltInProfiles array.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.Workstation">
            <summary>
            A class that represents a machine and the Source Control state on it.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.ReloadCache">
            <summary>
            Synchronously loads the latest data from the on-disk copy of the local workspace
            cache.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.GetAllLocalWorkspaceInfo">
            <summary>
            Gets all WorkspaceInfo objects from the local workspace cache.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.GetLocalWorkspaceInfo(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String,System.String)">
            <summary>
            Given a VersionControlServer object, workspace name, and workspace owner,
            looks in the local workspace cache to find a corresponding WorkspaceInfo object.
            
            Display names are accepted for the workspace owner string, but if the (name, owner)
            combination is ambiguous, a MultipleWorkspacesFoundException may be thrown.
            </summary>
            <param name="sourceControl">The VersionControlServer on which the workspace resides</param>
            <param name="workspaceName">The name of the workspace</param>
            <param name="workspaceOwner">The owner of the workspace</param>
            <returns>The WorkspaceInfo object if found; null otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.GetLocalWorkspaceInfo(System.Guid,System.String,System.String)">
            <summary>
            Given a Team Project Collection instance ID, workspace name, and workspace owner,
            looks in the local workspace cache to find a corresponding WorkspaceInfo object.
            
            Display names are accepted for the workspace owner string, but if the (name, owner)
            combination is ambiguous, a MultipleWorkspacesFoundException may be thrown.
            
            Passing RepositoryConstants.AuthenticatedUser for "workspaceOwner" is not valid,
            since no context exists to translate it into the authorized user.
            </summary>
            <param name="repositoryGuid">The instance ID of the Team Project Collection</param>
            <param name="workspaceName">The name of the workspace</param>
            <param name="workspaceOwner">The owner of the workspace</param>
            <returns>The WorkspaceInfo object if found; null otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.GetLocalWorkspaceInfo(System.String)">
            <summary>
            Given a local path on this machine, looks in the local workspace cache to find
            a corresponding WorkspaceInfo object.
            </summary>
            <param name="path">The local path to look up</param>
            <returns>The WorkspaceInfo object if found; null otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.GetLocalWorkspaceInfoRecursively(System.String)">
            <summary>
            Given a local path on this machine, looks in the local workspace cache to find
            all WorkspaceInfo objects with mapped local paths at or beneath the provided path.
            </summary>
            <param name="path">The local path to look up</param>
            <returns>The set of matching WorkspaceInfo objects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.QueryLocalWorkspaceInfo(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String,System.String)">
            <summary>
            Given a set of filters, returns all matching WorkspaceInfo objects from the local
            workspace cache. All filters are optional. If no VersionControlServer filter is
            supplied, then passing RepositoryConstants.AuthenticatedUser is not legal for the
            workspace owner filter.
            </summary>
            <param name="sourceControl">The VersionControlServer to filter results by; null for no filtering</param>
            <param name="workspaceName">The workspace name to filter results by; null for no filtering</param>
            <param name="workspaceOwner">The workspace owner to filter results by; null for no filtering</param>
            <returns>The set of matching WorkspaceInfo objects</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.IsMapped(System.String)">
            <summary>
            Checks if the specified path is mapped in any workspace on the local machine.
            </summary>
            <param name="path">The local path to look up</param>
            <returns>True if the path is mapped in a workspace; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.IsExplicitlyMapped(System.String)">
            <summary>
            Checks if the specified local path is explicitly mapped in a workspace (i.e.
            the local path is not mapped as a result of a mapping on a parent item).
            </summary>
            <param name="path">The local path to look up</param>
            <returns>True if the path is explicitly mapped in a workspace; false otherwise</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.InsertWorkspaceIntoCache(Microsoft.TeamFoundation.VersionControl.Client.WorkspaceInfo)">
            <summary>
            Inserts or updates a WorkspaceInfo into the local workspace cache.
            
            The local workspace cache will be dirty in memory after this call,
            but will not be written out to disk until SaveConfigToDisk is called.
            </summary>
            <param name="localWorkspace">The workspace to insert</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.RemoveCachedWorkspaceInfo(System.Uri,System.String,System.String)">
            <summary>
            Given a set of filters, removes those matching WorkspaceInfo objects
            from the local workspace cache. The local workspace cache is saved to disk
            at the end of the operation.
            </summary>
            <param name="serverUri">The server URI to filter by; null for no filtering</param>
            <param name="workspaceName">The workspace name to filter by; null for no filtering</param>
            <param name="workspaceOwner">The workspace owner to filter by; null for no filtering</param>
            <returns>The set of WorkspaceInfo objects that were removed</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.RemoveCachedWorkspaceInfo(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer)">
            <summary>
            Given a VersionControlServer instance, removes all WorkspaceInfo objects from the local
            workspace cache whose owner is the currently authenticated user. The local workspace cache is
            saved to disk at the end of the operation.
            </summary>
            <param name="sourceControl">The VersionControlServer instance</param>
            <returns>The set of WorkspaceInfo objects that were removed</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.RemoveCachedWorkspaceInfo(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String)">
            <summary>
            Given a VersionControlServer instance and an optional ownerName filter, removes all WorkspaceInfo
            objects from the local workspace cache whose owner matches the provided filter. The local workspace
            cache is saved to disk at the end of the operation.
            </summary>
            <param name="sourceControl">The VersionControlServer instance</param>
            <param name="workspaceOwner">The workspace owner to filter by; null for no filtering</param>
            <returns>The set of WorkspaceInfo objects that were removed</returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.OnCacheFileReloaded(System.EventArgs)">
            <summary>
            Delivers the CacheFileReloaded event to all VersionControlServer objects in the appdomain.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.SaveConfigIfDirty">
            <summary>
            Saves the local workspace cache to disk if it is dirty.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.EnsureUpdateWorkspaceInfoCache(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String)">
            <summary>
            If, during the lifetime of this appdomain, UpdateWorkspaceInfoCache has never been called
            for the given VersionControlServer and workspace owner name, UpdateWorkspaceInfoCache will
            be invoked with those parameters.
            </summary>
            <param name="sourceControl">The VersionControlServer instance</param>
            <param name="ownerName">The workspace owner name filter (required)</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.EnsureUpdateWorkspaceInfoCache(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String,System.TimeSpan)">
            <summary>
            If UpdateWorkspaceInfoCache has not been called for the given VersionControlServer and workspace owner name
            within the given TimeSpan, UpdateWorkspaceInfoCache will be invoked with those parameters.
            </summary>
            <param name="sourceControl">The VersionControlServer instance</param>
            <param name="ownerName">The workspace owner name filter (required)</param>
            <param name="maxAge">The desired timespan</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.GetWorkspaceInfoForNotification(System.IntPtr,System.IntPtr)">
            <summary>
            Finds the first WorkspaceInfo object that we have which matches the server and workspace hash codes
            of the cross-process notification
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.GetServerGuidForNotification(System.IntPtr)">
            <summary>
            Finds the first VersionControlServer object that we have which matches the server hash code
            provided, and returns its guid.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.NotificationCallback(Microsoft.TeamFoundation.Client.Internal.Notification,System.IntPtr,System.IntPtr)">
            <summary>
            We received a cross-process notification from the NotificationManager, to which we are subscribed.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.OnNonFatalError(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.VersionControl.Client.InternalWorkspaceConflictInfo})">
            <summary>
            The NonFatalError event is sent when some error occurs in the client but does not cause
            the processing of the command to terminate.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.OnNonFatalError(Microsoft.TeamFoundation.VersionControl.Client.WorkstationExceptionEventArgs)">
            <summary>
            The NonFatalError event is sent when some error occurs in the client but does not cause
            the processing of the command to terminate.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.UpdateServerUriReferences(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.Uri)">
            <summary>
            This method is no longer useful and performs no work.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workstation.InstalledPolicyTypes">
            <summary>
            The list of policy types installed on the machine.  These policy types can be used to
            create new policy instances that can then be stored with a porfolio project for evaluation
            on checkins.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.RemoveLocalItemExclusion(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String)">
            <summary>
            Removes an exclusion from the local item exclusion list.
            </summary>
            <param name="exclusion">The exclusion to remove.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.GetLocalItemExclusions(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer)">
            <summary>
            Returns the set of local item exclusions for this user on this machine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.SetLocalItemExclusions(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.String[])">
            <summary>
            Overwrites the list of local item exclusions with the list passed in.
            </summary>
            <param name="sourceControl">The server to set these exclusions for.</param>
            <param name="exclusions">The new exclusions.</param>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.CheckForLocalItemExclusionUpdates(Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer,System.Boolean)">
            <summary>
            Checks to see if the default local item exclusions have changed on the server.
            If force is false, this will only happen once a week.
            </summary>
            <param name="sourceControl"></param>
            <param name="force"></param>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workstation.Name">
            <summary>
            Return name of this Workstation (aka machine name or computer name).
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workstation.GetLatestOnCheckout">
            <summary>
            Return or set the user's Get Latest On Checkout preference for this machine
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workstation.AttemptToAutoResolveConflicts">
            <summary>
            Return or set the user's Attempt To Auto Resolve Conflicts preference for this machine
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workstation.PagedCheckinPageSize">
            <summary>
            Return the user's page size for paged pending change acquisition and for paged checkin.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workstation.PagedCheckinMaterializationCap">
            <summary>
            Return or the maximum size of a pending change collection that will be materialized into
            memory to support checkin policy evaluation, or LastSavedCheckin checkstate storage.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workstation.Current">
            <summary>
            Return the instance representing the current machine.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workstation.CacheEnabled">
            <summary>
            When true, the cache directory exists and will be used.  When false, either we don't have
            access to the directory, it doesn't exist, or it has been set to false by the application,
            and we'll need to run without the cache.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workstation.ConfigurationEnabled">
            <summary>
            When true, the configuration directory exists and will be used.  When false, either we don't have
            access to the directory, it doesn't exist, or it has been set to false by the application,
            and we'll need to run without the configuration cache.
            </summary>
        </member>
        <member name="M:Microsoft.TeamFoundation.VersionControl.Client.Workstation.EnsureCreated">
            <summary>
            Call Workstation.Current.EnsureCreated() to ensure that the singleton instance
            has been instantiated.
            </summary>
        </member>
        <member name="P:Microsoft.TeamFoundation.VersionControl.Client.Workstation.OfflineMetadataFileRoot">
            <summary>
            Returns the directory location where workspace local version metadata files are
            stored.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.Workstation.VersionControlServerList">
            <summary>
            VersionControlServer objects are not IDisposable, but need to receive events
            from the static Workstation object. They receive their events through weak references.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkstationExceptionEventHandler">
            <summary>
            Handler for all Workstation Exception events.
            </summary>
        </member>
        <member name="T:Microsoft.TeamFoundation.VersionControl.Client.WorkstationExceptionEventArgs">
            <summary>
            Event arguments describing actions on a non-fatal exception.
            Workstation operation very often work on WorkspaceInfo, not Workspace, so this class adds
            new property.
            </summary>
        </member>
    </members>
</doc>
