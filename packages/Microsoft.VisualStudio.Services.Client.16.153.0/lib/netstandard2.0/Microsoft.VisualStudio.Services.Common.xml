<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Services.Common</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Services.Common.FederatedCredential">
            <summary>
            Provides a common implementation for federated credentials.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ICachedVssCredentialProvider.GetCachedCredentials(System.Uri,System.Boolean@)">
            <summary>
            Retrieve a VssCredentials object representing the cached credentials for the specified URI in this particular provider's cache implementation.
            If the provider 'knows about' the target URI (it has a cache entry) then knownUri will be set to true.
            A return result of null and knownUri == true indicates that the provider has a cache entry for the target URI but was unable to acquire
            a valid credential for it. Probably this incidates the user was presented an auth challenge and failed or canceled.
            </summary>
            <param name="uri">URI of the host for which to find a cached credential</param>
            <param name="knownUri">set to true if the target URI was in the cache's known URIs list</param>
            <returns>null if no credential associated with the specified URI is found in the cache</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.IssuedToken">
            <summary>
            Provides a common base class for issued tokens.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedToken.IsAuthenticated">
            <summary>
            Gets a value indicating whether or not this token has been successfully authenticated with the remote
            server.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedToken.FromStorage">
            <summary>
            True if the token is retrieved from token storage.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedToken.Properties">
            <summary>
            Metadata about the token in a collection of properties.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedToken.UserId">
            <summary>
            Id of the owner of the token.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedToken.UserName">
            <summary>
            Name of the owner of the token.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.IssuedToken.Authenticated">
            <summary>
            Invoked when the issued token has been validated by successfully authenticated with the remote server.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.IssuedToken.GetUserData(Microsoft.VisualStudio.Services.Common.IHttpResponse)">
            <summary>
            Get the value of the <c>HttpHeaders.VssUserData</c> response header and
            populate the <c>UserId</c> and <c>UserName</c> properties. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.IssuedToken.ApplyTo(Microsoft.VisualStudio.Services.Common.IHttpRequest)">
            <summary>
            Applies the token to the HTTP request message.
            </summary>
            <param name="request">The HTTP request message</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.IssuedTokenCredential">
            <summary>
            Provides a common base class for issued token credentials.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedTokenCredential.InitialToken">
            <summary>
            The initial token to use to authenticate if available. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedTokenCredential.Scheduler">
            <summary>
            Gets or sets the synchronization context which should be used for UI prompts.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedTokenCredential.Prompt">
            <summary>
            The credentials prompt which is used for retrieving a new token.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedTokenCredential.TokenStorageUrl">
            <summary>
            The base url for the vssconnection to be used in the token storage key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.IssuedTokenCredential.CreateTokenProvider(System.Uri,Microsoft.VisualStudio.Services.Common.IHttpResponse,Microsoft.VisualStudio.Services.Common.IssuedToken)">
            <summary>
            Creates a token provider suitable for handling the challenge presented in the response.
            </summary>
            <param name="serverUrl">The targeted server</param>
            <param name="response">The challenge response</param>
            <param name="failedToken">The failed token</param>
            <returns>An issued token provider instance</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.IssuedTokenProvider">
            <summary>
            Provides a common base class for providers of the token authentication model.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedTokenProvider.AuthenticationScheme">
            <summary>
            Gets the authentication scheme used to create this token provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedTokenProvider.AuthenticationParameter">
            <summary>
            Gets the authentication parameter or parameters used to create this token provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedTokenProvider.Credential">
            <summary>
            Gets the credential associated with the provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedTokenProvider.CurrentToken">
            <summary>
            Gets the current token.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedTokenProvider.GetTokenIsInteractive">
            <summary>
            Gets a value indicating whether or not a call to get token will require interactivity.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedTokenProvider.InvokeRequired">
            <summary>
            Gets a value indicating whether or not an ISynchronizeInvoke call is required.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedTokenProvider.SignInUrl">
            <summary>
            Gets the sign-in URL for the token provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.IssuedTokenProvider.TokenStorageUrl">
            <summary>
            The base url for the vssconnection to be used in the token storage key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.IssuedTokenProvider.IsAuthenticationChallenge(Microsoft.VisualStudio.Services.Common.IHttpResponse)">
            <summary>
            Determines whether the specified web response is an authentication challenge.
            </summary>
            <param name="webResponse">The web response</param>
            <returns>True if the web response is a challenge for token authentication; otherwise, false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.IssuedTokenProvider.GetAuthenticationParameters">
            <summary>
            Formats the authentication challenge string which this token provider handles.
            </summary>
            <returns>A string representing the handled authentication challenge</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.IssuedTokenProvider.ValidateToken(Microsoft.VisualStudio.Services.Common.IssuedToken,Microsoft.VisualStudio.Services.Common.IHttpResponse)">
            <summary>
            Validates the current token if the provided reference is the current token and it 
            has not been validated before.
            </summary>
            <param name="token">The token which should be validated</param>
            <param name="webResponse">The web response which used the token</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.IssuedTokenProvider.InvalidateToken(Microsoft.VisualStudio.Services.Common.IssuedToken)">
            <summary>
            Invalidates the current token if the provided reference is the current token.
            </summary>
            <param name="token">The token reference which should be invalidated</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.IssuedTokenProvider.GetTokenAsync(Microsoft.VisualStudio.Services.Common.IssuedToken,System.Threading.CancellationToken)">
            <summary>
            Retrieves a token for the credentials.
            </summary>
            <param name="failedToken">The token which previously failed authentication, if available</param>
            <param name="cancellationToken">The <c>CancellationToken</c>that will be assigned to the new task</param>
            <returns>A security token for the current credentials</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.IssuedTokenProvider.OnGetTokenAsync(Microsoft.VisualStudio.Services.Common.IssuedToken,System.Threading.CancellationToken)">
            <summary>
            Retrieves a token for the credentials.
            </summary>
            <param name="failedToken">The token which previously failed authentication, if available</param>
            <param name="cancellationToken">The <c>CancellationToken</c>that will be assigned to the new task</param>
            <returns>A security token for the current credentials</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.IssuedTokenProvider.OnValidatingToken(Microsoft.VisualStudio.Services.Common.IssuedToken,Microsoft.VisualStudio.Services.Common.IHttpResponse)">
            <summary>
            Invoked when the current token is being validated. When overriden in a derived class,
            validate and return the validated token.
            </summary>
            <remarks>Is called inside a lock in <c>ValidateToken</c></remarks>
            <param name="token">The token to validate</param>
            <param name="webResponse">The web response which used the token</param>
            <returns>The validated token</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.IVssCredentialPrompt">
            <summary>
            Provide an interface to get a new token for the credentials.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.IVssCredentialPrompt.GetTokenAsync(Microsoft.VisualStudio.Services.Common.IssuedTokenProvider,Microsoft.VisualStudio.Services.Common.IssuedToken)">
            <summary>
            Get a new token using the specified provider and the previously failed token.
            </summary>
            <param name="provider">The provider for the token to be retrieved</param>
            <param name="failedToken">The token which previously failed authentication, if available</param>
            <returns>The new token</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.VssBasicCredential">
            <summary>
            Provides a credential for basic authentication against a Visual Studio Service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssBasicCredential.#ctor">
            <summary>
            Initializes a new <c>VssBasicCredential</c> instance with no token specified.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssBasicCredential.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <c>VssBasicCredential</c> instance with the specified user name and password.
            </summary>
            <param name="userName">The user name</param>
            <param name="password">The password</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssBasicCredential.#ctor(System.Net.ICredentials)">
            <summary>
            Initializes a new <c>VssBasicCredential</c> instance with the specified token.
            </summary>
            <param name="initialToken">An optional token which, if present, should be used before obtaining a new token</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssBasicCredential.#ctor(Microsoft.VisualStudio.Services.Common.VssBasicToken)">
            <summary>
            Initializes a new <c>VssBasicCredential</c> instance with the specified token.
            </summary>
            <param name="initialToken">An optional token which, if present, should be used before obtaining a new token</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.VssBasicToken">
            <summary>
            Provides a token for basic authentication of internet identities.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssBasicToken.#ctor(System.Net.ICredentials)">
            <summary>
            Initializes a new <c>BasicAuthToken</c> instance with the specified token value.
            </summary>
            <param name="credentials">The credentials which should be used for authentication</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.VssCredentialsType">
            <summary>
            The type of credentials supported natively by the framework
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.CredentialPromptType">
            <summary>
            Provides the ability to control when to show or hide the credential prompt user interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.CredentialPromptType.PromptIfNeeded">
            <summary>
            Show the UI only if necessary to obtain credentials.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.CredentialPromptType.DoNotPrompt">
            <summary>
            Never show the UI, even if an error occurs.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.VssCredentials">
            <summary>
            Provides credentials to use when connecting to a Visual Studio Service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssCredentials.#ctor">
            <summary>
            Initializes a new <c>VssCredentials</c> instance with default credentials.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssCredentials.#ctor(System.Boolean)">
            <summary>
            Initializes a new <c>VssCredentials</c> instance with default credentials if specified.
            </summary>
            <param name="useDefaultCredentials">True to use default windows credentials; otherwise, false</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssCredentials.#ctor(Microsoft.VisualStudio.Services.Common.WindowsCredential)">
            <summary>
            Initializes a new <c>VssCredentials</c> instance with the specified windows credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssCredentials.#ctor(Microsoft.VisualStudio.Services.Common.WindowsCredential,Microsoft.VisualStudio.Services.Common.CredentialPromptType)">
            <summary>
            Initializes a new <c>VssCredentials</c> instance with the specified windows credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
            <param name="promptType">CredentialPromptType.PromptIfNeeded if interactive prompts are allowed, otherwise CredentialProptType.DoNotPrompt</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssCredentials.#ctor(Microsoft.VisualStudio.Services.Common.FederatedCredential)">
            <summary>
            Initializes a new <c>VssCredentials</c> instance with the specified issued token credential and
            default windows credential.
            </summary>
            <param name="federatedCredential">The federated credential to use for authentication</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssCredentials.#ctor(Microsoft.VisualStudio.Services.Common.WindowsCredential,Microsoft.VisualStudio.Services.Common.FederatedCredential)">
            <summary>
            Initializes a new <c>VssCredentials</c> instance with the specified windows and issued token 
            credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
            <param name="federatedCredential">The federated credential to use for authentication</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssCredentials.#ctor(Microsoft.VisualStudio.Services.Common.WindowsCredential,Microsoft.VisualStudio.Services.Common.FederatedCredential,Microsoft.VisualStudio.Services.Common.CredentialPromptType)">
            <summary>
            Initializes a new <c>VssCredentials</c> instance with the specified windows and issued token 
            credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
            <param name="federatedCredential">The federated credential to use for authentication</param>
            <param name="promptType">CredentialPromptType.PromptIfNeeded if interactive prompts are allowed, otherwise CredentialProptType.DoNotPrompt</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssCredentials.#ctor(Microsoft.VisualStudio.Services.Common.WindowsCredential,Microsoft.VisualStudio.Services.Common.FederatedCredential,Microsoft.VisualStudio.Services.Common.CredentialPromptType,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes a new <c>VssCredentials</c> instance with the specified windows and issued token 
            credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
            <param name="federatedCredential">The federated credential to use for authentication</param>
            <param name="promptType">CredentialPromptType.PromptIfNeeded if interactive prompts are allowed; otherwise, CredentialProptType.DoNotPrompt</param>
            <param name="scheduler">An optional <c>TaskScheduler</c> to ensure credentials prompting occurs on the UI thread</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssCredentials.#ctor(Microsoft.VisualStudio.Services.Common.WindowsCredential,Microsoft.VisualStudio.Services.Common.FederatedCredential,Microsoft.VisualStudio.Services.Common.CredentialPromptType,System.Threading.Tasks.TaskScheduler,Microsoft.VisualStudio.Services.Common.IVssCredentialPrompt)">
            <summary>
            Initializes a new <c>VssCredentials</c> instance with the specified windows and issued token 
            credential.
            </summary>
            <param name="windowsCredential">The windows credential to use for authentication</param>
            <param name="federatedCredential">The federated credential to use for authentication</param>
            <param name="promptType">CredentialPromptType.PromptIfNeeded if interactive prompts are allowed; otherwise, CredentialProptType.DoNotPrompt</param>
            <param name="scheduler">An optional <c>TaskScheduler</c> to ensure credentials prompting occurs on the UI thread</param>
            <param name="credentialPrompt">An optional <c>IVssCredentialPrompt</c> to perform prompting for credentials</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssCredentials.op_Implicit(Microsoft.VisualStudio.Services.Common.FederatedCredential)~Microsoft.VisualStudio.Services.Common.VssCredentials">
            <summary>
            Implicitly converts a <c>FederatedCredential</c> instance into a <c>VssCredentials</c> instance.
            </summary>
            <param name="credential">The federated credential instance</param>
            <returns>A new <c>VssCredentials</c> instance which wraps the specified credential</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssCredentials.op_Implicit(Microsoft.VisualStudio.Services.Common.WindowsCredential)~Microsoft.VisualStudio.Services.Common.VssCredentials">
            <summary>
            Implicitly converts a <c>WindowsCredential</c> instance into a <c>VssCredentials</c> instance.
            </summary>
            <param name="credential">The windows credential instance</param>
            <returns>A new <c>VssCredentials</c> instance which wraps the specified credential</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssCredentials.PromptType">
            <summary>
            Gets or sets a value indicating whether or not interactive prompts are allowed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssCredentials.Federated">
            <summary>
            Gets or sets a value indicating the issued token credentials to use for authentication with the server.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssCredentials.Windows">
            <summary>
            Gets the windows credential to use for NTLM authentication with the server.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssCredentials.Storage">
            <summary>
            A pluggable credential store.
            Simply assign a storage implementation to this property
            and the <c>VssCredentials</c> will use it to store and retrieve tokens
            during authentication.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssCredentials.TryGetValidAdalToken(Microsoft.VisualStudio.Services.Common.IVssCredentialPrompt)">
             <summary>
            Attempts to find appropriate Access token for IDE user and add to prompt's parameter
             Actual implementation in override.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssCredentials.CreateTokenProvider(System.Uri,Microsoft.VisualStudio.Services.Common.IHttpResponse,Microsoft.VisualStudio.Services.Common.IssuedToken)">
            <summary>
            Creates a token provider for the configured issued token credentials.
            </summary>
            <param name="serverUrl">The targeted server</param>
            <param name="webResponse">The failed web response</param>
            <param name="failedToken">The failed token</param>
            <returns>A provider for retrieving tokens for the configured credential</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssCredentials.TryGetTokenProvider(System.Uri,Microsoft.VisualStudio.Services.Common.IssuedTokenProvider@)">
            <summary>
            Retrieves the token provider for the provided server URL if one has been created.
            </summary>
            <param name="serverUrl">The targeted server</param>
            <param name="provider">Stores the active token provider, if one exists</param>
            <returns>True if a token provider was found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssCredentials.IsAuthenticationChallenge(Microsoft.VisualStudio.Services.Common.IHttpResponse)">
            <summary>
            Determines if the web response is an authentication redirect for issued token providers.
            </summary>
            <param name="webResponse">The web response</param>
            <returns>True if this is an token authentication redirect, false otherwise</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.VssServiceIdentityCredential">
            <summary>
            Provides federated authentication as a service identity with a Visual Studio Service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssServiceIdentityCredential.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <c>VssServiceIdentityCredential</c> instance with the specified user name and password.
            </summary>
            <param name="userName">The user name</param>
            <param name="password">The password</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssServiceIdentityCredential.#ctor(System.String,System.String,Microsoft.VisualStudio.Services.Common.VssServiceIdentityToken)">
            <summary>
            Initializes a new <c>VssServiceIdentityCredential</c> instance with the specified user name and password. The
            provided token, if not null, will be used before attempting authentication with the credentials.
            </summary>
            <param name="userName">The user name</param>
            <param name="password">The password</param>
            <param name="initialToken">An optional token which, if present, should be used before obtaining a new token</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssServiceIdentityCredential.#ctor(Microsoft.VisualStudio.Services.Common.VssServiceIdentityToken)">
            <summary>
            Initializes a new <c>VssServiceIdentityCredential</c> instance with the specified access token.
            </summary>
            <param name="token">A token which may be used for authorization as the desired service identity</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssServiceIdentityCredential.#ctor(System.String,System.String,Microsoft.VisualStudio.Services.Common.VssServiceIdentityToken,System.Net.Http.DelegatingHandler)">
            <summary>
            Initializes a new <c>VssServiceIdentityCredential</c> instance with the specified user name and password. The
            provided token, if not null, will be used before attempting authentication with the credentials.
            </summary>
            <param name="userName">The user name</param>
            <param name="password">The password</param>
            <param name="initialToken">An optional token which, if present, should be used before obtaining a new token</param>
            <param name="innerHandler">An optional HttpMessageHandler which if passed will be passed along to the TokenProvider when executing OnCreateTokenProvider </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssServiceIdentityCredential.UserName">
            <summary>
            Gets the user name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssServiceIdentityCredential.Password">
            <summary>
            Gets the password.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssServiceIdentityCredential.OnCreateTokenProvider(System.Uri,Microsoft.VisualStudio.Services.Common.IHttpResponse)">
            <summary>
            Creates a provider for retrieving security tokens for the provided credentials.
            </summary>
            <returns>An issued token provider for the current credential</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.VssServiceIdentityToken">
            <summary>
            Provides simple web token used for OAuth authentication.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssServiceIdentityToken.#ctor(System.String)">
            <summary>
            Initializes a new <c>VssServiceIdentityToken</c> instance with the specified token value.
            </summary>
            <param name="token">The token value as a string</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssServiceIdentityTokenProvider.Credential">
            <summary>
            Gets the simple web token credential from which this provider was created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssServiceIdentityTokenProvider.GetTokenIsInteractive">
            <summary>
            Gets a value indicating whether or not a call to get token will require interactivity.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssServiceIdentityTokenProvider.Realm">
            <summary>
            Gets the realm for the token provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssServiceIdentityTokenProvider.OnGetTokenAsync(Microsoft.VisualStudio.Services.Common.IssuedToken,System.Threading.CancellationToken)">
            <summary>
            Issues a request to synchronously retrieve a token for the associated credential.
            </summary>
            <param name="failedToken"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.WindowsCredential">
            <summary>
            Provides a credential for windows authentication against a Visual Studio Service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.WindowsCredential.#ctor">
            <summary>
            Initializes a new <c>WindowsCredential</c> instance using a default user interface provider implementation 
            and the default network credentials.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.WindowsCredential.#ctor(System.Boolean)">
            <summary>
            Initializes a new <c>WindowsCredential</c> instance using a default user interface provider implementation 
            and the default network credentials, if specified.
            </summary>
            <param name="useDefaultCredentials">True if the default credentials should be used; otherwise, false</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.WindowsCredential.#ctor(System.Net.ICredentials)">
            <summary>
            Initializes a new <c>WindowsCredential</c> instance using a default user interface provider implementation 
            and the specified network credentials.
            </summary>
            <param name="credentials">The windows credentials which should be used for authentication</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.WindowsCredential.#ctor(Microsoft.VisualStudio.Services.Common.WindowsToken)">
            <summary>
            Initializes a new <c>WindowsCredential</c> instance using the specified initial token.
            </summary>
            <param name="initialToken">An optional token which, if present, should be used before obtaining a new token</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.WindowsCredential.Credentials">
            <summary>
            Gets the credentials associated with this windows credential.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.WindowsCredential.UseDefaultCredentials">
            <summary>
            Gets a value indicating what value was passed to WindowsCredential(bool useDefaultCredentials) constructor
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.ClientStorage.IVssClientStorage">
            <summary>
            An interface for accessing client data stored locally.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ClientStorage.IVssClientStorage.PathKeyCombine(System.String[])">
            <summary>
            Much like the System.IO.Path.Combine method, this method puts together path segments into a path using
            the appropriate path delimiter.
            </summary>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.ClientStorage.IVssClientStorage.PathSeparator">
            <summary>
            The path segment delimiter used by this storage mechanism.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.ClientStorage.IVssClientStorageReader">
            <summary>
            An interface for reading from local data storage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ClientStorage.IVssClientStorageReader.ReadEntry``1(System.String)">
            <summary>
            Reads one entry from the storage.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="path">This is the path key for the data to retrieve.</param>
            <returns>Returns the value stored at the given path as type T</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Services.Common.ClientStorage.IVssClientStorageReader.ReadEntry``1(System.String,``0)" -->
        <member name="M:Microsoft.VisualStudio.Services.Common.ClientStorage.IVssClientStorageReader.ReadEntries``1(System.String)">
            <summary>
            Returns all entries under the path provided whose values can be converted to T.  If path = "root\mydata", then this will return all entries where path begins with "root\mydata\".
            </summary>
            <typeparam name="T">The type for the entries to return.</typeparam>
            <param name="path">The path pointing to the branch of entries to return.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.ClientStorage.IVssClientStorageWriter">
            <summary>
            An interface for writing to local data storage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ClientStorage.IVssClientStorageWriter.WriteEntry(System.String,System.Object)">
            <summary>
            Write one entry into the local data storage.
            </summary>
            <param name="path">This is the key for the data to store.  Providing a path allows data to be accessed hierarchicaly.</param>
            <param name="value">The value to store at the specified path. Setting his to NULL will remove the entry.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ClientStorage.IVssClientStorageWriter.WriteEntries(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Writes a set of entries to the writer, which provides efficiency benefits over writing each entry individually.
            It also ensures that the either all of the entries are written or in the case of an error, no entries are written.
            Setting a value to NULL, will remove the entry.
            </summary>
            <param name="entries"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.ClientStorage.VssClientStorage.CurrentUserSettings">
            <summary>
            General client settings that need to persist across processes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.ClientStorage.VssClientStorage.VersionedCurrentUserSettings">
            <summary>
            General client settings specific to this binaries current major version that need to persist across processes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.ClientStorage.VssFileStorage">
            <summary>
            Class providing access to local file storage, so data can persist across processes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.ClientStorage.VssFileStorage.PathSeparator">
            <summary>
            The separator to use between the path segments of the storage keys.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.ClientStorage.VssFileStorage.PathComparer">
            <summary>
            The StringComparer used to compare keys in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ClientStorage.VssFileStorage.#ctor(System.String,System.Char,System.Boolean)">
            <summary>
            This constructor should remain private.  Use the factory method GetVssLocalFileStorage to ensure we only have one instance per file,
            which will reduce contention.
            </summary>
            <param name="filePath">This file path to store the settings.</param>
            <param name="pathSeparatorForKeys">The separator to use between the path segments of the storage keys.</param>
            <param name="ignoreCaseInPaths">If true the dictionary will use the OrdinalIgnoreCase StringComparer to compare keys.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ClientStorage.VssFileStorage.GetVssLocalFileStorage(System.String,System.Char,System.Boolean)">
            <summary>
            Factory method to get a VssFileStorage instance ensuring that we don't have two instances for the same file.
            </summary>
            <param name="fullPath">The full path to the storage file.  Ensure that the path used is in an appropriately secure location for the data you are storing.</param>
            <param name="pathSeparatorForKeys">The separator to use between the path segments of the storage keys.</param>
            <param name="ignoreCaseInPaths">If true the dictionary will use the OrdinalIgnoreCase StringComparer to compare keys.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ClientStorage.VssFileStorage.GetCurrentUserVssFileStorage(System.String,System.Boolean,System.Char,System.Boolean)">
            <summary>
            Gets an instance of a VssLocalFileStorage under the current user directory.
            </summary>
            <param name="pathSuffix">This pathSuffix will be combined at the end of the current user data directory for VSS to make a full path.  Something like: "%localappdata%\Microsoft\VisualStudio Services\[pathSuffix]"</param>
            <param name="storeByVssVersion">Adds the current product version as a path segment.  ...\Microsoft\VisualStudio Services\v[GeneratedVersionInfo.ProductVersion]\[pathSuffix]"</param>
            <param name="pathSeparatorForKeys">The separator to use between the path segments of the storage keys.</param>
            <param name="ignoreCaseInPaths">If true the dictionary will use the OrdinalIgnoreCase StringComparer to compare keys.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.ClientStorage.VssFileStorage.ClientSettingsDirectoryByVersion">
             <summary>
             Directory containing the client settings files.
            
             This will look something like this:
             C:\Users\[user]\AppData\Local\Microsoft\VisualStudio Services\v[GeneratedVersionInfo.ProductVersion]
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.ClientStorage.VssFileStorage.ClientSettingsDirectory">
             <summary>
             Directory containing the client settings files.
            
             This will look something like this:
             C:\Users\[user]\AppData\Local\Microsoft\VisualStudio Services
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ClientStorage.VssFileStorage.SafeGetFolderPath(System.Environment.SpecialFolder)">
            <summary>
            Gets folder path and returns null in case the special folder in question doesn't exist (useful when the user has never logged on, which makes
            GetFolderPath throw)
            </summary>
            <param name="specialFolder">Folder to retrieve</param>
            <returns>Path if available, null othewise</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.Diagnostics.VssHttpEventSource.Log">
            <summary>
            Gets the singleton event source used for logging.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Diagnostics.VssHttpEventSource.SetActivityId(Microsoft.VisualStudio.Services.Common.Diagnostics.VssTraceActivity)">
            <summary>
            Sets the activity ID of the current thread.
            </summary>
            <param name="activity">The trace activity which should be active on the calling thread</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.Diagnostics.VssTraceActivity">
            <summary>
            Represents a trace activity for correlating diagnostic traces together. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.Diagnostics.VssTraceActivity.Id">
            <summary>
            Gets the unique identifier for the trace activity.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.Diagnostics.VssTraceActivity.Current">
            <summary>
            Gets the current trace activity if one is set on the current thread; otherwise, null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.Diagnostics.VssTraceActivity.Empty">
            <summary>
            Gets the empty trace activity.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Diagnostics.VssTraceActivity.EnterCorrelationScope">
            <summary>
            Creates a disposable trace scope in which the current trace activity is activated for trace correlation. 
            The call context state for <see cref="P:Microsoft.VisualStudio.Services.Common.Diagnostics.VssTraceActivity.Current"/> is updated within the scope to reference
            the activated activity.
            </summary>
            <returns>A trace scope for correlating multiple traces together</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Diagnostics.VssTraceActivity.GetOrCreate">
            <summary>
            Gets the current activity or, if no activity is active on the current thread, creates a new activity for
            trace correlation.
            </summary>
            <returns>The current trace activity or a new trace activity</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Diagnostics.VssTraceActivity.New(System.Guid)">
            <summary>
            Creates a new trace activity optionally using the provided identifier.
            </summary>
            <param name="activityId">The activity identifier or none to have one generated</param>
            <returns>A new trace activity instance</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.Diagnostics.VssTraceActivity.PropertyName">
            <summary>
            Gets the property name used to cache this object on extensible objects.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.ExceptionMappingAttribute">
            <summary>
            Matches Exception Types to back compatible TypeName and TypeKey for the specified range
            of REST Api versions.  This allows the current server to send back compatible typename
            and type key json when talking to older clients.  It also allows current clients to translate
            exceptions returned from older servers to a current client's exception type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ExceptionMappingAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Matches Exception Types to back compatible TypeName and TypeKey for the specified range
            of REST Api versions.  This allows the current server to send back compatible typename
            and type key json when talking to older clients.  It also allows current clients to translate
            exceptions returned from older servers to a current client's exception type.
            </summary>
            <param name="minApiVersion">The inclusive minimum REST Api version for this mapping.</param>
            <param name="exclusiveMaxApiVersion">The exclusive maximum REST Api version for this mapping.</param>
            <param name="typeKey">The original typekey to be returned by the server when processing requests within the REST Api range specified.</param>
            <param name="typeName">The original typeName to be returned by the server when processing requests within the REST Api range specified.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.ExceptionMappingAttribute.MinApiVersion">
            <summary>
            The inclusive minimum REST Api version for this mapping.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.ExceptionMappingAttribute.ExclusiveMaxApiVersion">
            <summary>
            The exclusive maximum REST Api version for this mapping.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.ExceptionMappingAttribute.TypeKey">
            <summary>
            The original typekey to be returned by the server when processing requests within the REST Api range specified.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.ExceptionMappingAttribute.TypeName">
            <summary>
            The original typeName to be returned by the server when processing requests within the REST Api range specified.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.Services.Common.ConfigFileException" -->
        <member name="M:Microsoft.VisualStudio.Services.Common.VssServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an exception from serialized data
            </summary>
            <param name="info">object holding the serialized data</param>
            <param name="context">context info about the source or destination</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssServiceException.GetTypeNameAndKey(System.Version,System.String@,System.String@)">
            <summary>
            Gets the type name and key for serialization of this exception.
            If not provided, the serializer will provide default values.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.EUIILeakException">
            <summary>
            Thrown when EUII leak is detected.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.VssPropertyValidationException">
            <summary>
            Thrown when validating user input. Similar to ArgumentException but doesn't require the property to be an input parameter.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.PropertyTypeNotSupportedException">
            <summary>
            PropertyTypeNotSupportedException - this is thrown when a type is DBNull or an Object type other than a Byte array.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.TagNotFoundException">
            <summary>
            Thrown when a tag definition cannot be found.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.TagOperationFailed">
            <summary>
            Thrown when an operation on a tag failed because of client-supplied values.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.GenerateConstantAttributeBase">
            <summary>
            Base class for constant generation.  Allows types/fields to be generated
            with an alternate name.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.GenerateConstantAttribute">
            <summary>
            Can be applied to a const/readonly-static field of a class/enum/struct, but is 
            only used when the containing type has the 'GenerateSpecificConstants' attribute applied.  
            This allows the developer to specify exactly what constants to include out of the containing type.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.GenerateAllConstantsAttribute">
            <summary>
            Applied to any enum/class/struct.  Causes the constants generator to create javascript constants 
            for all const/readonly-static fields contained by the type.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.GenerateSpecificConstantsAttribute">
            <summary>
            Applied to any enum/class/struct.  Causes the constants generator to create javascript constants at runtime
            for the type for any member constants/enumerated values that are tagged with the 'GenerateConstant' attribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.GenerateInterfaceAttribute">
            <summary>
            Applied to a class that represents a data model which is serialized to javascript. 
            This attribute controls how TypeScript interfaces are generated for the class that
            this is applied to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.GenerateInterfaceAttribute.GenerateInterface">
            <summary>
            Whether or not to generate a typescript interface for this type
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.IVssClientCertificateManager">
            <summary>
            An interface to allow custom implementations to
            gather client certificates when necessary.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.PerformanceTimingGroup">
            <summary>
            A set of performance timings all keyed off of the same string
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.PerformanceTimingGroup.ElapsedTicks">
            <summary>
            Overall duration of all entries in this group in ticks
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.PerformanceTimingGroup.Count">
            <summary>
            The total number of timing entries associated with this group
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.PerformanceTimingGroup.Timings">
            <summary>
            A list of timing entries in this group. Only the first few entries in each group are collected.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.PerformanceTimingEntry">
            <summary>
            A single timing consisting of a duration and start time
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.PerformanceTimingEntry.ElapsedTicks">
            <summary>
            Duration of the entry in ticks
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.PerformanceTimingEntry.StartOffset">
            <summary>
            Offset from Server Request Context start time in microseconds
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.PerformanceTimingEntry.Properties">
            <summary>
            Properties to distinguish timings within the same group or to provide data to send with telemetry
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Base32Encoder.Encode(System.Byte[])">
            <summary>
            Encodes a byte array into Base32 (RFC 4648)
            </summary>
            <param name="rgbData"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Base32Encoder.Decode(System.String)">
            <summary>
            Decodes a Base32 string (RFC 4648) into its original byte array
            </summary>
            <param name="base32String"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Base32Encoder.GetTokenCount(System.Byte[])">
            <summary>
            Calculates the number of Base32 tokens (output chars) in a byte array
            includes the padding tokens '='
            </summary>
            <param name="rgbData"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Base32Encoder.GetByteCount(System.String)">
            <summary>
            Calculates the number of bytes that the Base32 string will convert into
            when decoded.
            </summary>
            <param name="szEncoded"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Base32Encoder.GetToken(System.Byte[],System.Int32)">
            <summary>
            Gets the next Base32 token from the array
            WARNING:  ~80% of the time of this function was index bounding, so
            the expensive part of that has been removed, bound your calls to this
            and ensure that you dont increment index forever.....
            </summary>
            <param name="rgbData"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TaskCancellationExtensions.EnforceCancellation(System.Threading.Tasks.Task,System.Threading.CancellationToken,System.Func{System.String},System.String,System.String,System.Int32)">
            <summary>
            Some APIs (e.g. HttpClient) don't honor cancellation tokens.  This wrapper adds an extra layer of cancellation checking.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TaskCancellationExtensions.EnforceCancellation``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken,System.Func{System.String},System.String,System.String,System.Int32)">
            <summary>
            Some APIs (e.g. HttpClient) don't honor cancellation tokens.  This wrapper adds an extra layer of cancellation checking.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.TaskCancellationExtensions.RUN_CONTINUATIONS_ASYNCHRONOUSLY">
            <summary>
            This is a flag exposed by TaskCreationOptions and TaskContinuationOptions but it's not in .Net 4.5
            In Azure we have latest .Net loaded which will consume this flag.
            Client environments using earlier .Net would ignore it.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.TokenStorage.VssToken">
            <summary>
            Represents a token in the system which is used to connect to a resource.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.TokenStorage.VssToken.TokenValue">
            <summary>
            The last token value, may be null.
            </summary>
            <remarks>
            This value is updated whenever SetTokenValue or RefreshTokenValue succeeds.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TokenStorage.VssToken.RefreshTokenValue">
            <summary>
            Get the token value (secret) for this token.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TokenStorage.VssToken.SetTokenValue(System.String)">
            <summary>
            Sets the token value (secret) for this token.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TokenStorage.VssToken.RemoveTokenValue">
            <summary>
            Removes the token value (secret) for this token.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TokenStorage.VssToken.GetProperty(System.String)">
            <summary>
            Get a property related to the token out of storage
            </summary>
            <param name="name">Name of the property in storage</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TokenStorage.VssToken.SetProperty(System.String,System.String)">
            <summary>
            Set a property related to the token in storage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TokenStorage.VssToken.RetrieveValue">
            <summary>
            Retrieve the token (secret) from storage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TokenStorage.VssToken.SetValue(System.String)">
            <summary>
            Store the token (secret) in storage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TokenStorage.VssToken.RemoveValue">
            <summary>
            Remove the token (secret) from storage
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.TokenStorage.VssTokenKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TokenStorage.VssTokenKey.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TokenStorage.VssTokenKey.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="kind"></param>
            <param name="resource"></param>
            <param name="userName"></param>
            <param name="type"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.TokenStorage.VssTokenKey.Kind">
            <summary>
            The token kind (e.g., "vss-user", "vss-account", "windows-store").
            </summary>
            <remarks>
            The token kind is case-sensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.TokenStorage.VssTokenKey.Resource">
            <summary>
            The token resource name or uri.
            </summary>
            <remarks>
            The token resource is case-sensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.TokenStorage.VssTokenKey.UserName">
            <summary>
            The token user name, user id, or any app-specific unique value.
            </summary>
            <remarks>
            The token user name is case-insensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.TokenStorage.VssTokenKey.Type">
            <summary>
            The type of the stored token. Can be any app-specific value,
            but is intended to convey the authentication type.
            Therefore some examples might be:
            "Federated", "OAuth", "Windows", "Basic", "ServiceIdentity", "S2S"
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.TokenStorage.VssTokenStorage">
            <summary>
            Defines how to store a token in storage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TokenStorage.VssTokenStorage.Add(Microsoft.VisualStudio.Services.Common.TokenStorage.VssTokenKey,System.String)">
            <summary>
            Add a new token to the storage.
            </summary>
            <param name="tokenKey">Required.</param>
            <param name="tokenValue">Required.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TokenStorage.VssTokenStorage.Retrieve(Microsoft.VisualStudio.Services.Common.TokenStorage.VssTokenKey)">
            <summary>
            Retrieve the specified token.
            </summary>
            <param name="tokenKey">Required.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TokenStorage.VssTokenStorage.Remove(Microsoft.VisualStudio.Services.Common.TokenStorage.VssTokenKey)">
            <summary>
            Remove a token from storage.
            </summary>
            <param name="tokenKey">Required.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TokenStorage.VssTokenStorage.RetrieveAll(System.String)">
            <summary>
            Retrieve all tokens by kind.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForNull(System.Object,System.String)">
            <summary>
            Throw an exception if the object is null.
            </summary>
            <param name="var">the object to check</param>
            <param name="varName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForNull(System.Object,System.String,System.String)">
            <summary>
            Throw an exception if the object is null.
            </summary>
            <param name="var">the object to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForNullOrEmpty(System.String,System.String)">
            <summary>
            Throw an exception if a string is null or empty.
            </summary>
            <param name="stringVar">string to check</param>
            <param name="stringVarName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Throw an exception if a string is null or empty.
            </summary>
            <param name="stringVar">string to check</param>
            <param name="stringVarName">the variable or parameter name to display</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForNonPositiveInt(System.Int32,System.String)">
            <summary>
            Throws and exception if an integer is less than 1
            </summary>
            <param name="var">integer to check</param>
            <param name="varName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForNonPositiveInt(System.Int32,System.String,System.String)">
            <summary>
            Throws and exception if an integer is less than 1
            </summary>
            <param name="var">integer to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForNullOrEmpty(System.String,System.String,System.Boolean)">
            <summary>
            Throw an exception if a string is null or empty.
            </summary>
            <param name="stringVar">string to check</param>
            <param name="stringVarName">the variable or parameter name to display</param>
            <param name="trim">If true, will trim the string after it is determined not to be null</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForNullOrEmpty(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Throw an exception if a string is null or empty.
            </summary>
            <param name="stringVar">string to check</param>
            <param name="stringVarName">the variable or parameter name to display</param>
            <param name="trim">If true, will trim the string after it is determined not to be null</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringLength(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Throw an exception if a string is null, too short, or too long.
            </summary>
            <param name="stringVar">string to check</param>
            <param name="stringVarName">the variable or parameter name to display</param>
            <param name="maxLength">Maximum allowed string length</param>
            <param name="minLength">Minimum allowed string length</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckCollectionForMaxLength``1(System.Collections.Generic.ICollection{``0},System.String,System.Int32)">
            <summary>
            Check a Collection for the Max Length
            </summary>
            <param name="collection">enumerable to check</param>
            <param name="collectionName">the variable or parameter name to display</param>
            <param name="maxLength">Max allowed Length</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckEnumerableForNullOrEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Throw an exception if IEnumerable is null or empty.
            </summary>
            <param name="enumerable">enumerable to check</param>
            <param name="enumerableName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckEnumerableForNullOrEmpty(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Throw an exception if IEnumerable is null or empty.
            </summary>
            <param name="enumerable">enumerable to check</param>
            <param name="enumerableName">the variable or parameter name to display</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckEnumerableForNullElement(System.Collections.IEnumerable,System.String)">
            <summary>
            Throw an exception if IEnumerable contains a null element.
            </summary>
            <param name="enumerable">enumerable to check</param>
            <param name="enumerableName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckEnumerableForNullElement(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Throw an exception if IEnumerable contains a null element.
            </summary>
            <param name="enumerable">enumerable to check</param>
            <param name="enumerableName">the variable or parameter name to display</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForEmptyGuid(System.Guid,System.String)">
            <summary>
            Throw an exception if the guid is equal to Guid.Empty.
            </summary>
            <param name="guid">the guid to check</param>
            <param name="varName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForEmptyGuid(System.Guid,System.String,System.String)">
            <summary>
            Throw an exception if the guid is equal to Guid.Empty.
            </summary>
            <param name="guid">the guid to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForMultipleBits(System.Int32,System.String)">
            <summary>
            Throw an exception if the value contains more than one bit set.
            </summary>
            <param name="value">the value to check</param>
            <param name="varName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForMultipleBits(System.Int32,System.String,System.String)">
            <summary>
            Throw an exception if the value contains more than one bit set.
            </summary>
            <param name="value">the value to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForDefault``1(``0,System.String)">
            <summary>
            Throw an exception if the value equals the default for the type.
            </summary>
            <param name="value">the value to check</param>
            <param name="varName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.IsIllegalInputCharacter(System.Char,System.Boolean)">
            <summary>
            Checks if character is not displayable.
            </summary>
            <param name="c"></param>
            <param name="allowCrLf">Carriage return and line-feed is considered legal if the allowCrLf parameter is set to true.</param>
            <remarks>A character is "not displayable" if it's UnicodeCategory is in the set {LineSeparator, ParagraphSeparator, Control, Format, OtherNotAssigned}.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.ReplaceIllegalCharacters(System.String,System.Char,System.Boolean)">
            <summary>
            Replace illegal characters with specified character. A character is considered illegal as per definition of <see cref="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.IsIllegalInputCharacter(System.Char,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForInvalidCharacters(System.String,System.String)">
            <summary>
            Checks for invalid unicode characters
            </summary>
            <param name="stringVar"></param>
            <param name="stringVarName"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForInvalidCharacters(System.String,System.String,System.String)">
            <summary>
            Checks for invalid unicode characters
            </summary>
            <param name="stringVar"></param>
            <param name="stringVarName"></param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForInvalidCharacters(System.String,System.String,System.Boolean)">
            <summary>
            Checks for invalid unicode characters
            </summary>
            <param name="stringVar"></param>
            <param name="stringVarName"></param>
            <param name="allowCrLf"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForInvalidCharacters(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Checks for invalid unicode characters
            </summary>
            <param name="stringVar"></param>
            <param name="stringVarName"></param>
            <param name="allowCrLf"></param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForInvalidCharacters(System.String,System.String,System.Char[])">
             <summary>
            
             </summary>
             <param name="stringVar"></param>
             <param name="stringVarName"></param>
             <param name="invalidCharacters"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForInvalidCharacters(System.String,System.String,System.Char[],System.String)">
             <summary>
            
             </summary>
             <param name="stringVar"></param>
             <param name="stringVarName"></param>
             <param name="invalidCharacters"></param>
             <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForInvalidSqlEscapeCharacters(System.String,System.String,System.String)">
            <summary>
            Checks for escape sequences that are invalid in SQL
            </summary>
            <param name="stringVar">The value to be checked</param>
            <param name="stringVarName">The name of the value to be checked</param>
            <param name="expectedServiceArea">The service area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForOutOfRange``1(``0,System.String,``0)">
            <summary>
            Throw an exception if the value is out of range.
            </summary>
            <typeparam name="T">The comparable type</typeparam>
            <param name="var">the value to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForOutOfRange``1(``0,System.String,``0,System.String)">
            <summary>
            Throw an exception if the value is out of range.
            </summary>
            <typeparam name="T">The comparable type</typeparam>
            <param name="var">the value to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForOutOfRange``1(``0,System.String,``0,``0)">
            <summary>
            Throw an exception if the value is out of range.
            </summary>
            <typeparam name="T">The comparable type</typeparam>
            <param name="var">the value to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
            <param name="maximum">maximum legal value</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForOutOfRange``1(``0,System.String,``0,``0,System.String)">
            <summary>
            Throw an exception if the value is out of range.
            </summary>
            <typeparam name="T">The comparable type</typeparam>
            <param name="var">the value to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
            <param name="maximum">maximum legal value</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForOutOfRange(System.Int32,System.String,System.Int32)">
            <summary>
            Throw an exception if the integer is out of range.
            </summary>
            <param name="var">the int to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForOutOfRange(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Throw an exception if the integer is out of range.
            </summary>
            <param name="var">the int to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForOutOfRange(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Throw an exception if the integer is out of range.
            </summary>
            <param name="var">the int to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
            <param name="maximum">maximum legal value</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForOutOfRange(System.Int32,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Throw an exception if the integer is out of range.
            </summary>
            <param name="var">the int to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
            <param name="maximum">maximum legal value</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForOutOfRange(System.Int64,System.String,System.Int64)">
            <summary>
            Throw an exception if the integer is out of range.
            </summary>
            <param name="var">the int to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForOutOfRange(System.Int64,System.String,System.Int64,System.String)">
            <summary>
            Throw an exception if the integer is out of range.
            </summary>
            <param name="var">the int to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForOutOfRange(System.Int64,System.String,System.Int64,System.Int64)">
            <summary>
            Throw an exception if the integer is out of range.
            </summary>
            <param name="var">the int to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
            <param name="maximum">maximum legal value</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForOutOfRange(System.Int64,System.String,System.Int64,System.Int64,System.String)">
            <summary>
            Throw an exception if the integer is out of range.
            </summary>
            <param name="var">the int to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
            <param name="maximum">maximum legal value</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForDateTimeRange(System.DateTime,System.String,System.DateTime,System.DateTime)">
            <summary>
            Throw an exception if the date is not in the range.
            </summary>
            <param name="var">the DateTime to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
            <param name="maximum"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForDateTimeRange(System.DateTime,System.String,System.DateTime,System.DateTime,System.String)">
            <summary>
            Throw an exception if the date is not in the range.
            </summary>
            <param name="var">the DateTime to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="minimum">minimum legal value</param>
            <param name="maximum"></param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckGreaterThanOrEqualToZero(System.Single,System.String)">
            <summary>
            Throws an exception if the provided value is less than zero.
            </summary>
            <param name="value">value to check</param>
            <param name="valueName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckGreaterThanOrEqualToZero(System.Single,System.String,System.String)">
            <summary>
            Throws an exception if the provided value is less than zero.
            </summary>
            <param name="value">value to check</param>
            <param name="valueName">the variable or parameter name to display</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckGreaterThanZero(System.Single,System.String)">
            <summary>
            Throws an exception if the provided value is less than or equal to zero.
            </summary>
            <param name="value">value to check</param>
            <param name="enumerableName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckGreaterThanZero(System.Single,System.String,System.String)">
            <summary>
            Throws an exception if the provided value is less than or equal to zero.
            </summary>
            <param name="value">value to check</param>
            <param name="enumerableName">the variable or parameter name to display</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.EnsureIsNull(System.Object,System.String)">
            <summary>
            Throw an exception if the object is not null.
            </summary>
            <param name="var">the object to check</param>
            <param name="varName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.EnsureIsNull(System.Object,System.String,System.String)">
            <summary>
            Throw an exception if the object is not null.
            </summary>
            <param name="var">the object to check</param>
            <param name="varName">the variable or parameter name to display</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringCasing(System.String,System.String,System.Boolean)">
            <summary>
            Throw an exception if the string is not entirely of a specified casing (lowercase, uppercase).
            </summary>
            <param name="stringVar">The string to check.</param>
            <param name="varName">The variable or parameter name to display.</param>
            <param name="checkForLowercase">Indicates whether the check should require
            lowercase characters, as opposed to uppercase characters.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringCasing(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Throw an exception if the string is not entirely of a specified casing (lowercase, uppercase).
            </summary>
            <param name="stringVar">The string to check.</param>
            <param name="varName">The variable or parameter name to display.</param>
            <param name="checkForLowercase">Indicates whether the check should require
            lowercase characters, as opposed to uppercase characters.</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckEnumerableForEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Throw an exception if IEnumerable is empty.
            </summary>
            <param name="enumerable">enumerable to check</param>
            <param name="enumerableName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckEnumerableForEmpty(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Throw an exception if IEnumerable is empty.
            </summary>
            <param name="enumerable">enumerable to check</param>
            <param name="enumerableName">the variable or parameter name to display</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throw an exception if a string is null, empty, or consists only of white-space characters.
            </summary>
            <param name="stringVar">string to check</param>
            <param name="stringVarName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForNullOrWhiteSpace(System.String,System.String,System.String)">
            <summary>
            Throw an exception if a string is null, empty, or consists only of white-space characters.
            </summary>
            <param name="stringVar">string to check</param>
            <param name="stringVarName">the variable or parameter name to display</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringExactLength(System.String,System.Int32,System.String)">
            <summary>
            Throw an exception if a string length is not given value.
            </summary>
            <param name="stringVar">string to check</param>
            <param name="length">length to check</param>
            <param name="stringVarName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringExactLength(System.String,System.Int32,System.String,System.String)">
            <summary>
            Throw an exception if a string length is not given value.
            </summary>
            <param name="stringVar">string to check</param>
            <param name="length">length to check</param>
            <param name="stringVarName">the variable or parameter name to display</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForBothStringsNullOrEmpty(System.String,System.String,System.String,System.String)">
            <summary>
            Throw an exception if one of the strings is not null or empty.
            </summary>
            <param name="var1">the first object to check</param>
            <param name="varName1">the variable or parameter name to display for the first object</param>
            <param name="var2">the second object to check</param>
            <param name="varName2">the variable or parameter name to display for the second object</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForBothStringsNullOrEmpty(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Throw an exception if one of the strings is not null or empty.
            </summary>
            <param name="var1">the first object to check</param>
            <param name="varName1">the variable or parameter name to display for the first object</param>
            <param name="var2">the second object to check</param>
            <param name="varName2">the variable or parameter name to display for the second object</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForAnyWhiteSpace(System.String,System.String)">
            <summary>
            Checks if a string contains any whitespace characters. Throws an exception if it does.
            </summary>
            <param name="stringVar"></param>
            <param name="stringVarName"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForAnyWhiteSpace(System.String,System.String,System.String)">
            <summary>
            Checks if a string contains any whitespace characters. Throws an exception if it does.
            </summary>
            <param name="stringVar"></param>
            <param name="stringVarName"></param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckType``1(System.Object,System.String,System.String)">
            <summary>
            Performs a type check on the variable, and throws if there is a mismatch
            </summary>
            <typeparam name="T"></typeparam>
            <param name="var"></param>
            <param name="varName"></param>
            <param name="typeName"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckType``1(System.Object,System.String,System.String,System.String)">
            <summary>
            Performs a type check on the variable, and throws if there is a mismatch
            </summary>
            <typeparam name="T"></typeparam>
            <param name="var"></param>
            <param name="varName"></param>
            <param name="typeName"></param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForDefinedEnum``1(``0,System.String)">
            <summary>
            Checks if an enum value is defined on the enum type
            </summary>
            <typeparam name="TEnum">The type of the enum</typeparam>
            <param name="value">The enum value</param>
            <param name="enumVarName">The name of the enum argument</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckForDefinedEnum``1(``0,System.String,System.String)">
            <summary>
            Checks if an enum value is defined on the enum type
            </summary>
            <typeparam name="TEnum">The type of the enum</typeparam>
            <param name="value">The enum value</param>
            <param name="enumVarName">The name of the enum argument</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.IsValidEmailAddress(System.String)">
            <summary>
            Determines if a string value is a valid email address. Does NOT throw.
            </summary>
            <param name="emailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckEmailAddress(System.String,System.String)">
            <summary>
            Checks if a string is a valid email address. Throws an exception otherwise.
            </summary>
            <param name="stringVar"></param>
            <param name="stringVarName"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckEmailAddress(System.String,System.String,System.String)">
            <summary>
            Checks if a string is a valid email address. Throws an exception otherwise.
            </summary>
            <param name="stringVar"></param>
            <param name="stringVarName"></param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckIsValidURI(System.String,System.UriKind,System.String)">
            <summary>
            Checks if a string value is a valid URI in accordance with RFC 3986 and RFC 3987. Throws an exception otherwise.
            </summary>
            <param name="uriString"></param>
            <param name="uriKind"></param>
            <param name="stringVarName"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForInvalidCharacters(System.String[],System.String)">
             <summary>
            
             </summary>
             <param name="stringArrayVar"></param>
             <param name="stringArrayVarName"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForInvalidCharacters(System.String[],System.String,System.String)">
             <summary>
            
             </summary>
             <param name="stringArrayVar"></param>
             <param name="stringArrayVarName"></param>
             <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForInvalidCharacters(System.String[],System.String,System.Boolean)">
            <summary>
            Checks for invalid unicode characters
            </summary>
            <param name="stringArrayVar"></param>
            <param name="stringArrayVarName"></param>
            <param name="allowCrLf"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckStringForInvalidCharacters(System.String[],System.String,System.Boolean,System.String)">
            <summary>
            Checks for invalid unicode characters
            </summary>
            <param name="stringArrayVar"></param>
            <param name="stringArrayVarName"></param>
            <param name="allowCrLf"></param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckValueEqualsToInfinity(System.Single,System.String)">
            <summary>
            Throws an exception if the provided value equals to infinity.
            </summary>
            <param name="value">value to check</param>
            <param name="valueName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArgumentUtility.CheckValueEqualsToInfinity(System.Single,System.String,System.String)">
            <summary>
            Throws an exception if the provided value equals to infinity.
            </summary>
            <param name="value">value to check</param>
            <param name="valueName">the variable or parameter name to display</param>
            <param name="expectedServiceArea">the Service Area where this exception is expected due to user input. See <see cref="T:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions"/></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.ArrayUtility">
            <summary>
            A class with random array processing helper routines.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArrayUtility.Equals(System.Byte[],System.Byte[])">
            <summary>
            Compare two byte arrays to determine if they contain the same data.
            </summary>
            <param name="a1">First array to compare.</param>
            <param name="a2">Second array to compare.</param>
            <returns>true if the arrays are equal and false if not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArrayUtility.GetHashCode(System.Byte[])">
            <summary>
            Generate hash code for a byte array.
            </summary>
            <param name="array">array to generate hash code for.</param>
            <returns>hash generated from the array members.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArrayUtility.Equals(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Compare two byte arrays to determine if they contain the same data.
            </summary>
            <param name="a1">First array to compare.</param>
            <param name="a2">Second array to compare.</param>
            <param name="length"># of bytes to compare.</param>
            <returns>true if the arrays are equal and false if not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ArrayUtility.StringFromByteArray(System.Byte[])">
            <summary>
            Convert the byte array to a lower case hex string.
            </summary>
            <param name="bytes">byte array to be converted.</param>
            <returns>hex string converted from byte array.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.CollectionsExtensions.AddRange``2(``1,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds all of the given values to this collection.
            Can be used with dictionaries, which implement <see cref="T:System.Collections.Generic.ICollection`1"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/> where T is <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            For dictionaries, also see <see cref="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.SetRange``3(``2,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.CollectionsExtensions.AddRangeIfRangeNotNull``2(``1,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds all of the given values to this collection if and only if the values object is not null.
            See <see cref="M:Microsoft.VisualStudio.Services.Common.CollectionsExtensions.AddRange``2(``1,System.Collections.Generic.IEnumerable{``0})"/> for more details.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ConnectionStringUtility.MaskPassword(System.String)">
            <summary>
            Mask the password portion of the valid sql connection string.  Use this for tracing.
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ConnectionStringUtility.ReplaceInitialCatalog(System.String,System.String)">
            <summary>
            Replaces Initial catalog (database name) in the connection string.
            </summary>
            <param name="connectionString">Connection string to update.</param>
            <param name="databaseName">New value for the Initial Catalog (database name). 
            If this parameter is null, Initial Catalog is removed from the connection string.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.ConvertUtility">
            <summary>
            Utility class for wrapping Convert.ChangeType to handle nullable values.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.CultureResolution.GetBestCultureMatch(System.Collections.Generic.IList{System.Globalization.CultureInfo},System.Collections.Generic.ISet{System.Globalization.CultureInfo})">
            <summary>
            Given a list of acceptable cultures, ordered from most preferred to least, return the item from availableCultures which 
            best fits the culture(s) requested. If there is no suitable match, return null.
            </summary>
            <param name="orderedAcceptableCultures">Ordered list of acceptable cultures, from most preferred to least preferred.</param>
            <param name="availableCultures">Available cultures to choose from (e.g. locales available for a given resource)</param>
            <returns>A single element from availableCultures which is the best matching culture given the list of acceptable
            cultures, or null if there is no reasonable match.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.CultureResolution.GetCultureRelationshipDistance(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Get an integer indicating how related the given cultures are (this method is symmetric on its inputs).
            This implementation returns the integer difference of the distance from the Invariant Culture, assuming one culture
            is an ancestor of another. Otherwise -1 is returned.
            </summary>
            <param name="cultureA"></param>
            <param name="cultureB"></param>
            <returns>0 if the cultures are the same, higher integers mean they are less related. -1 means no relation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``1,``1,``1})">
            <summary>
            Adds a new value to the dictionary or updates the value if the entry already exists.
            Returns the updated value inserted into the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value in an IDictionary at the given key, or the default
            value for that type if it is not present.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value in an IReadOnlyDictionary at the given key, or the default
            value for that type if it is not present.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value in a Dictionary at the given key, or the default
            value for that type if it is not present.
            </summary>
            <remarks>
            This overload is necessary to prevent Ambiguous Match issues, as Dictionary implements both
            IDictionary and IReadonlyDictionary, but neither interface implements the other
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.GetNullableValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Nullable{``1})">
            <summary>
            Returns the value in an IDictionary at the given key, or the default
            nullable value for that type if it is not present.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.GetNullableValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.Nullable{``1})">
            <summary>
            Returns the value in an IReadOnlyDictionary at the given key, or the default
            nullable value for that type if it is not present.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.GetNullableValueOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Nullable{``1})">
            <summary>
            Returns the value in a Dictionary at the given key, or the default
            nullable value for that type if it is not present.
            </summary>
            <remarks>
            This overload is necessary to prevent Ambiguous Match issues, as Dictionary implements both
            IDictionary and IReadonlyDictionary, but neither interface implements the other
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.GetCastedValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,System.Object},``0,``1)">
            <summary>
            Returns the value in an IReadonlyDictionary with values of type <see cref="T:System.Object"/>  
            casted as values of requested type, or the defualt if the key is not found or 
            if the value was found but not compatabile with the requested type.
            </summary>
            <typeparam name="K">The key type</typeparam>
            <typeparam name="V">The requested type of the stored value</typeparam>
            <param name="dictionary">the dictionary to perform the lookup on</param>
            <param name="key">The key to lookup</param>
            <param name="default">Optional: the default value to return if not found</param>
            <returns>The value at the key, or the default if it is not found or of the wrong type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.GetCastedValueOrDefault``2(System.Collections.Generic.IDictionary{``0,System.Object},``0,``1)">
            <summary>
            Returns the value in an IDictionary with values of type <see cref="T:System.Object"/>  
            casted as values of requested type, or the defualt if the key is not found or 
            if the value was found but not compatabile with the requested type.
            </summary>
            <typeparam name="K">The key type</typeparam>
            <typeparam name="V">The requested type of the stored value</typeparam>
            <param name="dictionary">the dictionary to perform the lookup on</param>
            <param name="key">The key to lookup</param>
            <param name="default">Optional: the default value to return if not found</param>
            <returns>The value at the key, or the default if it is not found or of the wrong type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.GetCastedValueOrDefault``2(System.Collections.Generic.Dictionary{``0,System.Object},``0,``1)">
            <summary>
            Returns the value in a Dictionary with values of type <see cref="T:System.Object"/>  
            casted as values of requested type, or the defualt if the key is not found or 
            if the value was found but not compatabile with the requested type.
            </summary>
            <remarks>
            This overload is necessary to prevent Ambiguous Match issues, as Dictionary implements both
            IDictionary and IReadonlyDictionary, but neither interface implements the other
            </remarks>
            <typeparam name="K">The key type</typeparam>
            <typeparam name="V">The requested type of the stored value</typeparam>
            <param name="dictionary">the dictionary to perform the lookup on</param>
            <param name="key">The key to lookup</param>
            <param name="default">Optional: the default value to return if not found</param>
            <returns>The value at the key, or the default if it is not found or of the wrong type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.GetOrAddValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns the value in an IDictionary at the given key, or creates a new value using the default constructor, adds it at the given key, and returns the new value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.GetOrAddValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Returns the value in an IDictionary at the given key, or creates a new value using the given delegate, adds it at the given key, and returns the new value.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.SetRange``3(``2,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})" -->
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.SetRangeIfRangeNotNull``3(``2,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds all of the given key-value pairs if and only if the key-value pairs object is not null.
            See <see cref="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.SetRange``3(``2,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})"/> for more details.
            </summary>
            <returns>this dictionary</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.SetRangeIfRangeNotNullOrEmpty``3(System.Lazy{``2},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds all of the given key-value pairs to this lazily initialized dictionary if and only if the key-value pairs object is not null or empty.
            Does not initialize the dictionary otherwise.
            See <see cref="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.SetRange``3(``2,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})"/> for more details.
            </summary>
            <returns>this dictionary</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Tries to add a key to the dictionary, if it does not already exist.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> instance where <c>TValue</c> is <c>object</c></param>
            <param name="key">The key to add</param>
            <param name="value">The value to add</param>
            <returns><c>true</c> if the key was added with the specified value. If the key already exists, the method returns <c>false</c> without updating the value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.TryAddRange``3(``2,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Tries to add all of the given key-values pairs to the dictionary, if they do not already exist. 
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> instance where <c>TValue</c> is <c>object</c></param>
            <param name="keyValuePairs">The values to try and add to the dictionary</param>
            <returns><c>true</c> if the all of the values were added. If any of the keys exists, the method returns <c>false</c> without updating the value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            Gets the value of <typeparamref name="T"/> associated with the specified key or <c>default</c> value if
            either the key is not present or the value is not of type <typeparamref name="T"/>. 
            </summary>
            <typeparam name="T">The type of the value associated with the specified key.</typeparam>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> instance where <c>TValue</c> is <c>object</c>.</param>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</param>
            <returns><c>true</c> if key was found, value is non-null, and value is of type <typeparamref name="T"/>; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.TryGetValidatedValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@,System.Boolean)">
            <summary>
            Gets the value of T associated with the specified key if the value can be converted to T according to <see cref="T:Microsoft.VisualStudio.Services.Common.Internal.PropertyValidation"/>.
            </summary>
            <typeparam name="T">the type of the value associated with the specified key</typeparam>
            <param name="dictionary">the dictionary from which we should retrieve the value</param>
            <param name="key">the key of the value to retrieve</param>
            <param name="value">when this method returns, the value associated with the specified key, if the key is found and the value is convertible to T,
            or default of T, if not</param>
            <returns>true if the value was retrieved successfully, otherwise false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.TryGetEnum``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            Gets the Enum value associated with the specified key if the value can be converted to an Enum.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.TryGetGuid(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Guid@)">
            <summary>
            Gets the Guid value associated with the specified key if the value can be converted to a Guid.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.Copy``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Predicate{``0})">
            <summary>
            Copies the values from this <see cref="T:System.Collections.Generic.IDictionary`2"/> into a destination <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="source">The source dictionary from which to from.</param>
            <param name="dest">The destination dictionary to which to copy to.</param>
            <param name="filter">Optional filtering predicate.</param>
            <returns>The destination dictionary.</returns>
            <remarks>
            If <paramref name="dest"/> is <c>null</c>, no changes are made.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.Copy``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Copies the values from this <see cref="T:System.Collections.Generic.IDictionary`2"/> into a destination <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="source">The source dictionary from which to from.</param>
            <param name="dest">The destination dictionary to which to copy to.</param>
            <returns>The destination dictionary.</returns>
            <remarks>
            If <paramref name="dest"/> is <c>null</c>, no changes are made.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.SetIfNotNull``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Sets the given key-value pair if and only if the value is not null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.SetIfNotNull``2(System.Lazy{System.Collections.Generic.IDictionary{``0,``1}},``0,``1)">
            <summary>
            Sets the given key-value pair on this lazily initialized dictionary if and only if the value is not null.
            Does not initialize the dictionary otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.SetIfNotNullAndNotConflicting``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.String,System.String)">
            <summary>
            Adds the given key-value pair to this dictionary if the value is nonnull
            and does not conflict with a preexisting value for the same key.
            No-ops if the value is null.
            No-ops if the preexisting value for the same key is equal to the given value.
            Throws <see cref="T:System.ArgumentException"/> if the preexisting value for the same key is not equal to the given value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.SetIfNotConflicting``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.String,System.String)">
            <summary>
            Adds the given key-value pair to this dictionary if the value does not conflict with a preexisting value for the same key.
            No-ops if the preexisting value for the same key is equal to the given value.
            Throws <see cref="T:System.ArgumentException"/> if the preexisting value for the same key is not equal to the given value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.CheckForConflict``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.String,System.String,System.Boolean)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if this IDictionary contains a preexisting value for the same key which is not equal to the given key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.DictionaryExtensions.CheckForConflict``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1,System.String,System.String,System.Boolean)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if this IReadOnlyDictionary contains a preexisting value for the same key which is not equal to the given key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.EnumerableExtensions.AsEmptyIfNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/> if the supplied source is null.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to return when not null.</param>
            <returns>The source sequence, or a new empty one if source was null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.EnumerableExtensions.AsEmptyIfNull``1(``0)">
            <summary>
            If an enumerable is null, and it has a default constructor, return an empty collection by calling the
            default constructor.
            </summary>
            <typeparam name="TEnumerable">The type of the Enumerable</typeparam>
            <param name="source">A sequence of values to return when not null</param>
            <returns>The source sequence, or a new empty one if source was null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.EnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Splits a source <see cref="T:System.Collections.Generic.IEnumerable`1"/> into several <see cref="T:System.Collections.Generic.IList`1"/>s
            with a max size of batchSize.
            <remarks>Note that batchSize must be one or larger.</remarks>
            </summary>
            <param name="source">A sequence of values to split into smaller batches.</param>
            <param name="batchSize">The number of elements to place in each batch.</param>
            <returns>The original collection, split into batches.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.EnumerableExtensions.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Splits an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into two partitions, determined by the supplied predicate.  Those
            that follow the predicate are returned in the first, with the remaining elements in the second.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">The source enumerable to partition.</param>
            <param name="predicate">The predicate applied to filter the items into their partitions.</param>
            <returns>An object containing the matching and nonmatching results.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.EnumerableExtensions.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0}[])">
            <summary>
            Partitions items from a source IEnumerable into N+1 lists, where the first N lists are determened
            by the sequential check of the provided predicates, with the N+1 list containing those items
            which matched none of the provided predicates.
            </summary>
            <typeparam name="T">The type of the elements in source.</typeparam>
            <param name="source">The source containing the elements to partition</param>
            <param name="predicates">The predicates to determine which list the results end up in</param>
            <returns>An item containing the matching collections and a collection containing the non-matching items.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.EnumerableExtensions.Merge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Merges two sorted IEnumerables using the given comparison function which
            defines a total ordering of the data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.EnumerableExtensions.Merge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Merges two sorted IEnumerables using the given comparison function which
            defines a total ordering of the data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.EnumerableExtensions.MergeDistinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Merges two sorted IEnumerables using the given comparison function which defines a total ordering of the data.  Unlike Merge, this method requires that
            both IEnumerables contain distinct elements.  Likewise, the returned IEnumerable will only contain distinct elements.  If the same element appears in both inputs,
            it will appear only once in the output.
            
            Example:
                first:  [1, 3, 5]
                second: [4, 5, 7]
                result: [1, 3, 4, 5, 7]
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.EnumerableExtensions.MergeDistinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Merges two sorted IEnumerables using the given comparison function which defines a total ordering of the data.  Unlike Merge, this method requires that
            both IEnumerables contain distinct elements.  Likewise, the returned IEnumerable will only contain distinct elements.  If the same element appears in both inputs,
            it will appear only once in the output.
            
            Example:
                first:  [1, 3, 5]
                second: [4, 5, 7]
                result: [1, 3, 4, 5, 7]
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a HashSet based on the elements in <paramref name="source"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a HashSet with equality comparer <paramref name="comparer"/> based on the elements
            in <paramref name="source"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.EnumerableExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a HashSet based on the elements in <paramref name="source"/>, using transformation
            function <paramref name="selector"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.EnumerableExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a HashSet with equality comparer <paramref name="comparer"/> based on the elements
            in <paramref name="source"/>, using transformation function <paramref name="selector"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes the specified action to each of the items in the collection
            <typeparam name="T">The type of the elements in the collection.</typeparam>
            <param name="collection">The collection on which the action will be performed</param>
            <param name="action">The action to be performed</param>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.EnumerableExtensions.AddIf``1(System.Collections.Generic.List{``0},System.Boolean,``0)">
            <summary>
            Add the item to the List if the condition is satisfied
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
            <param name="list">The collection on which the action will be performed</param>
            <param name="condition">The Condition under which the item will be added</param>
            <param name="element">The element to be added</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.EnumerableExtensions.ToNameValueCollection(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Converts a collection of key-value string pairs to a NameValueCollection.
            </summary>
            <param name="pairs">The key-value string pairs.</param>
            <returns>The NameValueCollection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions.Expected(System.Exception,System.String)">
            <summary>
            Mark the exception as expected when caused by user input in the provided area.
            If the exception thrower is the same area as the caller, the exception will be treated as expected.
            However, in the case of a service to service call, then the exception will be treated as unexpected.
            ex: GitRefsController throws ArgumentException called directly by a user then the exception will be expected
                GitRefsController throws ArgumentException called by BuildDefinitionController then the exception will not be expected.
            </summary>
            <remarks>
            This allows for the use case "throw new ArgumentException().Expected(c_area)" 
            This will overwrite the expected area if called a second time. 
            This should not throw any exceptions as to avoid hiding the exception that was already caught. 
            See https://vsowiki.com/index.php?title=Whitelisting_Expected_Commands_and_Exceptions 
            </remarks> 
            <param name="area">The area name where the exception is expected. This will be compared against IVssRequestContext.ServiceName. Area should be non-empty</param>
            <returns><paramref name="ex"/> after setting the area</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions.ExpectedExceptionFilter(System.Exception,System.String)">
            <summary>
            Use this to "expect" an exception within the exception filtering syntax.
            ex:
                catch(ArgumentException ex) when (ex.ExpectedExceptionFilter(c_area))
            See <seealso cref="M:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions.Expected(System.Exception,System.String)"/>
            </summary>
            <returns>false always</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.ExpectedExceptionExtensions.IsExpected(System.Exception,System.String)">
            <summary>
            Determine if the exception is expected in the specified area.
            Case is ignored for the area comparison.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.Internal.HtmlUtility">
            <summary>
            Utility class for general Uri actions.  See LinkingUtilities for artifact uri specific methods.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.PropertyValidation.IsValidTypeString(System.String)">
            <summary>
            Used for deserialization checks. Makes sure that
            the type string presented is in the inclusion list
            of valid types for the property service
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.PropertyValidation.TryGetValidType(System.String,System.Type@)">
            <summary>
            Used for deserialization checks. Looks up the
            type string presented in the inclusion list
            of valid types for the property service and returns the Type object
            </summary>
            <param name="type"></param>
            <param name="result">Resulting type that maps to the type string</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.PropertyValidation.ValidatePropertyName(System.String)">
            <summary>
            Make sure the property name conforms to the requirements for a
            property name.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.PropertyValidation.ValidatePropertyValue(System.String,System.Object)">
            <summary>
            Make sure the property value is within the supported range of values
            for the type of the property specified.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.PropertyValidation.ValidatePropertyString(System.String,System.Int32,System.String)">
            <summary>
            Validation helper for validating all property strings.
            </summary>
            <param name="propertyString"></param>
            <param name="maxSize"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.PropertyValidation.CheckRange``1(``0,``0,``0,System.String,System.Type,System.String)">
            <summary>
            Verify that a propery is within the bounds of the specified range.
            </summary>
            <param name="propertyValue">The property value</param>
            <param name="minValue">The minimum value allowed</param>
            <param name="maxValue">The maximum value allowed</param>
            <param name="propertyName">The name of the property</param>
            <param name="containerType">The container of the property</param>
            <param name="topLevelParamName">The top level parameter name</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.PropertyValidation.ValidatePropertyFilter(System.String)">
            <summary>
            Make sure the property filter conforms to the requirements for a
            property filter.
            </summary>
            <param name="propertyNameFilter"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.Internal.UriUtility">
            <summary>
            Utility class for general Uri actions.  See LinkingUtilities for artifact uri specific methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.UnsafeUriSchemeList">
            <summary>
            List of URI schemes considered to be UNSAFE.  When a URL with this is scheme is navigated to, we will
            inform the user that it is unsafe and prevent navigation.
            </summary>
            <remarks>
            Note: the data scheme is not in this list nor is it in the safe list either, this is by design.
            See http://msdn.microsoft.com/en-us/library/ie/cc848897(v=vs.85).aspx for a reference of the data protocol.
            See http://www.gnucitizen.org/blog/bugs-in-the-browser-firefoxs-data-url-scheme-vulnerability/ for attacks on the data protocol.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.SafeUriSchemeList">
            <summary>
            List of URI schemes considered to be SAFE. When a URL with this scheme is navigated to (e.g. in WIT client or
            web access), we will not warn the user about it as they are trusted. For any other URL not in this list, we will
            warn the user about it!
            </summary>
            <remarks>
            "x-mvwit" is here as it is used and saved to work item history rich HTML changes. It is used to reference other work
            items in the list. If we remove it from this list, it will not be a navigatable link in e.g. Web Access.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.AbsoluteUriStringComparer">
            <summary>
            string comparer for uri, is not case sensitive and does not care about trailing '/'
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.UrlPathIgnoreSeparatorsComparer">
            <summary>
            Compares URL Paths ignoring any starting or ending path separators.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.IsUriUnsafe(System.Uri)">
            <remarks>
            A URL is considered unsafe IF:
            * It is not an absolute URI (e.g. a relative file.html)
            * It's scheme is part of the unsafe scheme list.
            * It is a file:// URI pointing to a local file, e.g. file://C:\Windows\System32\notepad.exe
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.IsUriSafe(System.Uri)">
            <summary>
            Checks if a URL is considered safe. Users will not e.g. be prompted with a warning when navigating
            to these URLs.
            </summary>
            <param name="uri">A url.</param>
            <remarks>
            A URL is approved IF:
            * It is an absolute URI.
            * It's scheme is part of the safe scheme list.
            * It is NOT a file:// URI pointing to a local file, e.g. file://C:\Windows\System32\notepad.exe
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.IsUriLocalFile(System.Uri)">
            <summary>
            Checks if a URL is pointing to a local file (not on a network share or host), based on the presence of a host/authority in the URL.
            It attempts to do no comparison based on the host name.
            </summary>
            <param name="uri">A url.</param>
            <returns><c>true</c> if the URL points to a file on the local computer.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.GetInvariantAbsoluteUri(System.Uri)">
            <summary>
            returns the absolute Uri but in a consistent way such that the presence of a trailing slash doesnt affect the returned string, 
            also converts the uri to lowerInvariant
            </summary>
            <param name="uri">Uri, cannot be null, must be Absolute</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.Combine(System.String,System.String,System.Boolean)">
            <summary>
            Joins a URI and a relativePath with a single forward slash.  Duplicate slashes at the junction point are removed.
            </summary>
            <param name="baseUri">The base Uri.  Must be an absolute Uri. The last segment of the Uri path (if any) is considered a virtual directory and not removed, even if it does not have a trailing forward slash.</param>
            <param name="relativePath">The relative path to append to the Uri.</param>
            <param name="treatAbsolutePathAsRelative">If true, any leading forward slashes on the relative path argument are discarded.</param>
            <returns>The base Uri with the relativePath appended to it.</returns>
            <remarks> 
            This is intended to be an alternative the Uri constructor, which can remove several path segments from your arguments.  For example:
            
            new Uri(new Uri("http://localhost/abc/efg/"), "/Hello/World") returns http://localhost/Hello/World ("/abc/efg/" removed due to absolute path argument)
            new Uri(new Uri("http://localhost/dir1/dir2"), "hi.txt") returns http://localhost/dir1/hi.txt ("dir2" removed due to lack of trailing slash)
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.Combine(System.Uri,System.String,System.Boolean)">
            <summary>
            Joins a URI and a relativePath with a single forward slash.  Duplicate slashes at the junction point are removed.
            </summary>
            <param name="baseUri">The base Uri.  Must be an absolute Uri. The last segment of the Uri path (if any) is considered a virtual directory and not removed, even if it does not have a trailing forward slash.</param>
            <param name="relativePath">The relative path to append to the Uri.</param>
            <param name="treatAbsolutePathAsRelative">If true, any leading forward slashes on the relative path argument are discarded.</param>
            <returns>The base Uri with the relativePath appended to it.</returns>
            <remarks> 
            This is intended to be an alternative the Uri constructor, which can remove several path segments from your arguments.  For example:
            
            new Uri(new Uri("http://localhost/abc/efg/"), "/Hello/World") returns http://localhost/Hello/World ("/abc/efg/" removed due to absolute path argument)
            new Uri(new Uri("http://localhost/dir1/dir2"), "hi.txt") returns http://localhost/dir1/hi.txt ("dir2" removed due to lack of trailing slash)
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.CombinePath(System.String,System.String)">
            <summary>
            Combine two paths using "/" instead of "\" like Path.Combine does
            </summary>
            <param name="part1">the first part of the path</param>
            <param name="part2">the second part of the path</param>
            <returns>combined path</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.IsUriHttp(System.Uri)">
            <summary>
            Returns 'true' if the specified uri is http or https, 'false' otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.CheckUriIsHttp(System.Uri)">
            <summary>
            Check that the Uri has http or https as its scheme.  We don't want anyone pointing at file://virus.exe.
            </summary>
            <param name="uri">Uri to be checked.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.CheckUriIsHttp(System.Uri,System.Boolean)">
            <summary>
            Check that the Uri has http or https as its scheme.  We don't want anyone pointing at file://virus.exe.
            </summary>
            <param name="uri">Uri to be checked.</param>
            <param name="allowPathAndQuery">Allow sub path and query string if true.  If false, the URL must be authority only.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.CheckUriIsAbsoluteAndHttp(System.Uri)">
            <summary>
            Check that a given Uri is an absolute Uri.  Also, ensure its is http or https.
            </summary>
            <param name="uri">Uri to be checked.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.CheckUriIsAbsoluteAndHttp(System.Uri,System.Boolean)">
            <summary>
            Check that a given Uri is an absolute Uri.  Also, ensure its is http or https.
            </summary>
            <param name="uri">Uri to be checked.</param>
            <param name="allowPathAndQuery">Allow sub path and query string if true.  If false, the URL must be authority only.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.CheckRelativePath(System.String)">
            <summary>
            Check the relative path to ensure it is valid.
            </summary>
            <param name="relativePath"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.GetDavUncFromHttpPath(System.String)">
            <summary>
            Given an HTTP URI, returns the UNC URI as known to the Windows Client WebDav Redirector.
            The UNC path is in the following form: 
            \\server[@SSL][@port][\path]
            This function is equivalent to the native API by the same name on Vista/2008+, but provided here for compatibility with XP/2003.
            </summary>
            <param name="httppath">Well-formed http or https path.  Alternate ports are supported.</param>
            <returns>UNC path</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.TryGetHttpUriFromDavUncPath(System.String)">
            <summary>
            Given a input path that might correspond to a UNC path known to the Windows Client WebDav Redirector,
            returns the converted UNC path to an HTTP (or HTTPS) url.
            </summary>
            <param name="uncPath"></param>
            <returns>
            The UNC path is in the following form: 
            \\server[@SSL][@port][\path]
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.IsSameMachine(System.String,System.String)">
            <summary>
            Determine if two hostnames correspond to the same machine.
            </summary>
            <param name="hostname1">First hostname</param>
            <param name="hostname2">Second hostname</param>
            <returns>True, if same machine.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.IsSubdomainOf(System.String,System.String)">
            <summary>
            Returns true if supplied domain is equal to or is a sub-domain of parentDomain
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.GetAbsoluteUriFromString(System.String)">
            <summary>
            Verifies that the specified uri is valid or can be made into a valid http address by prepending 'http://' to it.
            If the uri is not valid an exception is thrown.
            </summary>
            <param name="uriString"></param>
            <returns>The validated uri, including 'http://' if it was prepended to make it valid.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.GetUriFromString(System.String)">
            <summary>
            Creates a URI from a string.  Adds http to the front if its not there.
            Requires that the Uri scheme be http or https.
            </summary>
            <param name="val">String to convert to an absolute uri.</param>
            <returns>The validated uri, including 'http://' if it was prepended to make it valid, or null if the uri is not valid.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.TryCreateAbsoluteUri(System.String,System.Boolean,System.Uri@)">
            <summary>
            Creates an absolute URI from a string.  Adds http to the front if its not there.
            If 'requireHttpScheme' is 'true' this method will return false if the url
            doesn't start with http or https.
            </summary>
            <param name="val">String to convert to an absolute uri.</param>
            <param name="requireHttpScheme">'true' to require that the scheme is http or https, 'false' to allow any scheme.</param>
            <param name="uri"></param>
            <returns>Either the uri or 'null' if it is not valid.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.EnsureStartsWithPathSeparator(System.String)">
            <summary>
            Ensures that a relative path starts with a forward slash.
            </summary>
            <param name="relativePath">The relative path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.EnsureEndsWithPathSeparator(System.String)">
            <summary>
            Ensures that a relative path ends with a forward slash.
            </summary>
            <param name="relativePath">The relative path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.TrimStartingPathSeparator(System.String)">
            <summary>
            Trims any starting slashes from the input path.
            </summary>
            <param name="relativePath">The relative path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.TrimEndingPathSeparator(System.String)">
            <summary>
            Trims any ending slashes from the input path.
            </summary>
            <param name="relativePath">The relative path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.TrimPathSeparators(System.String)">
            <summary>
            Trims any starting or ending slashes from the input path.
            </summary>
            <param name="relativePath">The relative path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.UriUtility.NormalizePathSeparators(System.Uri)">
            <summary>
            Correct URI content to remove excess(duplicate) separators in path section.
            </summary>        
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.Internal.XmlUtility.SecureReaderSettings">
             <summary>
             Returns a single shared instance of secured XML reader settings.
             </summary>
             <remarks>
             The main configuration that is set is to "Harden or Disable XML Entity Resolution",
             which disallows resolving entities during XML parsing.
            
             DO NOT USE this method if you need to resolved XML DTD entities.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.XmlUtility.ArrayOfObjectToXml``1(System.Xml.XmlWriter,``0[],System.String,System.String,System.Boolean,System.Boolean,System.Action{System.Xml.XmlWriter,System.String,``0})">
            <summary>
            Writes an array of objects to xml using the provided callback function to serialize individual objects
            within the array.
            </summary>
            <typeparam name="T">The type of objects contained in the array</typeparam>
            <param name="writer">The xml writer for serialization</param>
            <param name="array">The array to be serialized</param>
            <param name="arrayName">The name of the array root element</param>
            <param name="arrayElementName">The name of the array elements</param>
            <param name="inline">True if the array elements should be written inline, or false to create the root node</param>
            <param name="allowEmptyArrays">True if an empty array should be serialized, false to omit empty arrays</param>
            <param name="objectToXmlElement">A callback function for serializing an individual array element</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.XmlUtility.EnumerableOfObjectToXml``1(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.Boolean,System.Boolean,System.Action{System.Xml.XmlWriter,System.String,``0})">
            <summary>
            Writes an <c>System.Collections.Generic.IEnumerable&lt;T&gt;</c> of objects to xml using the provided
            callback function to serialize individual objects.
            </summary>
            <typeparam name="T">The type of objects contained in the array</typeparam>
            <param name="writer">The xml writer for serialization</param>
            <param name="array">The array to be serialized</param>
            <param name="arrayName">The name of the array root element</param>
            <param name="arrayElementName">The name of the array elements</param>
            <param name="inline">True if the array elements should be written inline, or false to create the root node</param>
            <param name="allowEmptyArrays">True if an empty array should be serialized, false to omit empty arrays</param>
            <param name="objectToXmlElement">A callback function for serializing an individual array element</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.XmlUtility.GetCachedString(System.String)">
             <summary>
             Strings are often duplicated in the XML returned by the server. To
             reduce the number of identical String instances, we keep a small
             cache of the last N strings to be deserialized off the wire.
            
             Send your deserialized strings through this method. If they match a
             recently deserialized string, the cached value will be returned and
             your deserialized string will be left in Gen0 for easy collection.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.Internal.XmlElementWriterUtility">
            <summary>
            XML element writer class that automatically makes the closing WriteEndElement call
            during dispose.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.XmlElementWriterUtility.#ctor(System.String,System.Xml.XmlWriter)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.XmlElementWriterUtility.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.#cctor">
            Creates the resource manager instance.
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.Get(System.String)">
            Returns a localized string given a resource string name.
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.GetInt(System.String)">
            Returns a localized integer given a resource string name.
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.GetBool(System.String)">
            Returns a localized string given a resource string name.
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.Format(System.String,System.Object[])">
            A little helper function to alleviate some typing associated with loading resources and
            formatting the strings.  In DEBUG builds, it also asserts that the number of format
            arguments and the length of args match.
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.EmptyCollectionNotAllowed">
            <summary>
            The collection must contain at least one element.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.EmptyStringNotAllowed">
            <summary>
            The string must have at least one character.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.StringLengthNotAllowed(System.Object,System.Object,System.Object)">
            <summary>
            Length of &apos;{0}&apos; is invalid. It must be between {1} and {2} characters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.EmptyGuidNotAllowed(System.Object)">
            <summary>
            The guid specified for parameter {0} must not be Guid.Empty.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.InvalidPropertyName(System.Object)">
            <summary>
            TF400458: Invalid property name: &apos;{0}&apos;. Property names cannot contain leading or trailing whitespace.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.InvalidPropertyValueSize(System.Object,System.Object,System.Object)">
            <summary>
            TF20509: The value of property &apos;{0}&apos; exceeds the maximum size allowed. &apos;{1}&apos; values must not exceed &apos;{2}&apos; bytes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.DateTimeKindMustBeSpecified">
            <summary>
            The DateTimeKind (Local, UTC) must be specified for DateTime arguments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.PropertyArgumentExceededMaximumSizeAllowed(System.Object,System.Object)">
            <summary>
            TF20508: The argument &apos;{0}&apos; is too long. It must not contain more than &apos;{1}&apos; characters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.InvalidStringPropertyValueNullAllowed(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            &quot;{0}&quot; is an invalid value for the {1} of a {2}. The text must be null or between {3} and {4} characters long.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.InvalidStringPropertyValueNullForbidden(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            &quot;{0}&quot; is an invalid value for the {1} of a {2}. The text must be between {3} and {4} characters long and cannot be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ValueTypeOutOfRange(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            {0} is out of range for the {1} of a {2}. The value must be between {3} and {4}.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.VssPropertyValueOutOfRange(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Property &apos;{0}&apos; with value &apos;{1}&apos; is out of range for the Properties service. The value must be between {2} and {3}.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.VssInvalidUnicodeCharacter(System.Object)">
            <summary>
            TF20507: The string argument contains a character that is not valid:&apos;u{0:X4}&apos;. Correct the argument, and then try the operation again.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorReadingFile(System.Object,System.Object)">
            <summary>
            Error reading file: {0} ({1}).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.IllegalBase64String">
            <summary>
            Illegal attempt to decode a malformed Base64-encoded string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.CannotPromptIfNonInteractive">
            <summary>
            The prompt option is invalid because the process is not interactive.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.StringContainsInvalidCharacters(System.Object)">
            <summary>
            The string argument contains a character that is not valid:&apos;{0}&apos;. Correct the argument, and then try the operation again.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.DoubleValueOutOfRange(System.Object,System.Object)">
            <summary>
            Property &apos;{0}&apos; with value &apos;{1}&apos; is out of range for the Azure DevOps Properties service. Double values must be 0, within -1.79E+308 to -2.23E-308, or within 2.23E-308 to 1.79E+308.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.HttpRequestTimeout(System.Object)">
            <summary>
            The HTTP request timed out after {0}.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.VssUnauthorized(System.Object)">
            <summary>
            VS30063: You are not authorized to access {0}.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.VssUnauthorizedUnknownServer">
            <summary>
            VS30064: You are not authorized to access the server.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.XmlAttributeEmpty(System.Object,System.Object)">
            <summary>
            The attribute &apos;{0}&apos; on node &apos;{1}&apos; cannot be empty
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.XmlAttributeNull(System.Object,System.Object)">
            <summary>
            The node &apos;{0}&apos; must only have the attribute &apos;{1}&apos;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.XmlNodeEmpty(System.Object,System.Object)">
            <summary>
            The xml node &apos;{0}&apos; under node &apos;{1}&apos; cannot be empty
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.XmlNodeMissing(System.Object,System.Object)">
            <summary>
            The mandatory xml node &apos;{0}&apos; is missing under &apos;{1}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.VssUnsupportedPropertyValueType(System.Object,System.Object)">
            <summary>
            Property &apos;{0}&apos; of type &apos;{1}&apos; is not supported by the Properties service. Convert the value to an Int32, DateTime, Double, String or Byte array for storage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorDependencyOptionNotProvided(System.Object,System.Object)">
            <summary>
            Option &apos;{0}&apos; requires that option &apos;{1}&apos; be provided as well
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorInvalidEnumValueTypeConversion(System.Object)">
            <summary>
            Invalid enumeration data type &apos;{0}&apos;.  The type must be a valid enumeration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorInvalidResponseFileOption(System.Object)">
            <summary>
            The value provided {0} does not represent a valid response file option.  A response file option must be a valid path that begins with the &apos;@&apos; sign (ex:  @C:\Folder\ResponseFile.txt)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorInvalidValueTypeConversion(System.Object,System.Object)">
            <summary>
            The value &apos;{0}&apos; is not a valid value for argument of type &apos;{1}&apos;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOptionArgumentsNotDefined">
            <summary>
            Option arguments are not defined
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOptionMultiplesNotAllowed(System.Object)">
            <summary>
            Option &apos;{0}&apos; does not allow multiples/duplicates
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOptionMustExist(System.Object)">
            <summary>
            Option &apos;{0}&apos; is required
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOptionNotRecognized(System.Object)">
            <summary>
            Invalid option usage.  Option &apos;{0}&apos; is not a recognized argument.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOptionRequired(System.Object)">
            <summary>
            Option &apos;{0}&apos; is required.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOptionRequiresValue(System.Object)">
            <summary>
            Option &apos;{0}&apos; requires a value
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOptionRunsDoNotSupportValues">
            <summary>
            Option runs do not support values
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOptionsAreMutuallyExclusive(System.Object)">
            <summary>
            The following options are mutually exclusive.  Only 1 may be defined at a time with respect to the others:  {0}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOptionsAreMutuallyInclusive(System.Object)">
            <summary>
            The following options are mutually inclusive.  If one or more are defined, then all must be defined:  {0}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOptionValueConverterNotFound(System.Object)">
            <summary>
            Option value conversion failed.  A value converter to handle converting arguments of type &apos;{0}&apos; was not found in the set of converters provided.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOptionValueNotAllowed(System.Object)">
            <summary>
            Option &apos;{0}&apos; does not require or allow a value
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOptionValuesDoNotMatchExpected(System.Object,System.Object)">
            <summary>
            The value for option {0} does not match any of the expected values:  {1}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorPositionalArgumentsNotAllowed">
            <summary>
            Positional arguments are not allowed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorRequiredOptionDoesNotExist(System.Object)">
            <summary>
            Option &apos;{0}&apos; is a required option but was not provided
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorResponseFileNotFound(System.Object)">
            <summary>
            Response file not found at path &apos;{0}&apos;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorResponseFileOptionNotSupported">
            <summary>
            A response file option was provided, but the parser does not support the usage of response files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorValueCannotBeConvertedToEnum(System.Object,System.Object)">
            <summary>
            The value &apos;{0}&apos; cannot be converted to a valid &apos;{1}&apos; enumeration value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.OperationHandlerNotFound(System.Object)">
            <summary>
            Operation handler not found for the set of arguments provided:  {0}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorInvalidValueConverterOrNoDefaultFound(System.Object)">
            <summary>
            A valid value converter was not defined for the class member &apos;{0}&apos; option definition and no default value converter could be found.  Define the Converter property on the option to supply the value converter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOperationHandlerConstructorNotFound(System.Object)">
            <summary>
            Operation handler creation failed.  A valid constructor taking the parameters provided was not found on handler of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOperationHandlerNotFound">
            <summary>
            Operation handler not found.  An operation mode handler was not found for the arguments provided.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorDuplicateDefaultOperationModeHandlerFound">
            <summary>
            Duplicate default operation handler found.  A distinct operation handler could not be determined because no handler matched the mode provided on the command-line and more than 1 handler marked as default was found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorDuplicateOperationModeHandlerFound">
            <summary>
            Duplicate operation handler found.  A distinct operation handler could not be determined because more than 1 matched the operation mode provided on the command-line.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorInvalidValueConverterDataType(System.Object,System.Object)">
            <summary>
            Invalid value converter data type.  The type {0} is not a valid {1} implementation.  Value converters must implement this interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorMembersContainingPositionalsRequireCollection">
            <summary>
            Invalid backing field or property for positional arguments.  Class members containing the values for positional arguments must be a collection type having an &apos;Add&apos; method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorDuplicatePositionalOptionAttributes(System.Object)">
            <summary>
            Duplicate {0} attribute definition.  Only a single member (including inherited members) may be decorated with a {0}.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOptionsAllowingMultiplesRequireCollection(System.Object)">
            <summary>
            Invalid backing field or property for option &apos;{0}&apos;.  Class members containing the values for options that allow multiples must be a collection type having an &apos;Add&apos; method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOptionNotFound(System.Object)">
            <summary>
            Option not found or is case-sensitive:  &apos;{0}&apos;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ErrorOptionFlagRequiresBooleanMember(System.Object)">
            <summary>
            Option &apos;{0}&apos; must have a boolean member type.  Options that do not take arguments (i.e. used as flags, ex: /v /f) must have a System.Boolean member type.  This member is set to true when the flag exists and false if not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ContentIdCalculationBlockSizeError(System.Object)">
            <summary>
            All blocks except the final block must be {0} bytes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.BasicAuthenticationRequiresSsl">
            <summary>
            Basic authentication requires a secure connection to the server.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ValueOutOfRange(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The value {0} is out of range of valid values for parameter {1}. Valid values must be between {2} and {3}.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.OutOfRange(System.Object)">
            <summary>
            The value {0} is outside of the allowed range.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ValueMustBeGreaterThanZero">
            <summary>
            The value must be greater than zero.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.NullValueNecessary(System.Object)">
            <summary>
            The value specified for the following variable must be null: {0}.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.LowercaseStringRequired(System.Object)">
            <summary>
            The string argument &apos;{0}&apos; must only consist of lowercase characters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.UppercaseStringRequired(System.Object)">
            <summary>
            The string argument &apos;{0}&apos; must only consist of uppercase characters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.EmptyArrayNotAllowed">
            <summary>
            The array must contain at least one element.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.EmptyOrWhiteSpaceStringNotAllowed">
            <summary>
            The string must have at least one non-white-space character.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.StringLengthNotMatch(System.Object)">
            <summary>
            Length of the string does not match with &apos;{0}&apos;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.BothStringsCannotBeNull(System.Object,System.Object)">
            <summary>
            One of the following values must not be null or String.Empty: {0}, {1}.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.WhiteSpaceNotAllowed">
            <summary>
            The string cannot contain any whitespace characters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.UnexpectedType(System.Object,System.Object)">
            <summary>
            Expecting &apos;{0}&apos; to be of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.InvalidEmailAddressError">
            <summary>
            The supplied email address is invalid.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.AbsoluteVirtualPathNotAllowed(System.Object)">
            <summary>
            An absolute virtual path is not allowed. Remove the leading slash: {0}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.UriUtility_AbsoluteUriRequired(System.Object)">
            <summary>
            TF205013: The following URL is not valid: {0}. You must specify an absolute path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.UriUtility_RelativePathInvalid(System.Object)">
            <summary>
            TF205014: The following relative path is not valid: {0}. It must be both well formed and relative. It might be an absolute path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.UriUtility_UriNotAllowed(System.Object)">
            <summary>
            TF205012: The following URL is not valid: {0}. It must begin with http or https.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.UriUtility_MustBeAuthorityOnlyUri(System.Object,System.Object)">
            <summary>
            TF253018: The following URL is not valid: {0}. Try removing any relative path information from the URL (for example, {1}).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.UrlNotValid">
            <summary>
            TF249010: The URL that you specified is not valid. The URL must begin with either HTTP or HTTPS and be a valid address.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.MalformedArtifactId(System.Object)">
            <summary>
            The artifact is not understood by this application. Either the artifact supplied is invalid or the application doesn&apos;t have the required software updates. Artifact Id: {0}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.MalformedUri(System.Object)">
            <summary>
            Malformed Artifact URI: {0}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.MalformedUrl(System.Object)">
            <summary>
            Malformed Artifact URL: {0}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.NullArtifactUrl">
            <summary>
            Null Artifact Url
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.FailureGetArtifact">
            <summary>
            Unable to get artifacts from tool.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.NullArtifactUriRoot">
            <summary>
            ArtifactUriRoot is Null
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.UnknownTypeForSerialization(System.Object)">
            <summary>
            Unknown object type &apos;{0}&apos; for serialization.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.StringContainsIllegalChars">
            <summary>
            The value contains characters that are not allowed (control characters, 0xFFFE, or 0xFFFF). Please remove those characters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ValueEqualsToInfinity">
            <summary>
            The value must be a finite value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.SingleBitRequired(System.Object)">
            <summary>
            The value {0} must contain a single bit flag.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.InvalidEnumArgument(System.Object,System.Object,System.Object)">
            <summary>
            The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ConflictingPathSeparatorForVssFileStorage(System.Object,System.Object,System.Object)">
            <summary>
            There is a conflict with the path separator character &apos;{0}&apos; requested for VssFileStorage at file path: {1}  A previous instance was created with a path separator of &apos;{2}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.ConflictingStringComparerForVssFileStorage(System.Object,System.Object,System.Object)">
            <summary>
            There is a conflict with the string comparer &apos;{0}&apos; requested for VssFileStorage at file path: {1}  A previous instance was created with a string comparer of &apos;{2}&apos;.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.InvalidClientStoragePath(System.Object,System.Object)">
            <summary>
            The storage path specified is invalid: &apos;{0}&apos;  This storage path cannot be null or empty. It should begin with the &apos;{1}&apos; path separator character, and have no empty path segments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.CollectionSizeLimitExceeded(System.Object,System.Object)">
            <summary>
            Collection &apos;{0}&apos; can have maximum &apos;{1}&apos; elements.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.DefaultValueNotAllowed(System.Object)">
            <summary>
            The value {0} must not be set to the default.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.NullElementNotAllowedInCollection">
            <summary>
            Null elements are not allowed in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.InvalidUriError(System.Object)">
             <summary>
             0: URI kind, can be one of Absolute, Relative or RelativeOrAbsolute
            
             Supplied URI is invalid. The URI should match {0} URI kind format.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.SubjectDescriptorEmpty(System.Object)">
            <summary>
            The subject descriptor specified for parameter {0} must not be empty.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Internal.CommonResources.EUIILeakException(System.Object)">
            <summary>
            Event payload contains EUII. Message: {0}
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.Utility.LookupGenerator">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Services.Common.Utility.LookupGenerator"/> is a collection of functions to create 
            lookup delegates, storing any relevant state via closure.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.Utility.LookupGenerator.CreateLookupWithDefault``2(``1,System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Creates a lookup function using closure encapsulation of an <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>
            to handle the lookup table.  If the requested key is not found, the lookup will return the provided
            default.
            </summary>
            <typeparam name="T">The key of the lookup</typeparam>
            <typeparam name="TOut">The value stored in the lookup table</typeparam>
            <param name="default">A default value returned if the key is not found</param>
            <param name="dictionary">The lookup table, stored in the closure of the lookup function</param>
            <returns>A lookup function which returns the value at the requested key, or a default value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.LinkingUtilities.GetArtifactUri(System.String)">
            <summary>
            Returns uri for a given url
            url is expected to be in the following format 
            http(s)://&lt;tooldisplayserver&gt;/&lt;toolname&gt;/&lt;artifacttype&gt;.aspx/artifactMoniker=&lt;artifactId&gt;
            </summary>
            <param name="artifactUrl"></param>
            <returns>artifactUri</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.LinkingUtilities.GetArtifactUrl(System.String,Microsoft.VisualStudio.Services.Common.ArtifactId,System.String)">
            <summary>
            Get Url for artifact for addressability in links.
            This will construct the artifact Url using 
            the server Url supplied.
            </summary>
            <param name="artifactDisplayUrl">artifactDisplayUrl from regristry DB extended attribute</param>
            <param name="artId">ArtifactId.</param>
            <param name="serverUrl">server Url.</param>
            <returns>ArtifactUrlExternal</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.LinkingUtilities.GetServerUrl(System.Uri)">
            <summary>
            The server Url for external access
            </summary>
            <param name="serverUri">server Uri</param>
            <returns>Server Url</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.LongPathUtility">
            <summary>
            Provides path normalization/expansion for absolute, relative and UNC-style paths
            and supports paths that contain more than 248 characters.
            </summary>
            <remarks>
            This utility class can be used in place of the .NET Path and Directory classes
            that throw System.IO.PathTooLongException when paths are longer than 248 characters
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.LongPathUtility.EnumerateDirectories(System.String,System.Boolean)">
            <summary>
            Returns a list of directory names under the path specified, and optionally all subdirectories
            </summary>
            <param name="path">The directory to search</param>
            <param name="recursiveSearch">Specifies whether the search operation should include only the currect directory or all subdirectories</param>
            <returns>A list of all subdirectories</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.LongPathUtility.EnumerateFiles(System.String,System.Boolean)">
            <summary>
            Returns a list of file names under the path specified, and optionally within all subdirectories.
            </summary>
            <param name="path">The directory to search</param>
            <param name="recursiveSearch">Specifies whether the search operation should include only the current directory or all subdirectories</param>
            <returns>
            A list of full file names(including path) contained in the directory specified that match the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.LongPathUtility.EnumerateFiles(System.String,System.String,System.Boolean)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path,
            and optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search</param>
            <param name="matchPattern">The search string to match against the names of the files</param>
            <param name="recursiveSearch">Specifies whether the search operation should include only the current directory or all subdirectories</param>
            <returns>
            A list of full file names(including path) contained in the directory specified (and subdirectories optionally) that match the specified pattern.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.LongPathUtility.FileExists(System.String)">
            <summary>
            Returns true/false whether the file exists.  This method inspects the
            file system attributes and supports files without extensions (ex:  DIRS, Sources).  This method
            supports file paths that are longer than 260 characters.
            </summary>
            <param name="filePath">The file path to inspect</param>
            <returns>
            True if the file exists or false if not
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.LongPathUtility.DirectoryExists(System.String)">
            <summary>
            Returns true/false whether the directory exists.  This method inspects the
            file system attributes and supports files without extensions (ex:  DIRS, Sources).  This method
            supports file paths that are longer than 260 characters.
            </summary>
            <param name="directoryPath">The file path to inspect</param>
            <returns>
            True if the directory exists or false if not
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.LongPathUtility.GetFullNormalizedPath(System.String)">
            <summary>
            Returns the fully expanded/normalized path.  This method supports paths that are
            longer than 248 characters.
            </summary>
            <param name="path">The file or directory path</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.LongPathUtility.IsAbsolutePath(System.String)">
            <summary>
            Determines whether the specified path is an absolute path or not.
            </summary>
            <param name="path">The path to be tested.</param>
            <returns>
              <c>true</c> if the path is absolute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.LongPathUtility.NativeMethods">
            <summary>
            Kernel32.dll native interop methods for use with utility file/path parsing
            operations
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.MD5Utility.TryCreateMD5Provider">
            <summary>
            Creates an MD5 crypto service provider. Returns null if FIPS algorithm policy is enabled.
            </summary>
            <returns>An MD5 provider or null if FIPS prevents using it.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.PartitionResults`1">
            <summary>
            Contains results from two-way variant of EnuemrableExtensions.Partition()
            </summary>
            <typeparam name="T">The type of the elements in the contained lists.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.MultiPartitionResults`1">
            <summary>
            Contains results from multi-partitioning variant of EnuemrableExtensions.Partition()
            </summary>
            <typeparam name="T">The type of the elements in the contained lists.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.PathUtility.Combine(System.String,System.String)">
            <summary>
            Replacement for Path.Combine.
            For URL please use UrlUtility.CombineUrl
            </summary>
            <param name="path1">The first half of the path.</param>
            <param name="path2">The second half of the path.</param>
            <returns>The concatenated string with and leading slashes or 
            tildes removed from the second string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.PrimitiveExtensions.ConvertToHex(System.String)">
            <summary>
            Converts base64 represented value into hex string representation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.SecretUtility">
            <summary>
            Utility for masking common secret patterns
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.SecretUtility.PasswordMask">
            <summary>
            The string to use to replace secrets when throwing exceptions, logging 
            or otherwise risking exposure
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.SecretUtility.SecretMask">
            <summary>
            The string used to mask newer secrets
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.SecretUtility.ContainsUnmaskedSecret(System.String)">
            <summary>
            Whether this string contains an unmasked secret
            </summary>
            <param name="message">The message to check</param>
            <returns>True if a secret this class supports was found</returns>
            <remarks>This implementation is as least as expensive as a ScrubSecrets call</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.SecretUtility.ContainsUnmaskedSecret(System.String,System.Boolean@)">
            <summary>
            Whether this string contains an unmasked secret
            </summary>
            <param name="message">The message to check</param>
            <param name="onlyJwtsFound">True if a secret was found and only jwts were found</param>
            <returns>True if a message this class supports was found</returns>
            <remarks>This method is a temporary workaround and should be removed in M136
            This implementation is as least as expensive as a ScrubSecrets call</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.SecretUtility.ScrubSecrets(System.String,System.Boolean)">
            <summary>
            Scrub a message for any secrets(passwords, tokens) in known formats
            This method is called to scrub exception messages and traces to prevent any secrets 
            from being leaked.
            </summary>
            <param name="message">The message to verify for secret data.</param>
            <param name="assertOnDetection">When true, if a message contains a 
            secret in a known format the method will debug assert. Default = true.</param>
            <returns>The message with any detected secrets masked</returns>
            <remarks>This only does best effort pattern matching for a set of known patterns</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.SecretUtility.c_jwtTypToken">
            <remarks>
            {"typ":" // eyJ0eXAiOi
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.SecretUtility.c_jwtAlgToken">
            <remarks>
            {"alg":" // eyJhbGciOi
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.SecretUtility.c_jwtX5tToken">
            <remarks>
            {"x5t":" // eyJ4NXQiOi
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.SecretUtility.c_jwtKidToken">
            <remarks>
            {"kid":" // eyJraWQiOi
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.SecureCompare.TimeInvariantEquals(System.Byte[],System.Byte[])">
             <summary>
             Compare two byte arrays for byte-by-byte equality.
             If both arrays are the same length, the running time of this routine will not vary with the number of equal bytes between the two.
             </summary>
             <param name="lhs">A byte array (non-null)</param>
             <param name="rhs">A byte array (non-null)</param>
             <remarks>
             Checking secret values using built-in equality operators is insecure.
             Operations like `==` on strings will stop the comparison when the first unmatched character is encountered.
             When checking secret values from an untrusted source that we use for authentication, we must be careful
             not to stop the comparison early for incorrect values.
             If we do, an attacker can send a large volume of requests and use statistical methods to infer the secret value byte-by-byte.
            
             This method is intended to be used with arrays of the same length -- for example, two hashes from the same SHA algorithm.
             Comparing strings of unequal length can leak length information to an attacker.
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.StreamParser">
            <summary>
            Simple helper class used to break up a stream into smaller streams
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.StreamParser.Length">
            <summary>
            Returns total length of file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.StreamParser.GetNextStream">
            <summary>
            returns the next substream
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.SubStream">
            <summary>
            Streams a subsection of a larger stream
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.SubStream.StartingPostionOnOuterStream">
            <summary>
            Postion in larger stream where this substream starts
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.SubStream.EndingPostionOnOuterStream">
            <summary>
            Postion in larger stream where this substream ends
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.StreamUtility.Copy(System.Data.IDataReader,System.IO.TextWriter,System.String,System.Boolean,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Copies the contents of the reader to the output.
            Column data (and header names if included) are separated by delimiter.
            </summary>
            <param name="reader">The Reader to read data from</param>
            <param name="output">where to write the output to</param>
            <param name="delimiter">used to separate row data (and the column headers)</param>
            <param name="includeHeader">by default headers are included, setting this to false will exclude them</param>
            <param name="headerPrefix">optional string to prefix the headers with</param>
            <param name="rowPrefix">optional string to prefix each row with</param>
            <param name="max">when null all data from reader is copied, when non-null only that many rows are copied</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Replaces occurrences of <paramref name="oldValue"/> found in <paramref name="input"/> with 
            <paramref name="newValue"/>.
            </summary>
            <param name="input">The input value which should be replaced</param>
            <param name="oldValue">The pattern to replace</param>
            <param name="newValue">The replacement value to use</param>
            <param name="comparison">The comparison operator to use when searching for <paramref name="oldValue"/></param>
            <returns>A <c>String</c> with occurrences of <paramref name="oldValue"/> replaced with <paramref name="newValue"/></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TypeExtensionMethods.IsAssignableOrConvertibleFrom(System.Type,System.Object)">
            <summary>
            Determins if a value is assignable to the requested type.  It goes
            the extra step beyond IsAssignableFrom in that it also checks for
            IConvertible and attempts to convert the value.
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TypeExtensionMethods.IsOfType(System.Type,System.Type)">
            <summary>
            Determines if the type is of the type t.
            </summary>
            <param name="type">The type to check.</param>
            <param name="t">The type to compare to.</param>
            <returns>True if of the same type, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TypeExtensionMethods.IsDictionary(System.Type)">
            <summary>
            Determines if the type is a Dictionary.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if a dictionary, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TypeExtensionMethods.IsList(System.Type)">
            <summary>
            Determines if the type is a List.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if a list, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TypeExtensionMethods.GetMemberType(System.Type,System.String)">
            <summary>
            Get's the type of the field/property specified.  
            </summary>
            <param name="type">The type to get the field/property from.</param>
            <param name="name">The name of the field/property.</param>
            <returns>The type of the field/property or null if no match found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TypeExtensionMethods.GetMemberValue(System.Type,System.String,System.Object)">
            <summary>
            Get's the value of the field/property specified.  
            </summary>
            <param name="type">The type to get the field/property from.</param>
            <param name="name">The name of the field/property.</param>
            <param name="obj">The object to get the value from.</param>
            <returns>The value of the field/property or null if no match found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TypeExtensionMethods.SetMemberValue(System.Type,System.String,System.Object,System.Object)">
            <summary>
            Set's the value of the field/property specified.  
            </summary>
            <param name="type">The type to get the field/property from.</param>
            <param name="name">The name of the field/property.</param>
            <param name="obj">The object to set the value to.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TypeExtensionMethods.GetFirstMatchingConstructor(System.Type,System.Type[])">
            <summary>
            Portable compliant way to get a constructor with specified arguments.  This will return a constructor that is public or private as long as the arguments match.  NULL will be returned if there is no match.
            Note that it will pick the first one it finds that matches, which is not necesarily the best match.
            </summary>
            <param name="type">The Type that has the constructor</param>
            <param name="parameterTypes">The type of the arguments for the constructor.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.TypeExtensionMethods.GetFirstMatchingConstructor(System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo},System.Type[])">
            <summary>
            Portable compliant way to get a constructor with specified arguments from a prefiltered list.  This will return a constructor that is public or private as long as the arguments match.  NULL will be returned if there is no match.
            Note that it will pick the first one it finds that matches, which is not necesarily the best match.
            </summary>
            <param name="constructors">Prefiltered list of constructors</param>
            <param name="parameterTypes">The type of the arguments for the constructor.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.UriBuilderExtensions.AppendPathSegments(System.UriBuilder,System.String[])">
            <summary>
            Appends path segments to the path of <paramref name="uriBuilder"/>.
            </summary>
            <param name="uriBuilder">The <see cref="T:System.UriBuilder"/> to append to.</param>
            <param name="segments">The path segments to append.</param>
            <returns>The same instance as <paramref name="uriBuilder"/>, suitable for method chaining.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.UriBuilderExtensions.AppendQuery(System.UriBuilder,System.String,System.String)">
            <summary>
            Append a query parameter to <paramref name="uriBuilder"/>.
            </summary>
            <param name="uriBuilder">The <see cref="T:System.UriBuilder"/> to append to.</param>
            <param name="name">The name of the parameter. This gets encoded before appending.</param>
            <param name="value">Optional. The value of the parameter. This gets encoded before appending.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.UriBuilderExtensions.AppendQueryEscapeUriString(System.UriBuilder,System.String,System.String)">
            <summary>
            Append a query parameter to <paramref name="uriBuilder"/>.
            </summary>
            <param name="uriBuilder">The <see cref="T:System.UriBuilder"/> to append to.</param>
            <param name="name">The name of the parameter. This does not get encoded before appending.</param>
            <param name="value">Optional. The value of the parameter. This does not get encoded before appending.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.UriBuilderExtensions.AbsoluteUri(System.UriBuilder)">
            <summary>
            Get the absolute URI of the given builder, if it is absolute.
            </summary>
            <param name="uriBuilder"></param>
            <returns>If the URI is absolute, the string form of it is returned; otherwise,
            the URI's string representation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.UriExtensions.Add``1(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,``0,System.Func{``0,System.String})">
            <summary>
            Performs an Add similar to the NameValuCollection 'Add' method where the value gets added as an item in a comma delimited list if the key is already present.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="convert"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.UriExtensions.AbsoluteUri(System.Uri)">
            <summary>
            Get the absolute path of the given Uri, if it is absolute.
            </summary>
            <returns>If the URI is absolute, the string form of it is returned; otherwise,
            the URI's string representation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.UrlEncodedForm">
            <summary>
            Content of the type <c>application/x-www-form-urlencoded</c>.
            </summary>
            <remarks>
            This content is essentially a query string without the beginning <c>?</c>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.QueryBuilder">
            <summary>
            Build a query string from key-value pairs.
            The beginning <c>?</c> is not included.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.QueryBuilder.Append(System.String,System.String)">
            <summary>
            Add a key and optional value to the working query string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssDateTimeProvider.SetOffset(System.TimeSpan)">
            <summary>
            Sets a transform such that this provider will differ from the actual time by a fixed TimeSpan offset.
            Throws an exception if there is already an active transform on the provider (concurrent transforms are not allowed).
            Callers MUST dispose of the result, such as by a <code>using</code> statement, to scope the lifetime of the transform.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssDateTimeProvider.SetNow(System.DateTime)">
            <summary>
            Sets a transform such that this provider will always return the given time as the current time
            and will shift other datetimes according to the diffence between the current time and the fixed target time.
            Throws an exception if there is already an active transform on the provider (concurrent transforms are not allowed).
            Callers MUST dispose of the result, such as by a <code>using</code> statement, to scope the lifetime of the transform.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.AdminConstants.ServerProcessID">
            <summary>
            Each incoming web request is assigned a server process id, this constant defines
            an element within the Context.Items[] to hold that value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.IdentityConstants.ActiveUniqueId">
            <summary>
             Special value for the unique user ID for active (non-deleted) users.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.IdentityConstants.SchemaClassGroup">
            <summary>
             Value of attribute that denotes whether user or group.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.IdentityConstants.SwitchHintQueryKey">
            <summary>
            Values used in switch_hint query parameter to force sign in with personal or work account
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.IdentityConstants.DefaultResourceVersion">
            <summary>
            The DB layer only supports byte, even though the data layer contracts suggests a
            32-bit integer. Note: changing this constant implies that every new identity object
            that is created, going forward will have this resource version set. Existing identites
            will need to be updated to the current resource version level manually.
            
            This is created for rolling out of a feature based on identity not service host. 
            This value must be greater than 0. Otherwise, IMS won't update tbl_identityextension for 
            identity extended properties. 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.IdentityConstants.GlobalScope">
            <summary>
            The Global scope, [SERVER], represents the highest group Scope ID in the given request context.
            For example, [SERVER] at a Deployment context would represent the deployment Scope ID. When
            using the global scope in a search, a search for [SERVER]\Team Foundation Administrators
            at the deployment level would return the deployment administrators group, while the same call
            at the Application host level would return the Account Administrators group. The search will
            not recurse down into sub-scopes. 
            
            [SERVER] is a deprecated concept, introduced before TFS 2010. We recommend using either the 
            collection name in square brackets (i.e. [DefaultCollection] or the scope ID in square brackets
            (i.e. [SCOPE_GUID]) instead. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.IdentityAttributeTags">
            <summary>
            Common attributes tags used in the collection of properties of TeamFoundationIdentity.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.DirectoryRoleConstants.CompanyAdministrator">
            Name of the directory role that represents "Company Administrator/Global Admin"
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.ArtifactTypeNames.Ref">
            <summary>
            A Git Ref
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.NotificationConstants">
            <summary>
            Constant strings used in Notifications
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.MyProjectNameMacro">
            <summary>
            Macro used in subscriptions which will be replaced by the project name when evaluated
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.MyDisplayNameMacro">
            <summary>
            Macro used in subscriptions which will be replaced by the subscriber's Display Name when evaluated
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.MyUniqueNameMacro">
            <summary>
            Macro used in subscriptions which will be replaced by the subscriber's Unique User Name when evaluated
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.DynamicTargetsToken">
            <summary>
            Token used in subscription addresses to identify dynamic delivery targets computed from the source event
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.CustomNotificationAddressesIdentityProperty">
            <summary>
            TeamFoundationIdentity property name for a user's custom list of Email addresses to receive notifications at
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.ConfirmedNotificationAddressIdentityProperty">
            <summary>
            TeamFoundationIdentity propery name for a user's confirmed Email address to receive notifications.  This is used in Hosted environments only.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.WorkItemChangedEventTypeName">
            <summary>
            The name of the WorkItemChangedEvent
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.BuildStatusChangeEventName">
            <summary>
            The name of the BuildStatusChangedEvent type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.BuildCompletedEventName">
            <summary>
            The name of the BuildCompletedEvent type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.CheckinEventName">
            <summary>
            The name of the CheckinEvent type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.CodeReviewChangedEventName">
            <summary>
            The name of the CodeReviewChangedEvent type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.GitPushEventName">
            <summary>
            The name of the GitPushEvent type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.GitPullRequestEventName">
            <summary>
            The name of the GitPullRequestEvent type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.AlertsPageRelativePath">
            <summary>
            The relative path to the alerts admin web page
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.AlertsPage">
            <summary>
            The alerts page name
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.AlertsAdminPage">
            <summary>
            The admin alerts page
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.EmailConfirmationSendDates">
            <summary>
            Property used to keep track of how many confirmations were sent for this user.  Used to limit the number
            of confirmations a single user is allowed to send out for their account.
            The value is updated and monitored by the SendEmailConfirmationJob.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.ProcessedFlagCharacter">
            <summary>
            Prefix to denote that identity field value have been processed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.ProcessedTfIdFlagCharacter">
            <summary>
            Prefix to denote that identity field value have been processed and converted to TFID
            </summary>
            [Obsolete("Moved to Microsoft.VisualStudio.Services.Notifications.Common.NotificationFrameworkConstants.ProcessedTfIdFlagCharacter in assembly MS.VS.Services.Notifications.WebApi")]
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.DisplayNameFlagCharacter">
            <summary>
            Prefix to denote that this is the start of displayname value for this identity field
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.TfIdFlagCharacter">
            <summary>
            Prefix to denote that this is the start of TFID value for this identity field
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.AllowUserRegexInMatchConditionFeatureFlag">
            <summary>
            Optional Feature flag to enable escaping Regex expressions when creating Notification subscriptions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.MDMNotificationJobScope">
            <summary>
            The MDM scope name for the notification job
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.EventProcessingDelayKPI">
            <summary>
            Event processing delay KPI name
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.EventProcessingDelayKPIDesc">
            <summary>
            Event processing delay KPI description
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.MDMDeliveryJobscope">
            <summary>
            The MDM scope name for the delivery job
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.DeliveryDelayKPI">
            <summary>
            Notification delivery delay KPI name
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.DeliveryDelayWithRetriesKPI">
            <summary>
            Notification delivery delay with retries KPI name
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.TotalProcessingTimeKPI">
            <summary>
            Total time taken between the event creation till the notification delivery
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.TotalProcessingTimeWithRetriesKPI">
            <summary>
            Total time taken between the event creation till the notification delivery
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.NotificationConstants.DeliveryDelayKPIDesc">
            <summary>
            Notification delivery delay KPI description
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.TeamProjectSecurityConstants.ManageProperties">
            <summary>
            The permission required for setting project properties.
            Introduced in Dev15 Update 2 / VSO (M116).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.TeamProjectSecurityConstants.ManageSystemProperties">
            <summary>
            The permission required for setting system project properties.
            Introduced in Dev15 Update 2 / VSO (M116).
            </summary>
            <remarks>
            This permission was excluded from AllPermissions to avoid being unintentionally granted.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.TeamProjectSecurityConstants.BypassPropertyCache">
            <summary>
            The permission required for bypassing the project property cache.
            Introduced in Dev16 / VSO (M118).
            </summary>
            <remarks>
            This permission was excluded from AllPermissions to avoid being unintentionally granted.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.TeamProjectSecurityConstants.BypassRules">
            <summary>
            The permission required for bypassing the rules  while updating work items.
            Introduced in Dev16 / VSO (M126).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.TeamProjectSecurityConstants.SuppressNotifications">
            <summary>
            The permission required for suppressing notifications for work item updates.
            Introduced in Dev16 / VSO (M126).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.TeamProjectSecurityConstants.UpdateVisibility">
            <summary>
            The permission required for updating project visibility. 
            Introduced in Dev16 / VSO (M131).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.TeamProjectSecurityConstants.ChangeProjectsProcess">
            <summary>
            The permission required for changing the process of the team project
            Introduced in Dev17 / VSO (M136). 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.TeamProjectSecurityConstants.AgileToolsBacklogManagement">
            <summary>
            The permission required for granting access to backlog management. For stakeholder, this would disabled for private project and enabled for public project.
            Introduced in Dev17 / VSO (M137). 
            </summary>
            <remarks>
            This permission was excluded from AllPermissions to avoid being unintentionally granted.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.TeamProjectSecurityConstants.AgileToolsPlans">
            <summary>
            The permission required for granting access to backlog management. For stakeholder, this is always disabled.
            Introduced in Dev17 / VSO (M150).
            </summary>
            <remarks>
            This permission was excluded from AllPermissions to avoid being unintentionally granted.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.VssException">
            <summary>
            Base class for all custom exceptions thrown from Vss and Tfs code. 
            </summary>
            <remarks>
            All Exceptions in the VSS space -- any exception that flows across
            a REST API boudary -- should derive from VssServiceException. This is likely
            almost ALL new exceptions. Legacy TFS exceptions that do not flow through rest
            derive from TeamFoundationServerException or TeamFoundationServiceException
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssException.#ctor">
            <summary>
            No-arg constructor that sumply defers to the base class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssException.#ctor(System.Int32)">
            <summary>
            Initializes an exception with the specified error message.
            </summary>
            <param name="errorCode">Application-defined error code for this exception</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssException.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes an exception with the specified error message.
            </summary>
            <param name="errorCode">Application-defined error code for this exception</param>
            <param name="logException">Indicate whether this exception should be logged</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssException.#ctor(System.String)">
            <summary>
            Initializes an exception with the specified error message.
            </summary>
            <param name="message">A human readable message that describes the error</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an exception with the specified error message and an inner exception that caused this exception to be raised.
            </summary>
            <param name="message">A human readable message that describes the error</param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Initializes an exception with the specified error message and an inner exception that caused this exception to be raised.
            </summary>
            <param name="message">A human readable message that describes the error</param>
            <param name="errorCode">Application defined error code</param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes an exception with the specified error message and an inner exception that caused this exception to be raised.
            </summary>
            <param name="message">A human readable message that describes the error</param>
            <param name="errorCode">Application defined error code</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssException.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes an exception with the specified error message and an inner exception that caused this exception to be raised.
            </summary>
            <param name="message">A human readable message that describes the error</param>
            <param name="errorCode">Application defined error code</param>
            <param name="logException">Indicate whether this exception should be logged</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssException.#ctor(System.String,System.Int32,System.Boolean,System.Exception)">
            <summary>
            Initializes an exception with the specified error message and an inner exception that caused this exception to be raised.
            </summary>
            <param name="message">A human readable message that describes the error</param>
            <param name="errorCode">Application defined error code</param>
            <param name="logException"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an exception from serialized data
            </summary>
            <param name="info">object holding the serialized data</param>
            <param name="context">context info about the source or destination</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssException.LogException">
            <summary>Indicate whether this exception instance should be logged</summary>
            <value>True (false) if the exception should (should not) be logged</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssException.ErrorCode">
            <summary>A user-defined error code.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssException.EventId">
            <summary>The event ID to report if the exception is marked for the event log</summary>
            <value>The event ID used in the entry added to the event log</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssException.ReportException">
            <summary>Indicate whether the exception should be reported through Dr. Watson</summary>
            <value>True (false) if the exception should (should not) be reported</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssException.GetTypeNameAndKeyForExceptionType(System.Type,System.Version,System.String@,System.String@)">
            <summary>
            Gets the default serialized type name and type key for the given exception type.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.VssHttpMessageHandler">
            <summary>
            Provides authentication for Visual Studio Services.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssHttpMessageHandler.#ctor">
            <summary>
            Initializes a new <c>VssHttpMessageHandler</c> instance with default credentials and request 
            settings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssHttpMessageHandler.#ctor(Microsoft.VisualStudio.Services.Common.VssCredentials,Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings)">
            <summary>
            Initializes a new <c>VssHttpMessageHandler</c> instance with the specified credentials and request 
            settings.
            </summary>
            <param name="credentials">The credentials which should be used</param>
            <param name="settings">The request settings which should be used</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssHttpMessageHandler.#ctor(Microsoft.VisualStudio.Services.Common.VssCredentials,Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings,System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new <c>VssHttpMessageHandler</c> instance with the specified credentials and request 
            settings.
            </summary>
            <param name="credentials">The credentials which should be used</param>
            <param name="settings">The request settings which should be used</param>
            <param name="innerHandler"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpMessageHandler.Credentials">
            <summary>
            Gets the credentials associated with this handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpMessageHandler.Settings">
            <summary>
            Gets the settings associated with this handler.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssHttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Handles the authentication hand-shake for a Visual Studio service.
            </summary>
            <param name="request">The HTTP request message</param>
            <param name="cancellationToken">The cancellation token used for cooperative cancellation</param>
            <returns>A new <c>Task&lt;HttpResponseMessage&gt;</c> which wraps the response from the remote service</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpMessageHandler.DefaultWebProxy">
            <summary>
            Allows you to set a proxy to be used by all VssHttpMessageHandler requests without affecting the global WebRequest.DefaultWebProxy.  If not set it returns the WebRequest.DefaultWebProxy.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings">
            <summary>
            Provides common settings for a <c>VssHttpMessageHandler</c> instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.#ctor">
            <summary>
            Initializes a new <c>VssHttpRequestSettings</c> instance with compression enabled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.#ctor(System.Guid)">
            <summary>
            Initializes a new <c>VssHttpRequestSettings</c> instance with compression enabled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.#ctor(System.Guid,System.Guid)">
            <summary>
            Initializes a new <c>VssHttpRequestSettings</c> instance with compression enabled.
            </summary>
            <remarks>The e2eId argument is not used.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.#ctor(Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings)">
            <summary>
            Copy Constructor
            </summary>
            <param name="copy"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.AllowAutoRedirect">
            <summary>
            Gets or sets a value indicating whether or not HttpClientHandler should follow redirect on outgoing requests. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.CompressionEnabled">
            <summary>
            Gets or sets a value indicating whether or not compression should be used on outgoing requests. 
            The default value is true.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.ExpectContinue">
            <summary>
            Gets or sets a value indicating whether or not the Expect: 100-continue header should be sent on
            outgoing requess. The default value is true.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.BypassProxyOnLocal">
            <summary>
            Sets whether to bypass web proxies if the call is local
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.UseHttp11">
            <summary>
            The .NET Core 2.1 runtime switched its HTTP default from HTTP 1.1 to HTTP 2.
            This causes problems with some versions of the Curl handler on Linux.
            See GitHub issue https://github.com/dotnet/corefx/issues/32376
            If true, requests generated by this client will use HTTP 1.1.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.MaxContentBufferSize">
            <summary>
            Gets or sets the maximum size allowed for response content buffering.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.SendTimeout">
            <summary>
            Timespan to wait before timing out a request. Defaults to 100 seconds
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.SuppressFedAuthRedirects">
            <summary>
            Provides a hint to the server requesting that rather than getting 302 redirects as part of FedAuth flows 401 and 403 are passed through.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.UserAgent">
            <summary>
            User-Agent header passed along in the request,
            For multiple values, the order in the list is the order
            in which they will appear in the header
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.AcceptLanguages">
            <summary>
            The name of the culture is passed in the Accept-Language header
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.SessionId">
            <summary>
            A unique identifier for the user session
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.E2EId">
            <summary>
            End to End ID which gets propagated everywhere unchanged
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.AgentId">
            <summary>
            This is a kind of combination between SessionId and UserAgent.
            If supplied, the value should be a string that uniquely identifies
            this application running on this particular machine.
            The server will then use this value
            to correlate user requests, even if the process restarts.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.OperationName">
            <summary>
            An optional string that is sent in the SessionId header used to group a set of operations together
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.ClientCertificateManager">
            <summary>
            Optional implementation used to gather client certificates
            for connections that require them
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.ServerCertificateValidationCallback">
            <summary>
            Optional implementation used to validate server certificate validation
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.MaxRetryRequest">
            <summary>
            Number of times to retry a request that has an ambient failure
            </summary>
            <remarks>
            This property is only used by VssConnection, so only relevant on the client
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.Encoding">
            <summary>
            Gets the encoding used for outgoing requests.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.PropertyName">
            <summary>
            Gets the property name used to reference this object.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.HttpCompletionOptionPropertyName">
            <summary>
            Gets the property name used to reference the completion option for a specific request.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.LightweightHeader">
            <summary>
            Header to include the light weight response client option.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings.ExcludeUrlsHeader">
            <summary>
            Header to include the exclude urls client option.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.VssHttpRetryMessageHandler">
            <summary>
            Handles automatic replay of HTTP requests when errors are encountered based on a configurable set of options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.VssHttpRetryOptions">
            <summary>
            Defines the options used for configuring the retry policy.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRetryOptions.Default">
            <summary>
            Gets a singleton read-only instance of the default settings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRetryOptions.BackoffCoefficient">
            <summary>
            Gets or sets the coefficient which exponentially increases the backoff starting at <see cref="P:Microsoft.VisualStudio.Services.Common.VssHttpRetryOptions.MinBackoff" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRetryOptions.MinBackoff">
            <summary>
            Gets or sets the minimum backoff interval to be used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRetryOptions.MaxBackoff">
            <summary>
            Gets or sets the maximum backoff interval to be used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRetryOptions.MaxRetries">
            <summary>
            Gets or sets the maximum number of retries allowed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.Common.VssHttpRetryOptions.RetryableStatusCodes">
            <summary>
            Gets a set of HTTP status codes which should be retried.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssHttpRetryOptions.IsRetryableResponse(System.Net.Http.HttpResponseMessage)">
            <summary>
            How to verify that the response can be retried.
            </summary>
            <param name="response">Response message from a request</param>
            <returns>True if the request can be retried, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssHttpRetryOptions.MakeReadonly">
            <summary>
            Ensures that no further modifications may be made to the retry options.
            </summary>
            <returns>A read-only instance of the retry options</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssHttpRetryOptions.ThrowIfReadonly">
            <summary>
            Throws an InvalidOperationException if this is marked as ReadOnly.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.VssHttpRetryOptions.VssHttpRetryableStatusCodeFilter">
            <summary>
            Returns false if we should continue retrying based on the response, and true if we should not, even though
            this is technically a retryable status code.
            </summary>
            <param name="response">The response to check if we should retry the request.</param>
            <returns>False if we should retry, true if we should not based on the response.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssNetworkHelper.IsTransientNetworkException(System.Exception)">
            <summary>
            Heuristic used to determine whether an exception is a transient network
            failure that should be retried.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssNetworkHelper.IsTransientNetworkException(System.Exception,Microsoft.VisualStudio.Services.Common.VssHttpRetryOptions)">
            <summary>
            Heuristic used to determine whether an exception is a transient network
            failure that should be retried.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssNetworkHelper.IsTransientNetworkException(System.Exception,System.Nullable{System.Net.HttpStatusCode}@,System.Nullable{System.Net.WebExceptionStatus}@,System.Nullable{System.Net.Sockets.SocketError}@,System.Nullable{Microsoft.VisualStudio.Services.Common.WinHttpErrorCode}@,System.Nullable{Microsoft.VisualStudio.Services.Common.CurlErrorCode}@)">
            <summary>
            Heuristic used to determine whether an exception is a transient network
            failure that should be retried.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssNetworkHelper.IsTransientNetworkException(System.Exception,Microsoft.VisualStudio.Services.Common.VssHttpRetryOptions,System.Nullable{System.Net.HttpStatusCode}@,System.Nullable{System.Net.WebExceptionStatus}@,System.Nullable{System.Net.Sockets.SocketError}@,System.Nullable{Microsoft.VisualStudio.Services.Common.WinHttpErrorCode}@,System.Nullable{Microsoft.VisualStudio.Services.Common.CurlErrorCode}@)">
            <summary>
            Heuristic used to determine whether an exception is a transient network
            failure that should be retried.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssNetworkHelper.IsTransientNetworkExceptionHelper(System.Exception,Microsoft.VisualStudio.Services.Common.VssHttpRetryOptions,System.Nullable{System.Net.HttpStatusCode}@,System.Nullable{System.Net.WebExceptionStatus}@,System.Nullable{System.Net.Sockets.SocketError}@,System.Nullable{Microsoft.VisualStudio.Services.Common.WinHttpErrorCode}@,System.Nullable{Microsoft.VisualStudio.Services.Common.CurlErrorCode}@)">
            <summary>
            Helper which checks a particular Exception instance (non-recursive).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.Common.VssNetworkHelper.TooManyRequests">
            <summary>
            Gets the HttpStatusCode which represents a throttling error.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.VssPerformanceEventSource">
            <summary>
            Note: This is our perfview event source which is used for performance troubleshooting
            Sadly, EventSource has few overloads so anything that isn't in http://msdn.microsoft.com/en-us/library/system.diagnostics.tracing.eventsource.writeevent.aspx
            will cause a bunch of allocations - so we use manual interop for anything non trivial.
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssPerformanceEventSource.CreateServiceInstanceBegin(System.Guid,System.Guid,System.String)">
            <summary>
            This method is intentionally called Begin, not Start(), since it's a recursive event
            Service Profiler cannot deal with recursive events unless you have the
            [Event(EventActivityOptions.Recursive)] however that is not supported in 4.5 currently
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="hostId"></param>
            <param name="serviceType"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssPerformanceEventSource.CreateServiceInstanceEnd(System.Guid,System.Guid,System.String,System.Int64)">
            <summary>
            This method is intentionally called Begin, not Start(), since it's a recursive event
            Service Profiler cannot deal with recursive events unless you have the
            [Event(EventActivityOptions.Recursive)] however that is not supported in 4.5 currently
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="hostId"></param>
            <param name="serviceType"></param>
            <param name="duration"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.Common.VssHttpMessageHandlerTraceInfo">
            <summary>
            This class is used by the message handler, if injected as a request property, to trace additional
            timing details for outgoing requests. This information is added to the HttpOutgoingRequest logs
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssHttpMessageHandlerTraceInfo.SetTraceInfo(System.Net.Http.HttpRequestMessage,Microsoft.VisualStudio.Services.Common.VssHttpMessageHandlerTraceInfo)">
            <summary>
            Set the provided traceInfo as a property on a request message (if not already set)
            </summary>
            <param name="message"></param>
            <param name="traceInfo"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.Common.VssHttpMessageHandlerTraceInfo.GetTraceInfo(System.Net.Http.HttpRequestMessage)">
            <summary>
            Get VssHttpMessageHandlerTraceInfo from request message, or return null if none found
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.AtomicBoolean.Value">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.AtomicBoolean.Equals(Microsoft.VisualStudio.Services.CircuitBreaker.AtomicBoolean)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.AtomicBoolean"/> is equal to the current <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.AtomicBoolean"/>.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.AtomicLong.Value">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.AtomicLong.CompareAndSet(System.Int64,System.Int64)">
            <summary>
            Atomically sets the value to the given updated value if the current value == the expected value.
            </summary>
            <returns>True if the value was the expected value.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.ICircuitBreaker">
            <summary>
            Circuit-breaker logic that is hooked into <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.Command"/> execution and will stop allowing executions if 
            failures have gone past the defined threshold.  It will then allow single retries after a defined sleep window 
            until the execution succeeds at which point it will close the circuit and allow executions again.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ICircuitBreaker.AllowRequest(Microsoft.VisualStudio.Services.CircuitBreaker.ICommandProperties)">
            <summary>
            Every <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.Command"/> request asks this if it is allowed to proceed or not.
            This takes into account the half-open logic which allows some requests through when determining if it should be closed again.
            </summary>
            <returns>True is the request is permitted, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ICircuitBreaker.IsOpen(Microsoft.VisualStudio.Services.CircuitBreaker.ICommandProperties)">
            <summary>
            Gets whether the circuit is currently open (tripped).
            </summary>
            <returns>True if the circuit is open, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ICircuitBreaker.MarkSuccess">
            <summary>
            Invoked on successful executions from <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.Command"/> as part of feedback mechanism when in a half-open state.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ICircuitBreaker.IsOlderThan(System.TimeSpan)">
            <summary>
            Returns true if it has been longer than time since the circuit breaker was last accessed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.ICircuitBreaker.ExecutionSemaphore">
            <summary>
            Gets the Execute Semaphore associated with this circuit breaker.
            Used by <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.Command"/> to limit the number of simultaneous calls to Execute.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.ICircuitBreaker.FallbackSemaphore">
            <summary>
            Gets the Fallback Semaphore associated with this circuit breaker
            Used by <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.Command"/> to limit the number of simultaneous calls to Fallback.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.ICircuitBreaker.ExecutionRequests">
            <summary>
            Gets the Execution rolling number counter associated with this circuit breaker
            Used by <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.Command"/> to limit the number of calls to Execute.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.ICircuitBreaker.FallbackRequests">
            <summary>
            Gets the Fallback rolling number counter associated with this circuit breaker
            Used by <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.Command"/> to limit the number of calls to Fallback.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ICircuitBreaker.GetCircuitBreakerState(Microsoft.VisualStudio.Services.CircuitBreaker.ICommandProperties)">
            <summary>
            Gets the current state of the circuit breaker without re-evaluating the conditions
            </summary>
            <returns>CircuitBreakerStatus.Open, HalfOpen, or Closed</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerFactory">
            <summary>
            Factory of <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.ICircuitBreaker"/> instances.
            Thread safe and ensures only 1 <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.ICircuitBreaker"/> per <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandKey"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerFactory.Instances">
            <summary>
            Stores instances of <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.ICircuitBreaker"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerFactory.GetInstance(Microsoft.VisualStudio.Services.CircuitBreaker.CommandKey,Microsoft.VisualStudio.Services.CircuitBreaker.ICommandProperties,Microsoft.VisualStudio.Services.CircuitBreaker.CommandMetrics,Microsoft.VisualStudio.Services.CircuitBreaker.ITime)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.ICircuitBreaker"/> instance for a given <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandKey"/>.
            If no circuit breaker exists for the specified command key, a new one will be created using the properties and metrics parameters.
            If a circuit breaker already exists, those parameters will be ignored.
            </summary>
            <param name="commandKey">Command key of command instance requesting the circuit breaker.</param>
            <param name="properties">The properties of the specified command.</param>
            <param name="metrics">The metrics of the specified command.</param>
            <returns>A new or an existing circuit breaker instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerFactory.SetInstance(Microsoft.VisualStudio.Services.CircuitBreaker.CommandKey,Microsoft.VisualStudio.Services.CircuitBreaker.ICircuitBreaker)">
            <summary>
            Internal for testing only
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerFactory.GetInstance(Microsoft.VisualStudio.Services.CircuitBreaker.CommandKey)">
            <summary>
            Gets the instance.
            </summary>
            <param name="commandKey">The command key.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerFactory.RemoveOlderThan(System.TimeSpan)">
            <summary>
            Clears all circuit breakers that have not been accessed within the given time span. If new requests come in instances will be recreated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerFactory.Reset">
            <summary>
            Clears all circuit breakers. If new requests come in instances will be recreated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl">
            <summary>
            The default production implementation of <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.ICircuitBreaker"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.m_metrics">
            <summary>
            Stores the metrics of the owner command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.m_time">
            <summary>
            Stores the timer to use for tracking time. Enables using ITimeMocked for unit tests.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.m_circuitOpen">
            <summary>
            Stores the state of this circuit breaker.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.m_circuitOpenedOrLastTestedTime">
            <summary>
            Stores the last time the circuit breaker was opened or tested.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.m_circuitAccessedTime">
            <summary>
            Stores the last time the circuit breaker was accessed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.m_attempt">
            <summary>
            Stores values use to calculate the randomized backoff.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.#ctor(Microsoft.VisualStudio.Services.CircuitBreaker.ICommandProperties,Microsoft.VisualStudio.Services.CircuitBreaker.CommandMetrics,Microsoft.VisualStudio.Services.CircuitBreaker.ITime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl"/> class.
            </summary>
            <param name="properties">The properties of the owner command.</param>
            <param name="metrics">The metrics of the owner command.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.AllowRequest(Microsoft.VisualStudio.Services.CircuitBreaker.ICommandProperties)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.IsOpen(Microsoft.VisualStudio.Services.CircuitBreaker.ICommandProperties)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.GetCircuitBreakerState(Microsoft.VisualStudio.Services.CircuitBreaker.ICommandProperties)">
            <summary>
            Gets the current state of the circuit breaker without re-evaluating the conditions
            </summary>
            <returns>CircuitBreakerStatus.Open, HalfOpen, or Closed</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.AllowSingleTest(Microsoft.VisualStudio.Services.CircuitBreaker.ICommandProperties)">
            <summary>
            Gets whether the circuit breaker should permit a single test request.
            </summary>
            <returns>True if single test is permitted, otherwise false.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.ExecutionSemaphore">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.FallbackSemaphore">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.ExecutionRequests">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.FallbackRequests">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.Reset">
            <summary>
            Pull this logic out into a separate method to facilitate writing unit tests.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.MarkSuccess">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerImpl.IsOlderThan(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerNoOpImpl">
            <summary>
            An implementation of the circuit breaker that does nothing.
            Used if circuit breaker is disabled for a command.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerNoOpImpl.AllowRequest(Microsoft.VisualStudio.Services.CircuitBreaker.ICommandProperties)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerNoOpImpl.IsOpen(Microsoft.VisualStudio.Services.CircuitBreaker.ICommandProperties)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerNoOpImpl.GetCircuitBreakerState(Microsoft.VisualStudio.Services.CircuitBreaker.ICommandProperties)">
            <summary>
            Gets the current state of the circuit breaker without re-evaluating the conditions
            </summary>
            <returns>CircuitBreakerStatus.Open, HalfOpen, or Closed</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerNoOpImpl.MarkSuccess">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerNoOpImpl.IsOlderThan(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerNoOpImpl.ExecutionSemaphore">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerNoOpImpl.FallbackSemaphore">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerNoOpImpl.ExecutionRequests">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerNoOpImpl.FallbackRequests">
            <inheritdoc />
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerStatus.Closed">
            <summary>
            The circuit is closed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerStatus.HalfOpen">
            <summary>
            The circuit is half-open: short-circuiting most calls, but ready to allow a test call through
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerStatus.Open">
            <summary>
            The circuit is open and short-circuiting calls
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerException">
            <summary>
            Base class for all CB exceptions to facilitate easier handling of circuit breaker exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerException"/> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerException"/> class with serialized data.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerShortCircuitException">
            <summary>
            CircuitBreakerShortCircuitException is thrown when 
            a <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.Command"/> fails and does not have a fallback.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerShortCircuitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerShortCircuitException"/> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerShortCircuitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerShortCircuitException"/> class with serialized data.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerExceededConcurrencyException">
            <summary>
            CircuitBreakerExceededConcurrencyException is thrown when 
            the maximum number of concurrent requests permitted to Command.Run() is exceeded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerExceededConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerExceededConcurrencyException"/> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerExceededConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerExceededConcurrencyException"/> class with serialized data.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerExceededExecutionLimitException">
            <summary>
            CircuitBreakerExceededExecutionLimitException is thrown when 
            the maximum number of requests permitted to Command.Run() is exceeded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerExceededExecutionLimitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerExceededExecutionLimitException"/> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerExceededExecutionLimitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerExceededExecutionLimitException"/> class with serialized data.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync">
            <summary>
            Provides an asynchronous CircuitBreaker command with support for Run and Fallback Tasks.  
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync.#ctor(Microsoft.VisualStudio.Services.CircuitBreaker.CommandGroupKey,System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync"/> class.
            </summary>
            <param name="group">Used to group multiple command metrics.</param>
            <param name="run">The Run delegate called when the circuit is closed.</param>
            <param name="fallback">The Fallback delegate called when the circuit is open.</param>
            <param name="continueOnCapturedContext">true to attempt to marshal the continuation back to the original context captured; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync.#ctor(Microsoft.VisualStudio.Services.CircuitBreaker.CommandSetter,System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync"/> class.
            </summary>
            <param name="setter">Enables setting command defaults in code.</param>
            <param name="run">The Run delegate called when the circuit is closed.</param>
            <param name="fallback">The Fallback delegate called when the circuit is open.</param>
            <param name="continueOnCapturedContext">true to attempt to marshal the continuation back to the original context captured; otherwise, false.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync.CommandGroup">
            <returns><see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandGroupKey"/> used to group together multiple <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync"/> objects.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync.CommandKey">
            <returns><see cref="P:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync.CommandKey"/> identifying this command instance for circuit-breaker, metrics and properties.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync.Metrics">
            <returns>The <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandMetrics"/> associated with this <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync"/> instance.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync.Properties">
            <returns>The <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.ICommandProperties"/> associated with this <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync"/> instance.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync.IsCircuitBreakerOpen">
            <returns>Returns true if the associated circuit breaker is open.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync.CircuitBreakerState">
            <returns>Returns CircuitBreakerStatus.Open, HalfOpen, or Closed</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync.Execute">
            <summary>
            Used for asynchronous execution of command.
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync.Execute(System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Used for asynchronous execution of command.
            </summary>
            <param name="run">The action that needs to be executed</param>
            <param name="fallback">Fall back action if main action fails</param>
            <param name="continueOnCapturedContext">true to attempt to marshal the continuation back to the original context captured; otherwise, false.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync.TryFallbackAsync(System.String,System.Func{System.Threading.Tasks.Task},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync`1" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync`1.#ctor(Microsoft.VisualStudio.Services.CircuitBreaker.CommandGroupKey,System.Func{System.Threading.Tasks.Task{`0}},System.Func{System.Threading.Tasks.Task{`0}},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync`1.#ctor(Microsoft.VisualStudio.Services.CircuitBreaker.CommandSetter,System.Func{System.Threading.Tasks.Task{`0}},System.Func{System.Threading.Tasks.Task{`0}},System.Boolean)" -->
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CommandAsync`1.Execute">
            <summary>
            Used for asynchronous execution of command.
            </summary>
            <returns>TResult Result of run or fallback delegate if the command fails for any reason.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.Command">
            <summary>
            Provides a synchronous CircuitBreaker command with support for Run and Fallback Actions
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Services.CircuitBreaker.Command.#ctor(Microsoft.VisualStudio.Services.CircuitBreaker.CommandGroupKey,System.Action,System.Action)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Services.CircuitBreaker.Command.#ctor(Microsoft.VisualStudio.Services.CircuitBreaker.CommandSetter,System.Action,System.Action)" -->
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.Command.Execute">
            <summary>
            Used for synchronous execution of command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.Command.Execute(System.Action,System.Action)">
            <summary>
            Used to convert asynchronous execution of command to synchronous execution.
            </summary>
            <param name="run">The action that needs to be executed</param>
            <param name="fallback">Fall back action if main action fails</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.Services.CircuitBreaker.Command`1" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Services.CircuitBreaker.Command`1.#ctor(Microsoft.VisualStudio.Services.CircuitBreaker.CommandGroupKey,System.Func{`0},System.Func{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Services.CircuitBreaker.Command`1.#ctor(Microsoft.VisualStudio.Services.CircuitBreaker.CommandSetter,System.Func{`0},System.Func{`0})" -->
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.Command`1.Execute">
            <summary>
            Used for synchronous execution of command.
            </summary>
            <returns>TResult Result of run or fallback delegate if the command fails for any reason.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.CommandMetrics.LastException">
            <summary>
            Gets/Sets the last exception associated with this circuit breaker
            Used by <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.Command"/> to provide better diagnostic information.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.HealthCounts">
            <summary>
            Stores summarized health metrics about Circuit Breaker Commands.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.HealthCounts.TotalRequests">
            <summary>
            The total number of requests made by this command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.HealthCounts.ErrorCount">
            <summary>
            The total number of errors made by this command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.HealthCounts.SemaphoreRejected">
            <summary>
            Gets the semaphore rejected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.HealthCounts.ErrorPercentage">
            <summary>
            The ratio of total requests and error counts in percents.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.HealthCounts.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of HealthCounts.
            </summary>
            <param name="total">The total number of requests made by this command.</param>
            <param name="error">The total number of errors made by this command.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandPropertiesSetter">
            <summary>
            Provides code driven properties overrides for <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.Command"/> instances.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.ICommandFactory">
            <summary>
            Command factory for instantiating the commands. This factory is used by the client to instantiate the different commands.
            Using factory interface because at WebApi level, we don't have reference to the VSSF SDK and we want to abstract the command generation logic from web-api layer
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.ICommandFactory.CommandKey">
            <summary>
            Command Key for this instnace.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ICommandFactory.CreateCommandAsync(Microsoft.VisualStudio.Services.CircuitBreaker.CommandSetter,System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Initializes a new instance of the Command class.
            </summary>
            <param name="commandSetter">Enables setting command defaults in code.</param>
            <param name="run">The Run delegate called when the circuit is closed.</param>
            <param name="fallback">The Fallback delegate called when the circuit is open.</param>
            <param name="continueOnCapturedContext">True to attempt to marshal the continuation back to the original context captured; otherwise, false.</param>
            <returns>New instance of the Command</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ICommandFactory.CreateCommandAsync``1(Microsoft.VisualStudio.Services.CircuitBreaker.CommandSetter,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Initializes a new instance of the Command class.
            </summary>
            <param name="commandSetter">Enables setting command defaults in code.</param>
            <param name="run">The Run delegate called when the circuit is closed.</param>
            <param name="fallback">The Fallback delegate called when the circuit is open.</param>
            <param name="continueOnCapturedContext">True to attempt to marshal the continuation back to the original context captured; otherwise, false.</param>
            <returns>New instance of the Command</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.ICommandProperties">
            <summary>
            Provides properties for <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.Command"/> instances. The instances of <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.ICommandProperties"/>
            will be created by <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandPropertiesDefault"/>.
            We can create only a <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandPropertiesSetter"/> for a command, which is only used to get the
            default values for the current <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.ICommandProperties"/> implementation.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandPropertiesDefault"/>
            <seealso cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandPropertiesSetter"/>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.EventType">
            <summary>
            Provides a mechanism to be notified of events for <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.Command"/> instances. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.CircuitBreakerTracePoints">
            <summary>
            The circuit breaker trace points.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey">
            <summary>
            A base implementation for immutable keys to represent objects.
            Keys are equal if their types are the same and their names are equal with ordinal string comparison.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey.name">
            <summary>
            Readonly field to store the name of the key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey"/> class.
            </summary>
            <param name="name">The name of the key, can't be null or whitespace.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey.Name">
            <summary>
            Gets the name of the key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey.op_Equality(Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey,Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey)">
            <summary>
            Determines whether two specified keys are equal.
            </summary>
            <param name="left">The first key to compare.</param>
            <param name="right">The second key to compare.</param>
            <returns>True if the two keys are equal.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey.op_Inequality(Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey,Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey)">
            <summary>
            Determines whether two specified keys are different.
            </summary>
            <param name="left">The first key to compare.</param>
            <param name="right">The second key to compare.</param>
            <returns>True if the two keys are not equal.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey"/>.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey.GetHashCode">
            <summary>
            Calculates the hash code for this key.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey.ToString">
            <summary>
            Returns the name of the current key.
            </summary>
            <returns>The name of the command key.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey.Equals(Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey"/> is equal to the current <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.ImmutableKey"/>.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandKey">
            <summary>
            An immutable key to represent a <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.Command"/> for monitoring, circuit-breakers,
            metrics publishing, caching and other such uses.
            Command keys are equal if their names are equal with ordinal string comparison.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CommandKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandKey"/> class.
            </summary>
            <param name="name">The name of the command key.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CommandKey.op_Implicit(System.String)~Microsoft.VisualStudio.Services.CircuitBreaker.CommandKey">
            <summary>
            Converts a string to a <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandKey"/> object.
            </summary>
            <param name="name">The name of the command key.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandKey"/> object constructed from the specified name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CommandKey.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandKey"/> class based on the type of the command.
            This used to create default command keys for unnamed commands.
            </summary>
            <param name="commandType">The type of the command.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CommandKey.GetDefaultNameForCommandType(System.Type)">
            <summary>
            Gets the default name for a command type.
            </summary>
            <param name="commandType">The command type.</param>
            <returns>The default name for the command type.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandGroupKey">
            <summary>
            A group name for a <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.Command"/>. This is used to represent a common relationship between commands. For example, a library 
            or team name, the system all related commands interact with, common business purpose etc.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CommandGroupKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandGroupKey"/> class.
            </summary>
            <param name="name">The name of the command group key.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.CommandGroupKey.op_Implicit(System.String)~Microsoft.VisualStudio.Services.CircuitBreaker.CommandGroupKey">
            <summary>
            Converts a string to a <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandGroupKey"/> object.
            </summary>
            <param name="name">The name of the command group key.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.CommandGroupKey"/> object constructed from the specified name.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.ITime">
            <summary>
            Provides a method to get the current time.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ITime.GetCurrentTimeInMillis">
            <summary>
            Gets the current time in milliseconds.
            </summary>
            <returns>The current time in milliseconds.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.ITimeDefault">
            <summary>
            Provides a method to get the current time. It uses <see cref="T:System.Diagnostics.Stopwatch"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.ITimeDefault.Instance">
            <summary>
            The singleton instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.ITimeDefault"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.ITimeDefault.stopwatch">
            <summary>
            The instance which provides the accurate time measurement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ITimeDefault.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.ITimeDefault"/> class from being created.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.ITimeDefault.GetCurrentTimeInMillis">
            <summary>
            Gets the current time in milliseconds.
            </summary>
            <returns>The current time in milliseconds.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.IRollingNumber.GetTotalWindowTimeInMilliseconds">
            <summary>
            Gets the total window size in milliseconds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.IRollingNumber.GetNumberOfBuckets">
            <summary>
            Gets the number of parts to break the time window.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.IRollingNumber.GetBucketSizeInMilliseconds">
            <summary>
            Gets the bucket size in milliseconds. (TimeInMilliseconds / NumberOfBuckets)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.IRollingNumber.GetRollingSum">
            <summary>
            Get the sum of all buckets in the rolling counter.
            </summary>
            <returns>Value for the given <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.IRollingNumber.Increment">
            <summary>
            Increment the counter in the current bucket by one.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber.newBucketLock">
            <summary>
            The object used to synchronize the <see cref="M:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber.GetCurrentBucketIndex"/> method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber.time">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.ITime"/> instance to measure time.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber.bucketSizeInMilliseconds">
            <summary>
            The size of the time window to track per bucket.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber.numberOfBuckets">
            <summary>
            The number of parts to break the time window.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber.buckets">
            <summary>
            An array of numberOfBuckets buckets used to maintain a rolling sum over timeInMilliseconds seconds.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber.CurrentBucketIndex">
            <summary>
            An index to the current bucket
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber.#ctor(Microsoft.VisualStudio.Services.CircuitBreaker.ITime,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber"/> class.
            </summary>
            <param name="timeInMilliseconds">The total time window to track.</param>
            <param name="numberOfBuckets">The number of parts to break the time window.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber.GetTotalWindowTimeInMilliseconds">
            <summary>
            Gets the total window size in milliseconds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber.GetNumberOfBuckets">
            <summary>
            Gets the number of parts to break the time window.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber.GetBucketSizeInMilliseconds">
            <summary>
            Gets the bucket size in milliseconds. (TimeInMilliseconds / NumberOfBuckets)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber.Buckets">
            <summary>
            Gets the internal array to store the buckets. This property is intended to use only in unit tests.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber.Reset">
            <summary>
            Force a reset of all rolling counters (clear all buckets) so that statistics start being gathered from scratch.
            This does NOT reset the CumulativeSum values.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber.GetRollingSum">
            <summary>
            Get the sum of all buckets in the rolling counter.
            </summary>
            <returns>Value for the given <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber.Increment">
            <summary>
            Increment the counter in the current bucket by one.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber.GetCurrentBucketIndex">
            <summary>
            Gets the current bucket. If the time is after the window of the current bucket, a new one will be initialized.
            Internal because it's used in unit tests.
            </summary>
            <returns>The current bucket.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumberNoOpImpl">
            <summary>
            Counter that never counts
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumberNoOpImpl.GetTotalWindowTimeInMilliseconds">
            <summary>
            Gets the total window size in milliseconds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumberNoOpImpl.GetNumberOfBuckets">
            <summary>
            Gets the number of parts to break the time window.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumberNoOpImpl.GetBucketSizeInMilliseconds">
            <summary>
            Gets the bucket size in milliseconds. (TimeInMilliseconds / NumberOfBuckets)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumberNoOpImpl.GetRollingSum">
            <summary>
            Get the sum of all buckets in the rolling counter.
            </summary>
            <returns>Value for the given <see cref="T:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumber"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.RollingNumberNoOpImpl.Increment">
            <summary>
            Increment the counter in the current bucket by one.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.TryableSemaphore">
            <summary>
            Semaphore that only supports TryAcquire and never blocks and that supports a dynamic permit count.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.CircuitBreaker.TryableSemaphore.count">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.TryableSemaphore.TryAcquire(System.Int32)">
            <summary>
            Tries to acquire the semaphore.
            </summary>
            <example>
            if (s.TryAcquire())
            {
                try
                {
                    // do work that is protected by 's'
                }
                finally
                {
                    s.Release();
                }
            }
            </example>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.CircuitBreaker.TryableSemaphore.Release">
            <summary>
            Releases the acquired semaphore.
            </summary>
            <example>
            if (s.TryAcquire())
            {
                try
                {
                    // do work that is protected by 's'
                }
                finally
                {
                    s.Release();
                }
            }
            </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.CircuitBreaker.TryableSemaphoreNoOpImpl">
            <summary>
            Semaphore that never blocks
            </summary>
        </member>
    </members>
</doc>
