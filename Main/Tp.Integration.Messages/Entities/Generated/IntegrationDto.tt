<#@ template hostspecific="true" language="C#" #>
<#@ include file="HbmModel.ttinclude"#>
<#@ include file="Manager.ttinclude"#>
<#@ output extension=".empty.generated.cs" #>

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>

<#
	model = new Model(Host);
	manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartHeader();
#>
//
// THIS FILE IS AUTOGENERATED! ANY MANUAL MODIFICATIONS WILL BE LOST!
//

using System;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Tp.Integration.Common;
using Tp.Integration.Messages.Entities;

namespace Tp.Integration.Common
{
<# manager.EndBlock(); #>
<# manager.StartFooter(); #>
}
<# manager.EndBlock(); #>


<#
	ProcessEntities();
	manager.Process(true);
#>

<#+

	private readonly List<string> _parentProjectHolders = new List<string>
	{
		"Assignable",
		"Bug",
		"Epic",
		"Feature",
		"Impediment",
		"Release",
		"Request",
		"Task",
		"TestCase",
		"TestPlan",
		"TestPlanRun",
		"UserStory"
	};

	private void ProcessEntities()
	{
		var entities = model.GetEntities();

		foreach (var r in entities)
		{
			var ownPrimary = r.Properties.SingleOrDefault(property => property.IsPrimaryKey);
			var primaryKeyProperty = ownPrimary != null
				? ownPrimary.Name
				: entities.Single(e => e.Name == r.ParentName).Properties.Single(property => property.IsPrimaryKey).Name;
			var propertiesIncludeParent =
				Enumerable.Concat(r.Properties, model.GetParentProperties(r).Where(p => !p.IsPrimaryKey)).OrderBy(p => p.Ordering).ToList();
			manager.StartNewFile(r.Name + "DTO.generated.cs");
#>	// Autogenerated from <#=r.Name #>.hbm.xml properties: <#=string.Join(", ", r.Properties.Select(p => p.Name + ": " + p.TypeName)) #>
	public partial interface I<#=r.Name #>DTO : <#=string.IsNullOrEmpty(r.ParentName) ? "IDataTransferObject" : string.Format("I{0}DTO", r.ParentName)
	#>
	{
<#+
			var parentProperties = r.InterfaceParents.SelectMany(i => entities.Single(e => e.Name == i).Properties.Select(s => s.Name)).ToList();
			foreach (var p in r.Properties.Where(p => !p.IsPrimaryKey && !parentProperties.Contains(p.Name)))
			{ #>
		<#=p.TypeName #> <#=p.Name #> { get; set; }
<#+ } #>
	}

	[Serializable]
	[DataContract]
	public partial class <#=r.Name #>DTO : DataTransferObject, I<#=r.Name #>DTO<#=
	propertiesIncludeParent.Select(x => x.Name).Contains("CustomField1") ? ", ICustomFieldHolderDTO" : "" #>
	{
		[PrimaryKey]
		public override int? ID
		{
			get { return <#=primaryKeyProperty #>; }
			set
			{
				if (value == int.MinValue)
					value = null;

				<#=primaryKeyProperty #> = value;
			}
		}<#+
		foreach (var p in propertiesIncludeParent)
		{
			if (_parentProjectHolders.Contains(r.Name) && p.Name.StartsWith("ParentProject"))
			{ #>

		[XmlIgnore]
		<#=p.TypeName #> <#=p.Name == "ParentProjectID" ? "IGeneralNumericPriorityListItemDTO." : "IGeneralDTO."
	#><#=p.Name #>
		{
			get { return <#=p.Name.Replace("Parent", "") #>; }
			set { <#=p.Name.Replace("Parent", "") #> = value; }
		}
<#+ }
			else
			{
				#>

		<#=p.IsPrimaryKey ? "[PrimaryKey]" : "" #><#=p.IsForeignKey ? "[ForeignKey]" : "" #><#=p.IsRelationName ? "[RelationName]" : "" #>
		[DataMember]
		[XmlElement(Order=<#=p.Ordering #>)]
		public <#=string.Format("{0} {1} {{ get; set; }}", p.TypeName, p.Name) #>
<#+ }
		}
#>
	}

	public enum <#=r.Name #>Field
	{
<#+foreach (var p in propertiesIncludeParent.Where(p => !p.IsPrimaryKey))
{ #>
		<#=p.Name #>,
<#+ } #>
	}
<#+
			manager.EndBlock();
		}
	}
#>
<#+
	Manager manager;
	Model model;
#>
