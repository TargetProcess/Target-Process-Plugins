//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\ExpressionParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Tp.Core.Expressions.Parsing.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMA=1, QUESTION=2, COLON=3, AMPERSAND=4, LOGICAL_AND=5, LOGICAL_OR=6, 
		LOGICAL_NOT=7, IN=8, GREATER=9, GREATER_OR_EQUAL=10, LESS=11, LESS_OR_EQUAL=12, 
		NOT_EQUAL=13, EQUAL=14, PAREN_OPEN=15, PAREN_CLOSE=16, CURLY_OPEN=17, 
		CURLY_CLOSE=18, SQUARE_OPEN=19, SQUARE_CLOSE=20, DOT=21, MULT=22, DIV=23, 
		PLUS=24, MINUS=25, TRUE=26, FALSE=27, NULL=28, AS=29, NEW=30, ASC=31, 
		DESC=32, INTEGER_NUMBER=33, FLOAT_NUMBER=34, STRING=35, ALPHANUMERIC_IDENTIFIER=36, 
		WS=37;
	public const int
		RULE_program = 0, RULE_expression = 1, RULE_objectExpr = 2, RULE_objectPropertyExpr = 3, 
		RULE_literalExpr = 4, RULE_arguments = 5, RULE_fieldNameExpr = 6, RULE_expressionContainer = 7, 
		RULE_orderingProgram = 8, RULE_ordering = 9;
	public static readonly string[] ruleNames = {
		"program", "expression", "objectExpr", "objectPropertyExpr", "literalExpr", 
		"arguments", "fieldNameExpr", "expressionContainer", "orderingProgram", 
		"ordering"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'?'", "':'", "'&'", null, null, null, null, "'>'", "'>='", 
		"'<'", "'<='", null, null, "'('", "')'", "'{'", "'}'", "'['", "']'", "'.'", 
		"'*'", "'/'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMA", "QUESTION", "COLON", "AMPERSAND", "LOGICAL_AND", "LOGICAL_OR", 
		"LOGICAL_NOT", "IN", "GREATER", "GREATER_OR_EQUAL", "LESS", "LESS_OR_EQUAL", 
		"NOT_EQUAL", "EQUAL", "PAREN_OPEN", "PAREN_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", 
		"SQUARE_OPEN", "SQUARE_CLOSE", "DOT", "MULT", "DIV", "PLUS", "MINUS", 
		"TRUE", "FALSE", "NULL", "AS", "NEW", "ASC", "DESC", "INTEGER_NUMBER", 
		"FLOAT_NUMBER", "STRING", "ALPHANUMERIC_IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ExpressionParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ExpressionParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; expression(0);
			State = 21; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallContext : ExpressionContext {
		public ExpressionContext target;
		public FieldNameExprContext functionName;
		public ITerminalNode PAREN_OPEN() { return GetToken(ExpressionParser.PAREN_OPEN, 0); }
		public ITerminalNode PAREN_CLOSE() { return GetToken(ExpressionParser.PAREN_CLOSE, 0); }
		public FieldNameExprContext fieldNameExpr() {
			return GetRuleContext<FieldNameExprContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(ExpressionParser.DOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastContext : ExpressionContext {
		public ExpressionContext target;
		public ITerminalNode DOT() { return GetToken(ExpressionParser.DOT, 0); }
		public ITerminalNode AS() { return GetToken(ExpressionParser.AS, 0); }
		public ITerminalNode LESS() { return GetToken(ExpressionParser.LESS, 0); }
		public FieldNameExprContext fieldNameExpr() {
			return GetRuleContext<FieldNameExprContext>(0);
		}
		public ITerminalNode GREATER() { return GetToken(ExpressionParser.GREATER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CastContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitCast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantContext : ExpressionContext {
		public LiteralExprContext value;
		public LiteralExprContext literalExpr() {
			return GetRuleContext<LiteralExprContext>(0);
		}
		public ConstantContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalContext : ExpressionContext {
		public ExpressionContext cond;
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode QUESTION() { return GetToken(ExpressionParser.QUESTION, 0); }
		public ITerminalNode COLON() { return GetToken(ExpressionParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConditionalContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterConditional(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitConditional(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FieldAccessContext : ExpressionContext {
		public ExpressionContext target;
		public FieldNameExprContext fieldName;
		public FieldNameExprContext fieldNameExpr() {
			return GetRuleContext<FieldNameExprContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(ExpressionParser.DOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldAccessContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterFieldAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitFieldAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(ExpressionParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(ExpressionParser.DIV, 0); }
		public ITerminalNode PLUS() { return GetToken(ExpressionParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(ExpressionParser.MINUS, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(ExpressionParser.AMPERSAND, 0); }
		public BinaryContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterBinary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitBinary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode GREATER() { return GetToken(ExpressionParser.GREATER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode GREATER_OR_EQUAL() { return GetToken(ExpressionParser.GREATER_OR_EQUAL, 0); }
		public ITerminalNode LESS() { return GetToken(ExpressionParser.LESS, 0); }
		public ITerminalNode LESS_OR_EQUAL() { return GetToken(ExpressionParser.LESS_OR_EQUAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(ExpressionParser.EQUAL, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(ExpressionParser.NOT_EQUAL, 0); }
		public ITerminalNode IN() { return GetToken(ExpressionParser.IN, 0); }
		public ITerminalNode SQUARE_OPEN() { return GetToken(ExpressionParser.SQUARE_OPEN, 0); }
		public ITerminalNode SQUARE_CLOSE() { return GetToken(ExpressionParser.SQUARE_CLOSE, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public RelationalContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterRelational(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitRelational(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryContext : ExpressionContext {
		public ExpressionContext right;
		public ITerminalNode MINUS() { return GetToken(ExpressionParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LOGICAL_NOT() { return GetToken(ExpressionParser.LOGICAL_NOT, 0); }
		public UnaryContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexerContext : ExpressionContext {
		public ExpressionContext target;
		public LiteralExprContext index;
		public ITerminalNode SQUARE_OPEN() { return GetToken(ExpressionParser.SQUARE_OPEN, 0); }
		public ITerminalNode SQUARE_CLOSE() { return GetToken(ExpressionParser.SQUARE_CLOSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LiteralExprContext literalExpr() {
			return GetRuleContext<LiteralExprContext>(0);
		}
		public IndexerContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterIndexer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitIndexer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisContext : ExpressionContext {
		public ITerminalNode PAREN_OPEN() { return GetToken(ExpressionParser.PAREN_OPEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PAREN_CLOSE() { return GetToken(ExpressionParser.PAREN_CLOSE, 0); }
		public ParenthesisContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode LOGICAL_AND() { return GetToken(ExpressionParser.LOGICAL_AND, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LOGICAL_OR() { return GetToken(ExpressionParser.LOGICAL_OR, 0); }
		public LogicalContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterLogical(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitLogical(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectContext : ExpressionContext {
		public ObjectExprContext objectExpr() {
			return GetRuleContext<ObjectExprContext>(0);
		}
		public ObjectContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				_localctx = new ParenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 24; Match(PAREN_OPEN);
				State = 25; expression(0);
				State = 26; Match(PAREN_CLOSE);
				}
				break;
			case 2:
				{
				_localctx = new ObjectContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 28; objectExpr();
				}
				break;
			case 3:
				{
				_localctx = new FieldAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 29; ((FieldAccessContext)_localctx).fieldName = fieldNameExpr();
				}
				break;
			case 4:
				{
				_localctx = new CallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 30; ((CallContext)_localctx).functionName = fieldNameExpr();
				State = 31; Match(PAREN_OPEN);
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LOGICAL_NOT) | (1L << PAREN_OPEN) | (1L << CURLY_OPEN) | (1L << MINUS) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << NEW) | (1L << INTEGER_NUMBER) | (1L << FLOAT_NUMBER) | (1L << STRING) | (1L << ALPHANUMERIC_IDENTIFIER))) != 0)) {
					{
					State = 32; arguments();
					}
				}

				State = 35; Match(PAREN_CLOSE);
				}
				break;
			case 5:
				{
				_localctx = new UnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 37; Match(MINUS);
				State = 38; ((UnaryContext)_localctx).right = expression(16);
				}
				break;
			case 6:
				{
				_localctx = new UnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 39; Match(LOGICAL_NOT);
				State = 40; ((UnaryContext)_localctx).right = expression(15);
				}
				break;
			case 7:
				{
				_localctx = new ConstantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 41; ((ConstantContext)_localctx).value = literalExpr();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 116;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 114;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 44;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 45;
						_la = TokenStream.LA(1);
						if ( !(_la==MULT || _la==DIV) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 46; ((BinaryContext)_localctx).right = expression(15);
						}
						break;
					case 2:
						{
						_localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 47;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 48;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 49; ((BinaryContext)_localctx).right = expression(14);
						}
						break;
					case 3:
						{
						_localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 50;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 51; Match(AMPERSAND);
						State = 52; ((BinaryContext)_localctx).right = expression(13);
						}
						break;
					case 4:
						{
						_localctx = new RelationalContext(new ExpressionContext(_parentctx, _parentState));
						((RelationalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 53;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 54; Match(GREATER);
						State = 55; ((RelationalContext)_localctx).right = expression(11);
						}
						break;
					case 5:
						{
						_localctx = new RelationalContext(new ExpressionContext(_parentctx, _parentState));
						((RelationalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 56;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 57; Match(GREATER_OR_EQUAL);
						State = 58; ((RelationalContext)_localctx).right = expression(10);
						}
						break;
					case 6:
						{
						_localctx = new RelationalContext(new ExpressionContext(_parentctx, _parentState));
						((RelationalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 59;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 60; Match(LESS);
						State = 61; ((RelationalContext)_localctx).right = expression(9);
						}
						break;
					case 7:
						{
						_localctx = new RelationalContext(new ExpressionContext(_parentctx, _parentState));
						((RelationalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 62;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 63; Match(LESS_OR_EQUAL);
						State = 64; ((RelationalContext)_localctx).right = expression(8);
						}
						break;
					case 8:
						{
						_localctx = new RelationalContext(new ExpressionContext(_parentctx, _parentState));
						((RelationalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 65;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 66; Match(EQUAL);
						State = 67; ((RelationalContext)_localctx).right = expression(7);
						}
						break;
					case 9:
						{
						_localctx = new RelationalContext(new ExpressionContext(_parentctx, _parentState));
						((RelationalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 68;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 69; Match(NOT_EQUAL);
						State = 70; ((RelationalContext)_localctx).right = expression(6);
						}
						break;
					case 10:
						{
						_localctx = new LogicalContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 71;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 72; Match(LOGICAL_AND);
						State = 73; ((LogicalContext)_localctx).right = expression(5);
						}
						break;
					case 11:
						{
						_localctx = new LogicalContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 74;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 75; Match(LOGICAL_OR);
						State = 76; ((LogicalContext)_localctx).right = expression(4);
						}
						break;
					case 12:
						{
						_localctx = new ConditionalContext(new ExpressionContext(_parentctx, _parentState));
						((ConditionalContext)_localctx).cond = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 77;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 78; Match(QUESTION);
						State = 79; ((ConditionalContext)_localctx).left = expression(0);
						State = 80; Match(COLON);
						State = 81; ((ConditionalContext)_localctx).right = expression(3);
						}
						break;
					case 13:
						{
						_localctx = new FieldAccessContext(new ExpressionContext(_parentctx, _parentState));
						((FieldAccessContext)_localctx).target = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 83;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 84; Match(DOT);
						State = 85; ((FieldAccessContext)_localctx).fieldName = fieldNameExpr();
						}
						break;
					case 14:
						{
						_localctx = new CallContext(new ExpressionContext(_parentctx, _parentState));
						((CallContext)_localctx).target = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 86;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 87; Match(DOT);
						State = 88; ((CallContext)_localctx).functionName = fieldNameExpr();
						State = 89; Match(PAREN_OPEN);
						State = 91;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LOGICAL_NOT) | (1L << PAREN_OPEN) | (1L << CURLY_OPEN) | (1L << MINUS) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << NEW) | (1L << INTEGER_NUMBER) | (1L << FLOAT_NUMBER) | (1L << STRING) | (1L << ALPHANUMERIC_IDENTIFIER))) != 0)) {
							{
							State = 90; arguments();
							}
						}

						State = 93; Match(PAREN_CLOSE);
						}
						break;
					case 15:
						{
						_localctx = new IndexerContext(new ExpressionContext(_parentctx, _parentState));
						((IndexerContext)_localctx).target = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 95;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 96; Match(SQUARE_OPEN);
						State = 97; ((IndexerContext)_localctx).index = literalExpr();
						State = 98; Match(SQUARE_CLOSE);
						}
						break;
					case 16:
						{
						_localctx = new CastContext(new ExpressionContext(_parentctx, _parentState));
						((CastContext)_localctx).target = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 100;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 101; Match(DOT);
						State = 102; Match(AS);
						State = 103; Match(LESS);
						State = 104; fieldNameExpr();
						State = 105; Match(GREATER);
						}
						break;
					case 17:
						{
						_localctx = new RelationalContext(new ExpressionContext(_parentctx, _parentState));
						((RelationalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 107;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 108; Match(IN);
						State = 109; Match(SQUARE_OPEN);
						State = 111;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LOGICAL_NOT) | (1L << PAREN_OPEN) | (1L << CURLY_OPEN) | (1L << MINUS) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << NEW) | (1L << INTEGER_NUMBER) | (1L << FLOAT_NUMBER) | (1L << STRING) | (1L << ALPHANUMERIC_IDENTIFIER))) != 0)) {
							{
							State = 110; arguments();
							}
						}

						State = 113; Match(SQUARE_CLOSE);
						}
						break;
					}
					} 
				}
				State = 118;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ObjectExprContext : ParserRuleContext {
		public ITerminalNode CURLY_OPEN() { return GetToken(ExpressionParser.CURLY_OPEN, 0); }
		public ObjectPropertyExprContext[] objectPropertyExpr() {
			return GetRuleContexts<ObjectPropertyExprContext>();
		}
		public ObjectPropertyExprContext objectPropertyExpr(int i) {
			return GetRuleContext<ObjectPropertyExprContext>(i);
		}
		public ITerminalNode CURLY_CLOSE() { return GetToken(ExpressionParser.CURLY_CLOSE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ExpressionParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ExpressionParser.COMMA, i);
		}
		public ITerminalNode NEW() { return GetToken(ExpressionParser.NEW, 0); }
		public ITerminalNode PAREN_OPEN() { return GetToken(ExpressionParser.PAREN_OPEN, 0); }
		public ITerminalNode PAREN_CLOSE() { return GetToken(ExpressionParser.PAREN_CLOSE, 0); }
		public ObjectExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterObjectExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitObjectExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectExprContext objectExpr() {
		ObjectExprContext _localctx = new ObjectExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_objectExpr);
		int _la;
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119; Match(CURLY_OPEN);
				State = 120; objectPropertyExpr();
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 121; Match(COMMA);
					State = 122; objectPropertyExpr();
					}
					}
					State = 127;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 128; Match(CURLY_CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 130; Match(CURLY_OPEN);
				State = 131; Match(CURLY_CLOSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 132; Match(NEW);
				State = 133; Match(PAREN_OPEN);
				State = 134; objectPropertyExpr();
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 135; Match(COMMA);
					State = 136; objectPropertyExpr();
					}
					}
					State = 141;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 142; Match(PAREN_CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectPropertyExprContext : ParserRuleContext {
		public IToken alias;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(ExpressionParser.COLON, 0); }
		public ITerminalNode ALPHANUMERIC_IDENTIFIER() { return GetToken(ExpressionParser.ALPHANUMERIC_IDENTIFIER, 0); }
		public ITerminalNode AS() { return GetToken(ExpressionParser.AS, 0); }
		public ObjectPropertyExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectPropertyExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterObjectPropertyExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitObjectPropertyExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectPropertyExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectPropertyExprContext objectPropertyExpr() {
		ObjectPropertyExprContext _localctx = new ObjectPropertyExprContext(Context, State);
		EnterRule(_localctx, 6, RULE_objectPropertyExpr);
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147; _localctx.alias = Match(ALPHANUMERIC_IDENTIFIER);
				State = 148; Match(COLON);
				State = 149; expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 150; expression(0);
				State = 151; Match(AS);
				State = 152; _localctx.alias = Match(ALPHANUMERIC_IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExprContext : ParserRuleContext {
		public ITerminalNode INTEGER_NUMBER() { return GetToken(ExpressionParser.INTEGER_NUMBER, 0); }
		public ITerminalNode FLOAT_NUMBER() { return GetToken(ExpressionParser.FLOAT_NUMBER, 0); }
		public ITerminalNode STRING() { return GetToken(ExpressionParser.STRING, 0); }
		public ITerminalNode TRUE() { return GetToken(ExpressionParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(ExpressionParser.FALSE, 0); }
		public ITerminalNode NULL() { return GetToken(ExpressionParser.NULL, 0); }
		public LiteralExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExprContext literalExpr() {
		LiteralExprContext _localctx = new LiteralExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_literalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << INTEGER_NUMBER) | (1L << FLOAT_NUMBER) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ExpressionParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ExpressionParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 10, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; expression(0);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 159; Match(COMMA);
				State = 160; expression(0);
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNameExprContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode ALPHANUMERIC_IDENTIFIER() { return GetToken(ExpressionParser.ALPHANUMERIC_IDENTIFIER, 0); }
		public FieldNameExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldNameExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterFieldNameExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitFieldNameExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldNameExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldNameExprContext fieldNameExpr() {
		FieldNameExprContext _localctx = new FieldNameExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_fieldNameExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; _localctx.name = Match(ALPHANUMERIC_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContainerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContainerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionContainer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterExpressionContainer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitExpressionContainer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContainer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContainerContext expressionContainer() {
		ExpressionContainerContext _localctx = new ExpressionContainerContext(Context, State);
		EnterRule(_localctx, 14, RULE_expressionContainer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingProgramContext : ParserRuleContext {
		public OrderingContext[] ordering() {
			return GetRuleContexts<OrderingContext>();
		}
		public OrderingContext ordering(int i) {
			return GetRuleContext<OrderingContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(ExpressionParser.Eof, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ExpressionParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ExpressionParser.COMMA, i);
		}
		public OrderingProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderingProgram; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterOrderingProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitOrderingProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderingProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderingProgramContext orderingProgram() {
		OrderingProgramContext _localctx = new OrderingProgramContext(Context, State);
		EnterRule(_localctx, 16, RULE_orderingProgram);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; ordering();
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 171; Match(COMMA);
				State = 172; ordering();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingContext : ParserRuleContext {
		public ExpressionContainerContext selector;
		public ExpressionContainerContext expressionContainer() {
			return GetRuleContext<ExpressionContainerContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(ExpressionParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(ExpressionParser.DESC, 0); }
		public OrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.EnterOrdering(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionParserListener typedListener = listener as IExpressionParserListener;
			if (typedListener != null) typedListener.ExitOrdering(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionParserVisitor<TResult> typedVisitor = visitor as IExpressionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderingContext ordering() {
		OrderingContext _localctx = new OrderingContext(Context, State);
		EnterRule(_localctx, 18, RULE_ordering);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; _localctx.selector = expressionContainer();
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 181;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 22);
		case 13: return Precpred(Context, 19);
		case 14: return Precpred(Context, 18);
		case 15: return Precpred(Context, 17);
		case 16: return Precpred(Context, 11);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\'', '\xBB', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '$', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '-', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '^', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', 'r', '\n', '\x3', '\x3', '\x3', '\a', '\x3', 
		'u', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'x', '\v', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '~', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', '\x81', '\v', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x8C', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', '\x8F', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x93', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x9D', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\xA4', '\n', '\a', 
		'\f', '\a', '\xE', '\a', '\xA7', '\v', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', 
		'\n', '\xB0', '\n', '\n', '\f', '\n', '\xE', '\n', '\xB3', '\v', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xB9', 
		'\n', '\v', '\x3', '\v', '\x2', '\x3', '\x4', '\f', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x2', '\x6', '\x3', 
		'\x2', '\x18', '\x19', '\x3', '\x2', '\x1A', '\x1B', '\x4', '\x2', '\x1C', 
		'\x1E', '#', '%', '\x3', '\x2', '!', '\"', '\x2', '\xD3', '\x2', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\x4', ',', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\b', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x9E', '\x3', '\x2', '\x2', '\x2', '\f', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\xA8', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\x12', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xB6', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x5', 
		'\x4', '\x3', '\x2', '\x17', '\x18', '\a', '\x2', '\x2', '\x3', '\x18', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\b', '\x3', '\x1', 
		'\x2', '\x1A', '\x1B', '\a', '\x11', '\x2', '\x2', '\x1B', '\x1C', '\x5', 
		'\x4', '\x3', '\x2', '\x1C', '\x1D', '\a', '\x12', '\x2', '\x2', '\x1D', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x1E', '-', '\x5', '\x6', '\x4', '\x2', 
		'\x1F', '-', '\x5', '\xE', '\b', '\x2', ' ', '!', '\x5', '\xE', '\b', 
		'\x2', '!', '#', '\a', '\x11', '\x2', '\x2', '\"', '$', '\x5', '\f', '\a', 
		'\x2', '#', '\"', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', 
		'\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', '\x12', 
		'\x2', '\x2', '&', '-', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\x1B', 
		'\x2', '\x2', '(', '-', '\x5', '\x4', '\x3', '\x12', ')', '*', '\a', '\t', 
		'\x2', '\x2', '*', '-', '\x5', '\x4', '\x3', '\x11', '+', '-', '\x5', 
		'\n', '\x6', '\x2', ',', '\x19', '\x3', '\x2', '\x2', '\x2', ',', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x1F', '\x3', '\x2', '\x2', '\x2', ',', 
		' ', '\x3', '\x2', '\x2', '\x2', ',', '\'', '\x3', '\x2', '\x2', '\x2', 
		',', ')', '\x3', '\x2', '\x2', '\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', 
		'-', 'v', '\x3', '\x2', '\x2', '\x2', '.', '/', '\f', '\x10', '\x2', '\x2', 
		'/', '\x30', '\t', '\x2', '\x2', '\x2', '\x30', 'u', '\x5', '\x4', '\x3', 
		'\x11', '\x31', '\x32', '\f', '\xF', '\x2', '\x2', '\x32', '\x33', '\t', 
		'\x3', '\x2', '\x2', '\x33', 'u', '\x5', '\x4', '\x3', '\x10', '\x34', 
		'\x35', '\f', '\xE', '\x2', '\x2', '\x35', '\x36', '\a', '\x6', '\x2', 
		'\x2', '\x36', 'u', '\x5', '\x4', '\x3', '\xF', '\x37', '\x38', '\f', 
		'\f', '\x2', '\x2', '\x38', '\x39', '\a', '\v', '\x2', '\x2', '\x39', 
		'u', '\x5', '\x4', '\x3', '\r', ':', ';', '\f', '\v', '\x2', '\x2', ';', 
		'<', '\a', '\f', '\x2', '\x2', '<', 'u', '\x5', '\x4', '\x3', '\f', '=', 
		'>', '\f', '\n', '\x2', '\x2', '>', '?', '\a', '\r', '\x2', '\x2', '?', 
		'u', '\x5', '\x4', '\x3', '\v', '@', '\x41', '\f', '\t', '\x2', '\x2', 
		'\x41', '\x42', '\a', '\xE', '\x2', '\x2', '\x42', 'u', '\x5', '\x4', 
		'\x3', '\n', '\x43', '\x44', '\f', '\b', '\x2', '\x2', '\x44', '\x45', 
		'\a', '\x10', '\x2', '\x2', '\x45', 'u', '\x5', '\x4', '\x3', '\t', '\x46', 
		'G', '\f', '\a', '\x2', '\x2', 'G', 'H', '\a', '\xF', '\x2', '\x2', 'H', 
		'u', '\x5', '\x4', '\x3', '\b', 'I', 'J', '\f', '\x6', '\x2', '\x2', 'J', 
		'K', '\a', '\a', '\x2', '\x2', 'K', 'u', '\x5', '\x4', '\x3', '\a', 'L', 
		'M', '\f', '\x5', '\x2', '\x2', 'M', 'N', '\a', '\b', '\x2', '\x2', 'N', 
		'u', '\x5', '\x4', '\x3', '\x6', 'O', 'P', '\f', '\x4', '\x2', '\x2', 
		'P', 'Q', '\a', '\x4', '\x2', '\x2', 'Q', 'R', '\x5', '\x4', '\x3', '\x2', 
		'R', 'S', '\a', '\x5', '\x2', '\x2', 'S', 'T', '\x5', '\x4', '\x3', '\x5', 
		'T', 'u', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\f', '\x18', '\x2', '\x2', 
		'V', 'W', '\a', '\x17', '\x2', '\x2', 'W', 'u', '\x5', '\xE', '\b', '\x2', 
		'X', 'Y', '\f', '\x15', '\x2', '\x2', 'Y', 'Z', '\a', '\x17', '\x2', '\x2', 
		'Z', '[', '\x5', '\xE', '\b', '\x2', '[', ']', '\a', '\x11', '\x2', '\x2', 
		'\\', '^', '\x5', '\f', '\a', '\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', 
		']', '^', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', 
		'_', '`', '\a', '\x12', '\x2', '\x2', '`', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\x62', '\f', '\x14', '\x2', '\x2', '\x62', '\x63', '\a', '\x15', 
		'\x2', '\x2', '\x63', '\x64', '\x5', '\n', '\x6', '\x2', '\x64', '\x65', 
		'\a', '\x16', '\x2', '\x2', '\x65', 'u', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\f', '\x13', '\x2', '\x2', 'g', 'h', '\a', '\x17', '\x2', '\x2', 
		'h', 'i', '\a', '\x1F', '\x2', '\x2', 'i', 'j', '\a', '\r', '\x2', '\x2', 
		'j', 'k', '\x5', '\xE', '\b', '\x2', 'k', 'l', '\a', '\v', '\x2', '\x2', 
		'l', 'u', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\f', '\r', '\x2', '\x2', 
		'n', 'o', '\a', '\n', '\x2', '\x2', 'o', 'q', '\a', '\x15', '\x2', '\x2', 
		'p', 'r', '\x5', '\f', '\a', '\x2', 'q', 'p', '\x3', '\x2', '\x2', '\x2', 
		'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 
		's', 'u', '\a', '\x16', '\x2', '\x2', 't', '.', '\x3', '\x2', '\x2', '\x2', 
		't', '\x31', '\x3', '\x2', '\x2', '\x2', 't', '\x34', '\x3', '\x2', '\x2', 
		'\x2', 't', '\x37', '\x3', '\x2', '\x2', '\x2', 't', ':', '\x3', '\x2', 
		'\x2', '\x2', 't', '=', '\x3', '\x2', '\x2', '\x2', 't', '@', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x43', '\x3', '\x2', '\x2', '\x2', 't', '\x46', '\x3', 
		'\x2', '\x2', '\x2', 't', 'I', '\x3', '\x2', '\x2', '\x2', 't', 'L', '\x3', 
		'\x2', '\x2', '\x2', 't', 'O', '\x3', '\x2', '\x2', '\x2', 't', 'U', '\x3', 
		'\x2', '\x2', '\x2', 't', 'X', '\x3', '\x2', '\x2', '\x2', 't', '\x61', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x66', '\x3', '\x2', '\x2', '\x2', 't', 
		'm', '\x3', '\x2', '\x2', '\x2', 'u', 'x', '\x3', '\x2', '\x2', '\x2', 
		'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 
		'w', '\x5', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'z', '\a', '\x13', '\x2', '\x2', 'z', '\x7F', '\x5', '\b', 
		'\x5', '\x2', '{', '|', '\a', '\x3', '\x2', '\x2', '|', '~', '\x5', '\b', 
		'\x5', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '~', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\a', 
		'\x14', '\x2', '\x2', '\x83', '\x93', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x85', '\a', '\x13', '\x2', '\x2', '\x85', '\x93', '\a', '\x14', '\x2', 
		'\x2', '\x86', '\x87', '\a', ' ', '\x2', '\x2', '\x87', '\x88', '\a', 
		'\x11', '\x2', '\x2', '\x88', '\x8D', '\x5', '\b', '\x5', '\x2', '\x89', 
		'\x8A', '\a', '\x3', '\x2', '\x2', '\x8A', '\x8C', '\x5', '\b', '\x5', 
		'\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', 
		'\x12', '\x2', '\x2', '\x91', '\x93', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'y', '\x3', '\x2', '\x2', '\x2', '\x92', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x86', '\x3', '\x2', '\x2', '\x2', '\x93', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x9D', '\x5', '\x4', '\x3', '\x2', '\x95', 
		'\x96', '\a', '&', '\x2', '\x2', '\x96', '\x97', '\a', '\x5', '\x2', '\x2', 
		'\x97', '\x9D', '\x5', '\x4', '\x3', '\x2', '\x98', '\x99', '\x5', '\x4', 
		'\x3', '\x2', '\x99', '\x9A', '\a', '\x1F', '\x2', '\x2', '\x9A', '\x9B', 
		'\a', '&', '\x2', '\x2', '\x9B', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9D', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9F', '\t', '\x4', '\x2', '\x2', '\x9F', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA5', '\x5', '\x4', '\x3', 
		'\x2', '\xA1', '\xA2', '\a', '\x3', '\x2', '\x2', '\xA2', '\xA4', '\x5', 
		'\x4', '\x3', '\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA9', '\a', '&', '\x2', '\x2', '\xA9', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\xAB', '\x5', '\x4', '\x3', '\x2', '\xAB', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\xB1', '\x5', '\x14', '\v', '\x2', '\xAD', '\xAE', 
		'\a', '\x3', '\x2', '\x2', '\xAE', '\xB0', '\x5', '\x14', '\v', '\x2', 
		'\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', '\x2', 
		'\x2', '\x3', '\xB5', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB8', 
		'\x5', '\x10', '\t', '\x2', '\xB7', '\xB9', '\t', '\x5', '\x2', '\x2', 
		'\xB8', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\x15', '\x3', '\x2', '\x2', '\x2', '\xF', '#', 
		',', ']', 'q', 't', 'v', '\x7F', '\x8D', '\x92', '\x9C', '\xA5', '\xB1', 
		'\xB8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Tp.Core.Expressions.Parsing.Antlr
