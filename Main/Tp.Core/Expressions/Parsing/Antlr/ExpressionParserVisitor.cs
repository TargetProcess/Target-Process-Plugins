//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\ExpressionParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Tp.Core.Expressions.Parsing.Antlr {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="ExpressionParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IExpressionParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] ExpressionParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>call</c>
	/// labeled alternative in <see cref="ExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCall([NotNull] ExpressionParser.CallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>cast</c>
	/// labeled alternative in <see cref="ExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCast([NotNull] ExpressionParser.CastContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>constant</c>
	/// labeled alternative in <see cref="ExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstant([NotNull] ExpressionParser.ConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>conditional</c>
	/// labeled alternative in <see cref="ExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConditional([NotNull] ExpressionParser.ConditionalContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>fieldAccess</c>
	/// labeled alternative in <see cref="ExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFieldAccess([NotNull] ExpressionParser.FieldAccessContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>binary</c>
	/// labeled alternative in <see cref="ExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinary([NotNull] ExpressionParser.BinaryContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>relational</c>
	/// labeled alternative in <see cref="ExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelational([NotNull] ExpressionParser.RelationalContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>unary</c>
	/// labeled alternative in <see cref="ExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnary([NotNull] ExpressionParser.UnaryContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>indexer</c>
	/// labeled alternative in <see cref="ExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIndexer([NotNull] ExpressionParser.IndexerContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>parenthesis</c>
	/// labeled alternative in <see cref="ExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesis([NotNull] ExpressionParser.ParenthesisContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>logical</c>
	/// labeled alternative in <see cref="ExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogical([NotNull] ExpressionParser.LogicalContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>object</c>
	/// labeled alternative in <see cref="ExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObject([NotNull] ExpressionParser.ObjectContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.objectExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObjectExpr([NotNull] ExpressionParser.ObjectExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.objectPropertyExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObjectPropertyExpr([NotNull] ExpressionParser.ObjectPropertyExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.literalExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralExpr([NotNull] ExpressionParser.LiteralExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArguments([NotNull] ExpressionParser.ArgumentsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.fieldNameExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFieldNameExpr([NotNull] ExpressionParser.FieldNameExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.expressionContainer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionContainer([NotNull] ExpressionParser.ExpressionContainerContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.orderingProgram"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrderingProgram([NotNull] ExpressionParser.OrderingProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.ordering"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrdering([NotNull] ExpressionParser.OrderingContext context);
}
} // namespace Tp.Core.Expressions.Parsing.Antlr
